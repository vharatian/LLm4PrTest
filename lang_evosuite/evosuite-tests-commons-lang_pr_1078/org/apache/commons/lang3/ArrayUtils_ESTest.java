/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:07:23 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.nio.LongBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (short) (-516);
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(1374L);
      assertEquals(1374L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(2277L);
      assertEquals(2277L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-3128L));
      assertEquals((-3128L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long((-2138L));
      assertEquals((-2138L), (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      
      Long long4 = new Long(3);
      assertEquals(3L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {1374L, 2277L, (-3128L), 1374L, 3L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 978.0273F, 3);
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-516.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (-2490L);
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-2490L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-2490L)}, longArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3656.2448839945555);
      assertEquals(3656.2448839945555, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1297.53485942702);
      assertEquals(1297.53485942702, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-413.9308164227));
      assertEquals((-413.9308164227), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = Double.valueOf(100.0);
      assertEquals(100.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[2]);
      assertEquals(1297.53485942702, (double)double5, 0.01);
      assertNotNull(double5);
      assertEquals(6, doubleArray0.length);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3656.2448839945555, 1297.53485942702, (-413.9308164227), 100.0, 1297.53485942702}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2490L);
      floatArray0[1] = 3.8583965F;
      floatArray0[2] = (-64.0F);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-2490L);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0L, 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2490.0F), 3.8583965F, (-64.0F), 0.0F, (-2490.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-291));
      assertNull(intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-291);
      ArrayUtils.swap(shortArray0, (-291), 2, (-2711));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-291)}, shortArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      float[] floatArray0 = new float[9];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)89;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)77, (byte) (-40), (byte) (-43), (byte) (-1), (byte)109, (byte)55, (byte)12, (byte)89}, byteArray0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-40), (byte) (-43), (byte)109, (byte)55, (byte)12, (byte)89}, byteArray1);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)1, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'O';
      charArray0[2] = 'C';
      charArray0[3] = 'E';
      charArray0[4] = '&';
      charArray0[5] = '[';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = 'C';
      charArray1[4] = '[';
      charArray1[5] = '%';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(3, charArray2.length);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'O', 'E', '&'}, charArray2);
      assertArrayEquals(new char[] {'{', 'O', 'C', 'E', '&', '['}, charArray0);
      assertArrayEquals(new char[] {'C', '{', '{', 'C', '[', '%'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2727), (-2727));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Object object0 = ArrayUtils.get((Object[]) floatArray0, (-1675));
      assertNull(object0);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = null;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = null;
      Object object1 = ArrayUtils.get((Object[]) floatArray0, (-1675));
      assertNull(object1);
      assertEquals(1, floatArray0.length);
      
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object0, (-1806));
      assertEquals(0, int0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-557));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-557);
      longArray0[1] = (long) (short) (-557);
      longArray0[2] = (long) (short) (-557);
      longArray0[3] = (long) (short) (-557);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short) (-557), (-2147003333));
      assertEquals(0, int0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-557L), (-557L), (-557L), (-557L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 125.606668576976;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-1898));
      assertEquals(1, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {125.606668576976, Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'}'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-7824);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (short) (-7824);
      floatArray1[1] = (float) (-3471);
      floatArray1[2] = 5.0F;
      floatArray1[3] = (float) (short) (-7824);
      floatArray1[4] = (-2831.2463F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 3;
      floatArray1[7] = (float) (short) (-7824);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-7824.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-7824.0F), (-3471.0F), 5.0F, (-7824.0F), (-2831.2463F), 0.0F, 3.0F, (-7824.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3471.0F), 5.0F, (-7824.0F), (-2831.2463F), 3.0F, (-7824.0F)}, floatArray2, 0.01F);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)39;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)2);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-45), (byte)11, (byte) (-19), (byte)0, (byte)72, (byte) (-1), (byte)39}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-45), (byte) (-1), (byte)11, (byte) (-19), (byte)0, (byte)72, (byte) (-1), (byte)39}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, (-5));
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 680);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-17);
      shortArray0[1] = (short) (-17);
      shortArray0[2] = (short) (-17);
      shortArray0[3] = (short) (-17);
      shortArray0[4] = (short) (-17);
      shortArray0[5] = (short) (-17);
      shortArray0[6] = (short) (-17);
      shortArray0[7] = (short) (-17);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)11);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17)}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-2147024289), (int) (short)11);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1944), (int) (short) (-17), (int) (short)11);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short) (-17));
      assertNotNull(shortArray2);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17), (short) (-17)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (short) (-17);
      floatArray0[2] = (float) (short) (-17);
      floatArray0[3] = (float) (-2147024289);
      floatArray0[4] = (float) (short) (-17);
      floatArray0[5] = (float) (short) (-17);
      floatArray0[6] = (float) (-1944);
      floatArray0[7] = (float) (short) (-17);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-17.0F), (-17.0F), (-2.14702426E9F), (-17.0F), (-17.0F), (-1944.0F), (-17.0F)}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-17);
      longArray0[1] = (long) (-1944);
      longArray0[2] = (long) (short) (-17);
      longArray0[3] = (long) (short) (-17);
      longArray0[4] = (long) (short) (-17);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-17L), (-1944L), (-17L), (-17L), (-17L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-296.26312F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-296.26312F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("T]%w^");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(false);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'F';
      charArray0[2] = '5';
      charArray0[3] = 'h';
      charArray0[4] = '3';
      charArray0[5] = 'G';
      charArray0[6] = '=';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(7, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', 'F', '5', 'h', '3', 'G', '='}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'c', 'F', '5', 'h', '3', 'G', '='}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true}, booleanArray1));
      
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-378));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)34, (byte)0, (byte)2, (byte)113, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 0, (int) (byte)113, (int) (byte)2);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 406L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)113;
      doubleArray0[1] = 1182.051;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (byte)2;
      int int1 = ArrayUtils.indexOf(doubleArray0, 694.351249115693, (int) (byte)2);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 2);
      assertEquals((-1), int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.insert((-1), (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3179);
      shortArray0[1] = (short) (-719);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2183;
      shortArray0[4] = (short)1520;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-3179);
      shortArray1[1] = (short) (-719);
      shortArray1[2] = (short) (-3179);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-3179), (short) (-719), (short) (-1), (short)2183, (short)1520}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3179), (short) (-719), (short) (-3179)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)2183, (short)1520}, shortArray2);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (int) (short) (-1), (-1312), (-19));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2026;
      intArray0[1] = (-934);
      intArray0[2] = 2026;
      intArray0[3] = 2026;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1372);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2026, (-934), 2026, 2026}, intArray0);
      assertArrayEquals(new int[] {2026, (-934), 2026, 2026}, intArray1);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[3] = 1372;
      intArray2[1] = 2026;
      intArray2[2] = (-934);
      intArray2[3] = 1372;
      intArray2[4] = 2026;
      intArray2[5] = 2026;
      intArray2[6] = 1372;
      intArray2[7] = (-921);
      boolean boolean0 = ArrayUtils.isSameLength(intArray2, intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {2026, (-934), 2026, 2026}, intArray0);
      assertArrayEquals(new int[] {0, 2026, (-934), 1372, 2026, 2026, 1372, (-921)}, intArray2);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = new Character[1];
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = ArrayUtils.get(byteArray0, (int) byte0);
      assertNull(byte4);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals(0, int0);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      BitSet bitSet0 = new BitSet(2420);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2432, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2420;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2420.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2420;
      floatArray0[1] = 797.16F;
      ArrayUtils.swap(floatArray0, 2, 2, (-6250));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2420.0F, 797.16F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)93;
      Byte byte3 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)93, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte2);
      assertEquals((byte)93, (byte)byte8);
      assertNotNull(byte8);
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      
      byteArray0[8] = byte9;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)106);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)78, (byte)93, (byte) (-4), (byte)93, (byte)112, (byte) (-1), (byte)93, (byte) (-115)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1;
      int int1 = (-2145969959);
      int int2 = 2146751748;
      int int3 = 16;
      ArrayUtils.swap((boolean[]) null, (-2145969959), 2146751748, 16);
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[4];
      Float float1 = new Float(1831.0F);
      assertEquals(1831.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[0] = float1;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      byte byte0 = (byte) (-114);
      Byte byte1 = new Byte((byte) (-114));
      assertEquals((byte) (-114), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = 1936;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 1936, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte) (-33);
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)91);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-91), (byte)63, (byte) (-33)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-91), (byte)63, (byte) (-33)}, byteArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1385.0605336829249));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte) (-91);
      byteArray3[1] = (byte) (-91);
      byteArray3[2] = (byte) (-33);
      byteArray3[3] = (byte)63;
      byteArray3[4] = (byte) (-91);
      byteArray3[5] = (byte)91;
      byteArray3[6] = (byte)91;
      byte[] byteArray4 = ArrayUtils.removeElements(byteArray3, byteArray2);
      assertNotNull(byteArray4);
      assertEquals(3, byteArray4.length);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(7, byteArray3.length);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-91), (byte)91}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)63, (byte) (-33)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-91), (byte)63, (byte) (-33)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-91), (byte) (-33), (byte)63, (byte) (-91), (byte)91, (byte)91}, byteArray3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 447L;
      longArray0[1] = (long) (byte)91;
      longArray0[2] = (long) (byte) (-91);
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) (byte)91;
      longArray0[5] = (long) (byte) (-33);
      longArray0[6] = (long) (byte) (-91);
      longArray0[7] = (long) (byte) (-33);
      longArray0[8] = (long) (byte) (-91);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-91), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -91, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-124)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray1, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-4543));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4543);
      doubleArray0[1] = (double) (-4543);
      doubleArray0[2] = (double) 57;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-4543));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-4543.0), (-4543.0), 57.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true, false}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4543);
      intArray0[1] = 57;
      intArray0[2] = 57;
      intArray0[3] = (-4543);
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-4546), 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4546, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "");
      assertNotNull(stringArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = '0';
      charArray0[2] = 'I';
      charArray0[3] = 'g';
      ArrayUtils.swap(charArray0, 0, 3, (-2854));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'M', '0', 'I', 'g'}, charArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'M';
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte1;
      objectArray0[5] = (Object) 'I';
      ArrayUtils.shift(objectArray0, 321, (-107), (-2854));
      assertEquals(6, objectArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-1), (-2854));
      assertEquals(0, int0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-791);
      shortArray0[1] = (short)1759;
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-791), (short)1759}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-791), (short)1759}, shortArray2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short) (-791);
      longArray0[1] = (long) (short) (-791);
      longArray0[2] = (long) (short) (-791);
      longArray0[3] = (long) (short) (-791);
      longArray0[4] = (long) (short)1759;
      longArray0[5] = (long) (short) (-791);
      longArray0[6] = (long) (short) (-791);
      ArrayUtils.swap(longArray0, 2, 2, (int) (short) (-791));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-791L), (-791L), (-791L), (-791L), 1759L, (-791L), (-791L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert(1, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 46);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {46}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {46}, intArray0);
      assertArrayEquals(new int[] {46}, intArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, (-326), (int) (byte)122);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {46}, intArray0);
      assertArrayEquals(new int[] {46}, intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 46;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (byte) (-18);
      floatArray0[3] = (float) (byte)122;
      floatArray0[4] = (float) (byte) (-18);
      floatArray0[5] = 2283.46F;
      int int0 = ArrayUtils.indexOf(floatArray0, 46.0F, (int) (byte)45);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, 1.0F, (-18.0F), 122.0F, (-18.0F), 2283.46F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 5;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 5}, intArray0);
      assertArrayEquals(new int[] {0, 5}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Character[] characterArray0 = new Character[0];
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = ArrayUtils.get(byteArray0, (int) byte0);
      assertNull(byte4);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-12);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)5);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-12), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-12), (short)0}, shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)5);
      assertEquals(4, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false}, booleanArray0));
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-12), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-12), (short)0}, shortArray1);
      
      Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray3);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray3.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short) (-12), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (-52), (double) (-52));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2468);
      shortArray0[2] = (short)10348;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, (-1182), 328, (int) (short) (-2468));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-2468), (short)10348, (short) (-1)}, shortArray0);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-2468));
      assertEquals((-2468L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long((short)0);
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      longArray0[3] = long3;
      Long long4 = Long.getLong("2cdh-y|G^l}iF0v_u", 1L);
      assertEquals(1L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      
      longArray0[4] = long4;
      Long long5 = new Long((short) (-2468));
      assertEquals((-2468L), (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertTrue(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1L, 0L, (-2468L), 0L, 1L, (-2468L)}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (short)10348);
      assertNull(longArray2);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 3L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-9);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-9)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-36), (byte) (-9)}, byteArray2);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('e');
      assertEquals('e', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '}');
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      ArrayUtils.shift(shortArray0, 1, 0, 8);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray0, (-159), byte0);
      assertEquals((byte) (-85), (byte)byte1);
      assertNotNull(byte1);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-159);
      floatArray0[1] = 366.1006F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-159.0F), 366.1006F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = false;
      booleanArray1[7] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'L';
      ArrayUtils.swap(charArray0, (int) (byte)2, (int) byte0, (int) byte0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'*', 'L'}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-792.1672305);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) byte0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-792.1672305)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = (-2678L);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-2678L);
      floatArray1[1] = (float) (-2678L);
      floatArray1[3] = (float) 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-2678L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-2678L)}, longArray1);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.contains(intArray0, (-2261));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray4 = ArrayUtils.removeAll(doubleArray2, intArray0);
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, intArray0.length);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[0] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (-2147483648L);
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = (long) 407;
      longArray0[6] = 127L;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 2;
      int int0 = ArrayUtils.indexOf(longArray0, 2L, 2);
      assertEquals(2, int0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2L, (-2147483648L), 2L, 2L, 2L, 407L, 127L, 2L, 2L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      byte byte0 = (byte) (-94);
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[5];
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[0] = byte3;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) byte2;
      longArray0[1] = (-69L);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (long) byte0;
      longArray0[6] = (-2147483648L);
      int int0 = ArrayUtils.indexOf(longArray0, (long) byte0);
      assertEquals(3, int0);
      assertEquals(7, longArray0.length);
      assertFalse(byte0 == byte2);
      assertArrayEquals(new long[] {(-1L), (-69L), (-1L), (-94L), (-1L), (-94L), (-2147483648L)}, longArray0);
      
      ArrayUtils.shift((byte[]) null, Integer.MAX_VALUE, 2144320932, 1);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = ArrayUtils.insert((-1685), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift((Object[]) longArray0, 508);
      assertEquals(0, longArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) byte0, 0);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-2872), 3207, (-2872));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      ArrayUtils.reverse((int[]) null);
      Long long0 = new Long((-758L));
      assertEquals((-758L), (long)long0);
      assertNotNull(long0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = '7';
      charArray0[3] = 'o';
      charArray0[4] = '*';
      charArray0[5] = '6';
      charArray0[6] = 'm';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v', 'v', '7', 'o', '*', '6', 'm'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = ArrayUtils.insert((-1858), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[1];
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '^';
      charArray0[2] = 'T';
      charArray0[3] = 'n';
      charArray0[4] = 'W';
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'l', '^', 'T', 'n', 'W'}, charArray0);
      assertArrayEquals(new char[] {'l', 'T', 'n', 'W'}, charArray1);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      ArrayUtils.shift(longArray0, 2367);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-124));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Object[] objectArray0 = new Object[8];
      Byte byte0 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, (int)  (-124), (Object) byte0);
      assertEquals((byte) (-124), object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (int)  (-124), (Object) null);
      assertNull(object1);
      assertEquals(8, objectArray0.length);
      
      objectArray0[1] = null;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-124);
      intArray0[1] = (int) (byte) (-124);
      intArray0[2] = (int) (byte) (-124);
      int int0 = (-5565);
      intArray0[3] = (-5565);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -124, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf(",k%x");
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(",k%x");
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      
      booleanArray0[6] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean3;
      booleanArray2[1] = (boolean) boolean1;
      ArrayUtils.reverse(booleanArray2);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3099;
      intArray0[1] = (-3242);
      intArray0[2] = 1192;
      intArray0[3] = (-1357);
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3099, (-3242), 1192, (-1357)}, intArray0);
      assertArrayEquals(new int[] {3099, 1192, (-1357)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2904.82459;
      doubleArray0[1] = (-477.8);
      doubleArray0[2] = (double) 2303.0828F;
      doubleArray0[3] = (double) 2303.0828F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2904.82459, (-477.8), 2303.082763671875, 2303.082763671875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2904.82459, (-477.8), 2303.082763671875, 2303.082763671875}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-2154);
      shortArray0[1] = (short)2702;
      shortArray0[2] = (short)865;
      shortArray0[3] = (short) (-1184);
      shortArray0[4] = (short)339;
      shortArray0[5] = (short)682;
      shortArray0[6] = (short)459;
      shortArray0[7] = (short)613;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(16, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2154), (short)2702, (short)865, (short) (-1184), (short)339, (short)682, (short)459, (short)613}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray1, (int) (short)339, (short)339);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 339, Length: 16
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, 103);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      ArrayUtils.shift(objectArray0, 117);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-73);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)64, (byte)83, (byte)122, (byte) (-16), (byte)68, (byte) (-73)}, byteArray0);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 0);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      assertNotSame(object0, object2);
      assertFalse(object0.equals((Object)object2));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      long[] longArray1 = new long[4];
      longArray1[0] = (long) longArray0[0];
      longArray1[1] = (long) (short) (-7822);
      longArray1[2] = (long) longArray0[0];
      longArray1[3] = (long) longArray0[0];
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-7822L), 0L, 0L}, longArray1);
      
      ArrayUtils.shift(shortArray0, (-1618), 1422, 53);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      ArrayUtils.shift(charArray0, 447, 447, 1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'R'}, charArray0);
      
      short[] shortArray1 = ArrayUtils.remove(shortArray0, 1);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(13, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 113;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 113;
      ArrayUtils.shift(doubleArray0, 2, 0, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {113.0, 2.0, 2.0, 113.0}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2910.3835F));
      assertNotNull(floatArray1);
      assertEquals(13, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 113.0;
      objectArray0[1] = (Object) 113.0;
      objectArray0[2] = (Object) 2.0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '113.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Long long0 = new Long(948L);
      assertEquals(948L, (long)long0);
      assertNotNull(long0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)100, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte1 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)100);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1797L;
      longArray0[2] = 1167L;
      longArray0[3] = (-339L);
      longArray0[4] = 3245L;
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1167L;
      longArray1[1] = (-339L);
      longArray1[2] = 1167L;
      longArray1[3] = 1L;
      longArray1[4] = 1L;
      longArray1[5] = 1797L;
      longArray1[6] = 1L;
      longArray1[7] = (-339L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 1797L, 1167L, (-339L), 3245L}, longArray0);
      assertArrayEquals(new long[] {1167L, (-339L), 1167L, 1L, 1L, 1797L, 1L, (-339L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1240);
      intArray0[2] = 0;
      intArray0[3] = (-4825);
      intArray0[4] = 2047;
      intArray0[5] = 2;
      intArray0[6] = 4;
      int int0 = ArrayUtils.indexOf(intArray0, 4, (-2065));
      assertEquals(6, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1240), 0, (-4825), 2047, 2, 4}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[20];
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray1, (int) 1, byte0);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(21, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertTrue(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray0, (byte)40);
      assertNotNull(byteArray3);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      
      ArrayUtils.shuffle(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)32;
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) (byte)32;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) floatArray1, (int) 32);
      assertNull(object0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[7];
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte)2, object1);
      assertNotNull(object1);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte1));
      
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) 32.0F;
      Object object2 = ArrayUtils.get((Object[]) floatArray1, (int) 32, objectArray0[2]);
      assertEquals(32.0F, object2);
      assertNotNull(object2);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertEquals(7, objectArray0.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      objectArray0[3] = object2;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) 32.0F;
      objectArray0[6] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte2, (-1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(7, objectArray0.length);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (-85), byte1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -85, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 737, (-4556), 2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 1.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1624;
      shortArray0[1] = (short)1624;
      shortArray0[2] = (short)1875;
      shortArray0[3] = (short) (-1037);
      ArrayUtils.shift(shortArray0, 54, (-4556), 182);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1624, (short)1624, (short)1875, (short) (-1037)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-74);
      ArrayUtils.shift(byteArray0, 0, (-965), 873);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)34, (byte)85, (byte)2, (byte) (-74)}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-965);
      doubleArray0[1] = (double) (byte) (-4);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-74), (int) (byte)2);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-965.0), (-4.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-965.0), (-4.0)}, doubleArray1, 0.01);
      
      char[] charArray0 = Character.toChars(1850);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u073A'}, charArray0);
      
      ArrayUtils.swap(charArray0, Integer.MAX_VALUE, (int) (byte)2, 32);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u073A'}, charArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)85;
      doubleArray2[1] = (double) (byte) (-74);
      doubleArray2[2] = (double) (byte) (-4);
      doubleArray2[3] = (double) (byte) (-4);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-965.0)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-965.0), (-4.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {85.0, (-74.0), (-4.0), (-4.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 65.1742604986332;
      doubleArray0[1] = 65.1742604986332;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) 383L;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 65.1742604986332;
      doubleArray0[6] = 65.1742604986332;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)2);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {65.1742604986332, 65.1742604986332, 2.0, 383.0, (-1.0), 65.1742604986332, 65.1742604986332}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 65.1742604986332, 65.1742604986332, 2.0, 383.0, (-1.0), 65.1742604986332, 65.1742604986332}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {65.1742604986332, 65.1742604986332, 2.0, 383.0, (-1.0), 65.1742604986332, 65.1742604986332}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, (-1251), (-200), (-1000));
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, true, false, true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '8';
      charArray0[2] = '~';
      charArray0[3] = 'Q';
      charArray0[4] = ':';
      charArray0[5] = 'E';
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'#', '8', '~', 'Q', ':', 'E'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'#', '8', '~', 'Q', ':', 'E'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 182.93947, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)2, (short)2}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (int) (short)2);
      assertEquals(3, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0, (short)2, (short)2}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.shift(shortArray0, (-407), 90, (-2142049381));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)2, (short)2}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1063L);
      longArray0[1] = (long) 90;
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) 90;
      longArray0[4] = 1903L;
      longArray0[5] = (long) (-1);
      longArray0[6] = 1L;
      long[] longArray1 = ArrayUtils.subarray(longArray0, Integer.MAX_VALUE, (-1));
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1063L), 90L, 2L, 90L, 1903L, (-1L), 1L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (short)0, true);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-902.58575F);
      floatArray0[2] = 932.70245F;
      ArrayUtils.swap(floatArray0, 129, (-153), 129);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-902.58575F), 932.70245F}, floatArray0, 0.01F);
      
      Character[] characterArray0 = new Character[2];
      char char0 = ';';
      Character character0 = Character.valueOf(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals(';', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'T');
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-902.58575F));
      assertNotNull(bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-902.58575F), 932.70245F}, floatArray0, 0.01F);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertArrayEquals(new char[] {';', ';'}, charArray1);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)121);
      assertEquals((short)121, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)121}, shortArray1);
      
      try { 
        Byte.valueOf("Comparator should not be null.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Comparator should not be null.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-49);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short) (-3948);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte) (-49);
      shortArray0[3] = (short) (byte) (-49);
      shortArray0[4] = (short) (byte) (-49);
      shortArray0[5] = (short) (byte) (-49);
      shortArray0[6] = (short) (byte)0;
      ArrayUtils.swap(shortArray0, 20, (int) (short) (-49), (int) (byte) (-49));
      assertEquals(23, shortArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) (short)0);
      assertEquals((short)0, object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 72, (int) (short) (-49));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object3);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3825.6142820766067);
      doubleArray0[1] = (-4865.52806993417);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-3825.6142820766067);
      objectArray0[1] = (Object) (-4865.52806993417);
      objectArray0[2] = (Object) (-4865.52806993417);
      ArrayUtils.shift(objectArray0, (-2889), 1125, 3002);
      assertEquals(6, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2146072685));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      charArray0[1] = 'D';
      charArray0[2] = '>';
      charArray0[3] = '6';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'[', 'D', '>', '6'}, charArray0);
      assertArrayEquals(new char[] {'[', 'D', '>', '6'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(13, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)1;
      short short0 = (short)457;
      shortArray0[2] = (short)457;
      shortArray0[3] = (short) (-72);
      shortArray0[4] = (short)167;
      shortArray0[5] = (short) (-2663);
      shortArray0[6] = (short) (-760);
      int int0 = 2;
      ArrayUtils.swap(shortArray0, 2, (int) (short)1, 205);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)48, (short)457, (short) (-72), (short)167, (short) (-2663), (short) (-760), (short)1}, shortArray0);
      
      try { 
        Byte.valueOf("Vei4+[4r- -0VX`#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Vei4+[4r- -0VX`#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 457, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 457);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (-1069));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Object[] objectArray1 = new Object[1];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) byte0;
      Byte byte2 = new Byte((byte) (-119));
      assertEquals((byte) (-119), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Object object1 = ArrayUtils.get(objectArray1, 1067, (Object) byte2);
      assertEquals((byte) (-119), object1);
      assertNotNull(object1);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      
      Byte byte3 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)object1));
      
      Object object3 = ArrayUtils.get(objectArray1, 28, (Object) byte0);
      assertEquals((byte)31, object3);
      assertNotNull(object3);
      assertEquals(1, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)object1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(object3.equals((Object)byte3));
      assertFalse(object3.equals((Object)byte1));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)byte2));
      
      Object[] objectArray2 = new Object[1];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      objectArray2[0] = (Object) byte0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray2);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray2.length);
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2518);
      shortArray0[1] = (short) (-775);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte) (-119);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-775));
      assertEquals(1, int1);
      assertEquals(4, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-2518), (short) (-775), (short) (-1), (short) (-119)}, shortArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-119);
      int int2 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 74);
      assertEquals((-1), int2);
      assertEquals(5, byteArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-1), (byte) (-1), (byte)31, (byte) (-119)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 2, objectArray0[7]);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.shift(objectArray0, 2, 553, (-1));
      assertEquals(8, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 1883);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-42L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = new Float[0];
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      float[] floatArray3 = ArrayUtils.removeAllOccurrences((float[]) null, (float) (-42L));
      assertNull(floatArray3);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-7830);
      floatArray0[1] = (float) (short) (-7830);
      floatArray0[2] = (float) (short) (-7830);
      floatArray0[3] = (float) (short) (-7830);
      floatArray0[4] = (float) (short) (-7830);
      floatArray0[5] = (float) (short) (-7830);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-7830);
      doubleArray0[1] = (double) (-7830.0F);
      doubleArray0[2] = (double) (-7830.0F);
      doubleArray0[3] = (double) (-7830.0F);
      doubleArray0[4] = (double) (-7830.0F);
      ArrayUtils.shift(doubleArray0, (int) (short) (-7830), (-3349), (-1651));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-7830.0), (-7830.0), (-7830.0), (-7830.0), (-7830.0)}, doubleArray0, 0.01);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 925, 2591);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F)}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = (-2652L);
      ArrayUtils.shuffle(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, (-2652L), 0L}, longArray0);
      
      Float float0 = new Float((double) (-2652L));
      assertEquals((-2652.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'e';
      charArray0[1] = '@';
      charArray0[2] = 'F';
      charArray0[3] = '';
      charArray0[4] = '+';
      ArrayUtils.swap(charArray0, 56, (-96));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'e', '@', 'F', '', '+'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-96), 9, (-1393));
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'', '+', 'e', '@', 'F'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '';
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-2652L));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {127.0F, (-2652.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {127.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
      
      Boolean[] booleanArray2 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 2, objectArray0[7]);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)2, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = "";
      stringArray0[2] = "Rr0-[6m*";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (-1046.3);
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3271.0, (int) (byte)2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, (-1046.3), 2.0, 2.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray3.length);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray3));
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1044.7840653264;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1044.7840653264);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1044.7840653264}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1662);
      shortArray0[1] = (short)69;
      shortArray0[2] = (short)69;
      shortArray0[3] = (short)69;
      shortArray0[4] = (short)74;
      shortArray0[5] = (short)69;
      shortArray0[6] = (short)69;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)74);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1662), (short)69, (short)69, (short)69, (short)74, (short)69, (short)69}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1662), (short)69, (short)69, (short)69, (short)69, (short)69}, shortArray1);
      
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("118", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)69;
      floatArray0[1] = (float) (short) (-1662);
      floatArray0[2] = (float) (short)74;
      floatArray0[3] = (float) (short) (-1662);
      floatArray0[4] = (float) (short)74;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)69);
      assertEquals(0, int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {69.0F, (-1662.0F), 74.0F, (-1662.0F), 74.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      Character character1 = Character.valueOf((char) character0);
      assertEquals('d', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      Character character2 = new Character(':');
      assertEquals(':', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'k');
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'d', 'k'}, charArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2847.6602F);
      assertEquals(2847.6602F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) character0);
      assertEquals(100.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) floatArray0[2]);
      assertEquals(100.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-939.0));
      assertEquals((-939.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((-8.0F));
      assertEquals((-8.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = Float.valueOf((float) floatArray0[0]);
      assertEquals(1.5F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.5F, 2847.6602F, 100.0F, 100.0F, (-1.0F), (-939.0F), (-8.0F), 1.5F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 383L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {383L}, longArray1);
      
      char[] charArray0 = new char[4];
      ArrayUtils.reverse(charArray0, (-2146239520), 35);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-205));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[5] = byte3;
      byteArray0[6] = byte1;
      Byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) byte0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.swap(shortArray0, (int) (short)0, (-1483), (int) (short)3099);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = (-2635L);
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, '\u0012');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0012';
      charArray0[1] = '\u0012';
      charArray0[2] = '\u0012';
      charArray0[3] = '\u0012';
      charArray0[4] = '\u0012';
      charArray0[5] = '\u0012';
      charArray0[6] = '~';
      charArray0[7] = '\u0012';
      charArray0[8] = '\u0012';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '~';
      charArray1[1] = 'u';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(2, charArray1.length);
      assertEquals(8, charArray2.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'~', 'u'}, charArray1);
      assertArrayEquals(new char[] {'\u0012', '\u0012', '\u0012', '\u0012', '\u0012', '\u0012', '\u0012', '\u0012'}, charArray2);
      assertArrayEquals(new char[] {'\u0012', '\u0012', '\u0012', '\u0012', '\u0012', '\u0012', '~', '\u0012', '\u0012'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      char[] charArray0 = new char[10];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '^';
      charArray1[1] = 'h';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(10, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(10, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'^', 'h'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      Double double0 = new Double(143.150474);
      assertEquals(143.150474, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = '3';
      charArray0[2] = '#';
      charArray0[3] = '\"';
      charArray0[4] = 'B';
      charArray0[5] = ']';
      charArray0[6] = '-';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      assertArrayEquals(new char[] {'O', '3', '#', '\"', 'B', ']', '-'}, charArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'O', '3', '#', '\"', 'B', ']', '-'}, charArray0);
      assertArrayEquals(new char[] {'O', '3', '#', '\"', 'B', ']', '-'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(4238.38F);
      assertEquals(4238.38F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1605.5080046928877);
      assertEquals(1605.508F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {4238.38F, 1605.508F}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4238.38F;
      doubleArray0[1] = (double) (float)floatArray0[1];
      doubleArray0[2] = (double) 4238.38F;
      doubleArray0[3] = 1605.5080046928877;
      ArrayUtils.swap(doubleArray0, 881, 44, 44);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4238.3798828125, 1605.508056640625, 4238.3798828125, 1605.5080046928877}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[9];
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      
      shortArray0[1] = short2;
      try { 
        Short.valueOf("java.lang.Object", (int) short0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 65);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      int int1 = ArrayUtils.indexOf((long[]) null, (-4547L), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[20];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(20, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, (Object) byte3, (int) byte0);
      assertEquals(1, int0);
      assertEquals(20, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) byte0);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (-116.8F);
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-116.80000305175781), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(457, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-41);
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-72), (int) (byte) (-41));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte) (-41), (byte) (-41), (byte) (-72), (byte) (-72), (byte) (-41), (byte)3, (byte) (-41)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      byteArray0[7] = (byte) (-72);
      doubleArray0[2] = 2103.856326;
      boolean[] booleanArray2 = ArrayUtils.insert((int) (byte) (-72), booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      Boolean[] booleanArray3 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Q` I& ,.r~";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(13, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.indexOf(floatArray0, 2893.0F, (-2224));
      assertEquals((-1), int0);
      assertEquals(13, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2224);
      doubleArray0[3] = (double) (-2224);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 2893.0F;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-2224);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2224.0), 0.2);
      assertEquals(2, int1);
      assertEquals(9, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-2224.0), (-2224.0), (-1.0), 2893.0, (-1.0), (-1.0), (-2224.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3130.722599119717, 2191.87073199704);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-2224.0), (-2224.0), (-1.0), 2893.0, (-1.0), (-1.0), (-2224.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)3;
      byteArray1[1] = (Byte) (byte)3;
      byteArray1[2] = (Byte) (byte)3;
      byteArray1[3] = (Byte) (byte)3;
      Byte[] byteArray2 = ArrayUtils.insert((int) 3, byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      Double double0 = new Double(801.781);
      assertEquals(801.781, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = ArrayUtils.insert(561, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 835);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3}, shortArray1);
      assertArrayEquals(new short[] {(short)3, (short)3, (short)3}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)1;
      doubleArray0[4] = (double) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1171.45835), (int) (byte)1, 1.0);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2.0, 1.0, 1.0, 2.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (byte)1, 14, (-285));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (-1));
      assertEquals(0, int1);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2.0);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{1, 4}", bitSet0.toString());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2.0, 1.0, 1.0, 2.0}, doubleArray0, 0.01);
      
      byte byte1 = (byte)0;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 2, (int) 0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray1 = ArrayUtils.insert((int) (short)2, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (int) byte1, (short)1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray2.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)2, (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3825.6142820766067);
      doubleArray0[1] = (-4865.52806993417);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-3825.6142820766067);
      objectArray0[1] = (Object) (-4865.52806993417);
      objectArray0[2] = (Object) (-4865.52806993417);
      ArrayUtils.shift(objectArray0, (-2889), 1125, 3002);
      assertEquals(3, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2146072685));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte byte0 = (byte)55;
      Byte byte1 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1722), 3);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)55;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short)40;
      shortArray0[3] = (short) byte0;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)55, (short)55, (short)40, (short)55}, shortArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)40;
      longArray0[1] = 2162L;
      longArray0[2] = (long) (byte)55;
      longArray0[3] = (long) byte0;
      longArray0[4] = (-42L);
      longArray0[5] = (long) byte0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 40L, 2162L, 55L, 55L, (-42L), 55L}, longArray1);
      assertArrayEquals(new long[] {40L, 2162L, 55L, 55L, (-42L), 55L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) (byte)51;
      floatArray0[5] = 8.0F;
      floatArray0[6] = (float) (byte)2;
      floatArray0[7] = (float) (byte)2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 51.0F, 8.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 27, (int) (byte)51);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 51.0F, 8.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) floatArray1, (-939));
      assertNull(object0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 51.0F, 8.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte2 = ArrayUtils.get(byteArray0, 27);
      assertNull(byte2);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray1, (Object) null, (-391));
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 51.0F, 8.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-939));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2.0F, 2.0F, 51.0F, 8.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-116.8F);
      doubleArray0[1] = (double) 2.0F;
      doubleArray0[2] = (double) (-939);
      doubleArray0[3] = (double) 2.0F;
      doubleArray0[4] = 3806.13;
      doubleArray0[5] = (-1495.1);
      doubleArray0[6] = (double) (-391);
      doubleArray0[7] = (double) 2.0F;
      doubleArray0[8] = (double) (byte)2;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, (-939.0), 2.0, 3806.13, (-1495.1), (-391.0), 2.0, 2.0, (-116.80000305175781)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0, 562);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertTrue(byte0.equals((Object)byte1));
      
      byte[] byteArray1 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short)2249;
      shortArray0[3] = (short) (byte)58;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)58;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)58;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2249, (short)58, (short)2, (short)58, (short)2, (short)58}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)58, (int) (short)58);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {2L}, longArray0);
      
      long[] longArray2 = ArrayUtils.removeAllOccurrences(longArray1, (long) (short)2);
      assertNotNull(longArray2);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {2L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      ArrayUtils.shift(longArray0, 8);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1438.4712;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 8;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {1438.4712, 0.0, 0.0, 0.0, 8.0}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      long[] longArray0 = new long[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byte[] byteArray2 = ArrayUtils.insert((int) (byte)2, byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2}, byteArray2);
      
      Double double0 = new Double((byte)2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Float float0 = new Float(2669.202444314);
      assertEquals(2669.2024F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {2669.2024F, 2669.2024F, 2669.2024F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 837.190821872829;
      doubleArray0[1] = (-87.0);
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = 1566.0;
      doubleArray0[6] = (double) 382L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2.0, (double) (byte)2);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {837.190821872829, (-87.0), 2.0, 2.0, 2.0, 1566.0, 382.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte)2, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray1 = ArrayUtils.insert((int) (byte)2, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)32;
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) (byte)32;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (int) (byte)32, (int) (byte)32);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) floatArray1, (int) 32);
      assertNull(object0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray1, (Object) null, 2);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-116.8F));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift(booleanArray1, (-145), (int) (byte)0, (-7822));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, 35);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(17, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      Boolean[] booleanArray2 = new Boolean[1];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray2[0] = boolean0;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2, false);
      assertNotNull(booleanArray3);
      assertEquals(1, booleanArray2.length);
      assertEquals(1, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray3));
      
      boolean[] booleanArray4 = ArrayUtils.subarray(booleanArray0, 0, (int) (short)1);
      assertNotNull(booleanArray4);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray4.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray4, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray4));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)1;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 472;
      intArray0[1] = 472;
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {472, 472}, intArray0);
      assertArrayEquals(new int[] {472, 472, 472, 472}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-1242), (-2679));
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '>', 790);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)2658;
      shortArray0[1] = (short) (-2339);
      shortArray0[2] = (short)512;
      shortArray0[3] = (short) (-1591);
      shortArray0[4] = (short)1505;
      shortArray0[5] = (short)45;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short)91;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-4325));
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2658, (short) (-2339), (short)512, (short) (-1591), (short)1505, (short)45, (short)2, (short)91}, shortArray0);
      assertArrayEquals(new short[] {(short)2658, (short) (-2339), (short)512, (short) (-1591), (short)1505, (short)45, (short)2, (short)91}, shortArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = 'Q';
      charArray0[2] = ';';
      charArray0[3] = 'w';
      charArray0[4] = '7';
      charArray0[5] = 'h';
      charArray0[6] = 'T';
      charArray0[7] = 'q';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'+', 'Q', ';', 'w', '7', 'h', 'T', 'q'}, charArray0);
      assertArrayEquals(new char[] {'+', 'Q', ';', 'w', '7', 'h', 'T', 'q'}, charArray1);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotNull(charArray2);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'+', 'Q', ';', 'w', '7', 'h', 'T', 'q'}, charArray0);
      assertArrayEquals(new char[] {'+', 'Q', ';', 'w', '7', 'h', 'T', 'q'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte)87;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)119, (byte) (-100), (byte)0, (byte) (-75), (byte) (-105), (byte) (-122), (byte)54, (byte) (-126), (byte)87}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'E');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', 'm', 'm', '\u0000', 'm'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', '\u0000', 'm'}, charArray1);
      
      Object[] objectArray0 = new Object[6];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Short short0 = new Short((byte)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) shortArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, stringArray0.length);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null, 'm');
      assertNull(charArray2);
      
      short[] shortArray2 = ArrayUtils.addFirst(shortArray1, (short) (byte)2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)2}, shortArray2);
      
      BitSet bitSet0 = new BitSet(1283);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1344, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray3 = new short[2];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short) (byte)2;
      shortArray3[1] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(shortArray3);
      assertTrue(boolean0);
      assertEquals(2, shortArray3.length);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.swap(booleanArray0, 1, 2, 1);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-45), (byte) (-45), (byte) (-45)}, byteArray0);
      
      Float float0 = new Float((double) (byte) (-45));
      assertEquals((-45.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (byte) (-45));
      assertEquals((-45.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      Byte[] byteArray2 = new Byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (Byte) (byte) (-45);
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, byte1);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray3.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-939), (-3299));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte) (-45), (double) (byte)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -45, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ArrayUtils.reverse(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, 0, 554);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Object object0 = ArrayUtils.get((Object[]) floatArray1, 0);
      assertEquals(0.0F, object0);
      assertNotNull(object0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf((Object[]) floatArray1, object0, 0);
      assertEquals(0, int0);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 407;
      intArray0[1] = (-2331);
      int int0 = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2146071757));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {407, (-2331), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2146071757), 407, (-2331), 0, 0, 0}, intArray1);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(1872);
      assertEquals(1872, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-2331);
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) (-2331);
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray2);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray2.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {1872, 0, (-2331), 0, 0, 0, (-2331)}, intArray2);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(407);
      assertEquals(407L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray3 = ArrayUtils.addFirst(intArray1, int0);
      assertNotNull(intArray3);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray3.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertArrayEquals(new int[] {407, (-2331), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-2146071757), 407, (-2331), 0, 0, 0}, intArray3);
      assertArrayEquals(new int[] {(-2146071757), 407, (-2331), 0, 0, 0}, intArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)1;
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)1;
      shortArray1[1] = (short) (byte)1;
      shortArray1[2] = (short) (-3564);
      shortArray1[3] = (short) byte0;
      shortArray1[4] = (short) (byte)1;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short) (-3564), (short)1, (short)1}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      short[] shortArray0 = new short[9];
      char[] charArray0 = new char[0];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-7830);
      floatArray0[1] = (float) (short) (-7830);
      floatArray0[2] = (float) (short) (-7830);
      floatArray0[3] = (float) (short) (-7830);
      int int0 = ArrayUtils.indexOf(floatArray0, (-7830.0F), (int) (short) (-7830));
      assertEquals(0, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-7830.0F), (-7830.0F), (-7830.0F), (-7830.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1489.1687F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1489.1687F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 321;
      intArray0[2] = 7;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      ArrayUtils.swap(intArray0, 1, 1, 1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {321, 0, 7, 1, 1, 1}, intArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      Double double0 = new Double((-4205.0));
      assertEquals((-4205.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-87.0));
      assertEquals((-87.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-87.0F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (float)floatArray0[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, (-87.0));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-87.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.insert((int) (byte)0, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-107);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-107)}, byteArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = (float) (byte) (-107);
      floatArray0[2] = (float) (byte) (-107);
      floatArray0[3] = (float) (byte) (-107);
      floatArray0[4] = (float) (byte) (-107);
      floatArray0[5] = (float) (byte) (-107);
      floatArray0[6] = (float) (byte) (-107);
      floatArray0[7] = (float) (byte) (-107);
      ArrayUtils.shift(floatArray0, 3, 3, 97);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-107.0F), (-107.0F), (-107.0F), (-107.0F), (-107.0F), (-107.0F), (-107.0F), (-107.0F)}, floatArray0, 0.01F);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1570));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character character0 = Character.valueOf('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertNotNull(character1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1570);
      longArray0[1] = (long) (-1);
      longArray0[2] = (-42L);
      longArray0[3] = (long) 'x';
      longArray0[4] = (long) (-1570);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (-1063L);
      int int1 = ArrayUtils.indexOf(longArray0, 129L, (-1));
      assertEquals((-1), int1);
      assertEquals(8, longArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-1570L), (-1L), (-42L), 120L, (-1570L), (-1L), (-1L), (-1063L)}, longArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[7];
      booleanArray1[0] = boolean0;
      booleanArray1[1] = boolean0;
      booleanArray1[2] = boolean0;
      booleanArray1[3] = boolean0;
      booleanArray1[4] = boolean0;
      booleanArray1[5] = boolean0;
      booleanArray1[6] = boolean0;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(3, floatArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1376.0F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'N';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)79, 78.0);
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {78.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)79;
      shortArray0[1] = (short) (byte)79;
      shortArray0[2] = (short) (byte)79;
      shortArray0[3] = (short) (-7397);
      shortArray0[4] = (short) (byte)79;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short) (byte)79;
      shortArray0[7] = (short) (byte)79;
      shortArray0[8] = (short) (byte)79;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)11, 1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)79, (short)79, (short)79, (short) (-7397), (short)79, (short)3, (short)79, (short)79, (short)79}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)101;
      Byte byte1 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.insert(3, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Double double0 = new Double(byte0);
      assertEquals(101.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = '1';
      charArray0[2] = 'b';
      charArray0[3] = 'a';
      charArray0[4] = 'h';
      charArray0[5] = 'o';
      charArray0[6] = '';
      char[] charArray1 = ArrayUtils.insert(3390, charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q', '1', 'b', 'a', 'h', 'o', ''}, charArray1);
      assertArrayEquals(new char[] {'Q', '1', 'b', 'a', 'h', 'o', ''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, (-2147483648L));
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      int int0 = ArrayUtils.indexOf(intArray0, (-2123080424), (-1));
      assertEquals((-1), int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray0);
      
      Character character0 = Character.valueOf('}');
      assertEquals('}', (char)character0);
      assertNotNull(character0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'E');
      assertNull(charArray0);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1), 351);
      assertNull(byteArray0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "74bg";
      stringArray0[1] = "i<2EUdsq$";
      stringArray0[2] = "";
      stringArray0[3] = "AiL{FAwiKyv}d8-'.";
      stringArray0[4] = "";
      stringArray0[5] = "92L^$l";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'Y');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '\'';
      charArray0[6] = '[';
      charArray0[7] = '[';
      charArray0[8] = '\'';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\'');
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'[', '[', '[', '[', '['}, charArray1);
      assertArrayEquals(new char[] {'\'', '\'', '[', '[', '[', '\'', '[', '[', '\''}, charArray0);
      
      Character character0 = new Character('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-103);
      ArrayUtils.shift(byteArray0, (int) (byte) (-112), 0, 160);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)2, (byte)2, (byte) (-103), (byte)2, (byte) (-112), (byte)2, (byte) (-103)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-110);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-110), (int) (byte) (-110), (-110.0));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-110.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-110);
      shortArray0[1] = (short) (byte) (-110);
      shortArray0[2] = (short) (byte) (-110);
      shortArray0[3] = (short) (byte) (-110);
      shortArray0[4] = (short) (byte) (-110);
      shortArray0[5] = (short) (byte) (-110);
      shortArray0[6] = (short) (byte) (-110);
      shortArray0[7] = (short) (byte) (-110);
      shortArray0[8] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray0, 884, (int) (short) (-110), (int) (short) (-110));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110)}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-110), (-479));
      assertEquals(0, int1);
      assertEquals(9, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110), (short) (-110)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 626.56743771);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-110.0)}, doubleArray0, 0.01);
      
      Byte byte1 = new Byte((byte) (-91));
      assertEquals((byte) (-91), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      // Undeclared exception!
      ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (int)  (-110));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      long[] longArray0 = new long[10];
      ArrayUtils.shuffle(longArray0);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray1 = ArrayUtils.insert(10, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(10, longArray0.length);
      assertEquals(20, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {382L, 406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (int) (byte)2, 93);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte)2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 119L, 1);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 321);
      assertEquals(1, int1);
      assertEquals(2, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1360L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-589.934), 1.5);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 1.0, 1360.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1), shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray2 = ArrayUtils.insert(1, longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(17, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {382L, 406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      Double double0 = new Double((-4054.70456498));
      assertEquals((-4054.70456498), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-4054.70456498), (-4054.70456498), (-4054.70456498)}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4054.70456498), (-4054.70456498), (-4054.70456498)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Double double0 = new Double((-1911.3080211454667));
      assertEquals((-1911.3080211454667), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(19.0);
      assertEquals(19.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)2);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {19.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true}, booleanArray0));
      
      Float float0 = new Float((-150.74357162212482));
      assertEquals((-150.74358F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (byte)2, (long) (byte)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[0];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2146163365;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2146163365;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 2.146163365E9, 1.0, 2.146163365E9, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.146163365E9, 1.0, 2.146163365E9, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 2146163365;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      ArrayUtils.swap(floatArray0, 1, 7, (-1));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 2.14616333E9F, 0.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 2676.1555F, 1);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 2.14616333E9F, 0.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1023));
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1538, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-72);
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-41);
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-72), (int) (byte) (-41));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-41), (byte) (-41), (byte) (-72), (byte)0, (byte) (-41), (byte) (-72), (byte) (-41)}, byteArray0);
      
      byteArray0[7] = (byte) (-72);
      ArrayUtils.shift((Object[]) null, (-4556));
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-41), (byte) (-41), (byte) (-72), (byte)0, (byte) (-41), (byte) (-72), (byte) (-72)}, byteArray0);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, (int) (byte) (-41), (int) (byte)0);
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray2));
      
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int)  (-41), (-4556));
      assertNotNull(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-41), (byte) (-41), (byte) (-72), (byte)0, (byte) (-41), (byte) (-72), (byte) (-72)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) (byte)2;
      intArray0[3] = (int) (byte)2;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (int) (byte)2;
      intArray0[6] = (int) (byte)2;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)2;
      intArray1[1] = (int) (byte)2;
      intArray1[2] = (int) (byte)2;
      intArray1[3] = (int) (byte)2;
      intArray1[4] = (int) (byte)2;
      intArray1[5] = (int) (byte)2;
      intArray1[6] = (int) (byte)2;
      intArray1[7] = (int) (byte)2;
      intArray1[8] = (int) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 2, 2}, intArray1);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray0 = ArrayUtils.insert((-2040), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean2 = Boolean.valueOf("*>6w0m");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      Boolean boolean3 = new Boolean("a$+=~`F3}SNB>%-amk;");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[1] = boolean3;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      
      booleanArray0[2] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '$';
      charArray0[2] = 's';
      charArray0[3] = 'G';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's', 1376);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'}', '$', 's', 'G'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = (-2652L);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2142700832));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-87));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-87);
      doubleArray0[1] = 1560.6492039;
      doubleArray0[2] = (double) (short) (-87);
      doubleArray0[3] = (double) (short) (-87);
      doubleArray0[4] = (double) (short) (-87);
      doubleArray0[5] = (double) (short) (-87);
      doubleArray0[6] = (double) (short) (-87);
      doubleArray0[7] = (double) (short) (-87);
      doubleArray0[8] = (double) (short) (-87);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1560.6492039, (-87.0));
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-87.0), 1560.6492039, (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)3, (-1));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-583.0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-87.0), 1560.6492039, (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-87.0), 1560.6492039, (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-87.0), (-583.0)}, doubleArray1, 0.01);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'U';
      charArray0[1] = 'E';
      charArray0[2] = 'H';
      charArray0[3] = 'A';
      charArray0[4] = 'i';
      charArray0[5] = 'S';
      BitSet bitSet1 = ArrayUtils.indexesOf(charArray0, 'z', (int) (short)3);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(6, charArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new char[] {'U', 'E', 'H', 'A', 'i', 'S'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      Object object0 = ArrayUtils.get(objectArray0, 18688);
      assertNull(object0);
      assertEquals(5, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 1199);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, 18688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18688, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, (-1)}, intArray0);
      
      Byte byte0 = Byte.valueOf((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) (-1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)21;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)21, (byte)21, (byte)21, (byte)21}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)21;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)21}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (byte)21;
      shortArray2[1] = (short) (byte)21;
      shortArray2[2] = (short) (byte)21;
      shortArray2[3] = (short) (byte)21;
      shortArray2[4] = (short) (byte)21;
      shortArray2[5] = (short) (byte)21;
      shortArray2[2] = (short) (byte)21;
      shortArray2[7] = (short) (byte)21;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray2, shortArray0);
      assertFalse(boolean1);
      assertEquals(8, shortArray2.length);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)21, (short)21, (short)21, (short)21, (short)21, (short)21, (short)0, (short)21}, shortArray2);
      assertArrayEquals(new short[] {(short)21}, shortArray0);
      
      ArrayUtils.swap((double[]) null, (-2681), (-1), 1253);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.swap((double[]) null, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      ArrayUtils.shift(booleanArray1, (int) (byte)2, 57, (-4438));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = (boolean) boolean0;
      booleanArray2[1] = (boolean) boolean0;
      booleanArray2[2] = (boolean) boolean0;
      booleanArray2[3] = (boolean) boolean0;
      int int0 = ArrayUtils.lastIndexOf(booleanArray2, true, (int) (short) (-26267));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) booleanArray0);
      assertFalse(boolean1);
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)99;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)2);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2, (byte)99, (byte)2, (byte)2, (byte)2, (byte)2, (byte)99}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte)2, (byte)99, (byte)2, (byte)2, (byte)2, (byte)2, (byte)99, (byte)2}, byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-4438);
      floatArray0[1] = (float) (byte)99;
      floatArray0[2] = (float) 57;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (byte)2, (float) (byte)2);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4438.0F), 99.0F, 2.0F, 57.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-4438.0F), 99.0F, 57.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-292L);
      longArray0[1] = (-865L);
      longArray0[2] = (-42L);
      longArray0[3] = (-42L);
      longArray0[4] = (-42L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-292L), (-865L), (-42L), (-42L), (-42L)}, longArray0);
      assertArrayEquals(new long[] {(-865L), (-42L), (-42L), (-42L)}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      char char0 = ')';
      Character character0 = Character.valueOf(')');
      assertEquals(')', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf(')');
      assertEquals(')', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {')', ')', ')', ')', ')', ')'}, charArray0);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)3;
      byteArray1[1] = (Byte) (byte)3;
      byteArray1[2] = (Byte) (byte)3;
      byteArray1[3] = (Byte) (byte)3;
      Byte[] byteArray2 = ArrayUtils.insert((int) 3, byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[8];
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)3;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(8, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {3L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray3 = new byte[4];
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = byte0;
      byteArray3[1] = byte0;
      byteArray3[2] = byte0;
      byteArray3[3] = (byte)2;
      ArrayUtils.swap(byteArray3, (-1), (-2135), (int) byte0);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)2}, byteArray3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'f';
      charArray0[2] = 'n';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'R', 'f', 'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, byte0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'I';
      charArray0[2] = '#';
      charArray0[3] = 'K';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2334), (-2334));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)961;
      shortArray0[1] = (short)961;
      shortArray0[2] = (short)961;
      shortArray0[3] = (short)961;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)961);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)961, (short)961, (short)961, (short)961}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (short)961, (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 961, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[7];
      Byte[] byteArray1 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
      
      Byte byte1 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)2;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)2;
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray2);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)2, (byte)0, (byte) (-1), (byte)2, (byte) (-1), (byte) (-1)}, byteArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (byte)58;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte)58;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1), (int) (byte) (-1));
      assertEquals(0, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 58.0, (-1.0), (-1.0), (-1.0), 58.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(byteArray0, (int) (byte)2, (-192), 3040);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte)2);
      assertNotNull(byteArray3);
      assertEquals(8, byteArray2.length);
      assertEquals(7, byteArray3.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte)2, (byte)0, (byte) (-1), (byte)2, (byte) (-1), (byte) (-1)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)0, (byte) (-1), (byte)2, (byte) (-1), (byte) (-1)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[14];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(14, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2992.8493521437;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2262.808702, 1520, (double) 1520);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2992.8493521437, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 250;
      intArray0[3] = 1520;
      intArray0[4] = 250;
      intArray0[5] = 250;
      intArray0[6] = 122;
      intArray0[7] = 250;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1520;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1520.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 5651);
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 250, 0, 1520, 250, 250, 122, 250, 0}, intArray0);
      
      int int2 = ArrayUtils.indexOf(floatArray0, (float) 1520);
      assertEquals(0, int2);
      assertEquals(1, floatArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new float[] {1520.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (-51);
      intArray0[5] = 1365;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)1;
      intArray0[8] = (int) (byte)1;
      ArrayUtils.shift(intArray0, (-51), (-2084322363), (-51));
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 2, 1, 1, (-51), 1365, 1, 1, 1}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 1365;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-51));
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 2.0F, 1365.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'k');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'k', 'k', 'k'}, charArray0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'k';
      floatArray0[1] = (-1739.0616F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {107.0F, (-1739.0616F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 7L;
      longArray0[1] = (long) 'k';
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) 'k';
      longArray0[5] = (long) 'k';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 107L);
      assertEquals(5, int0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {7L, 107L, 107L, 107L, 107L, 107L}, longArray0);
      
      ArrayUtils.shift((Object[]) floatArray1, 16, 5, 234);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {107.0F, (-1739.0616F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-1), (short)0}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-1624.534F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)1518;
      floatArray0[4] = (float) (short)531;
      floatArray0[5] = 1708.0F;
      floatArray0[6] = (float) (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1624.534F), 0.0F, 1518.0F, 531.0F, 1708.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)531;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      ArrayUtils.shift(intArray0, (int) (short) (-1), (int) (short)0, (int) (short)0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {531, 0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short)0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-1624.534F), 0.0F, 1518.0F, 531.0F, 1708.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)3;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)3;
      floatArray1[1] = (float) (byte)3;
      floatArray1[2] = (float) (byte)3;
      floatArray1[3] = (float) (byte)3;
      floatArray1[4] = (float) (byte)2;
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {3.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, 3.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, 3.0F, 3.0F, 2.0F}, floatArray2, 0.01F);
      
      float[] floatArray3 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)127, 1);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray1, (float) (-1));
      assertEquals((-1), int1);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertTrue(int1 == int0);
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, 3.0F, 2.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'f';
      charArray0[2] = 'r';
      charArray0[3] = 'C';
      charArray0[4] = '4';
      charArray0[5] = 't';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      assertArrayEquals(new char[] {'N', 'f', 'r', 'C', '4', 't'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (-2145969959));
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      ArrayUtils.swap(charArray0, (-96), (-2145969959));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)2, 1370.46);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 1370.46, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) 1;
      floatArray2[1] = (float) (-2145969959);
      floatArray2[2] = (float) 1;
      floatArray2[3] = (float) floatArray0[0];
      floatArray2[4] = (float) (-96);
      floatArray2[5] = (float) 0;
      floatArray2[6] = (float) (-96);
      floatArray2[7] = (float) (byte)2;
      floatArray2[8] = (float) floatArray0[0];
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {1.0F, (-2.14596992E9F), 1.0F, (-2.14596992E9F), (-96.0F), 0.0F, (-96.0F), 2.0F, (-2.14596992E9F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (int) (byte)1, (byte)1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) (byte)1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 45);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (int) (byte) (-92), 554);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 554;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)124, 1553, (-2834.9368));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {554.0}, doubleArray0, 0.01);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray1);
      assertNotNull(stringArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, stringArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-92));
      assertNull(byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '.';
      charArray0[2] = '0';
      charArray0[3] = 'S';
      charArray0[4] = 'N';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) (byte) (-92), '^');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -92, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte) (-1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) (byte)92;
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (byte)92;
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) (byte) (-1);
      char[] charArray0 = new char[2];
      objectArray0[0] = (Object) '\"';
      charArray0[1] = '&';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '&', '\u0000', '&'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '&'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3368.5F);
      floatArray0[1] = 317.9766F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2159.3713F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3368.5F), 317.9766F, (-1.0F), (-2159.3713F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'S';
      charArray0[2] = 't';
      charArray0[3] = '=';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'Z';
      ArrayUtils.swap(charArray0, (-1251), (-1489), 1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'0', 'S', 't', '=', 'U', 'U', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-939), (-939));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.insert(5, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-48);
      Byte byte2 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte) (-48), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte) (-48), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      try { 
        Byte.decode("skipOn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"skipOn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.insert((-1319), intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1495.8909F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1495.8909F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray0, (-1), (-1), (-1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, (-1), 1152, (-1));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)5;
      ArrayUtils.swap(byteArray0, (-2250), (-274), 562);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte)2, (byte)5}, byteArray0);
      
      ArrayUtils.shift(byteArray0, 170, (int) (byte)5, 1665);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)83, (byte)2, (byte)5}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)18);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)83, (byte)2, (byte)5}, byteArray1);
      assertArrayEquals(new byte[] {(byte)83, (byte)2, (byte)5}, byteArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = 1152;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) (byte)18;
      intArray0[4] = (int) (byte)83;
      intArray0[5] = (int) (byte)83;
      intArray0[6] = 170;
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(14, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 1152, 5, 18, 83, 83, 170}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 440;
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {440, 2}, intArray0);
      assertArrayEquals(new int[] {440, 2, 440, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-292L)}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '%');
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2673;
      floatArray0[1] = (float) 2673;
      floatArray0[2] = (float) (-1);
      ArrayUtils.swap(floatArray0, 0, 0, 1386);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2673.0F, 2673.0F, (-1.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1386;
      longArray2[1] = 1L;
      longArray2[2] = (long) 2673;
      longArray2[3] = (long) 'K';
      longArray2[4] = (long) '%';
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 2673;
      longArray2[7] = (long) '%';
      longArray2[8] = (long) 'K';
      long[] longArray3 = ArrayUtils.subarray(longArray2, 2673, 1386);
      assertNotNull(longArray3);
      assertEquals(0, longArray3.length);
      assertEquals(9, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray3);
      assertArrayEquals(new long[] {1386L, 1L, 2673L, 75L, 37L, 0L, 2673L, 37L, 75L}, longArray2);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 457, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 457;
      doubleArray0[1] = (double) 457;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 2;
      ArrayUtils.shift(doubleArray0, 2, 457, (-1871));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {457.0, 457.0, 2.0, 2.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, 0, (-1)}, intArray0);
      
      byte byte0 = (byte)21;
      Byte byte1 = Byte.valueOf((byte)21);
      assertEquals((byte)21, (byte)byte1);
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) (-1);
      Object object0 = ArrayUtils.get(objectArray0, (-2531));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte1, 1);
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (int) (byte)21);
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      Random.setNextRandom(481);
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'l', 3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 66.0, 9, (double) 9);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (-802);
      doubleArray0[2] = 66.0;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = 66.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 9;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-802.0), 66.0, 9.0, 66.0, 1.0, (-1.0), (-1.0), 9.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-802.0), 66.0, 9.0, 66.0, 1.0, 9.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'Y');
      assertNull(charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-802);
      intArray0[1] = (-332);
      intArray0[2] = (int) 'Y';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-802), (-332), 89}, intArray0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 1.0, (-802));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray1 = new char[3];
      charArray1[0] = 'Y';
      charArray1[1] = 'Y';
      charArray1[2] = 'Y';
      char[] charArray2 = ArrayUtils.removeElements((char[]) null, charArray1);
      assertNull(charArray2);
      assertEquals(3, charArray1.length);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y'}, charArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 89;
      long[] longArray1 = ArrayUtils.remove(longArray0, 1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 89L, 89L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 89L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 0;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (float) 0;
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F}, floatArray2, 0.01F);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 0L;
      floatArray3[1] = (float) 0L;
      floatArray3[2] = (float) 0;
      floatArray3[3] = 1237.2074F;
      int int1 = ArrayUtils.lastIndexOf(floatArray3, 1.0F, 0);
      assertEquals((-1), int1);
      assertEquals(4, floatArray3.length);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertFalse(int1 == int0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1237.2074F}, floatArray3, 0.01F);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 0, 0L);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      Long[] longArray2 = new Long[6];
      longArray2[0] = (Long) 0L;
      longArray2[1] = (Long) 0L;
      Long long0 = new Long((long) longArray2[0]);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      assertEquals(6, longArray2.length);
      
      longArray2[2] = long0;
      longArray2[3] = (Long) 0L;
      longArray2[4] = (Long) 0L;
      longArray2[5] = (Long) 0L;
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray2);
      assertNotNull(longArray3);
      assertEquals(6, longArray2.length);
      assertEquals(6, longArray3.length);
      assertSame(longArray2, longArray3);
      assertSame(longArray3, longArray2);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      ArrayUtils.shift(byteArray0, (-10), (-1253), 47);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44)}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'S';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'[', 'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-44);
      byteArray1[1] = (Byte) (byte) (-44);
      byteArray1[2] = (Byte) (byte) (-44);
      byteArray1[3] = (Byte) (byte) (-44);
      byteArray1[4] = (Byte) (byte) (-44);
      byteArray1[5] = (Byte) (byte) (-44);
      byteArray1[6] = (Byte) (byte) (-44);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, 2);
      assertTrue(boolean0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-37), 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)45, (byte) (-10), (byte) (-10), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {(-823)}, intArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 457, 457);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 457;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 457;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 2);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {457.0, 2.0, 457.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {457.0, 2.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2879);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)2879}, shortArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2879;
      intArray0[1] = (int) (short)2879;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2879, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 645.0F;
      Float float0 = new Float(99.0F);
      assertEquals(99.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2056.0));
      assertEquals((-2056.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 645.0F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 645.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, 2146752722, (-2800));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) integerArray0, 2);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 2);
      assertEquals(2, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-32);
      Byte byte1 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-32), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte) (-1);
      Byte byte5 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[4] = byte6;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)51;
      byteArray1[1] = byte0;
      ArrayUtils.shift(byteArray1, (-3463), 2, (-2325));
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)51}, byteArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)51;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short) byte4;
      ArrayUtils.reverse(shortArray0, (-380), 57);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)51, (short)51}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray1);
      assertTrue(boolean0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)51}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'Y');
      assertNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-5154.14265897), 114);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)19;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-922);
      shortArray0[6] = (short) (-922);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)19);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)19, (short)19, (short)0, (short)0, (short)100, (short) (-922), (short) (-922)}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short)19, (short)0, (short)0, (short)100, (short) (-922), (short) (-922)}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.insert(52, (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.insert((int) 0, byteArray2, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) (byte)0, (int) (short)19);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      intArray0[1] = (int) (short)19;
      intArray0[2] = (int) (short)19;
      intArray0[3] = 2200;
      intArray0[4] = (int) (short)19;
      intArray0[5] = (int) (short)100;
      intArray0[6] = (int) (short)100;
      ArrayUtils.shift(intArray0, (-3228), 19, (-3237));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2200, 19, 100, 100, 16, 19, 19}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3962;
      intArray0[1] = 124;
      intArray0[2] = (-1);
      intArray0[3] = 2731;
      intArray0[4] = 116;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 116;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {3962, 124, (-1), 2731, 116}, intArray0);
      assertArrayEquals(new int[] {116}, intArray1);
      assertArrayEquals(new int[] {3962, 124, (-1), 2731}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 2026);
      assertNull(intArray0);
      
      byte byte0 = (byte)21;
      Byte byte1 = Byte.valueOf((byte)21);
      assertEquals((byte)21, (byte)byte1);
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte1;
      byte byte2 = (byte) (-95);
      Byte byte3 = Byte.valueOf((byte) (-95));
      assertEquals((byte) (-95), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)21, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte0 == byte2);
      
      byteArray0[8] = byte5;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte0 == byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (long) byte2;
      int int0 = ArrayUtils.indexOf(longArray0, (-1L));
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-95L)}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2026;
      ArrayUtils.swap(floatArray0, 2200, 1081, (int) byte0);
      assertEquals(1, floatArray0.length);
      assertFalse(byte0 == byte2);
      assertArrayEquals(new float[] {2026.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      Byte byte0 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte2, object1);
      assertFalse(boolean0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      
      Byte byte5 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte byte6 = Byte.valueOf((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      
      Byte byte7 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte3;
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'K';
      charArray0[4] = 'E';
      charArray0[5] = 'K';
      charArray0[6] = 'I';
      int int0 = ArrayUtils.indexOf(charArray0, '#');
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'#', 'I', 'I', 'K', 'E', 'K', 'I'}, charArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1021;
      shortArray0[1] = (short)84;
      shortArray0[2] = (short) (-4766);
      shortArray0[3] = (short)1021;
      shortArray0[4] = (short)84;
      ArrayUtils.shift(shortArray0, (int) (short)84, (int) (short)1021, (int) (short) (-4766));
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1021, (short)84, (short) (-4766), (short)1021, (short)84}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (int) (short)1021);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'#', 'I', 'I', 'K', 'E', 'K', 'I'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '4';
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) '4';
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0);
      assertEquals(7, int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 7;
      intArray0[3] = (int) '4';
      intArray0[4] = (-1805);
      intArray0[5] = (int) '4';
      intArray0[6] = 7;
      intArray0[7] = (int) '4';
      ArrayUtils.shift(intArray0, (-543), 52, 8);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 7, 52, (-1805), 52, 7, 52}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 52);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)2;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)2;
      longArray0[7] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-600L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2L, 0L, 2L, 0L, 0L, 2L, 2L}, longArray0);
      assertArrayEquals(new long[] {(-600L), 0L, 2L, 0L, 2L, 0L, 0L, 2L, 2L}, longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'P';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      ArrayUtils.reverse(charArray0, (-2510), (-2510));
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', 'P', '3', '3', '3', '3'}, charArray0);
      
      ArrayUtils.shift(charArray0, 0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', 'P', '3', '3', '3', '3'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'3', 'P', '3', '3', '3', '3'}, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)92;
      longArray0[1] = (long) (byte)92;
      longArray0[2] = (long) (-324);
      longArray0[3] = (long) (byte)92;
      longArray0[4] = (long) (-324);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-324L);
      floatArray0[1] = (float) 92L;
      floatArray0[2] = (float) (-324);
      ArrayUtils.shift(floatArray0, (-324), (-89), (int) (byte)92);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-324.0F), 92.0F, (-324.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-324.0F), 92.0F, (-324.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-324);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) 92L;
      doubleArray0[3] = (double) (byte)92;
      doubleArray0[4] = (double) (-324L);
      doubleArray0[5] = (double) (byte)92;
      doubleArray0[6] = (double) (-324.0F);
      ArrayUtils.shift(doubleArray0, (int) (byte)92, (int) (byte)92, (-324));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-324.0), 0.7, 92.0, 92.0, (-324.0), 92.0, (-324.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-324);
      intArray0[1] = (-89);
      intArray0[2] = (-89);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-324), (-89), (-89)}, intArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-806.22362), 1, 601.378541);
      assertEquals(4, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-324.0), 0.7, 92.0, 92.0, (-324.0), 92.0, (-324.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -89, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1070L);
      longArray1[1] = 312L;
      longArray1[2] = (-292L);
      longArray1[3] = 312L;
      longArray1[4] = 743L;
      longArray1[5] = 743L;
      longArray1[6] = 312L;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertNotNull(longArray2);
      assertEquals(6, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1070L), 312L, 312L, 743L, 743L, 312L}, longArray2);
      assertArrayEquals(new long[] {0L, (-292L)}, longArray0);
      assertArrayEquals(new long[] {(-1070L), 312L, (-292L), 312L, 743L, 743L, 312L}, longArray1);
      
      Byte[] byteArray0 = null;
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-1251));
      assertNull(byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 1L;
      longArray1[1] = 731L;
      longArray1[2] = 1L;
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 731L, 1L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 894.1312203;
      doubleArray0[1] = (double) (byte)43;
      doubleArray0[2] = (double) (byte)43;
      doubleArray0[3] = 894.1312203;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 894.1312203, 116);
      assertEquals(3, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {894.1312203, 43.0, 43.0, 894.1312203}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)7, 0);
      assertEquals((-1), int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)7;
      doubleArray0[7] = (double) 65536;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (byte)7);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 7.0, 7.0, 0.0, 0.0, (-1.0), 7.0, 65536.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7.0, 7.0, 0.0, 0.0, (-1.0), 7.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)961);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-4279), 18);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 532);
      assertEquals(4, int0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      
      int int1 = ArrayUtils.indexOf(byteArray1, (byte)0);
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray2.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)486);
      assertEquals((short)486, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)486);
      assertEquals((short)486, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)2535);
      assertEquals((short)2535, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      short short3 = (short)76;
      Short short4 = new Short((short)76);
      assertEquals((short)76, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)15);
      assertEquals((short)15, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      
      shortArray0[4] = short5;
      Short short6 = new Short((short)76);
      assertEquals((short)76, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short4));
      
      shortArray0[5] = short6;
      short short7 = (short)19;
      Short short8 = new Short((short)19);
      assertEquals((short)19, (short)short8);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short4));
      
      shortArray0[6] = short8;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)16);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertArrayEquals(new short[] {(short)486, (short)486, (short)2535, (short)76, (short)15, (short)76, (short)19}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, short7);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(short7 == short3);
      assertArrayEquals(new short[] {(short)486, (short)486, (short)2535, (short)76, (short)15, (short)76, (short)19}, shortArray1);
      assertArrayEquals(new short[] {(short)486, (short)486, (short)2535, (short)76, (short)15, (short)76}, shortArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) shortArray0[0];
      objectArray0[1] = (Object) short3;
      objectArray0[2] = (Object) short4;
      objectArray0[3] = (Object) short6;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {382L, 406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (int) (byte)2, 93);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte)2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 119L, 1);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 321);
      assertEquals(1, int1);
      assertEquals(2, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      ArrayUtils.swap(longArray2, (-3123), 2136346084, 93);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 406L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 406.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 229.2949857690615;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 229.2949857690615}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 229.2949857690615}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'p');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1805;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)1805;
      ArrayUtils.reverse(shortArray0, (int) (short)8, (int) (short)1805);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)1805, (short)8, (short)1805}, shortArray0);
      
      Byte byte0 = Byte.valueOf((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)1805;
      objectArray0[1] = (Object) (short)1805;
      objectArray0[2] = (Object) (short)1805;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1], (-1));
      assertNotNull(bitSet0);
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(4, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayUtils.shift((long[]) null, (-1));
      ArrayUtils.swap(intArray0, (-3705), 0, 720);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-138L);
      longArray0[1] = (long) (-3705);
      longArray0[2] = (long) (-846);
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1864L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-138L), (-3705L), (-846L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1864L), (-138L), (-3705L), (-846L), (-1L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 382L;
      longArray0[2] = 382L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 402L);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 382L, 382L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {402L, 0L, 382L, 382L, 0L, 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = '<';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, '<', (-64));
      assertEquals(2, int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', '<', 'R', 'R', 'R'}, charArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float((double) (-1608));
      assertEquals((-1608.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 2);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-200.919));
      assertEquals((-200.919F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals((-1608.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals(9, floatArray0.length);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((double) (-1608));
      assertEquals((-1608.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((-1865.6653F));
      assertEquals((-1865.6653F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((double) floatArray0[3]);
      assertEquals((-1608.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float(573.43243F);
      assertEquals(573.43243F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((float) 402L);
      assertEquals(402.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2939.7986F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1608.0F), 2.0F, (-200.919F), (-1608.0F), (-1608.0F), (-1865.6653F), (-1608.0F), 573.43243F, 402.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1384);
      assertEquals(1384, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)294;
      shortArray0[3] = (short)294;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short) (-1553);
      shortArray0[6] = (short) (-1553);
      shortArray0[7] = (short)294;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)294;
      intArray0[1] = (int) (short) (-1553);
      intArray0[2] = (int) (short) (-1553);
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {294, (-1553), (-1553), 294, (-1553), (-1553)}, intArray1);
      assertArrayEquals(new int[] {294, (-1553), (-1553)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1553);
      longArray0[1] = (long) (short) (-1553);
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals((-1), int0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {(-1553L), (-1553L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      long[] longArray0 = new long[2];
      longArray0[1] = 2384L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2384L}, longArray0);
      assertArrayEquals(new long[] {0L, 2384L}, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)1;
      intArray0[5] = (int) (byte)1;
      intArray0[6] = (int) (byte)1;
      intArray0[7] = (int) (byte)1;
      intArray0[8] = (int) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4818, 0);
      assertEquals((-1), int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1}, intArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2264.5365904));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1479);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1479, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3825.6142820766067);
      doubleArray0[1] = (-4865.52806993417);
      doubleArray0[2] = (-3825.6142820766067);
      long[] longArray0 = new long[4];
      longArray0[0] = (-292L);
      longArray0[1] = 2147483647L;
      longArray0[2] = (-292L);
      longArray0[3] = (-292L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-292L), 2147483647L, (-292L), (-292L)}, longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'K');
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2147483647L;
      floatArray0[1] = (float) (-292L);
      ArrayUtils.swap(floatArray0, (-1), (-1), 2673);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {2.14748365E9F, (-292.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.subarray(longArray0, (-1), (-1));
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {(-292L), 2147483647L, (-292L), (-292L)}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2478.52874));
      assertEquals((-2478.52874), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2478.52874)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2651L);
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-2651L), 2797);
      assertEquals(0, int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2651.0F), 0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, (-1801));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2674);
      shortArray0[1] = (short) (-4461);
      shortArray0[2] = (short) (-88);
      shortArray0[3] = (short)2524;
      shortArray0[4] = (short)8192;
      shortArray0[5] = (short) (-1037);
      shortArray0[6] = (short) (-1145);
      ArrayUtils.swap(shortArray0, 827, (int) (short) (-2674), 2);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2674), (short) (-4461), (short) (-88), (short)2524, (short)8192, (short) (-1037), (short) (-1145)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-7822);
      floatArray0[2] = 1242.3556F;
      ArrayUtils.shift(floatArray0, (int) (short) (-7822), 11, (-3505));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1242.3556F, (-7822.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1242.3556F, (-7822.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)19);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      ArrayUtils.swap(charArray0, (-7), (-1396), (int) (short) (-7822));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'X', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short) (-7822);
      floatArray0[2] = 1242.3556F;
      ArrayUtils.shift(floatArray0, (int) (short) (-7822), 11, (-3505));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1242.3556F, (-7822.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1242.3556F, (-7822.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3505);
      doubleArray0[1] = (double) 11;
      doubleArray0[2] = (double) (short) (-7822);
      doubleArray0[3] = (double) (short) (-7822);
      ArrayUtils.shift(doubleArray0, 2, 11, 113);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-3505.0), 11.0, (-7822.0), (-7822.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[5];
      longArray0[3] = (long) (byte)92;
      longArray0[1] = (long) (byte)92;
      longArray0[2] = (long) (-324);
      longArray0[3] = (long) (byte)92;
      longArray0[4] = (long) (-324);
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {92L, (-324L), 92L, (-324L), 0L}, longArray0);
      
      Float float0 = new Float(12.28900882842281);
      assertEquals(12.289009F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-324);
      ArrayUtils.shift((double[]) null, (int) (byte)92, 20, 904);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)92;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 7, 0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)92}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)14);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)92, (byte)92}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte)92, (byte)92, (byte)92, (byte)92, (byte)92}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-324.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 85, 85, (-891));
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[20];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(20, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(20, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0);
      assertEquals(5, int0);
      assertEquals(20, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1276.77F;
      floatArray0[1] = (-4407.7F);
      floatArray0[2] = (-2286.0F);
      floatArray0[3] = (-2286.0F);
      floatArray0[4] = (-4407.7F);
      floatArray0[6] = (-1127.0F);
      floatArray0[7] = 1.0F;
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 1.0F;
      floatArray1[1] = (Float) 1276.77F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1276.77F}, floatArray2, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (float)floatArray1[0];
      ArrayUtils.swap(doubleArray0, 2628, 0, 106);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, 0, 2628);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2628}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 317.9766F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2159.3713F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 317.9766F, (-1.0F), (-2159.3713F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 262);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {262}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-40);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new byte[] {(byte)81, (byte) (-40)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte) (-40)}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray2);
      assertEquals(10, booleanArray2.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      short[] shortArray0 = ArrayUtils.insert((-1432), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-7822));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-7822L), 0L}, longArray1);
      
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      Long[] longArray3 = ArrayUtils.toObject(longArray2);
      assertNotNull(longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) (long)longArray0[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {10.0, 10.0, 0.0}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-3359.97F);
      floatArray0[2] = 1109.611F;
      Byte byte1 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 1109.611F;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) 1109.611F;
      Byte byte2 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte)100, object0);
      assertNotNull(object0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, objectArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)100;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)1);
      assertNotNull(byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-86), (byte) (-86), (byte) (-86), (byte)6, (byte) (-66), (byte)100, (byte)47, (byte)100, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-86), (byte) (-86), (byte) (-86), (byte)6, (byte) (-66), (byte)100, (byte)47, (byte)100}, byteArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-110);
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short) (byte) (-86);
      shortArray0[3] = (short) (byte) (-86);
      shortArray0[4] = (short) (byte)6;
      shortArray0[5] = (short) (byte) (-110);
      shortArray0[6] = (short) (-463);
      shortArray0[7] = (short) (-465);
      shortArray0[8] = (short) (byte) (-50);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(9, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-110), (short)47, (short) (-86), (short) (-86), (short)6, (short) (-110), (short) (-463), (short) (-465), (short) (-50)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2.14589542E9F));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(intArray0, (-2267), 2034, 15);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-2159.3713F));
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) (byte)43;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int1);
      assertEquals(2, objectArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 89, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (byte)43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'K');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      objectArray0[5] = (Object) false;
      MockRandom mockRandom0 = new MockRandom(0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 83);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.1);
      assertEquals(0.1, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2.0));
      assertEquals((-2.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2.0));
      assertEquals((-2.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2103.856326);
      assertEquals(2103.856326, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1.0));
      assertEquals((-1.0), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1.0));
      assertEquals((-1.0), (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-2.0));
      assertEquals((-2.0), (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double((double) doubleArray0[4]);
      assertEquals((-1.0), (double)double7, 0.01);
      assertNotNull(double7);
      assertEquals(8, doubleArray0.length);
      assertEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      
      doubleArray0[7] = double7;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      ArrayUtils.reverse((short[]) null, 1362, 1362);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, 2147483647L);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      ArrayUtils.shuffle((Object[]) doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-691.293F), (-5821));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-98);
      Byte byte2 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte) (-98), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.insert(1419, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      float[] floatArray0 = new float[16];
      floatArray0[2] = (float) (short) (-7842);
      ArrayUtils.shift(floatArray0, (int) (short) (-7842), 3, (-3471));
      assertEquals(16, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-5472L));
      assertEquals((-5472L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1461L);
      doubleArray0[1] = (-1074.0);
      ArrayUtils.swap(doubleArray0, (int) (short)0, (int) (short)0, 83);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1461.0), (-1074.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(13, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(13, floatArray0.length);
      assertEquals(13, floatArray1.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, 'B');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2478.52874));
      assertEquals((-2478.52874), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2478.52874)}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, (-2651L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-2651L)}, longArray0);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, (-2478.52874)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2478.52874)}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, (-2478.52874)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 66, 66);
      assertNull(doubleArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)1);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)34;
      floatArray0[1] = (float) (byte)34;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = 220.00032F;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F, 34.0F, 0.0F, 0.0F, 220.00032F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 2018.76494179;
      ArrayUtils.shift(doubleArray0, 0, 2, 2);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 2018.76494179}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 229.2949857690615;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'p');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'p'}, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1805;
      shortArray0[1] = (short)1805;
      shortArray0[2] = (short)1805;
      int int1 = ArrayUtils.indexOf(doubleArray1, (-249.309), 1600.11467630279);
      assertEquals(0, int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)1805;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) (short)1805;
      objectArray0[3] = (Object) (short)1805;
      objectArray0[1] = (Object) (short)1805;
      Byte byte0 = ArrayUtils.get((Byte[]) null, 2);
      assertNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[5] = null;
      Object object1 = ArrayUtils.get(objectArray0, 2);
      assertEquals((short)1805, object1);
      assertNotNull(object1);
      assertEquals(8, objectArray0.length);
      
      objectArray0[6] = object1;
      objectArray0[7] = objectArray0[6];
      ArrayUtils.shift(objectArray0, 2, 1, 6);
      assertEquals(8, objectArray0.length);
      
      ArrayUtils.swap((Object[]) null, 2, 1, 12);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 9);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-109.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-33);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)74);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-33)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-33)}, byteArray1);
      
      ArrayUtils.shift(byteArray0, (-3514), (int) (short)2, (-1));
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-63)}, byteArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (long) (-1);
      longArray0[2] = (-995L);
      longArray0[3] = (long) (byte) (-63);
      longArray0[4] = (long) (short)2;
      longArray0[5] = (long) (byte) (-33);
      longArray0[6] = (long) (short) (-942);
      longArray0[7] = (long) (byte) (-63);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)74);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {74L, 2L, (-1L), (-995L), (-63L), 2L, (-33L), (-942L), (-63L)}, longArray1);
      assertArrayEquals(new long[] {2L, (-1L), (-995L), (-63L), 2L, (-33L), (-942L), (-63L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)2, (short)4272);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)4272}, shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, 1676);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-2)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3368.5F);
      floatArray0[1] = 317.9766F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-2159.3713F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-3368.5F), 317.9766F, (-1.0F), (-2159.3713F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 262);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {262}, intArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Integer integer0 = new Integer(1384);
      assertEquals(1384, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray1 = ArrayUtils.toPrimitive((Integer[]) null, 47);
      assertNull(intArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1384;
      floatArray0[1] = (float) 47;
      floatArray0[2] = (float) 47;
      floatArray0[3] = (float) 1384;
      floatArray0[4] = (float) 47;
      floatArray0[5] = (-214.83658F);
      floatArray0[6] = (float) 1384;
      floatArray0[7] = (float) 1384;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1384.0F, 47.0F, 47.0F, 1384.0F, 47.0F, (-214.83658F), 1384.0F, 1384.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2147483638));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)92;
      longArray0[1] = (long) (byte)92;
      longArray0[2] = (long) (-324);
      longArray0[3] = (long) (byte)92;
      longArray0[4] = (long) (-324);
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {92L, (-324L), 92L, (-324L), 92L}, longArray0);
      
      Float float0 = new Float(0.7);
      assertEquals(0.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) (-324);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)92;
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 'n';
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'n', 'n', '\u0000', 'n'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, (-324), 8, (-324));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 51, (byte)92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = 220.00032F;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 220.00032F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray1 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      ArrayUtils.shift(longArray0, 0, (int) (byte)0, (-1568));
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[2] = long0;
      Short[] shortArray1 = new Short[3];
      shortArray0[0] = (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[2]);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)36;
      Byte byte1 = Byte.valueOf((byte)36);
      assertEquals((byte)36, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)36);
      assertEquals((byte)36, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)114;
      Byte byte6 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[5] = byte7;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)byte0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertFalse(byte0 == byte5);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) shortArray1[1]);
      assertTrue(boolean1);
      assertEquals(9, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte5;
      intArray0[1] = (int) (byte) (-95);
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) (short)shortArray1[1];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {114, (-95), 36, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) null, 2, 2, 2);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1112.5F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 2.0F, 2.0F, 1112.5F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-125);
      intArray0[1] = 1121;
      intArray0[2] = 2;
      intArray0[3] = (-1);
      ArrayUtils.shift(intArray0, (-1), 1655, (-5761));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1121, 2, (-1), (-125)}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 0.0F);
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 2.0F, 2.0F, 1112.5F, (-1.0F)}, floatArray0, 0.01F);
      
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean2 = ArrayUtils.contains(intArray0, (-5761));
      assertFalse(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {1121, 2, (-1), (-125)}, intArray0);
      
      Short[] shortArray0 = new Short[9];
      Short short0 = new Short((byte) (-125));
      assertEquals((short) (-125), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short short1 = (short)2;
      Short short2 = new Short((short)2);
      assertEquals((short)2, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short((byte) (-125));
      assertEquals((short) (-125), (short)short3);
      assertNotNull(short3);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short((byte) (-125));
      assertEquals((short) (-125), (short)short4);
      assertNotNull(short4);
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)80);
      assertEquals((short)80, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) shortArray0[2]);
      assertEquals((short) (-125), (short)short6);
      assertNotNull(short6);
      assertEquals(9, shortArray0.length);
      assertTrue(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short4));
      
      shortArray0[5] = short6;
      Short short7 = new Short((short)2);
      assertEquals((short)2, (short)short7);
      assertNotNull(short7);
      assertTrue(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertTrue(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short4));
      
      shortArray0[6] = short7;
      Short short8 = new Short(short1);
      assertEquals((short)2, (short)short8);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short0));
      assertTrue(short8.equals((Object)short1));
      assertTrue(short8.equals((Object)short2));
      assertTrue(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short6));
      
      shortArray0[7] = short8;
      Short short9 = new Short((short)80);
      assertEquals((short)80, (short)short9);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short4));
      assertTrue(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short7));
      
      shortArray0[8] = short9;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-125), (short)2, (short) (-125), (short) (-125), (short)80, (short) (-125), (short)2, (short)2, (short)80}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 4, 5}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.contains(longArray0, (-2171L));
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-283L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-283L)}, longArray0);
      assertArrayEquals(new long[] {(-283L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[3] = 0L;
      longArray0[4] = 2543L;
      longArray0[5] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (byte)18;
      shortArray0[1] = (short) (byte)18;
      ArrayUtils.shift(shortArray0, (int) (byte)121, (-2298), (-1074));
      assertEquals(18, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)18, (-1074));
      assertEquals(0, int0);
      assertEquals(18, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)121;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 941.0;
      doubleArray0[4] = (double) (-1074);
      doubleArray0[5] = (double) (byte)18;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)18);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {121.0, 0.0, 0.0, 941.0, (-1074.0), 18.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(43, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[14];
      longArray0[0] = 1135L;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = 382L;
      longArray0[4] = 382L;
      longArray0[5] = 382L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1185L);
      assertNotNull(longArray1);
      assertEquals(14, longArray0.length);
      assertEquals(15, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ArrayUtils.reverse(charArray0, (-3122), 4246);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-4008));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1495.8909F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1495.8909F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray0, (-1), (-1), (-1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurences(doubleArray1, 1019.304891763);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((short) (-594));
      assertEquals((short) (-594), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)377);
      assertEquals((short)377, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-2028));
      assertEquals((short) (-2028), (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[1]);
      assertEquals((short)377, (short)short3);
      assertNotNull(short3);
      assertEquals(4, shortArray0.length);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-5492L));
      assertEquals((-5492L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.swap(shortArray0, (int) (short)0, (-1458), (int) (short)3099);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, (-1458));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)9}, byteArray1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)9;
      floatArray0[1] = (float) (byte)9;
      floatArray0[2] = (float) (short)3099;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {9.0F, 9.0F, 3099.0F}, floatArray0, 0.01F);
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.toArray(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-5472L));
      assertEquals((-5472L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = 'b';
      charArray0[2] = 'H';
      charArray0[3] = '0';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'b';
      charArray1[1] = '+';
      charArray1[2] = 'b';
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray1);
      assertNotNull(charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertEquals(7, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'0', 'b', 'H', '0'}, charArray0);
      assertArrayEquals(new char[] {'b', '+', 'b'}, charArray1);
      assertArrayEquals(new char[] {'0', 'b', 'H', '0', 'b', '+', 'b'}, charArray2);
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)82);
      assertEquals((byte)82, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(charArray1, (java.util.Random) mockRandom0);
      assertEquals(3, charArray1.length);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertArrayEquals(new char[] {'+', 'b', 'b'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      Float float0 = new Float(1933.04854241);
      assertEquals(1933.0486F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-292L));
      assertEquals((-292.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(2573.9519482458313);
      assertEquals(2573.952F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[7];
      Float float3 = new Float(3395.0);
      assertEquals(3395.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      floatArray0[0] = float3;
      floatArray0[1] = float0;
      floatArray0[2] = float2;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float2;
      floatArray0[6] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 80.2434F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {3395.0F, 1933.0486F, 2573.952F, 1933.0486F, 1933.0486F, 2573.952F, 1933.0486F}, floatArray1, 0.01F);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Byte byte1 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-82));
      assertEquals((byte) (-82), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte0;
      byteArray0[3] = byte1;
      Byte byte3 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[4] = byte3;
      byteArray0[5] = byte0;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(charArray0, charArray1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      Short short0 = new Short((short) (-92));
      assertEquals((short) (-92), (short)short0);
      assertNotNull(short0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-92);
      shortArray0[1] = (short) (-92);
      shortArray0[2] = (short) (-92);
      shortArray0[3] = (short) (-92);
      shortArray0[4] = (short) (-92);
      short[] shortArray1 = new short[6];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-92);
      shortArray1[1] = (short) (-92);
      shortArray1[2] = (short)510;
      shortArray1[3] = (short)5708;
      shortArray1[4] = (short) (-92);
      shortArray1[5] = (short) (-92);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-92), (short) (-92), (short) (-92), (short) (-92), (short) (-92)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-92), (short) (-92), (short)510, (short)5708, (short) (-92), (short) (-92)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, (int) (byte)2, (int) (byte)2, (int) (short)2);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-12161), 2727);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 11);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = new Byte[20];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray3, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte4 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray3, (Object) byte4);
      assertEquals((-1), int0);
      assertEquals(20, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) byte0, (int) byte0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert((-1766), shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)32);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Byte[] byteArray2 = new Byte[6];
      byteArray2[0] = (Byte) (byte)32;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[1] = byte0;
      byteArray2[2] = (Byte) (byte)32;
      byteArray2[3] = (Byte) (byte)32;
      byteArray2[4] = (Byte) (byte)32;
      byteArray2[5] = (Byte) (byte)32;
      Byte[] byteArray3 = new Byte[5];
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = byte0;
      byteArray3[1] = (Byte) (byte)32;
      byteArray3[2] = (Byte) (byte)32;
      Byte byte1 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray3[3] = byte1;
      byteArray3[4] = (Byte) (byte)32;
      Byte[] byteArray4 = ArrayUtils.removeElements(byteArray2, byteArray3);
      assertNotNull(byteArray4);
      assertEquals(2, byteArray4.length);
      assertEquals(6, byteArray2.length);
      assertEquals(5, byteArray3.length);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      int[] intArray0 = null;
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, 17);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {17}, intArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-3948);
      shortArray0[2] = (short) (byte) (-49);
      shortArray0[3] = (short) (-3948);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-49);
      shortArray0[6] = (short) (byte) (-49);
      shortArray0[7] = (short)1434;
      shortArray0[8] = (short) (-3948);
      ArrayUtils.swap(shortArray0, (int) (short) (-49), (int) (byte)0, 15);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-3948), (short) (-49), (short) (-3948), (short)0, (short) (-49), (short) (-49), (short)1434, (short) (-3948)}, shortArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 84, (int) (short)1434);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {17}, intArray1);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[17];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(17, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'3', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1437L);
      longArray0[1] = (long) 7;
      longArray0[2] = (long) '3';
      longArray0[3] = (long) (-1571);
      longArray0[4] = (long) (byte)2;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, 1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1437L), 7L, 51L, (-1571L), 2L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {382L, 406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (int) (byte)2, 93);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, 37);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, 119L, 1);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {406L, 0L, 0L, 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 321);
      assertEquals(1, int1);
      assertEquals(2, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)121);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)121}, byteArray1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1624.534F);
      floatArray0[1] = (-1624.534F);
      byte[] byteArray0 = new byte[4];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, 1);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-1624.534F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray3);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray3.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1624.534F));
      assertEquals((-1624.5340576171875), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)269);
      assertEquals(269.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1624.534F));
      assertEquals((-1624.5340576171875), (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((float[]) null, (int) (short)269);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 269, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 467;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) 467;
      doubleArray0[3] = (double) 467;
      double[] doubleArray1 = new double[10];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 467;
      doubleArray1[2] = 0.1;
      doubleArray1[3] = 0.1;
      doubleArray1[4] = (double) 467;
      doubleArray1[5] = 0.1;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {467.0, 0.1, 467.0, 467.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 467.0, 0.1, 0.1, 467.0, 0.1, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {467.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (int) (byte)2);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = 'b';
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[7];
      floatArray0[1] = 645.0F;
      Float float0 = new Float(99.0F);
      assertEquals(99.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2056.0));
      assertEquals((-2056.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, 645.0F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 645.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray1, 2146752722, (-2800));
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'k');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'k'}, charArray1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-256.1F));
      assertEquals((-256.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short) (-7830));
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-256.1F), (-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-256.1F), (-1.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.swap((Object[]) floatArray0, 40, (int) (short) (-7830));
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-5472.0F);
      floatArray0[2] = (-5472.0F);
      floatArray0[3] = 1825.0F;
      Double double0 = new Double(262.0);
      assertEquals(262.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1128.3);
      assertEquals(1128.3, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(3.0);
      assertEquals(3.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double2;
      doubleArray0[1] = double2;
      doubleArray0[2] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1222.59575711776));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {3.0, 3.0, 262.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1266);
      intArray0[1] = 125;
      intArray0[2] = (-3279);
      intArray0[3] = (-1);
      intArray0[5] = (-622);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1266), 125, (-3279), (-1), 0, (-622)}, intArray0);
      
      ArrayUtils.swap((Object[]) doubleArray0, (-2167), 1);
      assertEquals(3, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 125);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 125, (-3171), (-1155));
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 201.13;
      doubleArray0[1] = (-1218.2264719282);
      doubleArray0[2] = 201.13;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2893.0, (-802), 66.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 96, (int) (byte)26);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-59), (byte) (-81), (byte)26, (byte)3, (byte) (-66)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 96);
      assertEquals(3, int1);
      assertEquals(4, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)125);
      assertEquals((-1), int2);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-59), (byte) (-81), (byte)26, (byte)3, (byte) (-66)}, byteArray0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)1144);
      assertEquals((short)1144, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1144);
      assertEquals((short)1144, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      shortArray0[2] = shortArray0[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[0]);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1144, (short)1144, (short)1144}, shortArray1);
      
      Byte byte0 = new Byte((byte) (-53));
      assertEquals((byte) (-53), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) byte0, (int) shortArray0[0]);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
      
      Long long0 = new Long(25);
      assertEquals(25L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.valueOf((long) (byte) (-53));
      assertEquals((-53L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(25);
      assertEquals(25L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      
      Long long3 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      
      Long long4 = new Long((long) shortArray0[1]);
      assertEquals(1144L, (long)long4);
      assertNotNull(long4);
      assertEquals(3, shortArray0.length);
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      
      Long[] longArray0 = new Long[6];
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[0] = long5;
      longArray0[1] = long2;
      longArray0[2] = long4;
      longArray0[3] = long0;
      longArray0[4] = long4;
      longArray0[5] = long1;
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-59);
      Byte byte3 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      byte byte4 = (byte)26;
      Byte byte5 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[2] = byte5;
      Byte byte6 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[3] = byte6;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[2] = long0;
      Short[] shortArray1 = new Short[3];
      shortArray0[0] = (short)0;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) shortArray1[2]);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray2);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)36;
      Byte byte1 = Byte.valueOf((byte)36);
      assertEquals((byte)36, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)36);
      assertEquals((byte)36, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)114;
      Byte byte6 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      
      byteArray0[5] = byte7;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) shortArray1[1]);
      assertTrue(boolean1);
      assertEquals(9, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte5;
      intArray0[1] = (int) (byte) (-95);
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) (short)shortArray1[1];
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2);
      assertEquals(4, intArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {114, (-95), 36, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(17, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      short[] shortArray1 = ArrayUtils.insert((int) (short)1, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.add(shortArray1, 0, (short)1);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(7, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y'}, charArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'Y';
      longArray0[1] = (long) 'Y';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) (-1571);
      longArray0[4] = (-3271L);
      longArray0[5] = (long) 'Y';
      longArray0[6] = (long) 'Y';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-208), 7);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {89L, 89L, 89L, (-1571L), (-3271L), 89L, 89L}, longArray0);
      assertArrayEquals(new long[] {89L, 89L, 89L, (-1571L), (-3271L), 89L, 89L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert((-823), (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3948);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte) (-70);
      shortArray0[3] = (short) (byte) (-70);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-70);
      ArrayUtils.swap(shortArray0, 20, (int) (short) (-70), (int) (byte) (-70));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3948), (short) (-70), (short) (-70), (short) (-70), (short)0, (short)0, (short) (-70)}, shortArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 72, (int) (short) (-70));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object3);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-70), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert(467, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (-3631);
      shortArray0[2] = (short) (-3631);
      shortArray0[3] = (short) (-3631);
      shortArray0[4] = (short) (-466);
      shortArray0[5] = (short) (-3631);
      shortArray0[6] = (short) (-3631);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short) (-3631), (short) (-3631), (short) (-3631), (short) (-466), (short) (-3631), (short) (-3631)}, shortArray0);
      
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-3631);
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (short) (-3631);
      doubleArray0[3] = 1093.5;
      doubleArray0[4] = (double) (short) (-27);
      doubleArray0[5] = (double) (short) (-3631);
      doubleArray0[6] = 950.7647;
      doubleArray0[7] = (-1063.335394);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3631.0), 2.0, (-3631.0), 1093.5, (-27.0), (-3631.0), 950.7647, (-1063.335394)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3631.0), 2.0, (-3631.0), 1093.5, (-27.0), (-3631.0), 950.7647, (-1063.335394)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-3631);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 81, 996);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-3631L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-45), (-5284));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-15645.0));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-820L);
      longArray0[1] = 1548L;
      longArray0[2] = (-119L);
      longArray0[3] = 102L;
      longArray0[4] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1548L);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-820L), 1548L, (-119L), 102L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 185L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {185L}, longArray0);
      
      ArrayUtils.reverse((char[]) null, (int) (byte)2, (-1));
      ArrayUtils.shift((char[]) null, Integer.MAX_VALUE);
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = ArrayUtils.insert(339, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Integer integer0 = new Integer(17);
      assertEquals(17, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte)2);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(6);
      assertEquals(6, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 801);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1}, byteArray1);
      
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      Byte byte0 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift(booleanArray1, (-3695), (int) (byte)1, 93);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true, (-2193));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      ArrayUtils.swap((float[]) null, (-1), 1317, (-1625));
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Boolean boolean0 = new Boolean("]>CDI@;21A+");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, (int) (byte)2);
      assertEquals(2, int0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1624.534F);
      floatArray0[1] = (-1624.534F);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)12, (byte) (-119)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)12, (byte) (-119)}, byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("/lw}-wG6exLZI&;=");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)12;
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {12L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {12L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      boolean boolean1 = ArrayUtils.contains(charArray0, '&');
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'e', '&', '&', '&'}, charArray0);
      
      boolean boolean2 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean2);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = (boolean) boolean0;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = (boolean) boolean0;
      booleanArray1[4] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true, 0);
      assertEquals((-1), int0);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '4';
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, (-1416));
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-744);
      shortArray0[1] = (short)21408;
      shortArray0[2] = (short)939;
      shortArray0[3] = (short)322;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1633);
      shortArray0[6] = (short)49;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(7, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-744), (short)21408, (short)939, (short)322, (short)0, (short) (-1633), (short)49}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[2] = '6';
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', '\u0000', '6', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'-', '6', '\u0000', '6', '\u0000'}, charArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '6';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) '-';
      intArray0[3] = (int) '-';
      intArray0[4] = (int) '|';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {54, 45, 45, 45, 124}, intArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 124;
      objectArray0[1] = (Object) 124;
      objectArray0[2] = (Object) 124;
      objectArray0[3] = (Object) 45;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertEquals(124, object0);
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(0, int0);
      assertEquals(4, objectArray0.length);
      
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 45;
      floatArray0[1] = (float) 45;
      floatArray0[2] = 6.0F;
      floatArray0[3] = (float) 45;
      floatArray0[4] = (float) '|';
      floatArray0[5] = (float) 'd';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 45, 17);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {45.0F, 45.0F, 6.0F, 45.0F, 124.0F, 100.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        bitSet0.get((-2581), 45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -2581
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1127.0F);
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (-2064), 999);
      assertEquals((-1), int0);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {(-1127.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1127.0F);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-981.6385982);
      doubleArray0[3] = (double) 999;
      doubleArray0[4] = (double) 999;
      doubleArray0[5] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1127.0F));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1127.0), (-1.0), (-981.6385982), 999.0, 999.0, (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 999.0;
      objectArray0[1] = (Object) 999.0;
      objectArray0[2] = (Object) (-981.6385982);
      Byte byte0 = Byte.valueOf((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.indexOf(objectArray0, (Object) byte0, 581);
      assertEquals((-1), int1);
      assertEquals(3, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 16;
      ArrayUtils.shift(doubleArray0, (-1734), 1, 1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {16.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)2;
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), (-470), 1226);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte)2, (byte) (-16), (byte) (-16), (byte)2}, byteArray0);
      
      Integer integer0 = new Integer((-775));
      assertEquals((-775), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, 177, (int) (byte) (-16), (int) (byte) (-16));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-16), (byte) (-16), (byte) (-16), (byte) (-16), (byte)2, (byte) (-16), (byte) (-16), (byte)2}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-16);
      shortArray0[1] = (short) (byte) (-16);
      ArrayUtils.shift(shortArray0, 1, (-193), (int) (byte)2);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1114), 2);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      ArrayUtils.shift((boolean[]) null, 2054114793);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray0);
      assertArrayEquals(new byte[] {(byte)12, (byte)12}, byteArray1);
      
      Boolean boolean0 = new Boolean("/lw}-wG6exLZI&;=");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-699L), (int) (byte)12);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)12;
      boolean boolean2 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {12.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-3772.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)101;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-3772.5);
      objectArray0[2] = (Object) (-3772.5);
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-110));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences((double[]) null, 1.0);
      assertNull(doubleArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short)4;
      shortArray0[3] = (short)3910;
      shortArray0[4] = (short) (byte)119;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5, 499);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)4, (short)4, (short)4, (short)3910, (short)119}, shortArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)5;
      longArray0[2] = (long) (short)4;
      longArray0[3] = (long) (short)3910;
      longArray0[4] = (long) (short)4;
      longArray0[5] = (long) 499;
      longArray0[6] = (long) (short)5;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 5L, 4L, 3910L, 4L, 499L, 5L}, longArray0);
      
      Double[] doubleArray3 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-1.0F);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) Float.NaN;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3782.808702, (-125), 1660.1);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, (-1.0), Double.NaN, Double.NaN, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-125);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2142005372), 1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-125)}, intArray0);
      assertArrayEquals(new int[] {(-125)}, intArray1);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-125), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -125, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-86);
      Byte byte1 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = new Byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte1;
      byteArray1[2] = (Byte) byte0;
      byteArray1[2] = byte1;
      byteArray1[4] = byte1;
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte0, byteArray2, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -86, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1276.77F;
      floatArray0[1] = (-4407.7F);
      floatArray0[2] = (-2286.0F);
      floatArray0[3] = (-2286.0F);
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1.0F));
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {5, 2}, intArray0);
      assertArrayEquals(new int[] {5, 2, 5, 2}, intArray1);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 5);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)845;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1146;
      shortArray0[4] = (short) (-660);
      shortArray0[5] = (short)1693;
      shortArray0[6] = (short)35;
      shortArray0[7] = (short)2;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new short[] {(short)19, (short)845, (short)1146, (short) (-660), (short)35, (short)2, (short)0}, shortArray1);
      assertArrayEquals(new int[] {5, 2}, intArray0);
      assertArrayEquals(new int[] {5, 2, 5, 2}, intArray1);
      assertArrayEquals(new short[] {(short)19, (short)845, (short) (-1), (short)1146, (short) (-660), (short)1693, (short)35, (short)2, (short)0}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'B';
      charArray0[2] = 'S';
      charArray0[3] = 'y';
      charArray0[4] = 'n';
      charArray0[5] = '|';
      charArray0[6] = '%';
      charArray0[7] = 'p';
      charArray0[8] = '=';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'I', 'B', 'S', 'y', 'n', '|', '%', 'p', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-58);
      shortArray0[2] = (short) (byte) (-58);
      shortArray0[3] = (short) (byte) (-58);
      shortArray0[4] = (short) (byte)119;
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte)119;
      ArrayUtils.shift(shortArray0, (int) (short) (-1), (int) (byte)119, (-1));
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-58), (short) (-58), (short) (-58), (short)119, (short) (-1), (short) (-1), (short)119, (short) (-1)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) (-1), (-1897));
      assertEquals(4, int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-58), (short) (-58), (short) (-58), (short)119, (short) (-1), (short) (-1), (short)119, (short) (-1)}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3948.0));
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 9);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-109.0);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)2;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-92.0);
      doubleArray0[8] = (double) (short)2;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-92.0), 2, (-824.0));
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-109.0), 2.0, (-1.0), 0.0, 0.0, 2.0, (-1.0), (-92.0), 2.0}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte2;
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object2);
      assertSame(object2, object0);
      assertSame(object2, object1);
      
      Object object3 = ArrayUtils.get(objectArray0, (int) 8, object2);
      assertNotNull(object3);
      assertEquals(0, objectArray0.length);
      assertSame(object0, object3);
      assertSame(object0, object1);
      assertSame(object0, object2);
      assertSame(object1, object0);
      assertSame(object1, object3);
      assertSame(object1, object2);
      assertSame(object2, object3);
      assertSame(object2, object0);
      assertSame(object2, object1);
      assertSame(object3, object1);
      assertSame(object3, object2);
      assertSame(object3, object0);
      
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) doubleArray0);
      assertNotNull(objectArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      longArray0[1] = (long) 0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'J';
      charArray0[2] = 'l';
      int int0 = ArrayUtils.indexOf(charArray0, 'l', (-1314));
      assertEquals(0, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'l', 'J', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (int) (byte)2);
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Integer integer0 = new Integer((byte)2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-349);
      shortArray0[1] = (short) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-17312), (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-349), (short)2}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (-2449), 48);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)3;
      byteArray1[1] = (Byte) (byte)3;
      byteArray1[2] = (Byte) (byte)3;
      byteArray1[3] = (Byte) (byte)3;
      Byte[] byteArray2 = ArrayUtils.insert((int) 3, byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      Double double0 = new Double(801.781);
      assertEquals(801.781, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = ArrayUtils.insert(561, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-32);
      Byte byte1 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)51;
      Byte byte3 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-32), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      byte byte5 = (byte) (-1);
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      
      byteArray0[4] = byte7;
      Byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (byte)7;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) byte5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) byte2, (int) (byte) (-1));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(5, doubleArray0.length);
      assertFalse(byte2 == byte5);
      assertFalse(byte2 == byte0);
      assertArrayEquals(new double[] {1.5, 7.0, 1.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray1, (int) byte0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = 'j';
      charArray0[2] = '9';
      charArray0[3] = 'B';
      charArray0[4] = 'w';
      charArray0[5] = 'i';
      charArray0[6] = ';';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '9');
      assertNotNull(charArray1);
      assertEquals(7, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', 'j', '9', 'B', 'w', 'i', ';'}, charArray0);
      assertArrayEquals(new char[] {'9', 'o', 'j', '9', 'B', 'w', 'i', ';'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-580.31351226);
      doubleArray0[1] = 626.7667009799694;
      doubleArray0[2] = 1.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-580.31351226), 626.7667009799694, 1.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 128, 128, (-2693));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-323);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-160);
      shortArray0[4] = (short)5019;
      shortArray0[5] = (short)728;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-323));
      assertEquals(0, int0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-323), (short) (-1), (short)32, (short) (-160), (short)5019, (short)728}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      Byte[] byteArray0 = new Byte[0];
      Byte byte1 = ArrayUtils.get(byteArray0, 1518, byte0);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, 1853);
      assertEquals(4, int0);
      assertEquals(5, objectArray0.length);
      assertEquals(0, byteArray0.length);
      
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.valueOf((-1247L));
      assertEquals((-1247L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(1853);
      assertEquals(1853L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long long3 = new Long(1853);
      assertEquals(1853L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long2));
      
      Long long4 = new Long(615L);
      assertEquals(615L, (long)long4);
      assertNotNull(long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long0));
      
      Long[] longArray0 = new Long[4];
      longArray0[0] = long4;
      longArray0[1] = long4;
      Long long5 = new Long(4);
      assertEquals(4L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      
      longArray0[2] = long5;
      longArray0[3] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {615L, 615L, 4L, (-1247L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 3765);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)43;
      shortArray0[2] = (short)1518;
      shortArray0[3] = (short) (byte)43;
      shortArray0[4] = (short) (byte)43;
      shortArray0[5] = (short)1518;
      shortArray0[6] = (short)1518;
      shortArray0[7] = (short) (byte)43;
      shortArray0[8] = (short)1;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-934));
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)43, (short)0, (short)1518, (short)43, (short)43, (short)1518, (short)1518, (short)43, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2.14589542E9F));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift(intArray0, (-2267), 2034, 15);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (-2159.3713F));
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short)1;
      objectArray0[1] = (Object) (short)43;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int1);
      assertEquals(2, objectArray0.length);
      assertFalse(int1 == int0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 89, 0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)43);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)20);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Byte[] byteArray1 = new Byte[3];
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray1[2] = byte2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean0);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.swap(longArray0, (-3882), (-2267), 322);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 2543L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)20;
      ArrayUtils.shift(intArray0, 111, 111, 106);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {20}, intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (-269));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {20}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 201.13;
      doubleArray0[1] = (double) 0L;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1218.2264719282), (int) (byte)2, 201.13);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {201.13, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)2;
      byte[] byteArray0 = new byte[0];
      int int1 = 52;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 52, (-1));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {201.13, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {201.13, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte) (-110);
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (-2065);
      floatArray0[4] = (float) (byte) (-110);
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1), (-49.855846F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 4855;
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertArrayEquals(new char[] {'G', 'G'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[5] = 2722L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'e';
      charArray0[2] = '=';
      charArray0[3] = '}';
      char[] charArray1 = ArrayUtils.addAll((char[]) null, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'e', '=', '}'}, charArray0);
      assertArrayEquals(new char[] {'V', 'e', '=', '}'}, charArray1);
      
      Byte byte0 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-90);
      Byte byte2 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      LongStream longStream0 = mockRandom1.longs();
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (java.util.Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)531;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)531, (short) (-1), (short)0}, shortArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-2651L);
      floatArray0[1] = (-1624.534F);
      floatArray0[2] = (float) (short)531;
      floatArray0[3] = (float) (short)1518;
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = 1708.0F;
      floatArray0[6] = (float) (short)531;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-2651.0F), (-1624.534F), 531.0F, 1518.0F, (-1.0F), 1708.0F, 531.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)531;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      ArrayUtils.shift(intArray0, (int) (short) (-1), (int) (short)1, (int) (short)531);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {531, 1, 1}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) (short)531);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2651.0F), (-1624.534F), 531.0F, 1518.0F, (-1.0F), 1708.0F, 531.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertEquals((-1), int1);
      assertEquals(0, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      Byte byte0 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      long[] longArray0 = ArrayUtils.insert((int) (byte)70, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'I';
      charArray0[2] = '#';
      charArray0[3] = 'K';
      charArray0[4] = '(';
      charArray0[5] = 'E';
      charArray0[6] = 'Y';
      int int0 = ArrayUtils.indexOf(charArray0, 'E');
      assertEquals(5, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'-', 'I', '#', 'K', '(', 'E', 'Y'}, charArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-4766);
      shortArray0[1] = (short)1021;
      shortArray0[2] = (short)84;
      ArrayUtils.shift(shortArray0, (int) (short) (-4766), 5, 0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4766), (short)1021, (short)84}, shortArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1021;
      longArray0[1] = (long) 'E';
      longArray0[2] = (long) 'Y';
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)108);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte)91;
      Byte byte3 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[1] = byte4;
      byte byte5 = (byte)89;
      Byte byte6 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray0[2] = byte6;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      
      Byte byte8 = ArrayUtils.get(byteArray0, (int) byte2, byte7);
      assertEquals((byte) (-1), (byte)byte8);
      assertNotNull(byte8);
      assertEquals(6, byteArray0.length);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte5);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)byte7));
      assertTrue(object0.equals((Object)byte4));
      assertFalse(object0.equals((Object)byte6));
      assertFalse(object0.equals((Object)byte5));
      assertFalse(object0.equals((Object)byte8));
      assertTrue(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte5);
      
      Byte byte9 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte5);
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)object0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (byte)91, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) byte5, (int) (short) (-543), (double) (short)108);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(0, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(byte5 == byte0);
      assertFalse(byte5 == byte2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(bitSet0, bitSet1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'F';
      charArray0[2] = 'L';
      charArray0[3] = 'Y';
      charArray0[4] = 'l';
      charArray0[5] = 'F';
      charArray0[6] = 'e';
      charArray0[7] = 'p';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'y', 'F', 'L', 'Y', 'l', 'F', 'e', 'p'}, charArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3808.7178F);
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (-3808.7178F);
      floatArray0[3] = (-3359.97F);
      floatArray0[4] = (-3359.97F);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = new boolean[7];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray0.length);
      assertEquals(1, booleanArray2.length);
      assertEquals(7, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = ArrayUtils.insert((-1685), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, true, false, true, false}, booleanArray2));
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = 2893.0F;
      floatArray0[2] = (float) (-1685);
      floatArray0[3] = 2893.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 2893.0F, 93);
      assertEquals((-1), int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2893.0F, (-1685.0F), 2893.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray1);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte1, 577);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse((Object[]) null, (int) (byte)25, (int) (byte)0);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte3;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = object0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)25, 0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert((-1766), shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2402, 155);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)122;
      shortArray0[2] = (short) (byte)122;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)51, (int) (short)51);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)51, (short)122, (short)122, (short)51, (short)51}, shortArray0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) byte0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-7822));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-7822L), 0L}, longArray1);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-7822);
      doubleArray0[1] = (double) (short) (-7822);
      doubleArray0[2] = (double) (short)shortArray1[0];
      doubleArray0[3] = (double) (long)longArray0[2];
      doubleArray0[4] = (double) (short) (-7822);
      doubleArray0[5] = (double) (short)shortArray1[0];
      doubleArray0[6] = (double) (long)longArray0[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-7822.0), (int) shortArray1[0], (-7822.0));
      assertEquals((-1), int0);
      assertEquals(3, shortArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-7822.0), (-7822.0), 0.0, 0.0, (-7822.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0, (int) shortArray1[0], 3856);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, shortArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9L;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 9L;
      objectArray0[1] = (Object) 9L;
      objectArray0[2] = (Object) 9L;
      objectArray0[3] = (Object) 9L;
      ArrayUtils.swap(objectArray0, (-2220), 3986, 2655);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = '.';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', '.', '.', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(17, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[2] = (float) '`';
      ArrayUtils.swap(floatArray0, (-1), (-638), (-1));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, 0.0F, 96.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-1), (-638));
      assertNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray2);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray2.length);
      assertEquals(0, stringArray0.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, (-2144557920), (-2144557920), 5);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)20;
      Byte byte3 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      byte byte4 = (byte)48;
      Byte byte5 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[2] = byte5;
      byte byte6 = (byte) (-112);
      Byte byte7 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      
      byteArray0[3] = byte7;
      Byte byte8 = new Byte(byte6);
      assertEquals((byte) (-112), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte4);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte7));
      
      byteArray0[4] = byte8;
      Byte byte9 = new Byte(byte6);
      assertEquals((byte) (-112), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte4);
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte6));
      
      byteArray0[5] = byte9;
      Byte byte10 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte10);
      assertNotNull(byte10);
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte8));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte3));
      
      byteArray0[6] = byte10;
      Byte byte11 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte11);
      assertNotNull(byte11);
      assertFalse(byte11.equals((Object)byte7));
      assertFalse(byte11.equals((Object)byte9));
      assertFalse(byte11.equals((Object)byte4));
      assertFalse(byte11.equals((Object)byte5));
      assertFalse(byte11.equals((Object)byte10));
      assertFalse(byte11.equals((Object)byte6));
      assertFalse(byte11.equals((Object)byte8));
      assertTrue(byte11.equals((Object)byte1));
      assertTrue(byte11.equals((Object)byte0));
      assertFalse(byte11.equals((Object)byte3));
      assertFalse(byte11.equals((Object)byte2));
      
      byteArray0[7] = byte11;
      Byte byte12 = new Byte(byte2);
      assertEquals((byte)20, (byte)byte12);
      assertNotNull(byte12);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte0);
      assertTrue(byte12.equals((Object)byte3));
      assertTrue(byte12.equals((Object)byte2));
      assertFalse(byte12.equals((Object)byte4));
      assertFalse(byte12.equals((Object)byte5));
      assertFalse(byte12.equals((Object)byte0));
      assertFalse(byte12.equals((Object)byte10));
      assertFalse(byte12.equals((Object)byte11));
      assertFalse(byte12.equals((Object)byte6));
      assertFalse(byte12.equals((Object)byte8));
      assertFalse(byte12.equals((Object)byte7));
      assertFalse(byte12.equals((Object)byte9));
      assertFalse(byte12.equals((Object)byte1));
      
      byteArray0[8] = byte12;
      Byte byte13 = new Byte(byte4);
      assertEquals((byte)48, (byte)byte13);
      assertNotNull(byte13);
      assertFalse(byte13.equals((Object)byte0));
      assertFalse(byte13.equals((Object)byte11));
      assertFalse(byte13.equals((Object)byte3));
      assertFalse(byte13.equals((Object)byte6));
      assertTrue(byte13.equals((Object)byte4));
      assertFalse(byte13.equals((Object)byte12));
      assertTrue(byte13.equals((Object)byte5));
      assertFalse(byte13.equals((Object)byte1));
      assertFalse(byte13.equals((Object)byte2));
      assertFalse(byte13.equals((Object)byte8));
      assertFalse(byte13.equals((Object)byte9));
      assertFalse(byte13.equals((Object)byte7));
      assertTrue(byte13.equals((Object)byte10));
      assertFalse(byte4 == byte6);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) byte0, byte13);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte4);
      assertFalse(byte13.equals((Object)byte0));
      assertFalse(byte13.equals((Object)byte11));
      assertFalse(byte13.equals((Object)byte3));
      assertFalse(byte13.equals((Object)byte6));
      assertTrue(byte13.equals((Object)byte4));
      assertFalse(byte13.equals((Object)byte12));
      assertTrue(byte13.equals((Object)byte5));
      assertFalse(byte13.equals((Object)byte1));
      assertFalse(byte13.equals((Object)byte2));
      assertFalse(byte13.equals((Object)byte8));
      assertFalse(byte13.equals((Object)byte9));
      assertFalse(byte13.equals((Object)byte7));
      assertTrue(byte13.equals((Object)byte10));
      assertFalse(byte4 == byte6);
      assertFalse(byte4 == byte2);
      assertFalse(byte4 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, 9);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-109.0);
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (short)2;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-92.0);
      doubleArray0[8] = (double) (short)2;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-92.0), 2, (-824.0));
      assertEquals((-1), int1);
      assertEquals(9, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-109.0), 2.0, (-1.0), 0.0, 0.0, 2.0, (-1.0), (-92.0), 2.0}, doubleArray0, 0.01);
      
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2744), (-1));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-59);
      byteArray2[1] = (byte) (-73);
      byteArray2[2] = (byte) (-59);
      byteArray2[3] = byte0;
      byteArray2[4] = (byte)20;
      byteArray2[5] = (byte) (-59);
      byteArray2[6] = byte0;
      byteArray2[7] = (byte)8;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, (-372));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -372, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      long[] longArray2 = ArrayUtils.insert(2756, longArray0, longArray0);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 127;
      doubleArray0[1] = (double) 127;
      doubleArray0[2] = (double) 127;
      doubleArray0[3] = (-1749.410061);
      ArrayUtils.swap(doubleArray0, (-1056), 120, (int) (byte)0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {127.0, 127.0, 127.0, (-1749.410061)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)127;
      intArray0[1] = 65;
      intArray0[2] = 127;
      intArray0[3] = (int) (byte) (-73);
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1056);
      intArray0[6] = 2798;
      intArray0[7] = (int) (byte)127;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2798, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      float[] floatArray0 = new float[12];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-1148.0417F));
      assertNotNull(floatArray1);
      assertEquals(12, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      char[] charArray0 = ArrayUtils.insert(127, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 0.0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      ArrayUtils.shift((boolean[]) null, (-1728), (-1728), 5);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      byte byte0 = (byte) (-59);
      Byte byte1 = Byte.valueOf((byte) (-59));
      assertEquals((byte) (-59), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.addFirst((byte[]) null, (byte) (-59));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-59)}, byteArray2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, true}, booleanArray0));
      
      byte[] byteArray3 = new byte[0];
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byte[] byteArray4 = ArrayUtils.removeElement(byteArray3, byte0);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      ArrayUtils.swap(longArray0, 339, 17, (int) byte0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-59L), (-59L), (-59L)}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) (byte) (-59);
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) byte0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-59.0), (-59.0), (-59.0), (-59.0), (-59.0), (-59.0), (-59.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      Byte byte0 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-1), (byte) (-1), (byte)92, (byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-1), (byte) (-1), (byte)92, (byte)2, (byte) (-1)}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)2;
      ArrayUtils.shift(doubleArray0, 18);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)95;
      byteArray2[2] = (byte)95;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)92;
      byte[] byteArray3 = ArrayUtils.removeAllOccurences(byteArray2, (byte)2);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)95, (byte)95, (byte)92}, byteArray3);
      assertArrayEquals(new byte[] {(byte)2, (byte)95, (byte)95, (byte)2, (byte)92}, byteArray2);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)4);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)4}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte byte0 = (byte)0;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean1);
      assertEquals(1, byteArray2.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)102;
      longArray0[1] = (long) 177;
      ArrayUtils.swap(longArray0, (int) byte0, (int) (byte)0, (int) byte0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {102L, 177L}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)102;
      intArray0[1] = (int) (byte)102;
      intArray0[2] = (int) (byte)102;
      intArray0[3] = 177;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) (byte)102;
      intArray0[6] = (int) (byte)0;
      ArrayUtils.shift(intArray0, 102, (-58), (-3957));
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {102, 102, 102, 177, 0, 102, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3957), (-1));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {102, 102, 102, 177, 0, 102, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      int int0 = ArrayUtils.indexOf((float[]) null, (-1.0F), (-2064));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2145451969), (-2145451969));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte) (-62), (byte)119, (byte)48, (byte)119, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 1603.64);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, (-2896), (-2896), (-2896));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (-1));
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = Character.toChars(573);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u023D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)941;
      shortArray0[2] = (short)6;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)941, (short)6}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)941;
      intArray0[1] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)941);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {941, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {941, (-1), 0, 941}, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short)6;
      doubleArray0[2] = (double) (-1);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-101.3421593015), (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 6.0, (-1.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, (-1541), 1511);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 6.0, (-1.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 16;
      longArray0[1] = (long) (short)6;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-4), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 792);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {792, 0}, intArray2);
      
      int int0 = ArrayUtils.indexOf(intArray2, (-3438), (-3505));
      assertEquals((-1), int0);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {792, 0}, intArray2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-121);
      shortArray0[1] = (short) (byte) (-121);
      shortArray0[2] = (short) (byte) (-121);
      shortArray0[3] = (short) (byte)76;
      shortArray0[4] = (short)1896;
      shortArray0[5] = (short) (byte)76;
      shortArray0[6] = (short) (byte) (-121);
      shortArray0[7] = (short) (byte)76;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)19);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-121), (short) (-121), (short) (-121), (short)76, (short)1896, (short)76, (short) (-121), (short)76}, shortArray1);
      assertArrayEquals(new short[] {(short) (-121), (short) (-121), (short) (-121), (short)76, (short)1896, (short)76, (short) (-121), (short)76}, shortArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short) (-121);
      objectArray0[1] = (Object) (short)76;
      objectArray0[2] = (Object) (short) (-121);
      objectArray0[3] = (Object) (short)1896;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 117);
      assertEquals((-1), int1);
      assertEquals(4, objectArray0.length);
      assertTrue(int1 == int0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)76;
      byteArray1[1] = (Byte) (byte)76;
      byteArray1[2] = (Byte) (byte) (-121);
      byteArray1[3] = (Byte) (byte) (-121);
      byteArray1[4] = (Byte) (byte) (-121);
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[3] = (double) (-1);
      Byte byte0 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(0, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 'e';
      charArray0[2] = '6';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'t', 'e', '6'}, charArray0);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-113));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      int[] intArray0 = new int[5];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)941;
      shortArray0[2] = (short)941;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)6;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-967);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)941, (short)941, (short) (-1), (short)6, (short) (-1), (short) (-967), (short)0, (short)0}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-60));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-60)}, intArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', (int) (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'p'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte) (-23));
      assertNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-1073741824), (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-60)}, intArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (short) (-967);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 112L, (-1L), (-967L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 201.13;
      doubleArray0[1] = (-1218.2264719282);
      doubleArray0[2] = 201.13;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2893.0, (-802), 66.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-66);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 96, (int) (byte)26);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-59), (byte) (-81), (byte)26, (byte)3, (byte) (-66)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {201.13, (-1218.2264719282), 201.13}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean boolean0 = new Boolean("=8X0~|t@");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray1 = new Boolean[0];
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = new Boolean(",tj`bni,4zj");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-1), 0, (-1), 0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[3] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 653.87, 0.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-1));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("', has a length less than 2");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean2));
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean((String) null);
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean6));
      
      booleanArray0[6] = boolean7;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (-543));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-543);
      longArray0[1] = (long) 476;
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\"', (int) (byte)14);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)14;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-54));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)14}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)14}, byteArray2);
      
      ArrayUtils.swap(charArray0, (-617), Integer.MAX_VALUE, 34);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'Z';
      charArray0[2] = 'H';
      charArray0[3] = 'm';
      ArrayUtils.swap(charArray0, (-1), 2146767154, (-3078));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'l', 'Z', 'H', 'm'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 645.0F;
      floatArray0[3] = (-1.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 645.0F;
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) 645.0F;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 645.0F;
      ArrayUtils.shift(objectArray0, 0, 2, 0);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (float) 0;
      ArrayUtils.shuffle(floatArray1);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      ArrayUtils.swap(floatArray0, 554, (-1));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)35);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)106, (byte)9, (byte)34, (byte)0, (byte)52, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)106, (byte)9, (byte)34, (byte)0, (byte)52, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(200L);
      assertEquals(200L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-14L));
      assertEquals((-14L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3110L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {200L, (-14L)}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) longArray0[0]);
      assertEquals(0, int0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {200L, (-14L)}, longArray1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-114);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-114)}, byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) (byte) (-114), (-2097542166));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {200L, (-14L)}, longArray1);
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      boolean boolean0 = ArrayUtils.contains(byteArray2, (byte)5);
      assertFalse(boolean0);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '$';
      Character character0 = Character.valueOf('$');
      assertEquals('$', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'$'}, charArray0);
      
      Byte[] byteArray3 = ArrayUtils.clone(byteArray1);
      assertNotNull(byteArray3);
      assertEquals(2, byteArray3.length);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-22), (byte) (-114)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-114);
      intArray0[1] = (int) char0;
      intArray0[2] = (int) (byte) (-114);
      intArray0[3] = (int) '$';
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (-79), 1);
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(4, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {(-114), 36, (-114), 36}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int)  (-114), byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -114, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1523, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1523, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 97, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L, 1);
      assertEquals(0, int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {1L}, longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)122;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)45, (byte)122}, byteArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)122);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (-2146071784), 250, (-826));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 164);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(13, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      ArrayUtils.shift(booleanArray0, (-322), 339, (-566));
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 1174);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Random.setNextRandom(339);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      BitSet bitSet0 = new BitSet((short)2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      long[] longArray0 = new long[8];
      longArray0[0] = 46L;
      longArray0[1] = 4265L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = 4265L;
      longArray0[5] = (long) 0;
      longArray0[6] = 4265L;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short)2);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {46L, 4265L, 0L, 0L, 4265L, 0L, 4265L, 0L}, longArray1);
      assertArrayEquals(new long[] {46L, 4265L, 0L, 0L, 4265L, 0L, 4265L, 0L}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 46L;
      floatArray0[3] = (-1343.5101F);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 4265L;
      floatArray0[7] = (float) 4265L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-5), 0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 46.0F, (-1343.5101F), 0.0F, 0.0F, 4265.0F, 4265.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-1), 1.0);
      assertEquals(2, int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2629), 2146550882);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2146550882;
      floatArray0[3] = (float) (-2629);
      floatArray0[4] = (float) 'f';
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (-1);
      double[] doubleArray3 = ArrayUtils.add(doubleArray1, (-1.0));
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, (-1.0)}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 3031;
      ArrayUtils.swap(intArray0, 2, 2, 3031);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 3031}, intArray0);
      
      ArrayUtils.shift(floatArray0, 2099, (-1), (-1));
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2.0F, 2.14655091E9F, 0.0F, (-2629.0F), 102.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      byte byte6 = (byte) (-74);
      Byte byte7 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte7);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte7;
      byteArray0[2] = byte7;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)119;
      byteArray1[6] = byte2;
      byteArray0[5] = (Byte) (byte) (-74);
      ArrayUtils.shift(byteArray1, (int) byte6, 1, (int) (byte)0);
      assertEquals(17, byteArray1.length);
      assertFalse(byte6 == byte0);
      assertFalse(byte6 == byte2);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get((Object[]) byteArray0, (int)  (-74), (Object) byte5);
      assertEquals((byte)119, object0);
      assertNotNull(object0);
      assertEquals(8, byteArray0.length);
      assertFalse(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte6));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte4));
      assertTrue(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte7));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte6));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte7));
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte3;
      objectArray0[2] = (Object) (byte)119;
      objectArray0[3] = (Object) byte4;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, (Object[]) byteArray0);
      assertFalse(boolean1);
      assertEquals(4, objectArray0.length);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2543L, 3921L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 2543L, 3921L, 0L, 0L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 3921L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 3921L;
      floatArray0[5] = (float) 3921L;
      floatArray0[6] = (float) (byte)1;
      floatArray0[7] = (float) 3921L;
      floatArray0[8] = (-1022.924F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 0.0F, 3921.0F, 0.0F, 3921.0F, 3921.0F, 1.0F, 3921.0F, (-1022.924F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      char[] charArray1 = ArrayUtils.add(charArray0, 's');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertArrayEquals(new char[] {'s', 's'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1608.075476758414;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1608.075476758414);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1608.075476758414}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(963);
      assertEquals(963, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = 120;
      Integer integer1 = new Integer(120);
      assertEquals(120, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {963, 120}, intArray0);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 120, (int) integerArray0[0]);
      assertNull(shortArray0);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) (int)integerArray0[0];
      floatArray0[2] = (float) (int)integerArray0[0];
      floatArray0[3] = (float) 120;
      floatArray0[4] = (float) 963;
      floatArray0[5] = (-1095.3629F);
      floatArray0[6] = (float) (int)integerArray0[0];
      floatArray0[7] = (float) (int)integerArray0[0];
      floatArray0[8] = (float) int0;
      ArrayUtils.shift(floatArray0, 120, 120, int0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {120.0F, 963.0F, 963.0F, 120.0F, 963.0F, (-1095.3629F), 963.0F, 963.0F, 120.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1608.075476758414;
      doubleArray1[1] = (double) (-1095.3629F);
      doubleArray1[2] = (double) 120.0F;
      doubleArray1[3] = (double) 963.0F;
      doubleArray1[4] = (double) 963.0F;
      doubleArray1[5] = (double) 120.0F;
      doubleArray1[6] = (double) (int)integerArray0[0];
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, 1973.04357337);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1608.075476758414, (-1095.3629150390625), 120.0, 963.0, 963.0, 120.0, 963.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1608.075476758414, (-1095.3629150390625), 120.0, 963.0, 963.0, 120.0, 963.0, 1973.04357337}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, (-2721), (-2721), 290);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(doubleArray0, (-2721), (-2721), (-2721));
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-84);
      doubleArray0[1] = (-1749.410061);
      doubleArray0[2] = (double) (byte) (-73);
      doubleArray0[3] = (double) 127;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 120;
      doubleArray0[6] = (double) 127;
      doubleArray0[7] = (double) (byte) (-84);
      doubleArray0[8] = (double) 127;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-73), (int) (byte)0, (int) (byte) (-84));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-84.0), (-1749.410061), (-73.0), 127.0, 0.0, 120.0, 127.0, (-84.0), 127.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)77;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)77;
      shortArray0[4] = (short) (byte)1;
      ArrayUtils.shift(shortArray0, (-2744), 11, (int) (byte)77);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)77, (short)1, (short)1, (short)77, (short)1}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-72), 18688);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)77, (short)1, (short)1, (short)77, (short)1}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1430.0365);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)2, (byte)92, (byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)2, (byte)92, (byte)2, (byte) (-1)}, byteArray1);
      
      ArrayUtils.shift(doubleArray0, (-319));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 262.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 262.0}, doubleArray0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)2);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)2, (byte)92, (byte)2, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)2, (byte)92, (byte)2, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)92, (byte) (-1)}, byteArray2);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (-343);
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)92;
      shortArray0[4] = (short) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (byte)92, (short) (byte) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      longArray0[3] = 1L;
      longArray0[4] = 1840L;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1676);
      assertNull(byte1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte)1, (int) (byte)1);
      assertEquals(1, int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (short)1);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      ArrayUtils.swap(charArray0, 65, 65, 65);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      char[] charArray0 = new char[5];
      charArray0[0] = '~';
      charArray0[1] = 'b';
      charArray0[2] = 'c';
      charArray0[3] = 'b';
      charArray0[4] = 'g';
      char char0 = 's';
      int int0 = (-1994091957);
      int int1 = ArrayUtils.lastIndexOf(charArray0, 's', (-1994091957));
      assertEquals((-1), int1);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'~', 'b', 'c', 'b', 'g'}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byte byte2 = (byte) (-124);
      byteArray0[5] = (byte) (-124);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-100));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte) (-72), (byte)11, (byte)0, (byte) (-84), (byte) (-124)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-72), (byte)11, (byte)0, (byte) (-84), (byte) (-124)}, byteArray0);
      
      ArrayUtils.swap(charArray0, (int) (byte)11, (-1637), 0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'~', 'b', 'c', 'b', 'g'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2992.8493521437;
      doubleArray0[1] = (double) 'L';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2262.808702, 1520, (double) 1520);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2992.8493521437, 76.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((short[]) null, 1520, 122, 122);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 250;
      intArray0[2] = (int) 'L';
      intArray0[3] = 1520;
      intArray0[4] = 250;
      intArray0[5] = 250;
      intArray0[6] = 122;
      intArray0[7] = 250;
      intArray0[8] = 0;
      ArrayUtils.swap(intArray0, 1896, 0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 250, 76, 1520, 250, 250, 122, 250, 0}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1520;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1520.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0, 122, 54);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 250, 76, 1520, 250, 250, 122, 250, 0}, intArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'c';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'L', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (-6143));
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-100));
      assertEquals((byte) (-100), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, true, 10);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '6');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'6'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '6');
      assertNull(charArray0);
      
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      try { 
        Byte.valueOf("RnO8h/(NG", (-32));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -32 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 440;
      intArray0[1] = (-534);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(440, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 440, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-3772.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)101;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-3772.5);
      objectArray0[2] = (Object) (-3772.5);
      objectArray0[3] = (Object) 0.0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean("Illegal range. The step cannot be zero.");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("1h(U#;.z2rDXY6~*");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("1h(U#;.z2rDXY6~*");
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean2);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean2.equals((Object)boolean4));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean0));
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray1));
      
      ArrayUtils.swap(doubleArray1, (int) (byte)101, (int) (byte) (-110), Integer.MAX_VALUE);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)101;
      intArray0[2] = (int) (byte)101;
      intArray0[3] = (int) (byte)101;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)2;
      intArray0[6] = 250;
      intArray0[7] = (int) (short)2;
      intArray0[8] = (int) (byte)2;
      ArrayUtils.swap(intArray0, (-1), (int) (short)2);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 250, 2, 2}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 5.0F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 2, (int) (byte)2);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {5.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0, (-1), 20);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 250, 2, 2, 2, 2, 2, 2}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {'c'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1637), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1637, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-7822));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {(-7822L), (-7822L), (-7822L)}, longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-7822L), (-7822L), (-7822L)}, longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-7822);
      intArray0[1] = (int) (short) (-7822);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-7822), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -7822, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)7;
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-72), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)7, (byte)7, (byte) (-72), (byte) (-72), (byte)7, (byte)3, (byte)7}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      byteArray0[7] = (byte) (-72);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2400.3851289153777;
      Byte byte0 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte) (-72);
      byteArray1[1] = (Byte) (byte)7;
      byteArray1[2] = (Byte) (byte) (-72);
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[3] = byte1;
      byteArray1[4] = (Byte) (byte)7;
      byteArray1[5] = (Byte) (byte) (-72);
      Byte[] byteArray2 = ArrayUtils.insert((int) 0, byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(12, byteArray2.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4865.52806993417), 131);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-566);
      longArray0[1] = (long) 131;
      longArray0[2] = 0L;
      longArray0[3] = (long) (-566);
      longArray0[4] = (long) (-1062);
      longArray0[5] = (long) (-566);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, (-3957));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-566L), 131L, 0L, (-566L), (-1062L), (-566L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1823);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-506);
      intArray0[4] = 2119594249;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2119594249, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Byte byte0 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)121, 84);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Float float0 = new Float((-598.0544372267495));
      assertEquals((-598.05444F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte5 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte4;
      objectArray0[2] = (Object) byte2;
      objectArray0[3] = (Object) byte2;
      objectArray0[4] = (Object) byte4;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte2, 1222);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(5, objectArray0.length);
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte5));
      assertFalse(byte2.equals((Object)byte3));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse(objectArray0, (-862), (int) (byte)121);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)40;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)2;
      intArray0[5] = (-3505);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 68;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2, 40, 40, 40, 2, (-3505), 0, 68}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 40);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 1360L, (-292L), 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)119;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(13, byteArray0.length);
      assertEquals(13, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 761.7;
      byteArray0[10] = (byte)119;
      ArrayUtils.shift(doubleArray0, 52);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {761.7, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {761.7, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)40;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 924, (int) (byte) (-31));
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 40, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 40;
      objectArray0[1] = (Object) 1360L;
      objectArray0[2] = (Object) (-1119L);
      objectArray0[3] = (Object) (-1119L);
      objectArray0[4] = (Object) 406L;
      objectArray0[5] = (Object) 1360L;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]);
      assertEquals(3, int0);
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (-292L);
      objectArray1[1] = (Object) 406L;
      Byte byte0 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)40, object0);
      assertNotNull(object0);
      
      objectArray1[2] = object0;
      objectArray1[3] = (Object) (-292L);
      objectArray1[4] = (Object) 0L;
      objectArray1[5] = (Object) 2;
      objectArray1[6] = (Object) 2;
      Byte byte1 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object0));
      
      boolean boolean0 = ArrayUtils.contains(objectArray1, (Object) byte1);
      assertTrue(boolean0);
      assertEquals(7, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 5.0F;
      floatArray0[1] = (-2651.0F);
      floatArray0[2] = 36.0F;
      floatArray0[3] = (-2651.0F);
      Short short0 = new Short((short)2798);
      assertEquals((short)2798, (short)short0);
      assertNotNull(short0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (short)2798, (-3135));
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 36.0F;
      doubleArray0[1] = 120.0;
      doubleArray0[2] = (double) (-2651.0F);
      doubleArray0[3] = (double) 5.0F;
      doubleArray0[4] = (double) (-2651.0F);
      doubleArray0[5] = (double) 5.0F;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1379.4339656247), 1733);
      assertEquals((-1), int1);
      assertEquals(6, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {36.0, 120.0, (-2651.0), 5.0, (-2651.0), 5.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, 1733, 55);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {36.0, 120.0, (-2651.0), 5.0, (-2651.0), 5.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("Arguments cannot both be null");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean2 = new Boolean("Arguments cannot both be null");
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      ArrayUtils.reverse(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(12, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-24));
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertTrue(boolean2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-33.0);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-24);
      doubleArray0[3] = (double) (-24);
      doubleArray0[4] = (double) (-24);
      doubleArray0[5] = (double) (-24);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-24.0));
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-33.0), 1.5, (-24.0), (-24.0), (-24.0), (-24.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-566);
      longArray0[1] = (long) (byte)43;
      longArray0[2] = (long) (byte)43;
      longArray0[3] = (long) (-566);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1072, (-566));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-566L), 43L, 43L, (-566L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      byte byte6 = (byte) (-74);
      Byte byte7 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte7;
      byteArray0[2] = byte7;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)119;
      byteArray1[6] = byte2;
      byteArray0[5] = (Byte) (byte) (-74);
      ArrayUtils.shift(byteArray1, (int) byte6, 1, (int) (byte)0);
      assertEquals(17, byteArray1.length);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte4 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) byte4);
      assertEquals((-1), int0);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) byte0, (int) byte0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert((-1766), shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray2);
      
      ArrayUtils.swap(longArray0, (int) (short)1, (-1051), (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short)1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);
      assertEquals(2, int1);
      assertEquals(3, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty(shortArray1);
      assertTrue(boolean2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray3 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 13);
      assertNull(byte1);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'x');
      assertNull(charArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null, "{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray1));
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)20;
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) 'x';
      longArray0[3] = 1L;
      longArray0[4] = (long) 'x';
      longArray0[5] = (long) 13;
      longArray0[6] = (-1429L);
      long[] longArray1 = ArrayUtils.add(longArray0, (-508L));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {20L, 120L, 120L, 1L, 120L, 13L, (-1429L)}, longArray0);
      assertArrayEquals(new long[] {20L, 120L, 120L, 1L, 120L, 13L, (-1429L), (-508L)}, longArray1);
      
      Byte byte2 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte2, (int) (byte)20);
      assertEquals((-1), int0);
      assertTrue(byte2.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'a');
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)102, 119);
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray2, (int)  (-24));
      assertNull(byte0);
      assertEquals(0, byteArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.insert(2299, (short[]) null, (short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      byte byte6 = (byte) (-74);
      Byte byte7 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte7);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte7;
      byteArray0[2] = byte7;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byte[] byteArray1 = new byte[17];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)119;
      byteArray1[6] = byte2;
      byteArray0[5] = (Byte) (byte) (-74);
      ArrayUtils.shift(byteArray1, (int) byte6, 1, (int) (byte)0);
      assertEquals(17, byteArray1.length);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      
      int int0 = ArrayUtils.indexOf((char[]) null, 'n', (-1447));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      int int0 = ArrayUtils.indexOf(charArray0, 's');
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'5'}, charArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4304.578551417917);
      assertEquals(4304.578551417917, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-2388.78997));
      assertEquals((-2388.78997), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)44;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)68, 102);
      assertEquals((-1), int1);
      assertEquals(9, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)108, (byte) (-72), (byte)0, (byte)111, (byte)6, (byte)19, (byte) (-39), (byte) (-20), (byte)44}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray1);
      assertNotNull(stringArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, stringArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1, 66);
      assertEquals(4, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)1, (short)2, (short)1}, shortArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (short)1;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Byte[] byteArray0 = new Byte[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      ArrayUtils.swap(doubleArray0, 2, (-2104), (-1176));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-84);
      doubleArray0[1] = (-1749.410061);
      doubleArray0[2] = (double) (byte) (-73);
      doubleArray0[4] = (double) (byte) (-84);
      doubleArray0[5] = (double) 120;
      doubleArray0[6] = (double) 127;
      doubleArray0[7] = (double) (byte) (-84);
      doubleArray0[8] = (double) 127;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-73), (int) (byte) (-73), (int) (byte) (-84));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-84.0), (-1749.410061), (-73.0), 0.0, (-84.0), 120.0, 127.0, (-84.0), 127.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (-2145969959));
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      ArrayUtils.swap(charArray0, (-96), (-2145969959));
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.shift(charArray0, 1, 1, (int) (byte)2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'e');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      
      ArrayUtils.swap(charArray0, (-2146269583), (-2146269583), 2);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 2);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)101;
      Byte byte1 = new Byte((byte)101);
      assertEquals((byte)101, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)101, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)101, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)63;
      Byte byte5 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'o';
      charArray0[2] = ';';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'E');
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'o', ';'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte3, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-2651L);
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) (-2651L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-2651L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-2651L), 0L, 0L}, longArray1);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      float[] floatArray0 = new float[9];
      long[] longArray0 = new long[6];
      longArray0[0] = (-42L);
      longArray0[1] = (-42L);
      longArray0[2] = (-42L);
      longArray0[3] = (-2147483648L);
      longArray0[4] = (-42L);
      longArray0[5] = (-42L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 55L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-42L), (-42L), (-42L), (-2147483648L), (-42L), (-42L)}, longArray0);
      assertArrayEquals(new long[] {(-42L), (-42L), (-42L), (-2147483648L), (-42L), (-42L)}, longArray1);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-832));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-832)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[7] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)122;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)45;
      shortArray0[4] = (short) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1119, (int) (byte)51);
      assertEquals((-1), int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)122, (short)0, (short)1, (short)45, (short)0}, shortArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)0, 49, 121);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)51, (byte)0, (byte)0, (byte)0, (byte)122, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)941;
      shortArray0[2] = (short)18688;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)941, (short)18688}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)941;
      intArray0[1] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)941);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {941, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {941, (-1), 0, 941}, intArray1);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'p', (int) (short) (-1));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)33);
      assertNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, (-3668), (int) (short)18688);
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {941, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {941, (-1), 0, 941}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)941;
      shortArray0[2] = (short)18688;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)941, (short)18688}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)941;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)18688;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)941);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {941, (-1), 18688}, intArray0);
      assertArrayEquals(new int[] {941, (-1), 18688, 941}, intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray0.length);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (int) (short) (-1);
      intArray2[1] = (int) (byte) (-4);
      intArray2[2] = (int) (short)18688;
      intArray2[3] = (int) (byte) (-4);
      intArray2[4] = (int) (short)941;
      intArray2[5] = (int) (short)18688;
      intArray2[6] = (int) (short)941;
      intArray2[7] = (-138);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray2);
      assertNotNull(integerArray0);
      assertEquals(8, intArray2.length);
      assertEquals(8, integerArray0.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-4), 18688, (-4), 941, 18688, 941, (-138)}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, (-823));
      assertFalse(boolean0);
      
      ArrayUtils.swap((int[]) null, 64, 64, (-16));
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, 84, 84);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-171), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      ArrayUtils.shift(longArray0, 177);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      
      ArrayUtils.swap(intArray0, 12, (-1533), 2145694078);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2814;
      shortArray0[1] = (short)455;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2814, (short)455}, shortArray0);
      assertArrayEquals(new short[] {(short)2814, (short)455, (short)2814, (short)455}, shortArray1);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-45);
      Byte byte1 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-45), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-45), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-45), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      
      byteArray0[5] = byte6;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-911);
      intArray0[1] = 2002;
      ArrayUtils.swap(intArray0, 2002, (-911), 2002);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-911), 2002}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      longArray0[3] = 1L;
      longArray0[4] = 1840L;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1676);
      assertNull(byte1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'x');
      assertNull(charArray0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string0 = ArrayUtils.toString((Object) null, "{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)14245);
      assertEquals((short)14245, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)14245}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      Short[] shortArray0 = new Short[7];
      short short0 = (short)100;
      Short short1 = new Short((short)100);
      assertEquals((short)100, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)100);
      assertEquals((short)100, (short)short2);
      assertNotNull(short2);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-2530));
      assertEquals((short) (-2530), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)167);
      assertEquals((short)167, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)100);
      assertEquals((short)100, (short)short5);
      assertNotNull(short5);
      assertTrue(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short1));
      assertTrue(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      
      shortArray0[4] = short5;
      Short short6 = new Short((short) (-20098));
      assertEquals((short) (-20098), (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      
      shortArray0[5] = short6;
      Short short7 = new Short(short0);
      assertEquals((short)100, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short4));
      assertTrue(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short6));
      assertTrue(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short1));
      assertTrue(short7.equals((Object)short5));
      
      shortArray0[6] = short7;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)100, (short)100, (short) (-2530), (short)167, (short)100, (short) (-20098), (short)100}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) byte0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-832));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-832)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) 'f';
      floatArray0[2] = (float) (byte)45;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)51;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (byte)122;
      floatArray0[7] = (float) (byte)45;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {102.0F, 45.0F, 0.0F, 51.0F, 1.0F, 122.0F, 45.0F, 45.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2975), (-1730));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2975);
      intArray1[1] = (-2975);
      intArray1[2] = (int) (byte)122;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(boolean0);
      assertEquals(1, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-832)}, intArray0);
      assertArrayEquals(new int[] {(-2975), (-2975), 122}, intArray1);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, (String) null);
      assertEquals("51", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.add(charArray0, '4');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4'}, charArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '4';
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) '4';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "F");
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1860.8446280053731);
      assertNull(doubleArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[17];
      longArray0[0] = (long) (byte) (-18);
      longArray0[1] = (long) (byte) (-18);
      longArray0[2] = (long) (byte) (-18);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)89;
      longArray0[6] = (-368L);
      longArray0[7] = (long) (byte) (-18);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-368L));
      assertNotNull(longArray1);
      assertEquals(17, longArray0.length);
      assertEquals(18, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '2';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '2';
      charArray0[7] = '3';
      charArray0[8] = '3';
      ArrayUtils.reverse(charArray0, (int) (byte) (-18), (-2776));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '2', '3', '3', '3', '3', '2', '3', '3'}, charArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, 4169, 4169);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '2', '3', '3', '3', '3', '2'}, charArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1072.77975551, (double) (-18L));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) '3';
      longArray2[1] = 1250L;
      longArray2[2] = (long) '3';
      longArray2[3] = 228L;
      long[] longArray3 = ArrayUtils.removeAllOccurrences(longArray2, 1250L);
      assertNotNull(longArray3);
      assertEquals(3, longArray3.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {51L, 51L, 228L}, longArray3);
      assertArrayEquals(new long[] {51L, 1250L, 51L, 228L}, longArray2);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1018;
      shortArray0[1] = (short)6;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)1018, (short)6}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2051), 660);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)88;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)101, 526);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(4, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte) (-105), (byte)88}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2051);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2051)}, intArray0);
      assertArrayEquals(new int[] {(-2051)}, intArray1);
      
      ArrayUtils.shift(booleanArray0, (-2051), 573, 47);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      Byte[] byteArray1 = ArrayUtils.subarray((Byte[]) null, 0, 1537);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Short short0 = new Short((short) (-3019));
      assertEquals((short) (-3019), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-22155));
      assertEquals((short) (-22155), (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short short2 = new Short((short)167);
      assertEquals((short)167, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-85));
      assertEquals((byte) (-85), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 21, 21);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      assertArrayEquals(new char[] {'j', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P]l~&rd");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'm';
      Short short0 = new Short((short)5400);
      assertEquals((short)5400, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2218);
      assertEquals((short)2218, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)15);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2218, (short)2218, (short)5400}, shortArray1);
      
      Byte byte0 = new Byte((byte) (-22));
      assertEquals((byte) (-22), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      
      char[] charArray2 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-22);
      byteArray0[8] = (byte) (-22);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte) (-22), (byte)3, (byte)3, (byte)3, (byte) (-22), (byte) (-22)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-42L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      Byte byte0 = new Byte((byte) (-60));
      assertEquals((byte) (-60), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-60);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-60), (-793));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-60)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-60)}, shortArray0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      int int1 = ArrayUtils.indexOf((int[]) null, 6, Integer.MAX_VALUE);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (-2145969959));
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'P';
      charArray0[2] = 'b';
      charArray0[3] = '1';
      charArray0[4] = 'c';
      charArray0[5] = 'X';
      charArray0[6] = 'g';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'g', (-2145969959));
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'~', 'P', 'b', '1', 'c', 'X', 'g'}, charArray0);
      
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray0, (byte)2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray3);
      
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'c';
      charArray1[1] = '';
      charArray1[2] = '~';
      charArray1[3] = 'g';
      charArray1[4] = '1';
      charArray1[5] = 'X';
      charArray1[6] = 'c';
      charArray1[7] = 'X';
      charArray1[8] = 'P';
      ArrayUtils.swap(charArray1, 0, 0, (-1501));
      assertEquals(9, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'c', '', '~', 'g', '1', 'X', 'c', 'X', 'P'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2341.0F;
      floatArray0[2] = (-2299.777F);
      floatArray0[3] = (-3055.1282F);
      floatArray0[4] = 0.0F;
      ArrayUtils.reverse(floatArray0, 1708, 0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2341.0F, (-2299.777F), (-3055.1282F), 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1708;
      int[] intArray1 = ArrayUtils.add(intArray0, (-4056));
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1708}, intArray0);
      assertArrayEquals(new int[] {0, 1708, (-4056)}, intArray1);
      
      ArrayUtils.shift(intArray0, 1, (-872), 19);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 1708}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-2651L);
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) (-2651L);
      floatArray1[5] = (float) 0L;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-121);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(byteArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)7;
      Byte byte0 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte)7;
      shortArray0[3] = (short)70;
      shortArray0[4] = (short) (byte)7;
      shortArray0[5] = (short) (byte) (-70);
      shortArray0[9] = (short) (byte)7;
      shortArray0[7] = (short) (byte)7;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3095, 0);
      assertEquals((-1), int0);
      assertEquals(20, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)37;
      byte byte0 = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byte byte1 = (byte)83;
      byteArray0[4] = (byte)83;
      byte byte2 = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)1;
      byte byte3 = (byte)95;
      byteArray0[7] = (byte)95;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (byte)83);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)37, (byte) (-123), (byte)83, (byte)54, (byte)1, (byte)95}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)37, (byte) (-123), (byte)83, (byte)54, (byte)1, (byte)95}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte) (-1), 1335.0365F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 24.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)35;
      Byte byte6 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte7 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte7;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte4;
      objectArray0[3] = (Object) byte1;
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      Random.setNextRandom((byte) (-84));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)35;
      doubleArray0[1] = 2992.8493521437;
      doubleArray0[2] = (double) (byte)35;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte5;
      doubleArray0[6] = (double) byte5;
      doubleArray0[7] = (double) byte0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-84), (int) byte0);
      assertEquals(3, int0);
      assertEquals(8, doubleArray0.length);
      assertFalse(byte0 == byte5);
      assertArrayEquals(new double[] {35.0, 2992.8493521437, 35.0, (-84.0), (-84.0), 35.0, 35.0, (-84.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-4790.0F);
      floatArray0[1] = (-394.839F);
      floatArray0[2] = 299.2205F;
      floatArray0[3] = (-3742.5564F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-397.36777F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 6004.252F;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-394.839F), 299.2205F, (-3742.5564F), 0.0F, (-397.36777F), 1.0F, (-1.0F), 6004.252F, (-4790.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-394.839F), 299.2205F, (-3742.5564F), 0.0F, (-397.36777F), 1.0F, (-1.0F), 6004.252F, (-4790.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2898L;
      longArray0[1] = (-54L);
      longArray0[2] = 696L;
      longArray0[3] = 4151L;
      longArray0[4] = (-652L);
      longArray0[5] = 406L;
      longArray0[6] = (-1L);
      longArray0[7] = (-1431L);
      ArrayUtils.shuffle(longArray0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-54L), 696L, 4151L, (-652L), 406L, (-1L), (-1431L), 2898L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1.0));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)34;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)1521;
      intArray0[3] = 990;
      intArray0[4] = (int) (byte)34;
      intArray0[5] = (int) (short)34;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 990;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 990;
      longArray0[4] = (long) 990;
      ArrayUtils.shuffle(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {990L, 2L, 990L, 990L, 0L}, longArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.0);
      assertNull(doubleArray0);
      
      Float float0 = new Float((double) (short)1521);
      assertEquals(1521.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray2, 65.1742604986332, (-1), (-1.0));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      double[] doubleArray3 = ArrayUtils.add(doubleArray0, 844.0);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {844.0}, doubleArray3, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, (-1)}, intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      Double double0 = Double.valueOf(2401.794845);
      assertEquals(2401.794845, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4585.01480041);
      assertEquals(4585.01480041, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.IssueExtension";
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.IssueExtension";
      objectArray0[3] = (Object) double1;
      objectArray0[3] = (Object) double1;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) double1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.IssueExtension");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-214.2261F);
      floatArray0[1] = (-2330.1682F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = 1971.113F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {(-214.2261F), (-2330.1682F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1971.113F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (-109.0);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray2);
      assertFalse(boolean1);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, (-109.0)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) (-1), 1.0);
      assertEquals(2, int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-102));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 43);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {43}, intArray0);
      
      BitSet bitSet0 = new BitSet(43);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertNotNull(objectArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, objectArray0.length);
      assertSame(integerArray0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray1);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte1, 577);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse((Object[]) null, (int) (byte)25, (int) (byte)0);
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte3;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockRandom0;
      objectArray0[5] = (Object) byte2;
      objectArray0[6] = (Object) bitSet0;
      Object object1 = ArrayUtils.get((Object[]) null, (-1610612735), object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[7] = object1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray1.length);
      assertEquals(8, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-78);
      floatArray0[1] = (float) (byte)25;
      floatArray0[2] = (float) (byte) (-78);
      floatArray0[3] = (float) (byte) (-78);
      floatArray0[4] = (-100.40836F);
      floatArray0[5] = (-81.27F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4058), 6);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-78.0F), 25.0F, (-78.0F), (-78.0F), (-100.40836F), (-81.27F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-78.0F), 25.0F, (-78.0F), (-78.0F), (-100.40836F), (-81.27F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-78), (byte) (-78)}, byteArray1);
      
      Double double0 = new Double((-4205.0));
      assertEquals((-4205.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1084.30277307939);
      assertEquals(1084.30277307939, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1.0);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      Double double3 = new Double(0.1);
      assertEquals(0.1, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double((-727.83592));
      assertEquals((-727.83592), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      Double[] doubleArray0 = new Double[9];
      doubleArray0[0] = double3;
      doubleArray0[1] = double2;
      doubleArray0[2] = double1;
      doubleArray0[3] = double4;
      doubleArray0[4] = double3;
      doubleArray0[6] = double2;
      doubleArray0[7] = double2;
      doubleArray0[8] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) doubleArray0[7];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray2, (-1590.0), (int) (byte) (-78), 3662.055383653);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1276.77F;
      floatArray0[1] = (-4407.7F);
      floatArray0[2] = (-2286.0F);
      floatArray0[3] = (-2286.0F);
      floatArray0[4] = 303.039F;
      floatArray0[5] = 0.0F;
      floatArray0[2] = (-1127.0F);
      floatArray0[7] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 317.9766F, (-2064));
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1276.77F, (-4407.7F), (-1127.0F), (-2286.0F), 303.039F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[2];
      floatArray1[0] = (Float) 1.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 8192);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (byte)3);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-113));
      assertNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', '\u0000', '`', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', '\u0000', '`', 'y', '.'}, charArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '.';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-42.327311108);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {46.0, (-1.0), (-42.327311108)}, doubleArray0, 0.01);
      
      long[] longArray1 = new long[3];
      longArray1[0] = 1204L;
      longArray1[1] = (long) '`';
      longArray1[2] = (long) 'y';
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray1);
      assertNotNull(longBuffer0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBuffer0.remaining());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1204L, 96L, 121L}, longArray1);
      
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      assertNotNull(bitSet0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBuffer0.remaining());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(12, bitSet0.cardinality());
      assertEquals("{2, 4, 5, 7, 10, 69, 70, 128, 131, 132, 133, 134}", bitSet0.toString());
      assertEquals(192, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(135, bitSet0.length());
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1204L, 96L, 121L}, longArray1);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertFalse(longBuffer0.isDirect());
      assertEquals(3, longBuffer0.remaining());
      assertEquals(3, longBuffer0.capacity());
      assertEquals(3, longBuffer0.limit());
      assertFalse(longBuffer0.isReadOnly());
      assertTrue(longBuffer0.hasArray());
      assertTrue(longBuffer0.hasRemaining());
      assertEquals(0, longBuffer0.position());
      assertEquals(0, longBuffer0.arrayOffset());
      assertEquals("java.nio.HeapLongBuffer[pos=0 lim=3 cap=3]", longBuffer0.toString());
      assertEquals(12, bitSet0.cardinality());
      assertEquals("{2, 4, 5, 7, 10, 69, 70, 128, 131, 132, 133, 134}", bitSet0.toString());
      assertEquals(192, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(135, bitSet0.length());
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1204L, 96L, 121L}, longArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (-2145969959));
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.reverse(byteArray0, (-2145969959), (-2145969959));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte[] byteArray4 = ArrayUtils.removeAllOccurrences(byteArray1, (Byte) null);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2145969959);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2.145969959E9)}, doubleArray1, 0.01);
      
      byte[] byteArray5 = ArrayUtils.add(byteArray0, (byte)2);
      assertNotNull(byteArray5);
      assertEquals(1, byteArray5.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {(byte)2}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.shift(shortArray0, 3, (-2145969959), 1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(doubleArray1);
      assertTrue(boolean2);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-2.145969959E9)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      Character character0 = new Character('d');
      assertEquals('d', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[2];
      characterArray0[0] = character0;
      int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null);
      assertEquals(1, int0);
      assertEquals(2, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(character0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short) (-22), 2);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte byte0 = (byte) (-105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte) (-105);
      byteArray1[1] = (Byte) (byte) (-105);
      byteArray1[2] = (Byte) (byte) (-105);
      byteArray1[3] = (Byte) (byte) (-105);
      Byte byte1 = new Byte(byte0);
      assertEquals((byte) (-105), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[4] = byte1;
      byteArray1[5] = (Byte) (byte) (-105);
      byteArray1[6] = (Byte) (byte) (-105);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, (int)  (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -22, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte7 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte7;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte5;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte4;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(6, objectArray0.length);
      assertFalse(byte0 == byte2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (-1.0F);
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) byte2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(byte2 == byte0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-33L)}, longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1);
      assertEquals(8, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(641);
      assertEquals(641, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '|';
      charArray1[1] = '|';
      charArray1[2] = '|';
      charArray1[3] = '|';
      charArray1[4] = 'M';
      charArray1[5] = '|';
      charArray1[6] = 'M';
      charArray1[7] = '|';
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '5');
      assertNotNull(charArray2);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'|', '|', '|', '|', 'M', '|', 'M', '|'}, charArray1);
      assertArrayEquals(new char[] {'5', '|', '|', '|', '|', 'M', '|', 'M', '|'}, charArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) 'M';
      intArray0[2] = (int) '5';
      intArray0[3] = (int) '|';
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {124, 77, 53, 124}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (short) (-349));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("-9", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 77;
      floatArray0[1] = (float) 'M';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {77.0F, 77.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {77.0F, 77.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)102);
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'X';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)102;
      shortArray0[2] = (short) (byte)102;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertEquals(3, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)102, (short)102}, shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 1102, (int) (short)102);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)10);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)941;
      shortArray0[2] = (short)18688;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)941, (short)18688}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)941;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)18688;
      int[] intArray1 = ArrayUtils.add(intArray0, (int) (short)941);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {941, (-1), 18688}, intArray0);
      assertArrayEquals(new int[] {941, (-1), 18688, 941}, intArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1980), (-1980));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.insert(321, booleanArray1, booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      
      ArrayUtils.swap(intArray0, (-1), (int) (short) (-1), (-439));
      assertEquals(3, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {941, (-1), 18688}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (int) (short)2;
      intArray0[3] = (int) (short)2;
      intArray0[4] = (int) (short)2;
      intArray0[5] = (int) (short)2;
      intArray0[6] = 250;
      intArray0[7] = (int) (short)2;
      intArray0[8] = (int) (byte)2;
      ArrayUtils.swap(intArray0, (-1), (int) (short)2);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 250, 2, 2}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 5.0F;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 2, (int) (byte)2);
      assertEquals((-1), int1);
      assertEquals(1, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {5.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shuffle(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)34;
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      int int0 = 0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 4);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)34, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)42;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)43}, byteArray0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)42;
      intArray1[1] = (int) (byte)42;
      intArray1[2] = (int) (byte)42;
      intArray1[3] = (int) (byte)43;
      intArray1[4] = (int) (byte)43;
      intArray1[5] = (int) (byte)43;
      intArray1[6] = (int) (byte)43;
      intArray1[7] = (int) (byte)42;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {42, 42, 42, 43, 43, 43, 43, 42}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)42);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-7), (int) (byte)42, 5);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-92);
      intArray0[1] = (int) (byte) (-92);
      intArray0[2] = (int) (byte) (-92);
      intArray0[3] = (int) (byte) (-92);
      intArray0[5] = (int) (byte) (-92);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-92), (-92), (-92), (-92), 0, (-92)}, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 873, 6, (-92));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P]l~&rd");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'm';
      Short short0 = new Short((short)5400);
      assertEquals((short)5400, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2218);
      assertEquals((short)2218, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short1;
      shortArray0[1] = short1;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)15);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2218, (short)2218, (short)5400}, shortArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 109;
      longArray0[1] = (long) (short)shortArray0[2];
      longArray0[2] = (long) (short)shortArray0[0];
      longArray0[3] = (long) (short)shortArray0[1];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {109L, 5400L, 2218L, 2218L}, longArray0);
      assertArrayEquals(new long[] {109L, 5400L, 2218L, 2218L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1639L;
      longArray0[1] = 2384L;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1639L, 2384L}, longArray0);
      assertArrayEquals(new long[] {1639L, 2384L}, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 's';
      char[] charArray1 = ArrayUtils.add(charArray0, '7');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'s', 's'}, charArray0);
      assertArrayEquals(new char[] {'s', 's', '7'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-109);
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte) (-109), (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte) (-1), (byte) (-1), (byte) (-92), (byte)0, (byte)5, (byte) (-109)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-109);
      doubleArray0[1] = (double) (byte) (-92);
      doubleArray0[3] = 2415.606136247275;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)5, (int) (byte)5, 0.0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-109.0), (-92.0), 0.0, 2415.606136247275}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 99, (int) (byte)5);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte) (-1), (byte) (-1), (byte) (-92), (byte)0, (byte)5, (byte) (-109)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)3324;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)1520;
      shortArray0[4] = (short) (-2552);
      shortArray0[5] = (short)177;
      shortArray0[6] = (short)28852;
      shortArray0[7] = (short)825;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)28852);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)3324, (short) (-1), (short)1520, (short) (-2552), (short)177, (short)28852, (short)825}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)3324, (short) (-1), (short)1520, (short) (-2552), (short)177, (short)28852, (short)825}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[2] = 'A';
      charArray0[3] = 'd';
      charArray0[4] = '8';
      charArray0[5] = '~';
      charArray0[6] = 't';
      charArray0[7] = ']';
      charArray0[8] = '~';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1089), 6);
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'A', 'd', '8', '~'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'A', 'd', '8', '~', 't', ']', '~'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 8);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte) (-121);
      shortArray0[2] = (short) (byte) (-121);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)345);
      assertFalse(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-121), (short) (-121)}, shortArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short) (-121);
      floatArray0[2] = (float) (short) (-121);
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short)1520;
      floatArray0[5] = (float) (byte) (-121);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals(3, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-121.0F), (-121.0F), (-1.0F), 1520.0F, (-121.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(intArray0, (-1900), (-2064888122));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, 0, 0}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short) (-121);
      longArray0[2] = (long) (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2064888122), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2064888122, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, (-580.31351226));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.indexOf((int[]) null, 1715);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.shift((long[]) null, (-1), 1, (-1));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-820L);
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = 1904.3F;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) 0L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1.0F, (-1.0F), (-820.0F), 0.0F, 0.0F, 1904.3F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {1.0F, 1.0F, (-1.0F), (-820.0F), 0.0F, 0.0F, 1904.3F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 1710, (long) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1710, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-2146), (-2146), (-2146));
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'b';
      charArray0[2] = '>';
      charArray0[3] = '\\';
      charArray0[4] = '<';
      charArray0[5] = '\"';
      charArray0[6] = '8';
      charArray0[7] = '`';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, characterArray0.length);
      assertArrayEquals(new char[] {'j', 'b', '>', '\\', '<', '\"', '8', '`'}, charArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)589);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'j';
      doubleArray0[1] = (double) '<';
      doubleArray0[2] = (double) '>';
      doubleArray0[3] = 1613.1526873797768;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {60.0, 62.0, 1613.1526873797768, 106.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'K');
      assertNull(charArray0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3978;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-519);
      shortArray0[3] = (short) (-1686);
      shortArray0[4] = (short)321;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-2548);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1686));
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3978, (short) (-1), (short) (-519), (short) (-1686), (short)321, (short) (-1), (short) (-2548)}, shortArray0);
      assertArrayEquals(new short[] {(short)3978, (short) (-1), (short) (-519), (short) (-1686), (short)321, (short) (-1), (short) (-2548), (short) (-1686)}, shortArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (-3380L);
      longArray0[2] = (long) (short)3978;
      longArray0[3] = (long) (short) (-1686);
      longArray0[4] = (long) '_';
      longArray0[5] = (long) 'L';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1765));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1765, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)15);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)15}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)89;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2715), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2715, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1553, (double) (byte)7);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1643L;
      longArray0[1] = (long) 1553;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {1643L, 1553L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'J';
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '1';
      longArray0[1] = (long) 'J';
      longArray0[2] = (-1868L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 49L, (-1590));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {49L, 74L, (-1868L)}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((int[]) null, (-1590), (-1590));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (-1590);
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) 'J';
      doubleArray0[5] = (double) ')';
      doubleArray0[6] = (double) (-1868L);
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {74.0, 2.147483647E9, (-1590.0), 2.147483647E9, 74.0, 41.0, (-1868.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-1868L), 74L, 49L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3824.687);
      doubleArray0[1] = (-4865.52806993417);
      doubleArray0[2] = (-431.7374);
      doubleArray0[3] = 2181.257030217673;
      doubleArray0[4] = 1336.43784294;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3824.687), (-1062));
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3824.687), (-4865.52806993417), (-431.7374), 2181.257030217673, 1336.43784294}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1062);
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-566), 0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1062L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-566);
      intArray0[4] = 0;
      intArray0[5] = (-566);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -566, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integer0;
      intArray0[1] = (int) integer0;
      boolean boolean1 = ArrayUtils.contains(charArray0, 'n');
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray1, (double) (short)0, 0.0);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      ArrayUtils.swap(charArray0, 991, (-1), 991);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.reverse(doubleArray0, 890, (-1));
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) null, 2, 2, 2);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1112.5F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 2.0F, 2.0F, 1112.5F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) 1112.5F;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1112.5F;
      doubleArray0[5] = (double) 2;
      doubleArray0[7] = (double) 1112.5F;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-125), 2, (int) (byte) (-125));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1112.5, 2.0, 2.0, 2.0, 1112.5, 2.0, 0.0, 1112.5, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (double) (-1.0F), (double) (-1));
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1112.5, 2.0, 2.0, 2.0, 1112.5, 2.0, 0.0, 1112.5, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1463L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1463L));
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1463L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1586L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 653.87, 0.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) (-1);
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) (-1);
      integerArray0[4] = (Integer) (-1);
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, integerArray0.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray1);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1083L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '_');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '>', 'j', 'L'}, charArray1);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray2);
      
      char[] charArray3 = ArrayUtils.subarray(charArray0, 2, 2);
      assertNotNull(charArray3);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray3.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray3, charArray1);
      assertNotSame(charArray3, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      assertArrayEquals(new char[] {}, charArray3);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = Integer.valueOf(303);
      assertEquals(303, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(303);
      assertEquals(303, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertEquals(303, (int)integer2);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", 3515);
      assertEquals(3515, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1032));
      assertEquals((-1032), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertEquals(3515, (int)integer5);
      assertNotNull(integer5);
      assertEquals(6, integerArray0.length);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      
      integerArray0[5] = integer5;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(6, integerArray1.length);
      assertEquals(6, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      ArrayUtils.shift(longArray0, 2000, 2000, 2018);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 2543L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2543L;
      doubleArray0[4] = (double) 2124878540;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (-1218.2264719282);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 2543L, (-3527));
      assertEquals(1, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2543.0, 0.0, 0.0, 2.12487854E9, 0.0, (-1218.2264719282)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-514.5567898981536), (-832));
      assertEquals((-1), int1);
      assertEquals(7, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 2543.0, 0.0, 0.0, 2.12487854E9, 0.0, (-1218.2264719282)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-832);
      floatArray0[1] = (float) 2543L;
      floatArray0[2] = (-487.4F);
      ArrayUtils.reverse(floatArray0, (-3527), 40);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-487.4F), 2543.0F, (-832.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1533.979F;
      floatArray0[1] = 1533.979F;
      floatArray0[2] = Float.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, Float.NaN);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {1533.979F, 1533.979F, Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.5);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1.5);
      assertNull(doubleArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = '>';
      charArray0[2] = '0';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'L', '>', '0'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst((double[]) null, 1.5);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 6, 1958);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'L', '>', '0'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(7, int0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (-1939.6953F);
      floatArray0[2] = (float) (byte) (-104);
      floatArray0[3] = (float) 'L';
      floatArray0[4] = (float) 7;
      floatArray0[5] = (float) 'L';
      floatArray0[6] = (float) 7;
      floatArray0[7] = (float) '0';
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '0';
      intArray0[1] = 7;
      intArray0[2] = (int) (byte) (-104);
      intArray0[3] = (int) '>';
      intArray0[4] = (int) '0';
      intArray0[5] = (int) '0';
      intArray0[6] = (int) '0';
      intArray0[7] = (int) '0';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      long[] longArray0 = new long[7];
      ArrayUtils.shift(longArray0, 1958, 2, 2);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 653.87, (-374));
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 2;
      intArray0[5] = 1958;
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-1), 2);
      assertEquals(2, int2);
      assertEquals(6, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {2, (-1), (-1), (-1), 2, 1958}, intArray0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.valueOf("`>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-4556), 3942, 3735);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-74);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte) (-1));
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-74)}, shortArray0);
      
      double[] doubleArray3 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      
      ArrayUtils.reverse(intArray0, (-968), 3);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(1, longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, (-580.31351226));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)531;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1518);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)531, (short)1, (short) (-1), (short)1, (short)1, (short) (-1), (short)1, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[2];
      longArray0[4] = 0L;
      floatArray0[1] = (float) (short)1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1624.534F));
      assertEquals((-1), int1);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)531;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-1);
      ArrayUtils.shift(intArray0, (-779), Integer.MAX_VALUE, (int) (short)1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), 531, 1}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains((float[]) null, (float) 0L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) (short)1;
      objectArray0[3] = (Object) (short) (-1);
      objectArray0[4] = (Object) (short)1;
      objectArray0[5] = (Object) (-1);
      objectArray0[6] = (Object) (short)1;
      int int2 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[6]);
      assertEquals(6, int2);
      assertEquals(7, objectArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 1091);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      ArrayUtils.shift(longArray0, 99);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'I';
      charArray0[2] = 'V';
      charArray0[3] = 'w';
      charArray0[4] = 'k';
      charArray0[5] = 'G';
      charArray0[6] = 'V';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(14, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'j', 'I', 'V', 'w', 'k', 'G', 'V'}, charArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)49;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)49);
      assertEquals(0, int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)49}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      Float float0 = new Float((double) 2303.0828F);
      assertEquals(2303.0828F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1076);
      shortArray0[1] = (short) (-27);
      shortArray0[2] = (short) (-3631);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631), (short) (-1076), (short) (-27), (short) (-3631)}, shortArray1);
      
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (short) (-27), (-3347));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((double[]) null, (-3347), (int) (short) (-27));
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byteArray0[2] = byte0;
      byteArray0[3] = byte2;
      byteArray0[4] = byte2;
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-52), 0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1041), (-26), 47);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1613);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      byte[] byteArray1 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      ArrayUtils.shift((char[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-5492L));
      assertEquals((-5492L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.swap(shortArray0, (int) (short)0, (-1458), (int) (short)3099);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, (-1458));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)9}, byteArray1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray1 = new long[4];
      longArray1[0] = 1250L;
      longArray1[1] = (long) (byte)9;
      longArray1[2] = (-5492L);
      longArray1[3] = (long) (short)3099;
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-5492L), 1807);
      assertEquals(2, int0);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {1250L, 9L, (-5492L), 3099L}, longArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9}, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive((Byte[]) null, (byte)9);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-42L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-2342L), 2);
      assertEquals((-1), int0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 2, 2);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short)40;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 2146743655);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1756L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)102);
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'X';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      charArray0[6] = ',';
      charArray0[7] = 'C';
      charArray0[8] = ',';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', 'X', 'C', ',', 'X', 'C', 'X', ',', 'C', ','}, charArray1);
      assertArrayEquals(new char[] {'X', 'C', ',', 'X', 'C', 'X', ',', 'C', ','}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[2] = (int) 'C';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {44, 44, 67}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) 'X';
      longArray0[2] = (long) 'X';
      longArray0[3] = (long) 67;
      longArray0[4] = (long) ',';
      longArray0[5] = 26L;
      longArray0[6] = (long) 'X';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 102L);
      assertEquals((-1), int0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 88L, 88L, 67L, 44L, 26L, 88L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, (int) (byte)77);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (byte) (-58);
      floatArray0[4] = (float) (byte) (-58);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (-2136911681));
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, (-58.0F), (-58.0F)}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 250;
      intArray0[1] = 250;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      ArrayUtils.swap(intArray0, 1896, 0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {250, 250, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 567.84F, 1234);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, 1234);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {250, 250, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      Double double0 = Double.valueOf(2401.794845);
      assertEquals(2401.794845, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(4585.01480041);
      assertEquals(4585.01480041, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.IssueExtension";
      objectArray0[1] = (Object) double0;
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.IssueExtension";
      objectArray0[3] = (Object) double1;
      objectArray0[3] = (Object) double1;
      objectArray0[5] = (Object) double0;
      objectArray0[6] = (Object) double0;
      objectArray0[7] = (Object) (short)0;
      objectArray0[8] = (Object) double1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.IssueExtension");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, objectArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-214.2261F);
      floatArray0[1] = (-2330.1682F);
      floatArray0[2] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-631));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short) (-631);
      intArray0[4] = (-1);
      intArray0[5] = (int) (short)0;
      ArrayUtils.swap(intArray0, 0, (int) (short)0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, (-631), (-1), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      
      byte byte6 = (byte) (-74);
      Byte byte7 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte7;
      byteArray0[2] = byte7;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)119;
      byteArray1[6] = byte2;
      byteArray0[5] = (Byte) (byte) (-74);
      ArrayUtils.shift(byteArray1, (int) byte6, (int) (byte)119, (int) (byte)0);
      assertEquals(8, byteArray1.length);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119, (byte)119, (byte) (-74), (byte)119, (byte) (-1), (byte)0}, byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-58);
      shortArray0[2] = (short) (byte)119;
      shortArray0[3] = (short) (byte) (-74);
      shortArray0[5] = (short) (byte)119;
      shortArray0[6] = (short) byte6;
      shortArray0[7] = (short) byte6;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)54);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-58), (short)0, (short)119, (short) (-74), (short)0, (short)119, (short) (-74), (short) (-74)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte)2, 2, (-732));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      
      Float float0 = new Float((double) (short)2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1081.30277307939));
      assertEquals((-1081.3027F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-109.0), 0, (-92.0));
      assertEquals((-1), int1);
      assertEquals(13, doubleArray0.length);
      assertTrue(int1 == int0);
      
      ArrayUtils.shift(shortArray0, (-2744), 4189, 11);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      int int2 = ArrayUtils.indexOf(shortArray0, (short)2, 2);
      assertEquals((-1), int2);
      assertEquals(3, shortArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0);
      assertNotNull(bitSet0);
      assertEquals(13, bitSet0.length());
      assertEquals("{1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}", bitSet0.toString());
      assertEquals(11, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (-368L);
      longArray0[3] = (long) (byte) (-18);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-368L));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2L, (-368L), (-18L)}, longArray0);
      assertArrayEquals(new long[] {(-368L), 0L, 2L, (-368L), (-18L)}, longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '2';
      charArray0[4] = '3';
      charArray0[5] = '2';
      charArray0[6] = '3';
      charArray0[7] = '3';
      charArray0[8] = '3';
      ArrayUtils.reverse(charArray0, (-1), (-1145));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '2', '3', '2', '3', '3', '3'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-1), (int) (byte)0, (-279));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '2', '3', '2', '3', '3', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(2144893478, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 2543L;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 110, 1484);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)7;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-922));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(12, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      byte[] byteArray2 = ArrayUtils.insert((-1376), byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 1360L, (-292L), 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {382L, 406L, 0L, (-1119L), 1360L, (-292L), 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (int) (byte)2, 93);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, 37);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      charArray1[1] = '3';
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean0);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '3'}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-92), charArray1, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -92, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      ArrayUtils.reverse((char[]) null, 1871, 1871);
      ArrayUtils.shift((char[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      ArrayUtils.shift(longArray0, 2000, 2000, 2018);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 2543L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2543L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (-1218.2264719282);
      int[] intArray0 = new int[2];
      intArray0[0] = 2018;
      intArray0[1] = 2124878540;
      ArrayUtils.swap(intArray0, (-3584), 1250, 4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2018, 2124878540}, intArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)455;
      shortArray0[2] = (short)455;
      shortArray0[3] = (short)455;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)455, (short)455, (short)455, (short)1, (short)455, (short)455, (short)455}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)455, (short)455, (short)455}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, 1);
      assertEquals(2, objectArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayUtils.swap(intArray0, (-1506), 256, 37);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 1, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', '\u0000'}, charArray1);
      
      long[] longArray0 = new long[9];
      doubleArray0[2] = (double) 'f';
      longArray0[1] = 2067L;
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'f');
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'f', 'f', '\u0000'}, charArray2);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 102.0, 0.0, 262.0}, doubleArray0, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 102.0, 0.0, 262.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1952);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte4 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) byte4);
      assertEquals((-1), int0);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) byte0, (int) byte0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert((-1766), shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray2);
      
      boolean[] booleanArray0 = new boolean[0];
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, 2188);
      assertEquals((-1), int2);
      assertEquals(0, booleanArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(3, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3355L);
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-7830);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)57;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2, 3, 5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-7830), (short)0, (short)0, (short)50, (short)0, (short)0, (short)57}, shortArray0);
      
      ArrayUtils.swap(booleanArray0, 34, (int) (short)57, 37);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Float float0 = new Float((double) (short)50);
      assertEquals(50.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(861.99F);
      assertEquals(861.99F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-827.069584969));
      assertEquals((-827.0696F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (-28.81129277002);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) 34;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {37.0, (-28.81129277002), 0.0, 0.0, 0.0, 34.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-986), (-2145714714), 3447);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-1720), (-1720), (-1720));
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 1, 16);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16)}, byteArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, (-7830), (-587), 1027);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16), (byte) (-16)}, byteArray0);
      
      ArrayUtils.shift((short[]) null, (-1578), (-1034), (int) (byte) (-16));
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-1), (-27));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1276.77F;
      floatArray0[1] = (-4407.7F);
      floatArray0[2] = (-2286.0F);
      floatArray0[3] = (-2286.0F);
      floatArray0[4] = 303.039F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1127.0F);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-58), (int) (byte)4);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-58), (byte) (-44)}, byteArray1);
      
      double[] doubleArray0 = new double[0];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-44);
      shortArray0[1] = (short) (byte) (-44);
      ArrayUtils.shift(shortArray0, (-145), (int) (byte) (-44), 3);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-44), (short) (-44)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 382L;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {382.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray1, longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 382L;
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 382.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 438, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 457);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 376.7, (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short)6, 438);
      assertEquals((-1), int2);
      assertEquals(0, shortArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 177, 695, 1518);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 12.535855590676, 1306);
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '6');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm'}, charArray1);
      
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)53, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'm';
      objectArray0[2] = (Object) 'm';
      objectArray0[3] = (Object) 'm';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "CartesianEnumSource annotation not found");
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) (byte)53;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)40);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 0, 0, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-1), 0}, intArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (-1), 53.2187580395);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)60;
      floatArray0[1] = (float) (-1);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 60.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 4062);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-92));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte) (-92), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-92), (byte)0}, byteArray0);
      
      Byte[] byteArray2 = new Byte[9];
      byteArray2[0] = (Byte) (byte) (-92);
      byteArray2[1] = (Byte) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)0;
      byteArray2[5] = (Byte) (byte) (-92);
      byteArray2[6] = (Byte) (byte)0;
      byteArray2[7] = (Byte) (byte)0;
      byteArray2[8] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)110);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-92), (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-92), (byte)0, (byte)0, (byte)0}, byteArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 438, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 457);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 376.7, (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)46);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), (-843), 4868);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 457;
      floatArray0[2] = (float) (-843);
      floatArray0[3] = (float) 457;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 457.0F, (-843.0F), 457.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 457.0F, (-843.0F), 457.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-96));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)51);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      char[] charArray0 = new char[5];
      charArray0[1] = 'U';
      charArray0[2] = '+';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'U', '+', 'j', 'j'}, charArray0);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.1);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.1, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'U', '+', 'j', 'j'}, charArray0);
      assertArrayEquals(new char[] {'U', '+', 'j', 'j'}, charArray1);
      
      char[] charArray2 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray2);
      
      char[] charArray3 = ArrayUtils.subarray(charArray1, 7, 7);
      assertNotNull(charArray3);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(0, charArray3.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray3);
      assertNotSame(charArray1, charArray3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray3, charArray0);
      assertNotSame(charArray3, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray0));
      assertFalse(charArray3.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000', 'U', '+', 'j', 'j'}, charArray0);
      assertArrayEquals(new char[] {'U', '+', 'j', 'j'}, charArray1);
      assertArrayEquals(new char[] {}, charArray3);
      
      Integer integer0 = Integer.valueOf(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2018;
      longArray0[1] = (long) (-3087);
      longArray0[2] = (long) 2124878540;
      longArray0[3] = (long) (-3087);
      longArray0[4] = (long) (-3087);
      ArrayUtils.shift(longArray0, 0, 6, (-550));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {2018L, (-3087L), 2124878540L, (-3087L), (-3087L)}, longArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-2818.2), (-3727));
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, (double) 2000, 2000);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-27);
      doubleArray0[2] = (-1077.11083777);
      ArrayUtils.swap(booleanArray1, 1961, (int) (byte) (-103));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6184.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-27.0), (-1077.11083777)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6184.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      int[] intArray0 = new int[2];
      long[] longArray0 = new long[6];
      longArray0[0] = 406L;
      longArray0[1] = 615L;
      longArray0[2] = 2543L;
      longArray0[3] = 1204L;
      longArray0[4] = (-107L);
      longArray0[5] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 900L, 46);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {406L, 615L, 2543L, 1204L, (-107L), (-1L)}, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
      assertEquals("{0, 1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertEquals(2, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 1204L;
      doubleArray0[2] = (double) 1072;
      doubleArray0[3] = (double) (-1L);
      doubleArray0[4] = (double) (-107L);
      doubleArray0[5] = (double) 615L;
      doubleArray0[6] = (double) 406L;
      doubleArray0[7] = (double) 0;
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1.0), 1204.0, 1072.0, (-1.0), (-107.0), 615.0, 406.0, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1L), (-107L), 1204L, 2543L, 615L, 406L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom((-1L));
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '}';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom1);
      assertEquals(2, charArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new char[] {'}', '@'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (-248));
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2147483647L;
      longArray0[1] = (long) (byte)53;
      longArray0[2] = (long) (byte)53;
      longArray0[3] = (long) 1073741795;
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      charArray0[8] = 'r';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', '\"', '\"', '\"', '\"', 'r'}, charArray0);
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'r';
      charArray2[1] = 'r';
      charArray2[2] = 'G';
      charArray2[3] = '\"';
      charArray2[4] = '\"';
      charArray2[5] = 'r';
      charArray2[6] = 'r';
      charArray2[7] = '\"';
      charArray2[8] = 'r';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray2, (java.util.Random) mockRandom0);
      assertEquals(9, charArray2.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', 'G', '\"', '\"', 'r', 'r', '\"', 'r', 'r'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2147483647L);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte) (-121);
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-121);
      longArray0[2] = (long) 76;
      longArray0[3] = (-820L);
      longArray0[4] = (long) 76;
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) (-820L);
      longArray1[1] = (Long) (-121L);
      longArray1[2] = (Long) (-121L);
      longArray1[3] = (Long) (-820L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 0L);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-820L), (-121L), (-121L), (-820L)}, longArray2);
      
      ArrayUtils.shift(byteArray0, 11, (-2654), 2146140427);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      long[] longArray3 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray3);
      assertEquals(10, longArray3.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray2));
      assertArrayEquals(new long[] {(-121L), 0L, 76L, (-820L), 76L, (-121L), 0L, 76L, (-820L), 76L}, longArray3);
      assertArrayEquals(new long[] {(-121L), 0L, 76L, (-820L), 76L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) longArray1[0]);
      assertNull(floatArray0);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-17));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short) (-17), (-8));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)123);
      assertNull(byteArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-17);
      ArrayUtils.shift(longArray0, (int) (byte) (-112), 2145861676, (int) (short) (-17));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-17L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[4] = (-1.0F);
      floatArray0[8] = 0.0F;
      ArrayUtils.shift(floatArray0, 6, 11, 11);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1135.0F), 0.0F, (-1.0F), 1242.14F, 0.0F, 0.0F, 1477.31F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1477.31F, 0.0F, 0.0F, 1242.14F, (-1.0F), 0.0F, (-1135.0F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte byte6 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte7 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte7);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-17.847312620223253), 1631.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (short)1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3087);
      intArray0[1] = 1;
      intArray0[2] = 1;
      ArrayUtils.reverse(intArray0, 1, (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-3087), 1, 1}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)43;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 873, (int) (byte)43);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)77, (byte)43}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {100.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 8192;
      intArray0[1] = 2508;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2508);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {8192, 2508}, intArray0);
      assertArrayEquals(new int[] {2508, 8192, 2508}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 8192;
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2508;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 'f', 2508);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2508.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)12, (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-1)}, byteArray0);
      
      Boolean boolean0 = new Boolean("/lw}-wG6exLZI&;=");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Byte[] byteArray2 = new Byte[8];
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray2[1] = byte1;
      byteArray2[2] = (Byte) (byte)12;
      byteArray2[3] = (Byte) (byte) (-1);
      byteArray2[4] = (Byte) (byte)12;
      Byte byte2 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray2[5] = byte2;
      byteArray2[6] = (Byte) (byte) (-6);
      byteArray2[7] = (Byte) (byte)12;
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (int) 8, 8192);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (-3138);
      intArray0[3] = (int) (byte)35;
      intArray0[4] = 84;
      intArray0[5] = (int) (byte)35;
      intArray0[6] = (int) (byte)35;
      intArray0[7] = (int) (byte) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1091, (-1));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-3138), 35, 84, 35, 35, (-1)}, intArray0);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2469.6715658546);
      assertEquals(2469.6716F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2385.0F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {2469.6716F}, floatArray1, 0.01F);
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(8, intArray2.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-3138), 35, 84, 35, 35, (-1)}, intArray2);
      assertArrayEquals(new int[] {(-1), (-1), (-3138), 35, 84, 35, 35, (-1)}, intArray0);
      
      long[] longArray1 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray1, (long) (byte)79);
      assertFalse(boolean0);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray1);
      assertTrue(boolean1);
      assertEquals(0, longArray1.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[8];
      longArray0[5] = 2722L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 2722L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      long[] longArray0 = new long[2];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'g', (-986));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-986);
      ArrayUtils.swap(intArray0, (-986), (-986), 1180);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-986)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      ArrayUtils.shift((long[]) null, (-4880));
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      longArray0[1] = (long) 0;
      int[] intArray0 = new int[5];
      intArray0[3] = 0;
      intArray0[4] = 0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1314L), 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (byte)0;
      ArrayUtils.reverse(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-2146460679));
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 407;
      intArray0[1] = (-2331);
      intArray0[3] = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)1);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 1L, 1L, 0L}, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) byte0;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray0, (-811));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-110), (short)0, (short)1, (short)1}, shortArray0);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1063.289028210541);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = 119.0;
      doubleArray0[5] = (double) (byte) (-110);
      doubleArray0[6] = (double) byte0;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1063.289028210541), 1.0, 1.0, 0.0, 119.0, (-110.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1063.289028210541), 1.0, 1.0, 0.0, 119.0, (-110.0), 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)0, (-2.0));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((float[]) null, 47);
      int[] intArray0 = new int[6];
      intArray0[0] = 99;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = Integer.MAX_VALUE;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {99, Integer.MAX_VALUE, Integer.MAX_VALUE, 0, 0, Integer.MAX_VALUE}, intArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 1664, 1);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray3.length);
      assertSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray4 = ArrayUtils.addFirst(doubleArray1, 2290.113905359152);
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2290.113905359152}, doubleArray4, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'q');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray1);
      
      char[] charArray2 = ArrayUtils.subarray((char[]) null, 9, (int) (byte)119);
      assertNull(charArray2);
      
      Integer integer0 = Integer.valueOf(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2146323111);
      assertEquals(2146323111, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-2093L));
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2093L), (-2041));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', '\u0000', '`', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) ' ';
      intArray1[1] = (int) 'y';
      intArray1[2] = (int) (byte)6;
      intArray1[3] = (int) '.';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      ArrayUtils.shuffle(intArray1, (java.util.Random) mockRandom0);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {121, 32, 46, 6}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (byte)119, 177);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.shift((Object[]) longArray0, 1125, 1125, (-2889));
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)18, (byte)4, (byte)121, (byte)22, (byte) (-35), (byte)59, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-35);
      shortArray0[1] = (short) (byte)4;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-35), (short)4}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[3] = (double) 2543L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-21L);
      doubleArray0[6] = (double) (byte)22;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2543.0, 0.0, (-21.0), 22.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2543.0, 0.0, (-21.0), 22.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1081.30277307939), (-27));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '?';
      charArray0[2] = 'b';
      charArray0[3] = 'w';
      Byte byte0 = new Byte((byte) (-20));
      assertEquals((byte) (-20), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 2752, (int) (byte) (-20));
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'b', '?', 'b', 'w', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      
      Float[] floatArray0 = new Float[9];
      Float float0 = new Float(4070.89239);
      assertEquals(4070.8923F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2446.6F);
      assertEquals(2446.6F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 3);
      assertEquals(3.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-852.04938760436));
      assertEquals((-852.0494F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      floatArray0[4] = float4;
      Float float5 = new Float((double) 1.0F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      floatArray0[5] = float5;
      Float float6 = new Float((float) floatArray0[2]);
      assertEquals(3.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals(9, floatArray0.length);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      floatArray0[6] = float6;
      Float float7 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      
      floatArray0[7] = float7;
      Float float8 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      
      floatArray0[8] = float8;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {4070.8923F, 2446.6F, 3.0F, 1.0F, (-852.0494F), 1.0F, 3.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)34;
      longArray0[4] = (long) (byte)40;
      intArray0[4] = (int) (byte)0;
      Byte byte0 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift(longArray0, 3, Integer.MAX_VALUE, 2115903004);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 40L, 0L, 0L, 0L, 1360L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)34;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {34.0F, 0.0F, 0.0F, 34.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, 0);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0}, byteArray0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-2146163580), (-2146163580), (-2146163580));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2552.657F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertNotNull(intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 2, 2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray2);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      Integer integer0 = Integer.getInteger("=xr*", (int) (byte) (-123));
      assertEquals((-123), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(32);
      assertEquals(32, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean2);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int[] intArray3 = ArrayUtils.removeAllOccurrences((int[]) null, 157);
      assertNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 57);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      ArrayUtils.swap(longArray0, 57, 57, 57);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      shortArray0[1] = (short) (-543);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-619);
      shortArray0[5] = (short) (-3199);
      shortArray0[6] = (short) (-3199);
      shortArray0[7] = (short) (-793);
      shortArray0[8] = (short)457;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)457);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-3199), (short) (-793), (short)457}, shortArray0);
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-3199), (short) (-793)}, shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short) (-7830);
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte byte1 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = ArrayUtils.get(byteArray0, (int)  (-619), byte1);
      assertEquals((byte)91, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(3, byteArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte0));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      assertEquals(3, byteArray0.length);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[1];
      BitSet bitSet1 = new BitSet();
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      bitSet0.and(bitSet1);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      ArrayUtils.shift((boolean[]) null, 900);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 3);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      long[] longArray0 = new long[8];
      float[] floatArray0 = new float[0];
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)595;
      ArrayUtils.swap(shortArray0, (-1965), (-1965), (int) (short)595);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)595}, shortArray0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)595;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3, shortArray1, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', '\u0000', '`', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.', '\u0000'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', '\u0000', '`', 'y', '.'}, charArray0);
      
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'Z';
      charArray2[1] = '.';
      charArray2[2] = 'y';
      ArrayUtils.reverse(charArray2, (int) (byte)6, 2485);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'Z', '.', 'y'}, charArray2);
      
      ArrayUtils.shift(charArray1, 2, 2, (-23));
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.', '\u0000'}, charArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)6;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)6;
      shortArray0[4] = (short) (byte)6;
      shortArray0[5] = (short) byte0;
      ArrayUtils.swap(shortArray0, (-1), (-900), (-84));
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)6, (short)6, (short)6, (short)6, (short)6, (short)6}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = 'Y';
      charArray0[2] = '[';
      charArray0[3] = '6';
      charArray0[4] = 'K';
      ArrayUtils.shift(charArray0, 2, 2, 2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', 'Y', '[', '6', 'K'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (-543));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-543);
      longArray0[1] = (long) 476;
      longArray0[2] = (long) 1073741795;
      ArrayUtils.shift(longArray0, 3765);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-543L), 476L, 1073741795L}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'r';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\"', 'r'}, charArray0);
      assertArrayEquals(new char[] {'\"', 'r', '\"', 'r'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-3869L);
      longArray0[1] = (-1127L);
      longArray0[2] = (-1249L);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = 145L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-3869L), (-1127L), (-1249L), (-1L), 0L, 145L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1553, (double) (byte)7);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), 0.0, 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[2];
      doubleArray0[2] = (double) 1643L;
      longArray0[1] = (long) 1553;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 1553L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2552.657F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertNotNull(intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 2, 2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray2);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      Integer integer0 = Integer.getInteger("=xr*", (int) (byte) (-123));
      assertEquals((-123), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(32);
      assertEquals(32, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray0.length);
      assertEquals(4, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean2);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      Character character0 = Character.valueOf('v');
      assertEquals('v', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('v');
      assertEquals('v', (char)character1);
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      
      characterArray0[1] = character1;
      char char0 = 'J';
      Character character2 = Character.valueOf('J');
      assertEquals('J', (char)character2);
      assertNotNull(character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('J');
      assertEquals('J', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      
      characterArray0[3] = character3;
      Character character4 = new Character('[');
      assertEquals('[', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character1));
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character2));
      
      characterArray0[4] = character4;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'v', 'v', 'J', 'J', '['}, charArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = new Byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte) (-83));
      assertEquals((byte) (-83), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[1] = byte1;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray1[6] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) char0, byteArray0, byteArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 74, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(759, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 759, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 438, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 457);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 376.7, (-1));
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)46);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-1), (-843), 4868);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 457;
      floatArray0[2] = (float) (-843);
      floatArray0[3] = (float) 457;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 457.0F, (-843.0F), 457.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 457.0F, (-843.0F), 457.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-107));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2051), 660);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)88;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)101, 526);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(4, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)0, (byte)101, (byte) (-105), (byte)88}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2051);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2051)}, intArray0);
      assertArrayEquals(new int[] {(-2051)}, intArray1);
      
      ArrayUtils.shift(booleanArray0, (-2051), 573, 47);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1300));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertTrue(boolean1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2051)}, intArray0);
      assertArrayEquals(new int[] {(-2051)}, intArray1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-89));
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 65);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-164);
      shortArray0[1] = (short)43;
      shortArray0[2] = (short) (-3749);
      shortArray0[3] = (short) (-2008);
      shortArray0[4] = (short)23259;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-164), (short)43, (short) (-3749), (short) (-2008), (short)23259}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2008);
      intArray0[1] = (int) (short) (-2008);
      intArray0[2] = (int) (short)43;
      intArray0[3] = (int) (short)43;
      intArray0[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 136);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2008), (-2008), 43, 43, (-1)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 25, 25);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.shift((Object[]) booleanArray1, (int) (short)43, (-2008), 43);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Integer integer0 = new Integer((-2008));
      assertEquals((-2008), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 65);
      assertEquals(0, int1);
      assertEquals(1, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2, 6);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift((char[]) null, (int) (byte) (-1), 2, (int) (byte) (-1));
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), 54);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) (-1);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray4, 0.0, (-1720), (-1315.6570437168805));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(1, doubleArray4.length);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '6');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm'}, charArray1);
      
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)53, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'm';
      objectArray0[2] = (Object) 'm';
      objectArray0[3] = (Object) 'm';
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "CartesianEnumSource annotation not found");
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) (byte)53;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (byte)53;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 6, (-3144.041006311442));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-823);
      boolean boolean0 = ArrayUtils.contains(intArray0, (-823));
      assertTrue(boolean0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ArrayUtils.reverse(charArray0, (-2776), (-2776));
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'3'}, charArray0);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'a';
      charArray1[1] = '[';
      charArray1[2] = '2';
      charArray1[3] = '3';
      charArray1[4] = '3';
      ArrayUtils.shift(charArray1, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'a', '[', '2', '3', '3'}, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2776);
      intArray0[1] = (int) '3';
      boolean boolean0 = ArrayUtils.contains(intArray0, 51);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2776), 51}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte1);
      assertTrue(boolean0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[2] = (short) (byte)53;
      shortArray0[3] = (short) (byte)53;
      shortArray0[4] = (short) (byte)53;
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41;
      ArrayUtils.reverse(doubleArray0, 41, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 41, (-748));
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) 41;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)88;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)65, (-2324));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(3, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88}, byteArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray1);
      
      ArrayUtils.shift(booleanArray0, 573, (int) (byte) (-105), 100);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, false, 41);
      assertEquals((-1), int1);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      ArrayUtils.swap(byteArray0, 1992, 1839, (-2144));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-1), (byte) (-1), (byte)5, (byte) (-107), (byte) (-1), (byte) (-16)}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1839;
      longArray0[1] = (long) (byte) (-92);
      longArray0[2] = (long) (byte) (-92);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (-2144);
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-2144L), (-1L), (-92L), (-92L), 1839L}, longArray0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      shortArray0[1] = (short) (-543);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-543);
      doubleArray0[1] = (-109.0);
      doubleArray0[2] = (double) (-214);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 980.625688663965;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-216.6236385), (-2126221432));
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-543.0), (-109.0), (-214.0), 2.0, 980.625688663965}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 2479.268, 0);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-543.0), (-109.0), (-214.0), 2.0, 980.625688663965}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)121, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) (short) (-7830);
      objectArray0[2] = (Object) (-543.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      Byte byte1 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)object0));
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)object0));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)121);
      assertEquals((byte)121, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)object0));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)byte3));
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2096542018, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " does not have data element at ";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray2);
      assertTrue(boolean0);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Byte[] byteArray3 = new Byte[7];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = byte1;
      byteArray3[1] = byte1;
      byteArray3[2] = byte1;
      byteArray3[3] = byte1;
      byteArray3[4] = byte1;
      byteArray3[5] = byte1;
      byteArray3[6] = byte1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) byte0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) byte0;
      intArray0[8] = (int) byte0;
      Byte[] byteArray4 = ArrayUtils.removeAll(byteArray3, intArray0);
      assertNotNull(byteArray4);
      assertEquals(7, byteArray3.length);
      assertEquals(6, byteArray4.length);
      assertEquals(9, intArray0.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(641);
      assertEquals(641, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-349), (int) 'M');
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3119);
      doubleArray0[1] = (double) (short) (-349);
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3119.0), (-349.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3119.0), (-349.0), 1.0, (-3119.0), (-349.0), 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3119.0), (-349.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float((-1300.8103369301855));
      assertEquals((-1300.8103F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 641);
      assertEquals(641.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float((float) 1);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1472.5928087816178);
      assertEquals(1472.5928F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-349.0));
      assertEquals((-349.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-5023.739F));
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1300.8103F), 641.0F, 1.0F, 1472.5928F, (-349.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift((short[]) null, 5);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 2);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)111, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)111, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)63);
      assertEquals((byte)63, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)111, (byte)byte6);
      assertNotNull(byte6);
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      
      byteArray0[6] = byte7;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) byte0);
      assertEquals(111.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      int int1 = ArrayUtils.indexOf(intArray0, 2, (-1633));
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 6;
      floatArray0[1] = 1814.0062F;
      floatArray0[2] = (float) (byte)35;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 11;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1477.31F;
      ArrayUtils.shift(floatArray0, (-40), (int) (byte) (-84), 11);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {6.0F, 1814.0062F, 35.0F, 0.0F, 11.0F, 0.0F, 1477.31F}, floatArray0, 0.01F);
      
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte2);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = ArrayUtils.get((Byte[]) null, (int)  (-58));
      assertNull(byte4);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-58);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)1;
      ArrayUtils.swap(byteArray1, (int) (byte) (-58), 2, (int) (byte) (-1));
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)1, (byte) (-58), (byte)1, (byte) (-1), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2341.0F;
      floatArray0[1] = 2341.0F;
      floatArray0[2] = (-2299.777F);
      floatArray0[3] = (-3055.1282F);
      floatArray0[4] = 0.0F;
      ArrayUtils.reverse(floatArray0, 1708, 0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {2341.0F, 2341.0F, (-2299.777F), (-3055.1282F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1708);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2341.0F, 2341.0F, (-2299.777F), (-3055.1282F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2010;
      doubleArray0[1] = (-1218.2264719282);
      doubleArray0[2] = (double) 2124878540;
      doubleArray0[3] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-109.0), (-214));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2010.0, (-1218.2264719282), 2.12487854E9, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 2124878540, 1359);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2010.0, (-1218.2264719282), 2.12487854E9, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1218.2264719282);
      objectArray0[1] = (Object) 2010.0;
      objectArray0[2] = (Object) 0.0;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((-1218.2264719282), object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 2.12487854E9;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[4]);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(5, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[3] = byte3;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1615), (-490));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (int) (short)0, (int) (short)0, 1);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) 0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (short)2);
      assertEquals(2.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) 476;
      longArray0[2] = (long) 476;
      longArray0[3] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-782L), 476);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 476L, 476L, (-1L)}, longArray0);
      
      int[] intArray0 = new int[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0, 476);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 476;
      intArray2[1] = 476;
      intArray2[2] = 1072;
      intArray2[3] = 476;
      boolean boolean0 = ArrayUtils.isEmpty(intArray2);
      assertFalse(boolean0);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {476, 476, 1072, 476}, intArray2);
      
      boolean boolean1 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.reverse(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-1L), 476L, 476L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2065), 6);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2, 6);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift((char[]) null, (int) (byte) (-1), 2, (int) (byte) (-1));
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4193));
      assertEquals((-4193), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 6);
      assertEquals(3, int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      ArrayUtils.swap((boolean[]) null, 0, 1, (-2145969959));
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Float float0 = new Float((double) (-2145969959));
      assertEquals((-2.14596992E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ArrayUtils.reverse(byteArray0, (-2145969959), (-2145969959));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)2}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte[] byteArray4 = ArrayUtils.removeAllOccurrences(byteArray1, (Byte) null);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2145969959);
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2.145969959E9)}, doubleArray1, 0.01);
      
      byte[] byteArray5 = ArrayUtils.add(byteArray0, (byte)2);
      assertNotNull(byteArray5);
      assertEquals(1, byteArray5.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray0, byteArray5);
      assertNotSame(byteArray0, byteArray3);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {(byte)2}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Float[] floatArray2 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray2);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)7;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)3;
      shortArray0[1] = (short) (byte) (-35);
      shortArray0[2] = (short) (byte) (-107);
      shortArray0[3] = (short) (byte)4;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertArrayEquals(new short[] {(short)3, (short) (-35), (short) (-107), (short)4}, shortArray0);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 16, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-1034));
      assertEquals((-1034), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 1027, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '2';
      longArray0[1] = (long) '2';
      longArray0[2] = (long) (short)0;
      longArray0[3] = (-1652L);
      longArray0[4] = (long) (-1034);
      longArray0[5] = (long) 1027;
      longArray0[6] = (long) 16;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {50L, 50L, 0L, (-1652L), (-1034L), 1027L, 16L}, longArray1);
      assertArrayEquals(new long[] {50L, 50L, 0L, (-1652L), (-1034L), 1027L, 16L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[16];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-18), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -18, Length: 16
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      short short0 = (short) (-1);
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1);
      doubleArray0[1] = (double) (short) (-1);
      doubleArray0[2] = 4602.1986572409;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) (short) (-1);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1.0));
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 4602.1986572409, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = true;
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1517, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1517, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Double double0 = new Double(830.2859925787);
      assertEquals(830.2859925787, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(1236.941714);
      assertEquals(1236.941714, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(1236.941714);
      assertEquals(1236.941714, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((-2048.089211264));
      assertEquals((-2048.089211264), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      Double double5 = new Double(524.0);
      assertEquals(524.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      
      Double double6 = new Double((-1));
      assertEquals((-1.0), (double)double6, 0.01);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 524.0, (-1.0));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'z');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'z', 'f'}, charArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'f';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 'f';
      ArrayUtils.reverse(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {102L, (-1L), (-1L), (-1L), 102L}, longArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3641, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3641, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[2] = (int) (byte) (-121);
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 0, (-121), (-3505)}, intArray0);
      
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)76);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 0, (-121), (-3505)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-121);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 76;
      longArray0[3] = (-820L);
      longArray0[4] = (long) 76;
      ArrayUtils.shift(longArray0, 1, 1, (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-121L), 0L, 76L, (-820L), 76L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-820L);
      floatArray0[1] = (float) (-121L);
      floatArray0[2] = (float) (-1);
      floatArray0[4] = (float) (byte) (-121);
      floatArray0[5] = (float) '\u0000';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-820.0F), (-121.0F), (-1.0F), 0.0F, (-121.0F), 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, (-121.0F), 0.0F, (-1.0F), (-121.0F), (-820.0F)}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1510, (int) (byte)76);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-121L), 0L, 76L, (-820L), 76L}, longArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (-2144366834));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-820L);
      doubleArray0[1] = (double) (-820.0F);
      doubleArray0[2] = (double) 76L;
      doubleArray0[3] = (double) (-121L);
      doubleArray0[4] = (double) (-121.0F);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 0.0F;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)76, 777, (double) 0.0F);
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(7, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-820.0), (-820.0), 76.0, (-121.0), (-121.0), (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      ArrayUtils.shift(objectArray0, 1211);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'C');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'C'}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 1211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1211, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2065), 6);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, objectArray0.length);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'A';
      charArray0[3] = 'l';
      charArray0[4] = '8';
      charArray0[5] = '~';
      charArray0[6] = 't';
      charArray0[7] = ']';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1089), 6);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'q', 'd', 'A', 'l', '8', '~', 't', ']', 'C'}, charArray0);
      assertArrayEquals(new char[] {'q', 'd', 'A', 'l', '8', '~'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, objectArray0.length);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'q';
      charArray0[1] = 'd';
      charArray0[2] = 'A';
      charArray0[3] = 'l';
      charArray0[4] = '8';
      charArray0[5] = '~';
      charArray0[6] = 't';
      charArray0[7] = ']';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1089), 1695);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'q', 'd', 'A', 'l', '8', '~', 't', ']', 'C'}, charArray0);
      assertArrayEquals(new char[] {'q', 'd', 'A', 'l', '8', '~', 't', ']', 'C'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9L;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-60);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-124), (byte) (-60)}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-96);
      shortArray0[1] = (short) (byte) (-96);
      shortArray0[2] = (short) (byte) (-124);
      shortArray0[3] = (short) (byte) (-60);
      shortArray0[4] = (short) (byte) (-124);
      shortArray0[5] = (short) (byte) (-96);
      shortArray0[6] = (short) (byte) (-96);
      ArrayUtils.shift(shortArray0, 6);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-96), (short) (-124), (short) (-60), (short) (-124), (short) (-96), (short) (-96), (short) (-96)}, shortArray0);
      
      Byte byte0 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (short) (-96);
      objectArray0[1] = (Object) (short) (-96);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)42);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-31);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-31));
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-88), (byte) (-31)}, byteArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-88));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)57, (byte) (-88), (byte) (-31)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-31)}, byteArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)57;
      intArray0[1] = (int) (byte) (-31);
      intArray0[2] = (int) (byte) (-88);
      intArray0[3] = (int) (byte) (-88);
      intArray0[4] = (int) (byte) (-88);
      intArray0[5] = (int) (byte) (-88);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(6, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {57, (-31), (-88), (-88), (-88), (-88)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'T';
      charArray1[1] = ':';
      charArray1[2] = 'N';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-31), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -31, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = ArrayUtils.get((Byte[]) null, 1676);
      assertNull(byte2);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(1565, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Byte byte3 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1631.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-2730.608F));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3087);
      intArray0[1] = 1;
      intArray0[2] = 1;
      ArrayUtils.reverse(intArray0, 1, (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-3087), 1, 1}, intArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'a';
      charArray0[2] = ')';
      charArray0[3] = 'o';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ')');
      assertNotNull(bitSet0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'K', 'a', ')', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2481L));
      assertEquals((-2481L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long1;
      longArray0[1] = long0;
      longArray0[2] = long1;
      longArray0[3] = long0;
      longArray0[4] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertArrayEquals(new long[] {(-2481L), 0L, (-2481L), 0L, 0L}, longArray1);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2);
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1255.0F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-1152.7255F);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (long)longArray0[4];
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (long)longArray0[2];
      floatArray0[8] = (float) 0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1255.0F), (-1.0F), (-1152.7255F), 0.0F, 0.0F, 0.0F, (-1.0F), (-2481.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 182;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 182, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) (byte) (-1), 6);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift((char[]) null, (int) (byte) (-1), 6, (int) (byte) (-1));
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4193));
      assertEquals((-4193), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-33));
      assertEquals((-33), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-4193), (-33)}, intArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte) (-1));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray3, 0.0, 92.9002);
      assertEquals(0, int0);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray3, 0.01);
      
      char char0 = 'x';
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'x');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte1);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(byte1.equals((Object)byte0));
      
      int int1 = 2013265920;
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-23), doubleArray1, doubleArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -23, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9L;
      longArray0[1] = 2543L;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1802);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)113, (byte)113}, byteArray0);
      
      ArrayUtils.swap((short[]) null, 0, 102, 2);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '3';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '3');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'%', '3'}, charArray0);
      assertArrayEquals(new char[] {'%'}, charArray1);
      
      Character[] characterArray0 = new Character[4];
      characterArray0[0] = (Character) '3';
      characterArray0[1] = (Character) '%';
      characterArray0[2] = (Character) '3';
      characterArray0[3] = (Character) '3';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertEquals(4, charArray2.length);
      assertEquals(4, characterArray0.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '%', '3', '3'}, charArray2);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)113);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('Y');
      assertEquals('Y', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'Y');
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-42L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1570));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Character character0 = Character.valueOf('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char char0 = 'f';
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-37), 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {(-823)}, intArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, 1152, (int) (byte)51, 2);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1300));
      assertEquals((-1), int0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('f');
      assertEquals('f', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, characterArray0.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 554;
      floatArray0[1] = (float) 554;
      floatArray0[3] = (float) 554;
      floatArray0[4] = (float) 554;
      floatArray0[5] = 101.0F;
      floatArray0[6] = (float) 554;
      floatArray0[7] = (float) 554;
      ArrayUtils.swap(floatArray0, (-2144209396), 9);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {554.0F, 554.0F, 0.0F, 554.0F, 554.0F, 101.0F, 554.0F, 554.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)50);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1025L;
      longArray0[1] = 1204L;
      longArray0[2] = 1L;
      longArray0[3] = 1548L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L}, longArray0);
      assertArrayEquals(new long[] {1025L, 1204L, 1548L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1204L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1204L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1204L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 6.0F, (-3527));
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1204.0F, 1.0F, 1204.0F, 1.0F, 1204.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3527);
      intArray0[1] = (-3527);
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, (-3527), 7);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-3527), (-3527)}, intArray0);
      
      ArrayUtils.swap(floatArray0, (-3527), 2485, 7);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1204.0F, 1.0F, 1204.0F, 1.0F, 1204.0F}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray2);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L}, longArray0);
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L, 1025L, 1204L, 1L, 1548L}, longArray2);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-23);
      Byte byte2 = Byte.valueOf((byte) (-23));
      assertEquals((byte) (-23), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte1);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) classArray0, (int) (byte)102);
      assertEquals(0, classArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, true);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      char[] charArray1 = new char[9];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      charArray1[1] = ',';
      charArray1[2] = 'C';
      charArray1[3] = 'X';
      charArray1[4] = 'X';
      charArray1[5] = 'C';
      charArray1[6] = ',';
      charArray1[7] = 'C';
      charArray1[8] = ',';
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'R');
      assertNotNull(charArray2);
      assertEquals(9, charArray1.length);
      assertEquals(10, charArray2.length);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {',', ',', 'C', 'X', 'X', 'C', ',', 'C', ','}, charArray1);
      assertArrayEquals(new char[] {'R', ',', ',', 'C', 'X', 'X', 'C', ',', 'C', ','}, charArray2);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(0, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[3];
      longArray0[0] = long0;
      longArray0[2] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-7822));
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-7822L), 0L}, longArray1);
      
      Byte byte0 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) byte0);
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(boolean0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {0L, (-7822L), 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1044.7840653264);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1454);
      shortArray0[1] = (short)69;
      shortArray0[2] = (short) (-1662);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)74);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1454), (short)69, (short) (-1662)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1454), (short)69, (short) (-1662)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (short)0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)2);
      assertEquals(2, int1);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte2 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)119;
      longArray0[1] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {119L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 119L, (-1L)}, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      longArray0[1] = (long) '3';
      ArrayUtils.reverse(charArray0, (int) (byte) (-1), Integer.MAX_VALUE);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray0);
      
      ArrayUtils.shift((char[]) null, 8);
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray0);
      
      char[] charArray1 = ArrayUtils.insert((-24), charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      Byte byte0 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte0);
      assertNotNull(byte0);
      
      doubleArray0[5] = (double) (byte)byte0;
      Byte byte1 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-368L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-292L)}, longArray0);
      assertArrayEquals(new long[] {(-368L), 0L, (-292L)}, longArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '2';
      ArrayUtils.reverse(charArray0, (-407), 37);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      charArray1[1] = '2';
      charArray1[2] = '2';
      ArrayUtils.shift(charArray0, 2);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean0);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', '2', '2'}, charArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1118, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1118, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      char[] charArray0 = new char[3];
      ArrayUtils.shift(charArray0, (-1057));
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-18);
      longArray0[1] = (long) (byte) (-18);
      longArray0[2] = (long) (byte)89;
      longArray0[3] = (long) (byte)89;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)89;
      longArray0[6] = (-368L);
      longArray0[7] = (long) (byte) (-18);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-368L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-18L), (-18L), 89L, 89L, 0L, 89L, (-368L), (-18L)}, longArray0);
      assertArrayEquals(new long[] {(-368L), (-18L), (-18L), 89L, 89L, 0L, 89L, (-368L), (-18L)}, longArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '2';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '2';
      charArray0[7] = '3';
      charArray0[8] = '3';
      ArrayUtils.reverse(charArray0, (int) (byte) (-18), (-2776));
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '2', '3', '3', '3', '3', '2', '3', '3'}, charArray0);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, 4169, 4169);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '2', '3', '3', '3', '3', '2'}, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 4169;
      intArray0[1] = (int) '2';
      intArray0[2] = (int) '3';
      intArray0[3] = (int) '3';
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 1223;
      intArray0[6] = (int) '2';
      intArray0[7] = (-2776);
      intArray0[8] = (int) '3';
      boolean boolean0 = ArrayUtils.contains(intArray0, (-825));
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {4169, 50, 51, 51, 0, 1223, 50, (-2776), 51}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      ArrayUtils.shift(byteArray0, (int) (short) (-1), 2386, (int) (byte)1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1}, byteArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertEquals(3, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-2440L);
      longArray0[1] = (long) (short) (-1);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 732L);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {732L, (-2440L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {(-2440L), (-1L)}, longArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)1;
      byteArray1[1] = (Byte) (byte)1;
      byteArray1[2] = (Byte) (byte)1;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 16, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-1034));
      assertEquals((-1034), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 1027, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-16);
      shortArray0[1] = (short) (byte) (-16);
      ArrayUtils.shift(shortArray0, (-1034), (-390), 1187);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)74, (int) (short)74);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte) (-16));
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 3056.4138F;
      floatArray0[3] = (-1.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 3056.4138F;
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) 645.0F;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 3056.4138F;
      ArrayUtils.shift(objectArray0, (-1), 2, 0);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1112.5F;
      floatArray1[1] = (float) 0;
      boolean boolean2 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(boolean2);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new float[] {1112.5F, 0.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = '2';
      charArray0[2] = 'f';
      charArray0[3] = '5';
      charArray0[4] = '6';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1), 'f');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 16, '0');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-110);
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean1);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)101, (byte)40, (byte) (-110)}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'O';
      charArray0[1] = 'R';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      charArray0[8] = 'O';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'R');
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'R', 'O', 'R', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, charArray1);
      assertArrayEquals(new char[] {'O', 'R', 'O', 'O', 'O', 'O', 'O', 'O', 'O'}, charArray0);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      ArrayUtils.shift(booleanArray1, (-2990));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-883.6614F), (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      intArray0[1] = 2508;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2508);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-786), 2508}, intArray0);
      assertArrayEquals(new int[] {2508, (-786), 2508}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-786);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2508;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 2508);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2508.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)12, (byte)33, (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)33, (byte) (-6), (byte) (-6), (byte) (-6), (byte) (-1)}, byteArray0);
      
      Boolean boolean0 = new Boolean("/lw}-wG6exLZI&;=");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Byte[] byteArray2 = new Byte[8];
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte byte1 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray2[1] = byte1;
      byteArray2[2] = (Byte) (byte)33;
      byteArray2[3] = (Byte) (byte) (-1);
      byteArray2[4] = (Byte) (byte)12;
      Byte byte2 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray2[5] = byte2;
      byteArray2[6] = (Byte) (byte) (-6);
      byteArray2[7] = (Byte) (byte)12;
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (int) 8, (-786));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1756;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1756, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1756, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = 14L;
      ArrayUtils.reverse(intArray0, (int) (byte) (-1), 1398);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)77, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, (-580.31351226));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)531;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1518);
      assertFalse(boolean0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)531, (short)1, (short) (-1), (short)1, (short)1, (short) (-1), (short)1, (short)1}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)1;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-1624.534F));
      assertEquals((-1), int1);
      assertEquals(2, floatArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)531;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, (-1), (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {531, 1, (-1)}, intArray0);
      
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2990), longArray0, longArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2990, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) (-4556);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4556), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4556, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 1933.04854241}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)183;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-540);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1), (short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray1);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-57.07108068));
      assertEquals((-57.07108068), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-57.07108068), 0.0}, doubleArray2, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)183;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.IssueExtension");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)32;
      floatArray0[1] = (float) (short) (-540);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {32.0F, (-540.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.0F, (-540.0F)}, floatArray1, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)91;
      longArray0[1] = (long) (short)91;
      longArray0[2] = (long) (short)183;
      longArray0[3] = (long) (short) (-540);
      longArray0[4] = (long) (short)183;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short) (-540), (int) (short)32);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {91L, 91L, 183L, (-540L), 183L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-779);
      intArray0[1] = (-779);
      intArray0[2] = (-779);
      intArray0[3] = (-779);
      intArray0[4] = (-779);
      intArray0[5] = (-779);
      intArray0[6] = (-779);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-779), (-779), (-779), (-779), (-779), (-779), (-779)}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-779);
      floatArray0[1] = (float) (-779);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-779.0F), (-779.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-2146766863), (-1862));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-779.0F), (-779.0F)}, floatArray0, 0.01F);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-60), (-779));
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-779), (-779), (-779), (-779), (-779), (-779), (-779)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 1004);
      assertFalse(boolean0);
      assertEquals(7, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-779), (-779), (-779), (-779), (-779), (-779), (-779)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2146766863);
      longArray0[1] = (long) 1004;
      longArray0[2] = (long) (-779);
      longArray0[3] = (-4088L);
      longArray0[4] = (long) (-779);
      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 69);
      assertEquals((-1), int0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-2146766863L), 1004L, (-779L), (-4088L), (-779L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      longArray0[3] = 1L;
      longArray0[4] = 1825L;
      long[] longArray1 = ArrayUtils.add(longArray0, 1, 954L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-2651L), 1L, 1825L}, longArray0);
      assertArrayEquals(new long[] {0L, 954L, 0L, (-2651L), 1L, 1825L}, longArray1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 954L;
      floatArray0[2] = (float) (-2651L);
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 1L;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)1;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-106);
      byte[] byteArray2 = ArrayUtils.insert(1, byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(10, byteArray2.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-106)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte)1, (byte) (-106), (byte)13, (byte)1, (byte) (-106), (byte)2, (byte)1, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)13, (byte)13, (byte)1, (byte) (-106), (byte)2, (byte)1, (byte)0, (byte)0}, byteArray0);
      
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double((-812.1371968));
      assertEquals((-812.1371968), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1825L);
      assertEquals(1825.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((byte)13);
      assertEquals(13.0, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((byte)1);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)1);
      assertEquals(1.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      
      doubleArray0[5] = double5;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)2);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-109);
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)56, (byte) (-109)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)56, (byte) (-109), (byte)56, (byte) (-109)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1084;
      doubleArray0[1] = (double) 1084;
      doubleArray0[2] = (double) 1084;
      doubleArray0[3] = (double) 1084;
      doubleArray0[4] = (double) 1084;
      ArrayUtils.shift(doubleArray0, (-2298), 4, 1084);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1084.0, 1084.0, 1084.0, 1084.0, 1084.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.shift((Object[]) null, 2, 2, 2);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 2;
      floatArray0[5] = 1112.5F;
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 2.0F, 2.0F, 1112.5F, (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2.0F;
      doubleArray0[1] = (double) 1112.5F;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1112.5F;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1112.5F;
      doubleArray0[7] = (double) 1112.5F;
      ArrayUtils.shift(doubleArray0, (int) (byte) (-125), 2, (-2649));
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1112.5, 2.0, 2.0, 2.0, 1112.5, 2.0, 1112.5, 1112.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.insert((-1558), (byte[]) null, (byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      short[] shortArray0 = new short[5];
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)2, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(872L);
      assertEquals(872L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short)3099;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (-1922);
      ArrayUtils.swap(shortArray0, (-1592), 871, (int) (short) (-1922));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)43, (short)3099, (short)52, (short) (-1922)}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1306), (-1664));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'X';
      charArray0[1] = '(';
      charArray0[2] = 'z';
      charArray0[3] = ']';
      charArray0[4] = 'C';
      charArray0[5] = 'a';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(12, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', '(', 'z', ']', 'C', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-169), (-169));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'D';
      charArray0[2] = '(';
      charArray0[3] = '@';
      charArray0[4] = '5';
      charArray0[5] = 'W';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'D', '(', '@', '5', 'W'}, charArray0);
      assertArrayEquals(new char[] {'V', 'D', '(', '@', '5', 'W'}, charArray1);
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      DoubleStream doubleStream0 = mockRandom1.doubles();
      assertNotNull(doubleStream0);
      assertNotSame(mockRandom1, mockRandom0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      ArrayUtils.shuffle(charArray1, (java.util.Random) mockRandom1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'V', 'D', '(', '@', '5', 'W'}, charArray0);
      assertArrayEquals(new char[] {'D', '(', '@', '5', 'W', 'V'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[5] = 'w';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'w', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2341.0F;
      floatArray0[2] = (-2299.777F);
      floatArray0[3] = (-3055.1282F);
      floatArray0[4] = 0.0F;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)25;
      Byte byte2 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte2;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'b';
      charArray0[1] = '\'';
      charArray0[2] = 'M';
      charArray0[3] = '\"';
      charArray0[4] = '5';
      charArray0[5] = 's';
      charArray0[6] = '<';
      charArray0[7] = '/';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'b', '\'', 'M', '\"', '5', 's', '<', '/'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = 'I';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.add(charArray0, 'm');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'$', 'I', '}'}, charArray0);
      assertArrayEquals(new char[] {'$', 'I', '}', 'm'}, charArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 'I';
      objectArray0[1] = (Object) "F";
      objectArray0[2] = (Object) '}';
      objectArray0[3] = (Object) 'I';
      objectArray0[4] = (Object) "F";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "(");
      assertNotNull(stringArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null, 1337.4480683);
      assertNull(doubleArray2);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 2543L;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 110, 1484);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)7;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      
      Byte[] byteArray0 = new Byte[12];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      longArray0[5] = (long) (byte)byte2;
      byte byte3 = (byte)108;
      Byte byte4 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)108, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte3 == byte0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertNotNull(byteArray1);
      assertEquals(11, byteArray1.length);
      assertEquals(12, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte3 == byte0);
      
      ArrayUtils.shift(longArray0, 0, 110, (int) byte0);
      assertEquals(7, longArray0.length);
      assertFalse(byte0 == byte3);
      assertArrayEquals(new long[] {(-89L), 0L, 2543L, 0L, 0L, 0L, 0L}, longArray0);
      
      ArrayUtils.shift(booleanArray0, 1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      ArrayUtils.shift(shortArray0, 3758, 2145549372, 470);
      assertEquals(1, shortArray0.length);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(11, byteArray1.length);
      assertEquals(12, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte3 == byte0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[2] = (-1119L);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1119L);
      objectArray0[1] = (Object) 406L;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-4556), 3942, 3735);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-74);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (byte) (-1));
      assertTrue(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-74)}, shortArray0);
      
      double[] doubleArray3 = ArrayUtils.insert(2449, doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE, 74, 4);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE}, intArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4556));
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-74)}, shortArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short) (-1);
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) (short) (-1);
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) byte1;
      objectArray0[5] = (Object) (byte) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) (short) (-1);
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertEquals(8, objectArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      longArray0[0] = (long) 0;
      int[] intArray0 = new int[5];
      longArray0[0] = (long) (-1);
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, 0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      Short short0 = new Short((short)2704);
      assertEquals((short)2704, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)35);
      assertEquals((short)35, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, '@');
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(shortArray1, (-2521), 1936, (int) (byte)102);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.swap(charArray0, (int) (byte)102, 3691);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      ArrayUtils.swap(byteArray0, 1403, (-84), 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3921L, (-3173), (double) 3921L);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap(byteArray0, 1403, (-84), 1760);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'j';
      charArray0[2] = '!';
      charArray0[3] = 'q';
      charArray0[4] = 'M';
      charArray0[5] = 'V';
      charArray0[6] = 'k';
      charArray0[7] = 'y';
      charArray0[8] = ')';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {' ', 'j', '!', 'q', 'M', 'V', 'k', 'y', ')'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'K');
      assertNull(charArray0);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, 5);
      assertNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, (-1431655765), (Byte) null);
      assertNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)54;
      shortArray0[1] = (short) (-2474);
      shortArray0[2] = (short)457;
      shortArray0[3] = (short)346;
      shortArray0[4] = (short)183;
      shortArray0[5] = (short)1157;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)54, (short) (-2474), (short)457, (short)346, (short)183, (short)1157}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2093L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = Character.toChars(3);
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0003'}, charArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-928);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1367.62);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-928.0), 3.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-928.0), 3.0, 1.5, 1367.62}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = Character.toChars(3);
      assertNotNull(charArray2);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0003'}, charArray2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-928);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1367.62);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-928.0), 3.0, 1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-928.0), 3.0, 1.5, 1367.62}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-779);
      intArray0[1] = (-779);
      intArray0[2] = (-779);
      intArray0[3] = (-779);
      intArray0[4] = (-779);
      intArray0[5] = (-779);
      intArray0[6] = (-779);
      ArrayUtils.reverse(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-779), (-779), (-779), (-779), (-779), (-779), (-779)}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-779);
      floatArray0[1] = (float) (-779);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-779.0F), (-779.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-2146766863), (-1862));
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-779.0F), (-779.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, 3787L);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, (-779), 2637);
      assertEquals((-1), int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-779), (-779), (-779), (-779), (-779), (-779), (-779)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-14L));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2893, 70);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-386), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2893;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 37.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2893.0, 0.0, 37.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte2 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, object0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-868), (-2146166981));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)34}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, Integer.MAX_VALUE);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      ArrayUtils.shift(longArray0, (-2146166981));
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 406L, 0L, (-1119L), 1360L, (-292L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) (byte)43);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-110.0);
      doubleArray0[1] = (double) (byte)43;
      doubleArray0[2] = (double) (byte)43;
      doubleArray0[3] = (double) (byte)43;
      doubleArray0[4] = (double) (byte)43;
      doubleArray0[5] = (double) (byte)43;
      doubleArray0[6] = (double) (byte)43;
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {43.0, 43.0, 43.0, 43.0, 43.0, 43.0, (-110.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 2364.4546F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2364.4546F}, floatArray0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new float[] {2364.4546F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-2039.0608F));
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2039.0608F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte6 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte6;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte4;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte3;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (byte)27;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0, 12);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (int)  (-84));
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray1, (int) (byte)27);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-84.0F), (-84.0F), 27.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-84.0F), (-84.0F), 27.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)8);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)8, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2992.8493521437;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2262.808702, 1520, (double) 1520);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2992.8493521437, 0.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift((short[]) null, 1520, 122, 122);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)35;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)23);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)114, (byte)109, (byte)49, (byte) (-39), (byte)35}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)114, (byte)109, (byte)49, (byte) (-39), (byte)35}, byteArray1);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (-1));
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-862.0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[4] = 2341.0F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2341.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-249);
      shortArray0[1] = (short)634;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short) (-3580);
      shortArray0[4] = (short) (-922);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)677);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-249), (short)634, (short)100, (short) (-3580), (short) (-922)}, shortArray0);
      assertArrayEquals(new short[] {(short)677, (short) (-249), (short)634, (short)100, (short) (-3580), (short) (-922)}, shortArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)100, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2108.594018);
      doubleArray0[1] = 26.97;
      doubleArray0[2] = 1336.16557009145;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1336.16557009145, Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
      assertEquals(2, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2108.594018), 26.97, 1336.16557009145}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'L', 1);
      assertEquals(0, int1);
      assertEquals(1, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'L'}, charArray0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean((boolean) boolean2);
      assertFalse(boolean5);
      assertNotNull(boolean5);
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("");
      assertFalse(boolean6);
      assertNotNull(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean3));
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean7);
      assertNotNull(boolean7);
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean6));
      assertTrue(boolean1.equals((Object)boolean3));
      assertTrue(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1.equals((Object)boolean5));
      
      booleanArray0[6] = boolean7;
      Boolean boolean8 = Boolean.TRUE;
      assertTrue(boolean8);
      assertNotNull(boolean8);
      assertFalse(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertFalse(boolean8.equals((Object)boolean4));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean6));
      assertFalse(boolean8.equals((Object)boolean1));
      assertFalse(boolean8.equals((Object)boolean5));
      
      booleanArray0[7] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1631.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertFalse(boolean1);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-2730.608F));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.add(intArray0, 1173);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1173}, intArray1);
      
      ArrayUtils.shift((int[]) null, (-1), 1, (-1239));
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-3087));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3087, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 249, 249, 249);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-1005);
      intArray0[4] = (-238);
      intArray0[7] = (-1005);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-1005), 0, (-238), 0, 0, (-1005)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-1005), 0, (-238), 0, 0, (-1005)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      Float float0 = new Float((-2.0));
      assertEquals((-2.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-2.0));
      assertEquals((-2.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2552.657F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray1);
      assertNotNull(intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 2, 2}, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2}, intArray2);
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1L));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-37);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-69));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-66), (byte)88, (byte) (-6), (byte)2, (byte) (-37)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte) (-66), (byte)88, (byte) (-6), (byte)2, (byte) (-37), (byte) (-69)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)58;
      shortArray0[1] = (short) (byte)58;
      shortArray0[2] = (short) (byte)58;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte2);
      assertTrue(boolean0);
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[2] = (short) (byte)53;
      shortArray0[3] = (short) (byte)53;
      Byte byte3 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte3;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1378, (int) byte0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertEquals(5, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-81), (short)0, (short)53, (short)53, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1686), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1686, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-1127.0F);
      int int0 = ArrayUtils.indexOf(floatArray1, (float) (-2064), 999);
      assertEquals((-1), int0);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1127.0F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray1);
      assertTrue(boolean1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[4] = (byte)102;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'a');
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)102, 119);
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray2, (int)  (-24));
      assertNull(byte0);
      assertEquals(0, byteArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)102);
      assertNull(intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)35;
      boolean boolean2 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean2);
      assertEquals(2, shortArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)35}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'O');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray1);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ')');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {')', ')', 'x', 'J', '?', ')', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      Short short0 = new Short((short)2798);
      assertEquals((short)2798, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[1]);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short)2798, (short)2798}, shortArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2798;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)2798, (-3135));
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2798L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) '?';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) shortArray0[1]);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {120.0, 63.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, 69, 966);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {120.0, 63.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      float[] floatArray0 = new float[18];
      ArrayUtils.shuffle(floatArray0);
      assertEquals(18, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-24), 2134856776);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)100, (int) (byte)77);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1029), 567);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-1), 0}, intArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)60;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-92), (byte)60}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1), (-1), 53.2187580395);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)60;
      floatArray0[1] = (float) (-1);
      ArrayUtils.shuffle(floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 60.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)0, 4062);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)70);
      assertEquals((byte)70, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '`';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '`', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '`', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '`';
      ArrayUtils.swap(floatArray0, (-1), (-638), (-1));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, (-1.0F), 96.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      Long long0 = new Long((-1461L));
      assertEquals((-1461L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-5492L));
      assertEquals((-5492L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.swap(shortArray0, (int) (short)0, (-1458), (int) (short)3099);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, (-1458));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[2] = (double) (-1458);
      doubleArray0[3] = (double) (-1461L);
      doubleArray0[4] = (double) (short)3099;
      doubleArray0[5] = (double) (short)3099;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 3099.0, (-1458.0));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(6, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1458.0), (-1461.0), 3099.0, 3099.0}, doubleArray0, 0.01);
      
      long[] longArray1 = new long[5];
      longArray1[0] = (long) (short)3099;
      longArray1[1] = (-5492L);
      longArray1[2] = (-5492L);
      longArray1[3] = (-5492L);
      longArray1[4] = (-1461L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, (int) (short)3099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3099, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1025L;
      longArray0[1] = 1204L;
      longArray0[2] = 1L;
      longArray0[3] = 1548L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L}, longArray0);
      assertArrayEquals(new long[] {1025L, 1204L, 1548L}, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1204L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 1204L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) 1204L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 6.0F, (-3527));
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1204.0F, 1.0F, 1204.0F, 1.0F, 1204.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1025L, 1204L, 1L, 1548L}, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3527);
      intArray0[1] = (-3527);
      intArray0[2] = (-1);
      ArrayUtils.reverse(intArray0, (-3527), 7);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-3527), (-3527)}, intArray0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, object0);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Byte[]) null, (-2362));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2362, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      int int0 = 1236;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 1236);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1236, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-52);
      longArray0[1] = (long) (byte) (-102);
      longArray0[2] = (-2754L);
      longArray0[3] = (long) (byte) (-89);
      longArray0[4] = (long) (byte) (-89);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -102, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)116);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)116}, shortArray2);
      
      short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)116}, shortArray2);
      assertArrayEquals(new short[] {(short)116}, shortArray3);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 2543L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 681.438748;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2340.443809572505;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2555.4956, 745);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {681.438748, Double.NaN, 2340.443809572505}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 110, 1484);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {681.438748, Double.NaN, 2340.443809572505}, doubleArray0, 0.01);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)7;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray0);
      assertArrayEquals(new short[] {(short)7}, shortArray1);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-89);
      Byte byte1 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-89));
      assertEquals((byte) (-89), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)108;
      Byte byte4 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)108, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte3 == byte0);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte3 == byte0);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift(longArray0, 0, 110, (int) byte0);
      assertEquals(7, longArray0.length);
      assertFalse(byte0 == byte3);
      assertArrayEquals(new long[] {0L, 0L, 2543L, 0L, 0L, 0L, 0L}, longArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2643);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2142700843));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-2746L);
      longArray0[1] = (long) (-2142700843);
      longArray0[2] = (long) (-2142700843);
      longArray0[3] = (long) (-2142700843);
      ArrayUtils.swap(longArray0, (-2142700843), (-190), 6);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {(-2746L), (-2142700843L), (-2142700843L), (-2142700843L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      long[] longArray0 = new long[5];
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.swap(longArray0, 4, (-1), (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byte byte0 = (byte) (-24);
      byteArray1[2] = (byte) (-24);
      Byte byte1 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte) (-24);
      boolean boolean1 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean1);
      assertEquals(1, byteArray2.length);
      assertFalse(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)102;
      longArray0[1] = (long) 177;
      ArrayUtils.swap(longArray0, (int) byte0, (int) (byte) (-24), (int) byte0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {102L, 177L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-2146130439), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146130439, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      Byte byte0 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-127));
      assertEquals((byte) (-127), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray2 = new Byte[0];
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (-2487), (-1261));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte0, (int) byte0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)40;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)40}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 2, 0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((Object[]) byteArray0, 0, (int) (byte)2, (int) (byte)2);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BitSet bitSet0 = new BitSet(0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-477.8);
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, objectArray0.length);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '3', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-22);
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'Z', (-723));
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 407;
      intArray0[1] = (-2331);
      intArray0[2] = (-2331);
      intArray0[3] = 0;
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      floatArray0[1] = (float) (-2331);
      ArrayUtils.shift(floatArray0, 0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-2331.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (-1178.65874));
      assertNull(doubleArray0);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-2331));
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {407, (-2331), (-2331), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2331), 407, (-2331), (-2331), 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 2.0, 1.0}, doubleArray2, 0.01);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[2];
      objectArray0[3] = (Object) true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'W');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', (int) (byte)2);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)2, 93);
      assertEquals(1, int1);
      assertEquals(2, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      char[] charArray0 = new char[10];
      ArrayUtils.shift(charArray0, 90);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      ArrayUtils.reverse(charArray0, (-3122), (-2146239520));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
      
      ArrayUtils.shift(charArray0, (-775));
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
      
      ArrayUtils.isSorted(longArray1);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '3';
      floatArray0[1] = (float) '3';
      floatArray0[2] = (float) (-775);
      floatArray0[3] = (float) '3';
      floatArray0[4] = (float) '3';
      floatArray0[5] = (float) (-775);
      ArrayUtils.shift(floatArray0, (-3122), (int) (byte)2, (int) (byte)2);
      assertArrayEquals(new float[] {51.0F, 51.0F, (-775.0F), 51.0F, 51.0F, (-775.0F)}, floatArray0, 0.01F);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) (-775.0F);
      floatArray1[1] = (Float) 51.0F;
      floatArray1[2] = (Float) 51.0F;
      floatArray1[3] = (Float) 51.0F;
      floatArray1[4] = (Float) (-775.0F);
      floatArray1[5] = (Float) 51.0F;
      floatArray1[6] = (Float) (-775.0F);
      floatArray1[7] = (Float) 51.0F;
      floatArray1[8] = (Float) 51.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (-775));
      assertArrayEquals(new float[] {(-775.0F), 51.0F, 51.0F, 51.0F, (-775.0F), 51.0F, (-775.0F), 51.0F, 51.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      ArrayUtils.shift(charArray0, Integer.MIN_VALUE, 1894, 1894);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      doubleArray0[5] = (double) (byte)byte1;
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-368L));
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-368L), 0L, (-292L)}, longArray1);
      assertArrayEquals(new long[] {0L, (-292L)}, longArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '2';
      ArrayUtils.reverse(charArray0, (-407), 37);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'2', '3'}, charArray0);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      charArray1[1] = '2';
      charArray1[2] = '2';
      ArrayUtils.shift(charArray1, (-407), (int) byte0, 9);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', '2', '2'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      char[] charArray0 = new char[10];
      ArrayUtils.shift(charArray0, 91);
      assertEquals(10, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-378));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)34, (byte)0, (byte)2, (byte)113, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 0, (int) (byte)113, (int) (byte)2);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 406L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)113;
      doubleArray0[1] = 1182.051;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (byte)2;
      int int1 = ArrayUtils.indexOf(doubleArray0, 694.351249115693, (int) (byte)2);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 2);
      assertEquals((-1), int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      long[] longArray0 = new long[8];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 2, 6);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift((char[]) null, (int) (byte) (-1), 2, (int) (byte) (-1));
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-4193));
      assertEquals((-4193), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-33));
      assertEquals((-33), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-4193), (-33)}, intArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (byte) (-1), (-58));
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)40;
      int int0 = ArrayUtils.indexOf(intArray0, 1573);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 34, 40, 40, 40}, intArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byte byte0 = (byte) (-31);
      Byte byte1 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray1[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray1, (-1949));
      assertNull(byte3);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.shift(booleanArray0, (int) (byte) (-31), (-1949), 32);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (long) byte0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte)40;
      floatArray0[2] = (float) (byte)2;
      floatArray0[3] = (float) (byte)2;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte) (-31);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {40.0F, 2.0F, 2.0F, (-1.0F), (-1.0F), (-31.0F), (-31.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'g';
      intArray0[1] = (int) 'g';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) 'g';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, 98);
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, 31, 1211);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      ArrayUtils.shift(objectArray0, 1211);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'C');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'C'}, charArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'C';
      intArray0[1] = 1211;
      intArray0[2] = (int) 'C';
      intArray0[3] = 31;
      intArray0[4] = (int) 'C';
      intArray0[5] = 1211;
      intArray0[6] = (int) 'C';
      intArray0[7] = 1211;
      intArray0[8] = (int) 'C';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1211, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 1533.979F);
      assertEquals(1533.979F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {1533.979F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 3.0777133F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {3.0777133F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float((double) (byte)32);
      assertEquals(32.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)32);
      assertEquals(32.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      Float float2 = new Float((double) (-1241.0F));
      assertEquals((-1241.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 32.0F, 32.0F, 32.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)59;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {59}, intArray0);
      assertArrayEquals(new int[] {59, 59}, intArray1);
      
      long[] longArray0 = new long[0];
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte byte0 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-419.440125849293));
      assertEquals((-419.44012F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(3239.949266);
      assertEquals(3239.9492F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-419.44012F), 3239.9492F}, floatArray1, 0.01F);
      
      int[] intArray2 = ArrayUtils.addAll((int[]) null, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {(-823)}, intArray2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)45;
      longArray0[1] = (long) 'f';
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)122;
      longArray0[4] = (long) (byte)51;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-294L));
      assertFalse(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {45L, 102L, 0L, 122L, 51L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[2] = (-1005);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (-238);
      intArray0[5] = (-1005);
      intArray0[7] = (int) (short)0;
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-1005), 0, (-238), (-1005), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-1005), 0, (-238), (-1005), 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      byte byte0 = (byte)7;
      Byte byte1 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object object0 = ArrayUtils.get((Object[]) null, 1936, (Object) byte1);
      assertEquals((byte)7, object0);
      assertNotNull(object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1553, (double) (byte)7);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Object object3 = ArrayUtils.get((Object[]) null, (-1), (Object) byte0);
      assertEquals((byte)7, object3);
      assertNotNull(object3);
      assertTrue(object3.equals((Object)object0));
      assertTrue(object3.equals((Object)byte1));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, 954.0F, (-1));
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      short[] shortArray0 = new short[0];
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (int) (short)2);
      assertEquals(2, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)2);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (short)2;
      longArray0[3] = (long) (short)2;
      longArray0[4] = 1691L;
      int int2 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)2, (int) (short)2);
      assertEquals(2, int2);
      assertEquals(5, longArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new long[] {0L, (-1L), 2L, 2L, 1691L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      byte byte0 = (byte)34;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)34;
      Byte[] byteArray0 = new Byte[2];
      Byte byte1 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)34;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 34L, (-1297));
      assertEquals((-1), int0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {34L, 34L, 34L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)76, 1);
      assertEquals((-1), int0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)46);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) classArray0, (int) (byte)46);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '.');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)46;
      intArray0[1] = (-4571);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(2, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {46, (-4571)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 1933.04854241}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)183;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-540);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1), (short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray1);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-57.07108068));
      assertEquals((-57.07108068), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-57.07108068), 0.0}, doubleArray2, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)183;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "org.junitpioneer.jupiter.IssueExtension");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)32;
      floatArray0[1] = (float) (short) (-540);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {32.0F, (-540.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {32.0F, (-540.0F)}, floatArray1, 0.01F);
      
      String string0 = ArrayUtils.toString(objectArray0[0]);
      assertEquals("183", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte6 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte6;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte4;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte3;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (byte)27;
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0, 12);
      assertEquals((-1), int0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (int)  (-84));
      assertFalse(boolean1);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray1, (int) (byte)27);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int1 = ArrayUtils.indexOf(longArray1, (long) (byte)27);
      assertEquals((-1), int1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'w';
      charArray1[1] = 'w';
      charArray1[2] = 'w';
      charArray1[3] = 'w';
      charArray1[4] = 'w';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(3, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 65, (short) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7, 7, (-2.0));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)32;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)1, (byte)32}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) (byte)1;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)32);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      ArrayUtils.shift((boolean[]) null, (-39), (int) (byte)32, (-1));
      int int1 = ArrayUtils.lastIndexOf((boolean[]) null, true, (-4000));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte)28, (int) (byte)28);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 65);
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-164);
      shortArray0[1] = (short)43;
      shortArray0[2] = (short) (-3749);
      shortArray0[3] = (short) (-2008);
      shortArray0[4] = (short)23259;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-164), (short)43, (short) (-3749), (short) (-2008), (short)23259}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-2008);
      intArray0[1] = (int) (short) (-2008);
      intArray0[2] = (int) (short)43;
      intArray0[3] = (int) (short)43;
      intArray0[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 136);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-2008), (-2008), 43, 43, (-1)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short) (-164);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 25, 25);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-164L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      ArrayUtils.shift((Object[]) booleanArray1, (int) (short)43, (-2008), 43);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)76, (-2008));
      assertEquals((-1), int1);
      assertEquals(0, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (double) (-1), (-2908), (double) 43);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 2543L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      int[] intArray0 = new int[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-702));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-702), (-702));
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2543L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 25, 25, 25);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)76, (int) (byte)76);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)76, (byte)76, (byte)76}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (-2572.644744158), (int) (byte)76, (-2281.138857));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1939.513F);
      floatArray0[1] = 990.0F;
      floatArray0[2] = 983.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 757.0F;
      floatArray0[5] = 2217.157F;
      floatArray0[6] = (-1.0F);
      int int0 = ArrayUtils.indexOf(floatArray0, 757.0F, 2104);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1939.513F), 990.0F, 983.0F, (-1.0F), 757.0F, 2217.157F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)531;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) (short)531);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-2.0184956F);
      floatArray0[2] = (float) (short) (-1);
      floatArray0[3] = (float) (short)1;
      floatArray0[4] = (float) 0L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-1));
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-2.0184956F), (-1.0F), 1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (int) (byte)1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)1}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)76;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, 1, 76}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)76, 1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'@'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {76, 76, 1, 76}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) 76;
      doubleArray0[3] = (double) 76;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 76;
      doubleArray0[6] = (double) (byte)76;
      doubleArray0[7] = (double) 1;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-4205.0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {64.0, 1.0, 76.0, 76.0, 1.0, 76.0, 76.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {64.0, 1.0, 76.0, 76.0, 1.0, 76.0, 76.0, 1.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (float) (byte)76;
      floatArray0[2] = (float) '@';
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (-4790.0F);
      floatArray0[6] = (float) 76;
      floatArray0[7] = (float) '@';
      floatArray0[8] = (float) 1;
      boolean boolean3 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertFalse(boolean3);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new float[] {1.0F, 76.0F, 64.0F, 1.0F, 1.0F, (-4790.0F), 76.0F, 64.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int1);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(int1 == int0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-78), (int) (byte) (-126));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1, shortArray1, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte byte5 = (byte) (-1);
      Byte byte6 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      
      Byte byte7 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte7);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) byte1);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, longArray0.length);
      assertFalse(byte1.equals((Object)byte5));
      assertFalse(byte1.equals((Object)byte6));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte4));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte7));
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      Byte byte8 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte7);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte7.equals((Object)byte8));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short) (byte) (-84);
      shortArray0[3] = (short) byte2;
      int int1 = 660;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-84), 660);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-84), (short) (-33)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-33), (short) (-84), (short) (-33)}, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3081, shortArray1, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3081, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1035.0);
      doubleArray0[1] = (double) (-1521);
      doubleArray0[2] = (double) 382L;
      doubleArray0[3] = (double) 382L;
      doubleArray0[4] = (double) 382L;
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, 1706, 52);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1035.0), (-1521.0), 382.0, 382.0, 382.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1706, Integer.MAX_VALUE);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)1);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 1L, 1L, 0L}, longArray1);
      assertArrayEquals(new long[] {1L, 1L, 0L}, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Byte byte4 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) byte4);
      assertEquals((-1), int0);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) byte0, (int) byte0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert((-1766), shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1}, shortArray2);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = Integer.getInteger("=xr*", (-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((short)1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(65);
      assertEquals(65, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1309);
      assertEquals(1309, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      integerArray0[3] = integer3;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), 2146163365);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(641);
      assertEquals(641, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-349), (-3119));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3119);
      doubleArray0[1] = (double) (short) (-349);
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3119.0), (-349.0), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3119.0), (-349.0), 1.0, (-3119.0), (-349.0), 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      Random.setNextRandom(1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'Y');
      assertNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[2] = '6';
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 2121610351, 2121610351);
      assertNull(byteArray0);
      
      ArrayUtils.swap((byte[]) null, 2121610351, 2, 1);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      ArrayUtils.swap((byte[]) null, (-2141), (int) (byte) (-107), 577);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = 3852.1490180692276;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (byte)5;
      doubleArray0[4] = (double) 577;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) (-1.0F);
      doubleArray0[7] = (double) (-1.0F);
      doubleArray0[8] = (double) (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3149.0, 65, 0.0);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), 3852.1490180692276, (-1.0), 5.0, 577.0, (-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 99, (int) (byte) (-107));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 2, (-1592), (int) (short)43);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 2146140427, (-1664));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = 'A';
      charArray0[2] = '3';
      charArray0[3] = '8';
      charArray0[4] = '3';
      charArray0[5] = '8';
      int int0 = ArrayUtils.indexOf(charArray0, 'i', (-2057));
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'8', 'A', '3', '8', '3', '8'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-92);
      ArrayUtils.swap(byteArray0, (int) (byte) (-107), (int) (byte) (-107), (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)0, (byte)5, (byte) (-92)}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 99, 97);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)0, (byte)5, (byte) (-92)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte) (-107);
      floatArray0[3] = (float) (byte)5;
      floatArray0[4] = (float) (byte) (-107);
      floatArray0[5] = (float) '-';
      int int0 = ArrayUtils.indexOf(floatArray0, (-2385.0F));
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-107.0F), (-1.0F), (-107.0F), 5.0F, (-107.0F), 45.0F}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.indexOf(charArray1, '_', 2104);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertTrue(int1 == int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertArrayEquals(new char[] {'-'}, charArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte) (-107);
      objectArray0[1] = (Object) (byte) (-92);
      objectArray0[2] = (Object) (byte)5;
      objectArray0[3] = (Object) (byte) (-107);
      objectArray0[4] = (Object) (byte) (-107);
      objectArray0[5] = (Object) 5.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '-';
      intArray0[1] = (int) '-';
      intArray0[2] = (int) '-';
      intArray0[3] = (int) (byte)5;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      int[] intArray0 = new int[2];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), (int) (byte) (-1), (int) (byte) (-1));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      byteArray0[1] = (byte) (-107);
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1357);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-107), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.shift(byteArray1, (-6), 2, 1357);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-107), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), (int) (byte) (-1), (int) (byte) (-1));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-107);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, 2508, (double) (-786));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) (-107.0);
      doubleArray1[1] = (Double) (-107.0);
      doubleArray1[2] = (Double) (-107.0);
      doubleArray1[3] = (Double) (-107.0);
      doubleArray1[4] = (Double) (-107.0);
      doubleArray1[5] = (Double) (-107.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-107.0), (-107.0), (-107.0), (-107.0), (-107.0), (-107.0)}, doubleArray2, 0.01);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 1357);
      assertNotNull(intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-786), 0}, intArray1);
      assertArrayEquals(new int[] {(-786), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-61);
      ArrayUtils.swap(byteArray0, 90, 4942, (int) (byte) (-1));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-41), (byte)99, (byte) (-61)}, byteArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-41), (-2395));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-41), (byte)99, (byte) (-61)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[3] = (short) (-2973);
      shortArray0[4] = (short) (-2973);
      shortArray0[5] = (short) (byte)0;
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-37), (-146));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)12);
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-22);
      doubleArray0[1] = (double) (short) (-22);
      doubleArray0[2] = (double) (short) (-22);
      doubleArray0[3] = (double) (short) (-22);
      doubleArray0[4] = (double) (short) (-22);
      doubleArray0[5] = (double) (short) (-22);
      doubleArray0[6] = (double) (short) (-22);
      ArrayUtils.shift(doubleArray0, 99, (-2377), (-1181));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-22.0), (-22.0), (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-22);
      floatArray0[1] = (float) (short) (-22);
      floatArray0[2] = (float) (-1181);
      floatArray0[3] = (float) (short) (-22);
      floatArray0[4] = (float) 99;
      floatArray0[5] = (float) 99;
      floatArray0[6] = 760.5F;
      floatArray0[7] = (float) (-2377);
      floatArray0[8] = (float) (-2377);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-22.0F), (-22.0F), (-1181.0F), (-22.0F), 99.0F, 99.0F, 760.5F, (-2377.0F), (-2377.0F)}, floatArray0, 0.01F);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-22.0);
      doubleArray1[1] = (Double) (-22.0);
      doubleArray1[2] = (Double) (-22.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-22.0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-22.0), (-22.0), (-22.0)}, doubleArray2, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "");
      assertNotNull(stringArray0);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert(2235, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertArrayEquals(new char[] {'X'}, charArray1);
      
      Byte[] byteArray1 = new Byte[9];
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray1[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-33), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray1[3] = byte4;
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      
      byteArray1[4] = byte5;
      Byte byte6 = new Byte((byte) (-87));
      assertEquals((byte) (-87), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      
      byteArray1[5] = byte6;
      Byte byte7 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      
      byteArray1[6] = byte7;
      Byte byte8 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      
      byteArray1[7] = byte8;
      Byte byte9 = new Byte((byte) (-108));
      assertEquals((byte) (-108), (byte)byte9);
      assertNotNull(byte9);
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte7));
      
      byteArray1[8] = byte9;
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, (Byte[]) null);
      assertNotNull(byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-823));
      assertNull(intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '\'');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)45, (-486));
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte)122, (byte) (-18), (byte) (-18)}, byteArray0);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, (int) (byte)45, 2346);
      assertNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1807);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean1);
      assertEquals(7, booleanArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      charArray0[1] = 'Z';
      charArray0[2] = 'x';
      charArray0[3] = ':';
      charArray0[4] = '@';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-33), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -33, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 42;
      intArray0[1] = 42;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {42, 42}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-776), (Object) byte0);
      assertEquals((byte) (-125), object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 681.438748, 3012, 681.438748);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = ArrayUtils.get((Object[]) null, (int)  (-125), object1);
      assertEquals((byte) (-125), object4);
      assertNotNull(object4);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 3012, 18, 498);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-125);
      floatArray0[1] = (float) 3012;
      floatArray0[2] = (float) 18;
      floatArray0[3] = (float) 18;
      floatArray0[4] = (float) (byte) (-125);
      floatArray0[5] = (float) 3012;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotNull(floatArray1);
      assertEquals(0, intArray0.length);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {(-125.0F), 3012.0F, 18.0F, 18.0F, (-125.0F), 3012.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-125.0F), 3012.0F, 18.0F, 18.0F, (-125.0F), 3012.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte) (-125)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '`';
      charArray0[4] = '8';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '8';
      charArray1[2] = '8';
      charArray1[3] = 'y';
      charArray1[4] = '8';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(17, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', '8', '8', 'y', '8'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6}, byteArray2);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)6}, byteArray1);
      
      char[] charArray2 = ArrayUtils.add(charArray0, 'J');
      assertNotNull(charArray2);
      assertEquals(17, charArray0.length);
      assertEquals(18, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.', '\u0000'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (-9), 2147483642, 2147483642);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (-1), 91, 91);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.reverse((boolean[]) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1624.534F);
      floatArray0[1] = (-1624.534F);
      floatArray0[2] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0, (-1255));
      assertNotNull(bitSet0);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-6), (byte)12, (byte) (-119)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-6), (byte)12, (byte) (-119)}, byteArray1);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean("/lw}-wG6exLZI&;=");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-477.8);
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 3147.8957;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 396L;
      floatArray0[1] = (float) (-292L);
      ArrayUtils.swap(floatArray0, 17, 17, 1072);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {396.0F, (-292.0F)}, floatArray0, 0.01F);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 396L, 396L, 396L}, longArray2);
      assertArrayEquals(new long[] {396L, 396L}, longArray0);
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1076);
      shortArray0[1] = (short) (-27);
      shortArray0[2] = (short) (-3631);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631), (short) (-1076), (short) (-27), (short) (-3631)}, shortArray1);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 2174, (int) (short) (-1076));
      assertNull(longArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals(2, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z'}, charArray0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (byte) (-33), 739, 262);
      long[] longArray1 = ArrayUtils.subarray((long[]) null, 262, 209);
      assertNull(longArray1);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      int[] intArray0 = new int[1];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '.';
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '`';
      ArrayUtils.swap(floatArray0, (-1), (-638), (-1));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {46.0F, (-1.0F), 96.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte4);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(8, byteArray0.length);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 0L);
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (byte) (-58);
      ArrayUtils.shift(shortArray0, (int) (byte) (-58));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short) (-58)}, shortArray0);
      
      Byte byte5 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte2);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertFalse(byte2.equals((Object)byte5));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = object1;
      ArrayUtils.shift(objectArray0, 1211);
      assertEquals(4, objectArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object1, 1211);
      assertEquals(1, int0);
      assertEquals(4, objectArray0.length);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'n', 'n', 'n', 'n', 'n', 'n', 'n', '\u0000', '\u0000'}, charArray0);
      
      float[] floatArray1 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte) (-113);
      floatArray0[1] = (float) (byte) (-113);
      floatArray0[2] = (float) (byte) (-113);
      float[] floatArray1 = new float[13];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(13, floatArray0.length);
      assertEquals(13, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 1673.5798F;
      floatArray0[2] = 2767.6172F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 1765.23F;
      floatArray0[5] = (-796.0F);
      floatArray0[6] = 91.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 91.0F;
      floatArray1[1] = (-796.0F);
      floatArray1[2] = 46.0F;
      floatArray1[3] = (-1338.0F);
      floatArray1[4] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {Float.NaN, 1673.5798F, 2767.6172F, 1.0F, 1765.23F, (-796.0F), 91.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {91.0F, (-796.0F), 46.0F, (-1338.0F), 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 1673.5798F, 2767.6172F, 1765.23F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-17));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(booleanArray0, (-566), 468, (int) (short) (-17));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray2 = ArrayUtils.removeAllOccurrences(shortArray1, (short) (byte)0);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2051), 660);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)88;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)101, 526);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(4, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)1, (byte)101, (byte) (-105), (byte)88}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2051);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2051)}, intArray1);
      assertArrayEquals(new int[] {(-2051)}, intArray0);
      
      ArrayUtils.shift(booleanArray0, (-2051), 573, 47);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1300));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41;
      ArrayUtils.reverse(doubleArray0, 41, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 41, (-748));
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) 41;
      floatArray0[2] = (-1239.0394F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 400.5016F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 41, 322);
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 0L);
      assertNull(longArray0);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray0, 972, 41);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)45;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)45}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)45;
      byteArray2[1] = (byte)45;
      byteArray2[2] = (byte) (-13);
      byteArray2[3] = (byte)45;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte)45;
      byteArray2[7] = (byte) (-1);
      ArrayUtils.shift(byteArray2, (int) (byte)45, 41, (-3327));
      assertEquals(8, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-13), (byte)45, (byte) (-1), (byte) (-1), (byte)45, (byte) (-1)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[4] = (-1.0F);
      floatArray0[8] = 0.0F;
      ArrayUtils.shift(floatArray0, 6, 11, 11);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1135.0F), 0.0F, (-1.0F), 1242.14F, 0.0F, 0.0F, 1477.31F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte) (-8));
      assertEquals((byte) (-8), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byteArray0[0]);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)6);
      assertEquals(1, int1);
      assertEquals(2, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)6, (short)6}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (byte)6, (long) (short)6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte1 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1953L);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2543L, 0L, 0L, (-6292L), 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1953L, 0L, 2543L, 0L, 0L, (-6292L), 0L, 0L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-110);
      shortArray0[1] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray0, (int) (short) (-110));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-110), (short) (-110)}, shortArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '@';
      charArray0[2] = 't';
      charArray0[3] = '%';
      charArray0[4] = 'P';
      ArrayUtils.reverse(charArray0, (-920), 312);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'P', '%', 't', '@', 'k'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-4027), 36, (-4027));
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41;
      ArrayUtils.reverse(doubleArray0, 41, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 41, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.shift(intArray1, 41, 41, 41);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-107);
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-107), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)7, (byte) (-92), (byte) (-92), (byte)7, (byte)3, (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (byte) (-92);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2415.606136247275;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-92);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-92));
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-92), (short)0}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)3, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-92.0), 2103.856326, 0.0, (-92.0), 2103.856326, 2415.606136247275, 2415.606136247275}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-92.0), 2103.856326, 2415.606136247275}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) (short)0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      ArrayUtils.shift(intArray0, (-3957), 1560, (int) (byte) (-107));
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray2, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'P';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Y');
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Y', 'Y', 'P', 'Y', 'Y', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'P'}, charArray1);
      
      Byte byte0 = new Byte((byte) (-62));
      assertEquals((byte) (-62), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-62), object0);
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "B>V?0-gQ4*Tn?#8FSn&");
      assertEquals("-62", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'P';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) 'Y';
      floatArray0[3] = (float) 'P';
      floatArray0[4] = (float) (byte) (-62);
      floatArray0[5] = (float) 'P';
      floatArray0[6] = (float) 'Y';
      floatArray0[7] = (float) (byte) (-62);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 89.0F);
      assertNotNull(bitSet0);
      assertEquals("{1, 2, 6}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {80.0F, 89.0F, 89.0F, 80.0F, (-62.0F), 80.0F, 89.0F, (-62.0F)}, floatArray0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-62);
      shortArray0[1] = (short)1018;
      shortArray0[2] = (short) (byte) (-62);
      shortArray0[3] = (short) (byte) (-62);
      shortArray0[4] = (short) (byte) (-62);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)1018);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-62), (short) (-62), (short) (-62), (short) (-62)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-62), (short)1018, (short) (-62), (short) (-62), (short) (-62)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '}');
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'}'}, charArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)1072);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) '}';
      intArray0[2] = (int) (short)1072;
      intArray0[3] = (int) (short)1072;
      intArray0[4] = 0;
      intArray0[5] = (int) '}';
      intArray0[6] = 0;
      intArray0[7] = (int) (short)1072;
      intArray0[8] = (int) '}';
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1072, 125);
      assertEquals(7, int1);
      assertEquals(9, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 125, 1072, 1072, 0, 125, 0, 1072, 125}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 3632, 125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3632, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, true, true}, booleanArray1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte) (-84);
      doubleArray0[2] = (double) (byte) (-33);
      doubleArray0[3] = (double) (byte) (-33);
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) (byte) (-33);
      doubleArray0[6] = (double) (byte) (-33);
      doubleArray0[7] = (double) byte0;
      doubleArray0[8] = 3016.0;
      ArrayUtils.swap(doubleArray0, 120, (int) (byte) (-84), 127);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-84.0), (-84.0), (-33.0), (-33.0), (-84.0), (-33.0), (-33.0), (-84.0), 3016.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3.0777133F;
      doubleArray0[1] = (double) 3.0777133F;
      doubleArray0[2] = (double) 3.0777133F;
      doubleArray0[3] = (double) 3.0777133F;
      doubleArray0[4] = (double) 3.0777133F;
      doubleArray0[5] = (double) 3.0777133F;
      doubleArray0[6] = (double) 3.0777133F;
      doubleArray0[7] = (double) 3.0777133F;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916}, doubleArray1, 0.01);
      
      ArrayUtils.swap(doubleArray1, (-1), 25, (-727));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916, 3.0777132511138916}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)2);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      
      Byte byte5 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      
      Byte byte6 = ArrayUtils.get((Byte[]) null, 945);
      assertNull(byte6);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte3);
      assertNull(byteArray0);
      assertFalse(byte3.equals((Object)byte5));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      
      ArrayUtils.swap(doubleArray1, 2, 285);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = 'q';
      charArray0[2] = 'i';
      charArray0[3] = 'P';
      charArray0[4] = '8';
      charArray0[5] = '0';
      charArray0[6] = '%';
      charArray0[7] = 'w';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'~', 'q', 'i', 'P', '8', '0', '%', 'w'}, charArray0);
      assertArrayEquals(new char[] {'~', 'q', 'i', 'P', '8', '0', '%', 'w'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)22);
      assertEquals((byte)22, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte) (-112));
      assertEquals((byte) (-112), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      Byte byte5 = ArrayUtils.get((Byte[]) null, (int)  (-58));
      assertNull(byte5);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte1);
      assertNull(byteArray0);
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte3));
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (int) (byte) (-112), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -112, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 2, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)18, (byte)4, (byte)121, (byte)22, (byte) (-35), (byte)59, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-35);
      shortArray0[1] = (short) (byte)4;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-35), (short)4}, shortArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 2543L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) (byte)22;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2543.0, 0.0, 0.0, 22.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2543.0, 0.0, 0.0, 22.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 3056.4138F;
      floatArray0[3] = (-1.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 3056.4138F;
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) 645.0F;
      objectArray0[4] = (Object) (-1.0F);
      objectArray0[5] = (Object) 3056.4138F;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      objectArray0[1] = (Object) byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, object0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte3;
      objectArray0[4] = (Object) byte2;
      ArrayUtils.shift(objectArray0, (-3957), (int) (byte) (-1), (int) (byte)1);
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)1;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[1] = (int) (byte) (-121);
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, (-121), 0, (-3505)}, intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      int int0 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, (-121), 0, (-3505)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-121);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 76;
      longArray0[3] = (-820L);
      longArray0[4] = (long) 76;
      ArrayUtils.shift(longArray0, 1, 1, (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-121L), (-1L), 76L, (-820L), 76L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-820L);
      floatArray0[1] = (float) (-121L);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-121L);
      floatArray0[4] = (float) (byte) (-121);
      floatArray0[5] = (float) 'Q';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-820.0F), (-121.0F), (-1.0F), (-121.0F), (-121.0F), 81.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {81.0F, (-121.0F), (-121.0F), (-1.0F), (-121.0F), (-820.0F)}, floatArray0, 0.01F);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-52L));
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(5, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new long[] {(-121L), (-1L), 76L, (-820L), 76L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)46);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) classArray0, (int) (byte)102);
      assertEquals(0, classArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '.');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Short short0 = new Short((short)1772);
      assertEquals((short)1772, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[3];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)5);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertArrayEquals(new short[] {(short)1772, (short)1772, (short)1772}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = ArrayUtils.insert(1536, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Byte byte0 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((double[]) null, 12);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (int) (byte)62);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.reverse((Object[]) null, (int) (byte)33, 51);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int int0 = (-390);
      double[] doubleArray0 = ArrayUtils.insert((-390), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.reverse((Object[]) null, (-390), (-390));
      byte byte0 = (byte) (-41);
      Byte byte1 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[4] = (-1.0F);
      floatArray0[8] = 0.0F;
      ArrayUtils.shift(floatArray0, 6, 11, 11);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1135.0F), 0.0F, (-1.0F), 1242.14F, 0.0F, 0.0F, 1477.31F}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(167);
      assertEquals(167, (int)integer0);
      assertNotNull(integer0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, 13);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = '?';
      charArray0[4] = ')';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ')');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(10, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'x', '?', ')', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {')', ')', 'x', 'x', '?', ')', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      Short short0 = new Short((short)2798);
      assertEquals((short)2798, (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2798;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)2798, (-3135));
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2798L}, longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) '?';
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.7, (int) short0);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {120.0, 63.0}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(doubleArray0, 69, 966);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {120.0, 63.0}, doubleArray0, 0.01);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      Short short0 = new Short((short)67);
      assertEquals((short)67, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray1);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)14);
      assertEquals((short)14, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)97);
      assertEquals((short)97, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)49);
      assertEquals((short)49, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)1);
      assertEquals((short)1, (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)1);
      assertEquals((short)1, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      
      shortArray0[4] = short4;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-1), 0}, intArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-36));
      assertEquals((byte) (-36), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (-1);
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) (-1);
      objectArray0[3] = (Object) (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) (byte) (-92);
      Object object1 = ArrayUtils.get(objectArray0, (int) 60, (Object) null);
      assertNull(object1);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.swap(objectArray0, (-63), (int) (byte) (-92), (-1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)44);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      ArrayUtils.swap(byteArray0, (int) (byte)5, (int) (byte) (-107), (int) (byte) (-81));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2146129586);
      doubleArray0[2] = 1.5;
      doubleArray0[0] = (double) (byte) (-107);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-107.0), 332, (-1038.7573));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), (-2.146129586E9), 1.5, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-2146129586), (int) (byte)5, (-1038.7573));
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-107.0), (-2.146129586E9), 1.5, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-107);
      floatArray0[1] = (float) (byte) (-107);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-2146129586);
      floatArray0[5] = (float) (byte)5;
      floatArray0[6] = (float) (byte)44;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-107.0F), (-1.0F), (-1.0F), (-2.14612954E9F), 5.0F, 44.0F, (-107.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1481.3836577336));
      assertEquals((-1481.3836577336), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (byte)51);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {51L}, longArray1);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3180.24165705));
      assertEquals((-3180.24165705), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.1);
      assertEquals(0.1, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-823));
      assertEquals((-823.0), (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (byte) (-33);
      shortArray0[5] = (short)70;
      shortArray0[2] = (short) (byte) (-33);
      shortArray0[7] = (short) (byte)2;
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)70, (int) (short)70);
      assertEquals(5, int0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)70, (short) (-33), (short)1, (short) (-33), (short)70, (short)0, (short)2, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      ArrayUtils.shift((Object[]) shortArray0, (-1), 1782, 1782);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'Y');
      assertNull(charArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, object0);
      assertNull(byteArray0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'z');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', '5'}, charArray0);
      assertArrayEquals(new char[] {'2', '5'}, charArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, 3, (-928));
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'2', '5'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte1);
      assertTrue(boolean0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte2 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = Byte.valueOf((byte) (-81));
      assertEquals((byte) (-81), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      
      Byte byte6 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = byte4;
      byteArray2[1] = byte1;
      boolean boolean1 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean1);
      assertEquals(2, byteArray2.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-793), (Object) byte0);
      assertEquals((byte) (-125), object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 681.438748, 3012, 681.438748);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = ArrayUtils.get((Object[]) null, (int)  (-125), object1);
      assertEquals((byte) (-125), object4);
      assertNotNull(object4);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)57;
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)118, (byte) (-56), (byte)57, (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      float[] floatArray0 = new float[10];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(10, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)32;
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) (byte)32;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (int) (byte)32, (int) (byte)32);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {32.0F, 0.0F, 32.0F, 32.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 554;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (byte)1;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) 554;
      ArrayUtils.swap(floatArray0, Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {554.0F, 1.0F, 1.0F, (-1.0F), 554.0F}, floatArray0, 0.01F);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-125), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-793), (Object) byte0);
      assertEquals((byte) (-125), object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 681.438748, 3012, 681.438748);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = ArrayUtils.get((Object[]) null, (int)  (-125), object1);
      assertEquals((byte) (-125), object4);
      assertNotNull(object4);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-56);
      byteArray0[4] = (byte)57;
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)0, (byte)0, (byte)57, (byte)57}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      doubleArray0[2] = (-2531.745893);
      doubleArray0[3] = 681.438748;
      doubleArray0[4] = (-2809.490481598033);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2555.4956;
      doubleArray0[7] = 2340.443809572505;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2340.443809572505, 11);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, (-1454.64965568211), (-2531.745893), 681.438748, (-2809.490481598033), Double.NaN, 2555.4956, 2340.443809572505, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 4, 110);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, (-1454.64965568211), (-2531.745893), 681.438748, (-2809.490481598033), Double.NaN, 2555.4956, 2340.443809572505, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 2340.443809572505;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) 681.438748;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '2340.443809572505', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1576;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)393;
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)393;
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short)393;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1576, (short) (-249), (short) (-1), (short)4, (short)393, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)393, (short) (-1), (short)393}, shortArray1);
      assertArrayEquals(new short[] {(short)1576, (short) (-249), (short)4, (short)0}, shortArray2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'w';
      charArray0[2] = '~';
      ArrayUtils.shift(charArray0, 704, (-2136802866), (int) (short)4);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {' ', 'w', '~'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (short) (-249));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-249);
      doubleArray0[1] = (double) (-2136802866);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (short)4, (double) (short)1212);
      assertNotNull(bitSet1);
      assertEquals(1, bitSet1.length());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-249.0), (-2.136802866E9)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      float[] floatArray0 = new float[16];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(16, floatArray0.length);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-3428.3997));
      assertEquals((-3428.3997), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-3428.3997));
      assertEquals((-3428.3997), (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[0]);
      assertEquals((-3428.3997), (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals(3, doubleArray0.length);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 58;
      intArray0[1] = 2814;
      intArray0[2] = 2;
      intArray0[3] = (-1473);
      intArray0[4] = (-916);
      intArray0[5] = (-1759);
      intArray0[6] = (-1581);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {58, 2814, 2, (-1473), (-916), (-1759), (-1581)}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2009);
      shortArray0[1] = (short)929;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)596;
      shortArray0[4] = (short)959;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-2009), (short)929, (short)102, (short)596, (short)959}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2009), (short)929, (short)102, (short)596, (short)959}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-1834.1209166364);
      ArrayUtils.reverse(doubleArray0, 2124878556, (-2120265926));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), (-1.0), 0.0, (-1.0), (-1834.1209166364)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 177, 167);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 177);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1834.1209166364), (-2056.0), (-1.0), 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)1403;
      shortArray0[2] = (short)7;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)18688;
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)14;
      shortArray0[7] = (short)48;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)7, (short)1403, (short)7, (short) (-1), (short)18688, (short)4, (short)14, (short)48}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1076);
      shortArray0[1] = (short) (-27);
      shortArray0[2] = (short) (-3631);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1076), (short) (-27), (short) (-3631), (short) (-1076), (short) (-27), (short) (-3631)}, shortArray1);
      
      ArrayUtils.reverse((double[]) null);
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1076);
      longArray0[1] = (long) (short) (-3631);
      longArray0[2] = (long) (short) (-3631);
      longArray0[3] = (long) (short) (-27);
      longArray0[4] = (long) (short) (-3631);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short) (-1076), (int) (short) (-3631));
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1076L), (-3631L), (-3631L), (-27L), (-3631L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'C', 1184);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte1;
      floatArray0[1] = (float) 1184;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1184.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)2;
      doubleArray1[1] = (double) 0;
      ArrayUtils.reverse(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, (double[]) null);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-3697), (-3284));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-5142);
      intArray0[1] = (-2331);
      intArray0[2] = (-2331);
      intArray0[3] = (-5142);
      intArray0[4] = (-5142);
      intArray0[3] = (-347);
      intArray0[6] = 2246;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)100;
      shortArray0[2] = (short)1211;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-897);
      shortArray0[5] = (short)24;
      shortArray0[6] = (short) (-3427);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3, 18688);
      assertEquals((-1), int0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)100, (short)1211, (short)2, (short) (-897), (short)24, (short) (-3427)}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short)100, (short)1211, (short)2, (short) (-897), (short)24, (short) (-3427)}, shortArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-347);
      ArrayUtils.reverse(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-347.0)}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)102);
      assertEquals((byte)102, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 1933.04854241}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)183;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-540);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1), (short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray1);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-57.07108068));
      assertEquals((-57.07108068), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-57.07108068), 0.0}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 60.0, 2, 1.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)91;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short)183;
      longArray0[4] = (long) (short)91;
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short) (-1);
      ArrayUtils.swap(longArray0, 65, 3636);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {91L, 0L, (-1L), 183L, 91L, (-1L), 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      assertEquals(0, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 1933.04854241}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)183;
      shortArray0[1] = (short)32;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short) (-540);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short)183, (short)32, (short)91, (short) (-540), (short) (-1), (short)183, (short)32, (short)91, (short) (-540), (short) (-1)}, shortArray1);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-57.07108068));
      assertEquals((-57.07108068), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean1);
      assertEquals(0, intArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int1 = ArrayUtils.indexOf((double[]) null, 60.0, 2, 1.0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)91;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short)183;
      longArray0[4] = (long) (short)91;
      longArray0[5] = (long) (short) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (short) (-1);
      ArrayUtils.swap(longArray0, 65, 3636);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {91L, 0L, (-1L), 183L, 91L, (-1L), 0L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2015L;
      ArrayUtils.swap(longArray0, 92, 551, (-2401));
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2015L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      ArrayUtils.shift((float[]) null, 1, (int) byte0, 90);
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.decode("Comparator should not be null.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Comparator should not be null.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-27), (-27), (-27));
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      
      byteArray0[3] = byte4;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2191.2783F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1636.0F, (-1));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2191.2783F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(longArray1, (-79), (-1), 1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-124));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-124);
      longArray0[1] = (long) (byte) (-124);
      longArray0[2] = (long) (byte) (-124);
      longArray0[3] = (-703L);
      longArray0[4] = (long) (byte) (-124);
      ArrayUtils.swap(longArray0, (int) (byte) (-124), 1080, 256);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-124L), (-124L), (-124L), (-703L), (-124L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false, false, false, false, true}, booleanArray1));
      
      Byte byte0 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte) (-92));
      assertEquals((byte) (-92), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte4;
      byteArray0[1] = byte3;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)127;
      longArray0[1] = 3644L;
      longArray0[2] = (long) (byte) (-92);
      longArray0[3] = (long) (byte)127;
      ArrayUtils.swap(longArray0, (-812), 177, 0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {127L, 3644L, (-92L), 127L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((short) (-917));
      assertEquals((-917), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13)}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-2043));
      assertEquals((-1), int0);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, 2);
      assertEquals(0, int0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1570));
      assertEquals((-1), int0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Character character0 = Character.valueOf('x');
      assertEquals('x', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('x');
      assertEquals('x', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'x');
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (short)0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = object0;
      Object object1 = ArrayUtils.get((Object[]) null, (int) 0);
      assertNull(object1);
      
      objectArray0[4] = null;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) false;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (-1));
      assertEquals((-1), int1);
      assertEquals(8, objectArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-5));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (-5));
      assertEquals((-1), int0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-67);
      byteArray0[4] = (byte)107;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = '\u0000';
      charArray0[5] = '~';
      charArray0[7] = '5';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)107}, byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1127);
      ArrayUtils.reverse(doubleArray0, (-1127), 120);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1127.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-919), (-1127));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 989;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-919));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 989.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 989.0F}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 120);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1127.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(872L);
      assertEquals(872L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short)3099;
      shortArray0[2] = (short)52;
      shortArray0[3] = (short) (-1922);
      ArrayUtils.swap(shortArray0, (-1592), 871, (int) (short) (-1922));
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)43, (short)3099, (short)52, (short) (-1922)}, shortArray0);
      
      byte[] byteArray0 = new byte[1];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = (long) 871;
      longArray1[2] = (long) (-1592);
      longArray1[3] = (long) (short)3099;
      longArray1[4] = (long) (byte) (-106);
      longArray1[5] = (-55L);
      longArray1[6] = (long) (short) (-1922);
      longArray1[7] = 0L;
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) (short) (-1922));
      assertNotNull(longArray2);
      assertEquals(9, longArray2.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray2);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-1922L), 1L, 871L, (-1592L), 3099L, (-106L), (-55L), (-1922L), 0L}, longArray2);
      assertArrayEquals(new long[] {1L, 871L, (-1592L), 3099L, (-106L), (-55L), (-1922L), 0L}, longArray1);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long[] longArray3 = ArrayUtils.clone(longArray2);
      assertNotNull(longArray3);
      assertEquals(9, longArray2.length);
      assertEquals(9, longArray3.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray3);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray2));
      assertArrayEquals(new long[] {(-1922L), 1L, 871L, (-1592L), 3099L, (-106L), (-55L), (-1922L), 0L}, longArray2);
      assertArrayEquals(new long[] {(-1922L), 1L, 871L, (-1592L), 3099L, (-106L), (-55L), (-1922L), 0L}, longArray3);
      assertArrayEquals(new long[] {1L, 871L, (-1592L), 3099L, (-106L), (-55L), (-1922L), 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-375);
      doubleArray0[1] = (double) (-375);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (-666);
      doubleArray0[7] = (double) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 931.7573, (-2051));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-375.0), (-375.0), (-1.0), (-1.0), (-1.0), (-1.0), (-666.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1609L;
      longArray0[1] = (long) (-666);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (-666);
      byte[] byteArray0 = new byte[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), 11);
      assertNotNull(bitSet1);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      ArrayUtils.shift(booleanArray0, (-375), (-375), (int) (byte) (-1));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-868));
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = 'R';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '1', 'R', 'B'}, charArray0);
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '1', 'R', 'B'}, charArray1);
      
      Short short0 = new Short((short)1772);
      assertEquals((short)1772, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2180);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1772, (short)1772, (short)1772, (short)1772}, shortArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 's');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', '5', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'2', '5', '\u0000', '\u0000'}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)79);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      ArrayUtils.swap((boolean[]) null, 541, (-3087), (int) (byte)45);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Float float0 = new Float((double) (byte)122);
      assertEquals(122.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-72.10742F));
      assertEquals((-72.10742F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 541);
      assertEquals(541.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      Byte byte0 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-6));
      assertEquals((byte) (-6), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[16];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(17, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte)9);
      assertEquals((byte)9, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-107);
      Byte byte1 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-107), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf(byte0);
      assertEquals((byte) (-107), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-107), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      
      byteArray0[4] = byte5;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'a');
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)102, (int) (byte)102);
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray2, (int)  (-24));
      assertNull(byte0);
      assertEquals(0, byteArray2.length);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)33);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)0, (int) (byte) (-24));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray1 = ArrayUtils.addFirst((int[]) null, (int) (byte)35);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {35}, intArray1);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte)0, (int) (byte)102);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-63));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-378));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)2, (byte)2, (byte)113, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)34;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)0, 410.2947);
      assertEquals(0, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 2.0, 34.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)113;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)113;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 113.0F, 113.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-86);
      ArrayUtils.reverse(byteArray0, Integer.MAX_VALUE, 116);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-79), (byte) (-86)}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char char0 = 'P';
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte)53);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'P';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {80}, intArray0);
      assertArrayEquals(new int[] {80}, intArray1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('P');
      assertEquals('P', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character(char0);
      assertEquals('P', (char)character2);
      assertNotNull(character2);
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      
      characterArray0[2] = character2;
      Character character3 = Character.valueOf('}');
      assertEquals('}', (char)character3);
      assertNotNull(character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character0));
      
      characterArray0[3] = character3;
      Character character4 = new Character('P');
      assertEquals('P', (char)character4);
      assertNotNull(character4);
      assertFalse(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)char0));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character4.equals((Object)character2));
      
      characterArray0[4] = character4;
      char char1 = 'k';
      Character character5 = Character.valueOf('k');
      assertEquals('k', (char)character5);
      assertNotNull(character5);
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character2));
      assertFalse(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      
      characterArray0[5] = character5;
      Character character6 = Character.valueOf(char1);
      assertEquals('k', (char)character6);
      assertNotNull(character6);
      assertFalse(char1 == char0);
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)char0));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      
      characterArray0[6] = character6;
      Character character7 = Character.valueOf('9');
      assertEquals('9', (char)character7);
      assertNotNull(character7);
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character5));
      assertFalse(character7.equals((Object)char0));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)char1));
      assertFalse(character7.equals((Object)character6));
      
      characterArray0[7] = character7;
      Character character8 = new Character('9');
      assertEquals('9', (char)character8);
      assertNotNull(character8);
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)char0));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character5));
      assertFalse(character8.equals((Object)character2));
      assertTrue(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)char1));
      
      characterArray0[8] = character8;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-1831));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1831, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      int[] intArray0 = new int[8];
      intArray0[0] = 2762;
      intArray0[1] = 2762;
      intArray0[2] = 2762;
      intArray0[3] = 2762;
      intArray0[4] = (-2078);
      intArray0[5] = 2762;
      intArray0[6] = 2762;
      intArray0[7] = 673;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, (-2078));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2078, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = ArrayUtils.nullToEmpty((Long[]) null);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 3149.0);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 313;
      intArray0[2] = 8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 313, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-107);
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-107), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)7, (byte)3, (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte) (-92);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2415.606136247275;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1)}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)3, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-107.0), (-92.0), 2103.856326, (-107.0), (-92.0), 2103.856326, 2415.606136247275, 2415.606136247275}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-107.0), (-92.0), 2103.856326, 2415.606136247275}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (byte)3;
      doubleArray2[1] = (double) (byte) (-107);
      int[] intArray0 = ArrayUtils.add((int[]) null, (int) (short) (-1));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Byte byte0 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)16, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Byte byte1 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)16, object1);
      assertNotNull(object1);
      assertTrue(byte1.equals((Object)object0));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)byte0));
      
      objectArray0[1] = object1;
      ArrayUtils.shift(objectArray0, (-2981), 1, 2131090643);
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)13;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 5668, (-1199));
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0}, byteArray0);
      
      char[] charArray1 = Character.toChars(1);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0001'}, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)12, 109);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)13, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)42);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ArrayUtils.shift(byteArray0, (-7), 2000, (int) (byte)42);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-4543), 16, (-1157));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(16, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-378));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)34, (byte)0, (byte)2, (byte)113, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 2);
      assertEquals((-1), int0);
      
      ArrayUtils.shift(longArray0, 0, (int) (byte)113, (int) (byte)2);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 406L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)113;
      doubleArray0[1] = 1182.051;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (byte)2;
      int int1 = ArrayUtils.indexOf(doubleArray0, 694.351249115693, (int) (byte)2);
      assertEquals((-1), int1);
      assertEquals(4, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 2);
      assertEquals((-1), int2);
      assertEquals(4, doubleArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {113.0, 1182.051, 2.0, 2.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = '(';
      charArray0[2] = '_';
      charArray0[3] = 'W';
      charArray0[4] = 'C';
      charArray0[5] = 'F';
      charArray0[6] = 'k';
      charArray0[7] = 'M';
      ArrayUtils.reverse(charArray0, 2124878556, (-2309));
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'@', '(', '_', 'W', 'C', 'F', 'k', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      long[] longArray0 = new long[4];
      longArray0[0] = 1310L;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) (short) (-1);
      ArrayUtils.reverse((char[]) null, (-2776), 2146756426);
      ArrayUtils.shift((char[]) null, 4169, 2146756426, (-1900));
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 806L;
      longArray0[1] = 537L;
      longArray0[2] = (-1L);
      ArrayUtils.shift(longArray0, (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {537L, (-1L), 806L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      ArrayUtils.shift(longArray0, (-248), 1492, 1091);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 406L, 0L, (-1119L), 1360L, (-292L)}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1218.2264719282);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0L, 2000);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1218.2264719282)}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.1, 5);
      assertEquals((-1), int1);
      assertEquals(1, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1218.2264719282)}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'r';
      charArray0[2] = '/';
      charArray0[3] = 'p';
      charArray0[4] = 'a';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '}', 68);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'g', 'r', '/', 'p', 'a'}, charArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)33);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      
      Byte byte6 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte6;
      byteArray0[2] = byte6;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byteArray0[7] = byte4;
      Byte byte7 = ArrayUtils.get(byteArray0, (int)  (-74));
      assertNull(byte7);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[0];
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte0;
      longArray0[1] = (-50L);
      longArray0[2] = (-1L);
      longArray0[3] = (long) byte2;
      longArray0[4] = (long) byte2;
      longArray0[5] = (long) (byte) (-74);
      longArray0[6] = (long) (byte) (-1);
      longArray0[7] = (long) byte0;
      longArray0[8] = (long) byte2;
      ArrayUtils.shift(longArray0, (int) (byte) (-1));
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {(-50L), (-1L), (-1L), (-1L), (-74L), (-1L), 119L, (-1L), 119L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-127), (int) (byte)76);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)76}, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte) (-121);
      intArray0[3] = (-3505);
      intArray0[4] = (-3505);
      intArray0[5] = (int) (byte) (-127);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505), (-3505), (-127)}, intArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 2146638539);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505), (-3505), (-127)}, intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 65;
      ArrayUtils.shift(longArray0, 0, (-3505), 2861);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {65L}, longArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((float[]) null);
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) (-127);
      doubleArray0[3] = (double) (byte)76;
      doubleArray0[4] = (double) (byte)76;
      doubleArray0[5] = (double) (-121);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 76.0, (-127.0), 76.0, 76.0, (-121.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte) (-121)}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte) (-121);
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      int int0 = ArrayUtils.indexOf(intArray0, 65);
      assertEquals((-1), int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, (-121), (-3505)}, intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-121);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 76;
      longArray0[3] = (-820L);
      longArray0[4] = (long) 76;
      ArrayUtils.shift(longArray0, 1, 1, (-1));
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-121L), (-1L), 76L, (-820L), 76L}, longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-820L);
      floatArray0[1] = (float) (-121L);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-121L);
      floatArray0[4] = (float) (byte) (-121);
      floatArray0[5] = (float) 'Q';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(12, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-820.0F), (-121.0F), (-1.0F), (-121.0F), (-121.0F), 81.0F}, floatArray0, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {81.0F, (-121.0F), (-121.0F), (-1.0F), (-121.0F), (-820.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = '6';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'd', '6', '6'}, charArray0);
      assertArrayEquals(new char[] {'6', 'd', '6', '6', '6', 'd', '6', '6'}, charArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '6';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-11);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-11)}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1933.04854241, (int) (byte)20, 4117.46978);
      assertEquals(3, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {54.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) (byte) (-11);
      floatArray0[2] = (float) '6';
      floatArray0[3] = (float) (byte)20;
      floatArray0[4] = (float) (byte)20;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) '6';
      ArrayUtils.shuffle(floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-11.0F), 54.0F, 20.0F, 20.0F, 0.0F, 54.0F, 54.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'd';
      intArray0[1] = 3;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {100, 3}, intArray0);
      assertArrayEquals(new int[] {100, 3}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2224);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2224, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)43;
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      Float float0 = new Float((-1282.1F));
      assertEquals((-1282.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-407.1409776517));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte)39);
      assertEquals((byte)39, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) float0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 4;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, object0, 4);
      assertEquals((-1), int1);
      assertEquals(7, objectArray0.length);
      assertFalse(int1 == int0);
      
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, (double) 4, 5126);
      assertEquals((-1), int2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte byte1 = (byte) (-93);
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-93));
      assertNull(byteArray0);
      
      Character[] characterArray0 = new Character[12];
      Character character0 = new Character('G');
      assertEquals('G', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      Float float0 = new Float((double) (byte)1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[0];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte)1);
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      ArrayUtils.shift(shortArray0, (-3007), Integer.MAX_VALUE, (-3007));
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (-1489), (int) byte0);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(861, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 861, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[7];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(6, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte3);
      assertTrue(boolean0);
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      short[] shortArray0 = ArrayUtils.insert(1046, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1046;
      doubleArray0[2] = (double) (byte)92;
      doubleArray0[3] = (double) 1046;
      doubleArray0[4] = (double) 1046;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1046.0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1046.0, 92.0, 1046.0, 1046.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1046.0, 92.0, 1046.0, 1046.0, 1046.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1046;
      intArray0[1] = (int) (byte)92;
      intArray0[2] = (int) (byte)92;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte) (-81);
      intArray0[5] = (int) (byte)53;
      intArray0[6] = 1046;
      intArray0[7] = 90;
      ArrayUtils.reverse(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {90, 1046, 53, (-81), (-1), 92, 92, 1046}, intArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte3;
      Byte byte4 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1004);
      shortArray0[0] = (short) (-1004);
      shortArray0[1] = (short) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1004), (short) (-1)}, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-1);
      int int0 = 473;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 473, (long) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 473, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-5236.3F);
      floatArray0[1] = 577.289F;
      floatArray0[2] = 2345.67F;
      float[] floatArray1 = ArrayUtils.add(floatArray0, 111.5502F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-5236.3F), 577.289F, 2345.67F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5236.3F), 577.289F, 2345.67F, 111.5502F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray1, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(7, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-5236.3F), 577.289F, 2345.67F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-5236.3F), 577.289F, 2345.67F, 111.5502F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-5236.3F), 577.289F, (-5236.3F), 577.289F, 2345.67F, 2345.67F, 111.5502F}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[4] = (-1);
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (byte)0;
      intArray0[0] = (int) (short)1865;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (byte)0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1), (short)0, (short) (-1), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0, (short) (-1), (short)0, (short) (-1), (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.reverse((float[]) null, (int) (short)2, 2146177944);
      int int1 = ArrayUtils.indexOf(booleanArray0, false, 737);
      assertEquals((-1), int1);
      assertEquals(3, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2146177944;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 2.14617792E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'a');
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)102, 119);
      Byte[] byteArray2 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray2, (int)  (-24));
      assertNull(byte0);
      assertEquals(0, byteArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)33);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 31;
      floatArray0[1] = (float) 31;
      floatArray0[2] = (float) 31;
      floatArray0[3] = (-2286.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {31.0F, 31.0F, 31.0F, (-2286.0F)}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 31.0F;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) (-2286.0F);
      int int0 = ArrayUtils.indexOf(doubleArray0, 31.0, 31, 2258.646224);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 31.0, 31.0, (-2286.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2904, 53);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-2286.0F));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {31.0F, 31.0F, 31.0F, (-2286.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2286.0F), 31.0F, 31.0F, 31.0F, (-2286.0F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) (-1);
      floatArray2[1] = (float) 53;
      floatArray2[2] = (float) (-1);
      floatArray2[3] = (float) 31;
      floatArray2[4] = (float) 0;
      ArrayUtils.shift(floatArray2, (-1), 0, 53);
      assertEquals(5, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 53.0F, (-1.0F), 31.0F, 0.0F}, floatArray2, 0.01F);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 31;
      intArray0[3] = 53;
      intArray0[4] = (-1);
      intArray0[5] = 53;
      intArray0[6] = 31;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-1), 0, 31, 53, (-1), 53, 31}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 3056.4138F;
      floatArray0[3] = (-1.0F);
      floatArray0[5] = 1844.0F;
      floatArray0[6] = 2191.2783F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1844.0F, (-934));
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 645.0F, 3056.4138F, (-1.0F), 0.0F, 1844.0F, 2191.2783F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = new int[17];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(17, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)89;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (byte)89;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {89.0, 1.0, 89.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {89.0, 89.0}, doubleArray1, 0.01);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'Y');
      assertNull(charArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      String string0 = "H";
      Byte byte0 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) (float)floatArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) floatArray0[0]);
      assertEquals(2, int0);
      assertEquals(1, floatArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 77.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-84));
      assertFalse(boolean1);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      intArray1[1] = Integer.MAX_VALUE;
      intArray1[2] = (int) (short) (-84);
      intArray1[3] = (int) (short) (-84);
      intArray1[4] = (int) 'M';
      intArray1[5] = (int) (byte)0;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, (-84), (-84), 77, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      longArray0[6] = (-6292L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-4034);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-84);
      shortArray0[1] = (short) (-84);
      shortArray0[2] = (short) (-84);
      shortArray0[3] = (short) (-84);
      shortArray0[4] = (short) (-84);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-2930));
      assertFalse(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-84), (short) (-84), (short) (-84), (short) (-84), (short) (-84)}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 61.0, 6, 61.0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-59));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1434), (-24));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      shortArray0[1] = (short) (-543);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-619);
      shortArray0[5] = (short) (-3199);
      shortArray0[6] = (short) (-3199);
      shortArray0[7] = (short) (-793);
      shortArray0[8] = (short)457;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)457);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-3199), (short) (-793), (short)457}, shortArray0);
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-3199), (short) (-793)}, shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)101;
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      Byte byte2 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = ArrayUtils.get(byteArray0, (int)  (-619), byte2);
      assertEquals((byte)91, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(3, byteArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals((byte)91, object0);
      assertNotNull(object0);
      assertEquals(3, byteArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals((byte)91, object1);
      assertNotNull(object1);
      assertEquals(3, byteArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short) byte0, (int) (short) (-619));
      assertNotNull(bitSet0);
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals("{1, 2, 3}", bitSet0.toString());
      assertEquals(4, shortArray2.length);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)101, (short)0, (short)0, (short)0}, shortArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-543);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, 0.0, (int) (byte)91, (-1600.441526901063));
      assertNotNull(bitSet1);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-543.0)}, doubleArray0, 0.01);
      
      bitSet0.and(bitSet1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, doubleArray0.length);
      assertEquals(4, shortArray2.length);
      assertNotSame(bitSet0, bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertTrue(bitSet0.equals((Object)bitSet1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new double[] {(-543.0)}, doubleArray0, 0.01);
      assertArrayEquals(new short[] {(short)101, (short)0, (short)0, (short)0}, shortArray2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (-2220), 2085, (-842));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3099;
      shortArray0[1] = (short)3099;
      shortArray0[2] = (short)3099;
      shortArray0[3] = (short)3099;
      shortArray0[4] = (short)3099;
      ArrayUtils.swap(shortArray0, 1233, 3658, 3658);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)3099, (short)3099, (short)3099, (short)3099, (short)3099}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) null, (int) (short)3099);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[2];
      longArray1[0] = (long) (short)3099;
      longArray1[1] = (long) (-1458);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, (-2377));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2377, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, 16, 16, 1073741824);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-85);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)88);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-27), (byte)24, (byte) (-85)}, byteArray0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)115, (byte) (-27), (byte)24, (byte) (-85)}, byteArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) null, 49);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)115;
      doubleArray0[1] = (double) (byte)24;
      doubleArray0[2] = (double) (byte) (-27);
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)24, Double.NaN);
      assertNotNull(bitSet2);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.length());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(3, doubleArray0.length);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertArrayEquals(new double[] {115.0, 24.0, (-27.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 49;
      longArray0[2] = (long) (byte)115;
      longArray0[3] = (long) (byte) (-27);
      longArray0[4] = (long) (byte)115;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (byte) (-85));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -85, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2493.9340681;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2493.9340681);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2493.9340681}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 2543L;
      doubleArray0[2] = (-581.31351226);
      doubleArray0[3] = (double) 2543L;
      doubleArray0[4] = (double) 2543L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 5462.9, (-2021), 1.0);
      assertEquals((-1), int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 2543.0, (-581.31351226), 2543.0, 2543.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.reverse(booleanArray0, (-1), (-2021));
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      charArray0[5] = '1';
      charArray0[6] = '.';
      charArray0[7] = 'R';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', '\u0000', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray0);
      assertArrayEquals(new char[] {')', '\u0000', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'J', 7);
      assertEquals(2, int0);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {')', '\u0000', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (int) '1';
      intArray0[2] = (int) '.';
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) ')';
      intArray0[5] = (int) 'B';
      intArray0[6] = (int) '1';
      intArray0[7] = 3261;
      intArray0[8] = (int) 'R';
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {49, 46, 82, 41, 66, 49, 3261, 82, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-3571.0979730909576));
      assertEquals((-3571.0979730909576), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-3571.0979730909576));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-3571.0979730909576)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-2651L);
      floatArray1[1] = (float) 0L;
      floatArray1[2] = (float) 0L;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) (-2651L);
      floatArray1[5] = (float) 0L;
      ArrayUtils.swap(floatArray1, (-1), 177);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-2651.0F), 0.0F, 0.0F, 0.0F, (-2651.0F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 622.7738779812119);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {622.7738779812119}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(1344.444330264);
      assertEquals(1344.444330264, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)122);
      assertEquals(122.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1328.594452585312);
      assertEquals(1328.594452585312, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals(1344.444330264, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      Double double4 = new Double((-1736.12697775843));
      assertEquals((-1736.12697775843), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)51);
      assertEquals(51.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2033.02761966);
      assertEquals(2033.02761966, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1344.444330264, 122.0, 1328.594452585312, 0.0, (-1736.12697775843), 51.0, 2033.02761966}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 622.28);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(1344.444330264);
      assertEquals(1344.444330264, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((byte)122);
      assertEquals(122.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1328.594452585312);
      assertEquals(1328.594452585312, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[0]);
      assertEquals(1344.444330264, (double)double3, 0.01);
      assertNotNull(double3);
      assertEquals(7, doubleArray0.length);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1736.12697775843));
      assertEquals((-1736.12697775843), (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((byte)51);
      assertEquals(51.0, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(2033.02761966);
      assertEquals(2033.02761966, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (byte)0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1344.444330264, 122.0, 1328.594452585312, 1344.444330264, (-1736.12697775843), 51.0, 2033.02761966}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2535);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-2535)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73));
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)102);
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'X';
      charArray0[4] = 'C';
      charArray0[5] = 'X';
      charArray0[6] = ',';
      charArray0[7] = 'C';
      charArray0[8] = ',';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '|');
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'|', 'X', 'C', ',', 'X', 'C', 'X', ',', 'C', ','}, charArray1);
      assertArrayEquals(new char[] {'X', 'C', ',', 'X', 'C', 'X', ',', 'C', ','}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[2] = (int) 'C';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1);
      assertEquals(3, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {44, 44, 67}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) classArray0, (int) (byte)102);
      assertEquals(0, classArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      charArray0[8] = 'C';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'X', 'C', 'C', ',', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', ',', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'C';
      intArray0[1] = (int) 'C';
      intArray0[2] = (int) 'C';
      intArray0[3] = (int) ',';
      intArray0[4] = (int) 'C';
      intArray0[5] = (int) ',';
      intArray0[6] = (int) 'C';
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertEquals(7, intArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {67, 67, 67, 44, 67, 44, 67}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      ArrayUtils.swap((boolean[]) null, 1083, 2146439152, 2902);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)25;
      floatArray0[1] = (float) (byte)25;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {25.0F, 25.0F}, floatArray0, 0.01F);
      
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {25.0F, 25.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray3, 0.0, 2143802122);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(8, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, true, true, true}, booleanArray0));
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-55L);
      longArray0[1] = (-55L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 438L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-55L), (-55L)}, longArray0);
      assertArrayEquals(new long[] {438L, (-55L), (-55L)}, longArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean2);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-122)}, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 438L;
      floatArray0[1] = (float) 438L;
      floatArray0[2] = (float) (byte) (-122);
      floatArray0[3] = (float) 2143802122;
      floatArray0[4] = (float) (byte) (-122);
      floatArray0[5] = (float) (byte) (-122);
      floatArray0[6] = (float) 2143802122;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 2143802122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2143802122, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte7 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte7;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte5;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte4;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, objectArray0.length);
      assertFalse(byte0 == byte2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (-1.0F);
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (long) byte2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(byte2 == byte0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-33L)}, longArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)7, object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, 1936, (Object) byte0);
      assertEquals((byte)7, object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), 1553, (double) (byte)7);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), (-1.0), 0.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (-2577));
      assertNull(byte1);
      assertEquals(2, byteArray0.length);
      
      Object object4 = ArrayUtils.get((Object[]) null, (-1), (Object) null);
      assertNull(object4);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = 'k';
      charArray0[2] = 'c';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = '+';
      charArray0[6] = 'a';
      charArray0[7] = '$';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals(5, int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'}', 'k', 'c', 'T', 'T', '+', 'a', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      doubleArray0[2] = (-2531.745893);
      doubleArray0[3] = 681.438748;
      doubleArray0[4] = (-2809.490481598033);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2555.4956;
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-125), object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-2146429703), object0);
      assertEquals((byte) (-125), object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2246.4224261287177, 244, 2246.4224261287177);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, (-1454.64965568211), (-2531.745893), 681.438748, (-2809.490481598033), Double.NaN, 2555.4956, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = ArrayUtils.get((Object[]) null, (int)  (-125), object3);
      assertNotNull(object4);
      assertSame(object3, object4);
      assertNotSame(object3, object2);
      assertSame(object4, object3);
      assertNotSame(object4, object2);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object4.equals((Object)object2));
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-125);
      shortArray0[1] = (short) (byte) (-125);
      shortArray0[2] = (short) (byte) (-125);
      shortArray0[3] = (short) (byte) (-125);
      shortArray0[4] = (short) (byte) (-125);
      shortArray0[5] = (short) (byte) (-125);
      shortArray0[6] = (short) (byte) (-125);
      shortArray0[7] = (short) (byte) (-125);
      shortArray0[8] = (short) (byte) (-125);
      ArrayUtils.reverse(shortArray0, (-2146429703), (int) (byte) (-125));
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-125), (short) (-125), (short) (-125), (short) (-125), (short) (-125), (short) (-125), (short) (-125), (short) (-125), (short) (-125)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) (-125), (-2531.745893));
      assertEquals((-1), int0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, (-1454.64965568211), (-2531.745893), 681.438748, (-2809.490481598033), Double.NaN, 2555.4956, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-31L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-31L)}, longArray0);
      assertArrayEquals(new long[] {(-31L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-2651L);
      longArray0[3] = 1L;
      longArray0[4] = 1825L;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1676);
      assertNull(byte1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert((-1), floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)40;
      int int0 = ArrayUtils.indexOf(intArray0, 1573);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 34, 40, 40, 40}, intArray0);
      
      Byte[] byteArray1 = new Byte[2];
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray1[1] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray1, (-1949));
      assertNull(byte2);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 40;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 40;
      floatArray0[3] = (float) 1573;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.insert((-1958), floatArray0, floatArray1);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {40.0F, 2.0F, 40.0F, 1573.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {40.0F, 2.0F, 40.0F, 1573.0F}, floatArray2, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 43);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41;
      ArrayUtils.reverse(doubleArray0, 41, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 41, (-748));
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) 41;
      floatArray0[2] = (-1239.0394F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 400.5016F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      ArrayUtils.shift(booleanArray0, 41, 800, 100);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.contains((long[]) null, (-1628L));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int1 == int0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 41;
      integerArray0[1] = (Integer) 41;
      integerArray0[2] = (Integer) 41;
      integerArray0[3] = (Integer) 41;
      integerArray0[4] = (Integer) 41;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, (-2325));
      assertNotNull(intArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 88);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1384);
      assertEquals(1384, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[2];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 1);
      assertNotNull(intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1384, (-4438));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1384, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1560;
      floatArray0[1] = (float) 1560;
      floatArray0[2] = (float) 1560;
      floatArray0[3] = (float) 1560;
      floatArray0[4] = (float) 1560;
      floatArray0[5] = (-2286.0F);
      floatArray0[6] = (float) 1560;
      floatArray0[7] = (float) 1560;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1560.0F, 1560.0F, 1560.0F, 1560.0F, 1560.0F, (-2286.0F), 1560.0F, 1560.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1560;
      longArray0[1] = (long) 1560;
      longArray0[2] = (long) 1560;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1560L, 1560L, 1560L}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2286.0F);
      doubleArray0[1] = (double) 1560.0F;
      doubleArray0[2] = (double) (-2286.0F);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1560.0F, 1560, 0.0);
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2286.0), 1560.0, (-2286.0)}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(booleanArray0, 2684, 2904);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2684;
      intArray0[1] = (-1);
      intArray0[2] = 2684;
      intArray0[3] = (-1);
      intArray0[4] = 2684;
      intArray0[5] = 2684;
      intArray0[6] = (-1);
      intArray0[7] = 1560;
      intArray0[8] = 2904;
      int int1 = ArrayUtils.indexOf(intArray0, (-1), 2904);
      assertEquals((-1), int1);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {2684, (-1), 2684, (-1), 2684, 2684, (-1), 1560, 2904}, intArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short) (-2220);
      shortArray0[3] = (short)3124;
      shortArray0[4] = (short)1995;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)98);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)98, (short) (-2220), (short)3124, (short)1995}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 989;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 989;
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte)119;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 2529);
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {989, (-1), (-1), 989, (-1), 119}, intArray0);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1803.15F));
      assertNull(floatArray0);
      
      ArrayUtils.shift(doubleArray0, 1220);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-22);
      doubleArray0[1] = (double) (short) (-22);
      doubleArray0[2] = (double) (short) (-22);
      doubleArray0[3] = (double) (short) (-22);
      doubleArray0[4] = (double) (short) (-22);
      doubleArray0[5] = (double) (short) (-22);
      doubleArray0[6] = (double) (short) (-22);
      ArrayUtils.shift(doubleArray0, 99, (-2377), (-1181));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-22.0), (-22.0), (-22.0), (-22.0), (-22.0), (-22.0), (-22.0)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-22);
      floatArray0[1] = (float) (short) (-22);
      floatArray0[2] = (float) (-1181);
      floatArray0[3] = (float) (short) (-22);
      floatArray0[4] = (float) 99;
      floatArray0[5] = (float) 99;
      floatArray0[6] = 760.5F;
      floatArray0[7] = (float) (-2377);
      floatArray0[8] = (float) (-2377);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(18, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-22.0F), (-22.0F), (-1181.0F), (-22.0F), 99.0F, 99.0F, 760.5F, (-2377.0F), (-2377.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 457, 438, 457);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (double) 457);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)46);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)46}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertNotNull(bitSet0);
      assertEquals("{1, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      
      ArrayUtils.shift(doubleArray1, (-843), 2670, (-843));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray2 = ArrayUtils.insert(2670, doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short) (-22);
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'Z');
      assertNull(charArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'Z', (-723));
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      charArray0[5] = '1';
      charArray0[6] = '.';
      charArray0[7] = 'R';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray0);
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray1);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)27;
      Byte byte1 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-54);
      Byte byte3 = new Byte((byte) (-54));
      assertEquals((byte) (-54), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      byteArray0[1] = byte3;
      Byte byte4 = Byte.valueOf((byte) (-54));
      assertEquals((byte) (-54), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[2] = byte4;
      Byte byte5 = Byte.valueOf((byte) (-60));
      assertEquals((byte) (-60), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      
      byteArray0[3] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = byte0;
      byteArray2[1] = byte2;
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-54), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      ArrayUtils.shift(byteArray0, (int) (byte)1, 873, 99);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 339, (int) byte0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = Character.toChars((int) byte0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0001'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(byteArray0, 1000, 1000, 1469);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-3779), 99);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        Character.toChars((-1245));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 1412);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1412}, intArray0);
      
      Integer integer0 = new Integer((-786));
      assertEquals((-786), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)1805, (-786));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-349);
      shortArray0[1] = (short) (-349);
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-349), (short) (-349)}, shortArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short) (-349);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) 641;
      doubleArray0[3] = (-290.344146654778);
      doubleArray0[4] = (double) (short) (-349);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-349.0), 0.7, 641.0, (-290.344146654778), (-349.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-349.0), 0.7, 641.0, (-290.344146654778), (-349.0), (-349.0), 0.7, 641.0, (-290.344146654778), (-349.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (short) (-349), (-786));
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-349.0), 0.7, 641.0, (-290.344146654778), (-349.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-349.0), 0.7, 641.0, (-290.344146654778), (-349.0), (-349.0), 0.7, 641.0, (-290.344146654778), (-349.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 641;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {641.0F, (-1.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-3772.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)101;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) (-3772.5);
      objectArray0[2] = (Object) (-3772.5);
      objectArray0[3] = (Object) 0.0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(4, objectArray0.length);
      
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = new Boolean("Illegal range. The step cannot be zero.");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf("1h(U#;.z2rDXY6~*");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean("1h(U#;.z2rDXY6~*");
      assertFalse(boolean4);
      assertNotNull(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean(true);
      assertTrue(boolean5);
      assertNotNull(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean4));
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean2));
      
      booleanArray0[4] = boolean5;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray1));
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, (int) (byte)0, (int) (byte)0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int int0 = ArrayUtils.indexOf(booleanArray1, (boolean) boolean2);
      assertEquals(1, int0);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean5));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean4));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1237, 915, 1021);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('1');
      assertEquals('1', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray1 = ArrayUtils.insert((int) character0, (char[]) null, (char[]) null);
      assertNull(charArray1);
      
      Character[] characterArray1 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray1);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = 'd';
      charArray0[2] = '6';
      charArray0[3] = '6';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'6', 'd', '6', '6'}, charArray0);
      assertArrayEquals(new char[] {'6', 'd', '6', '6', '6', 'd', '6', '6'}, charArray1);
      
      Byte[] byteArray0 = new Byte[8];
      String string0 = "";
      try { 
        Byte.valueOf("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (int) (byte)2);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 1, (-1034));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      short[] shortArray0 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-107);
      ArrayUtils.swap(byteArray0, (int) (byte) (-107), (int) (byte) (-107), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)7, (byte)5, (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte) (-92);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2415.606136247275;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)5, (int) (byte)5, 0.0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), (-92.0), 2103.856326, 2415.606136247275}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 99, 97);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)7, (byte)5, (byte) (-107)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-107);
      ArrayUtils.swap(byteArray0, 2048, (int) (byte) (-107), (-944));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1), (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2103.856326;
      doubleArray0[1] = 2103.856326;
      doubleArray0[2] = 2415.606136247275;
      doubleArray0[3] = (double) 2048;
      doubleArray0[4] = (double) (byte) (-107);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2048.0, 8, 2103.856326);
      assertEquals(3, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2103.856326, 2103.856326, 2415.606136247275, 2048.0, (-107.0)}, doubleArray0, 0.01);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 55, (int) (byte) (-107));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-1), (byte) (-107)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1686;
      intArray0[1] = 656;
      intArray0[2] = 2;
      intArray0[3] = 9;
      intArray0[4] = (-378);
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1686, 656, 2, 9, (-378)}, intArray0);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1516);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1686, 656, 2, 9, (-378)}, intArray0);
      assertArrayEquals(new int[] {1686, 656, 2, 9, (-378)}, intArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)2;
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'X';
      charArray0[2] = 'R';
      charArray0[3] = '1';
      charArray0[4] = '.';
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 2124878556);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-96), 112);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[1] = (-292L);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-35), (byte)4}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      double[] doubleArray1 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[3], object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-84);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-84), (byte) (-33), (byte) (-33), (byte) (-84)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-33);
      shortArray0[1] = (short) (byte) (-33);
      shortArray0[2] = (short) (byte) (-84);
      shortArray0[3] = (short) (byte) (-33);
      shortArray0[4] = (short) (byte) (-84);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-33), (short) (-33), (short) (-84), (short) (-33), (short) (-84)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'H');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 477);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 477, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[0] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      Short short0 = new Short((short)2704);
      assertEquals((short)2704, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)35);
      assertEquals((short)35, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      byte[] byteArray2 = ArrayUtils.addFirst((byte[]) null, (byte)102);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)102}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2543L;
      floatArray0[1] = (float) 2543L;
      floatArray0[2] = (float) (-1135);
      ArrayUtils.shift(floatArray0, (-1135));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2543.0F, (-1135.0F), 2543.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      ArrayUtils.reverse((Object[]) null);
      ArrayUtils.shift(floatArray0, (-1135));
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1135.0F), 2543.0F, 2543.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((int[]) null, Integer.MAX_VALUE);
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'g';
      charArray0[2] = '#';
      charArray0[3] = 'z';
      charArray0[4] = 'e';
      charArray0[5] = '>';
      charArray0[6] = '|';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '|');
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'g', '#', 'z', 'e', '>'}, charArray1);
      assertArrayEquals(new char[] {'w', 'g', '#', 'z', 'e', '>', '|'}, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-126));
      assertNotNull(byteArray1);
      assertEquals(10, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-77), (byte) (-84), (byte)4, (byte) (-57), (byte)111, (byte)79, (byte)1, (byte) (-24), (byte) (-126)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte) (-84), (byte)4, (byte) (-57), (byte)111, (byte)79, (byte)1, (byte) (-24), (byte) (-126)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)15;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (-899.099);
      doubleArray0[7] = 1.5;
      doubleArray0[8] = (double) (byte)15;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)15, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-2689.0386468));
      assertEquals((-2689.0386468), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2689.0386468)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1040, doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1040, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)102;
      Short short0 = new Short((short)2704);
      assertEquals((short)2704, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)35);
      assertEquals((short)35, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)4);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)102;
      doubleArray0[2] = (double) (byte) (-24);
      doubleArray0[3] = (double) (short)4;
      doubleArray0[4] = (double) (byte)102;
      doubleArray0[5] = (double) (byte)35;
      doubleArray0[6] = (double) (short)2704;
      doubleArray0[7] = (double) (byte)35;
      doubleArray0[8] = (double) (byte)33;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)102);
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 102.0, (-24.0), 4.0, 102.0, 35.0, 2704.0, 35.0, 33.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-378));
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)60, (byte)34, (byte)0, (byte)2, (byte)113, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)60;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)34;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)60, 410.2947);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 60.0, 0.0, 2.0, 34.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)113;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte)113;
      ArrayUtils.shuffle(floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 113.0F, 113.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-917);
      shortArray0[1] = (short)386;
      shortArray0[2] = (short) (-349);
      shortArray0[3] = (short)8537;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-917), (-2373));
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-917), (short)386, (short) (-349), (short)8537}, shortArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-917), (short)386, (short) (-349), (short)8537}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertFalse(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      
      short[] shortArray2 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)2, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 407;
      intArray0[1] = (-2331);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 52;
      intArray0[5] = (-347);
      intArray0[6] = 2246;
      intArray0[7] = 374;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {407, (-2331), 0, 0, 52, (-347), 2246, 374}, intArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-1972));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1972, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 262.0;
      doubleArray0[1] = 0.0;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)33);
      assertEquals((-1), int0);
      
      ArrayUtils.shift((int[]) null, (int) (byte)33);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[1];
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[4] = 'm';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'E');
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', 'm', 'm', '\u0000', 'm'}, charArray0);
      assertArrayEquals(new char[] {'m', 'm', 'm', '\u0000', 'm'}, charArray1);
      
      Object[] objectArray0 = new Object[4];
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)53, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'm';
      objectArray0[2] = (Object) 'm';
      objectArray0[3] = (Object) 'E';
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '\u0000';
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      objectArray0[0] = (Object) boolean1;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, (int) (short)2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (int) (short)2);
      assertEquals(2, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 2, 4);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray1 = ArrayUtils.insert(4, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, 4, (short) (-187));
      assertNotNull(shortArray2);
      assertEquals(6, shortArray2.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short) (-187), (short)2}, shortArray2);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      Short[] shortArray3 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray3);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray3.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((int) (short)25816, shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)25816);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1467.2874F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = 0.0F;
      ArrayUtils.reverse(floatArray0, (-1435), 0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1467.2874F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '';
      charArray0[2] = 'k';
      charArray0[3] = '~';
      charArray0[4] = 'q';
      charArray0[5] = 'Q';
      charArray0[6] = 'D';
      charArray0[7] = 'a';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '!', (-3342));
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'k', '', 'k', '~', 'q', 'Q', 'D', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 3056.4138F;
      floatArray0[3] = (-1.0F);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 3056.4138F;
      objectArray0[2] = (Object) (-1.0F);
      objectArray0[3] = (Object) 645.0F;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, 'x', (-723));
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Long[] longArray0 = new Long[8];
      Long long0 = new Long(1772L);
      assertEquals(1772L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long(524L);
      assertEquals(524L, (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long(3921L);
      assertEquals(3921L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[3] = long3;
      Long long4 = new Long(3921L);
      assertEquals(3921L, (long)long4);
      assertNotNull(long4);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long2));
      
      longArray0[4] = long4;
      Long long5 = new Long((-2773L));
      assertEquals((-2773L), (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long2));
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[0]);
      assertEquals(1772L, (long)long6);
      assertNotNull(long6);
      assertEquals(8, longArray0.length);
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long5));
      
      longArray0[6] = long6;
      Long long7 = new Long((-2773L));
      assertEquals((-2773L), (long)long7);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long3));
      assertTrue(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long4));
      
      longArray0[7] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertArrayEquals(new long[] {1772L, (-1L), 524L, 3921L, 3921L, (-2773L), 1772L, (-2773L)}, longArray1);
      
      Byte byte0 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 3921L, (int) (byte)118);
      assertEquals((-1), int0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)34;
      intArray0[1] = (int) (byte)34;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {34, 34}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 34;
      longArray0[1] = (long) 34;
      longArray0[2] = (long) (byte)34;
      ArrayUtils.shift(longArray0, 36, (-2132874915), (-1));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {34L, 34L, 34L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)34, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 26, (short) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-107.0);
      doubleArray0[1] = 643.0274181342;
      doubleArray0[2] = (-292.0);
      doubleArray0[3] = 2246.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-687.1677);
      doubleArray0[6] = (-2809.490481598033);
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-107.0), 643.0274181342, (-292.0), 2246.0, (-1.0), (-687.1677), (-2809.490481598033), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-107.0), 643.0274181342, (-292.0), 2246.0, (-1.0), (-687.1677), (-2809.490481598033), 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)5895;
      shortArray0[1] = (short)3000;
      shortArray0[2] = (short) (-919);
      shortArray0[3] = (short)491;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)3000, (int) (short)3000);
      assertEquals((-1), int0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)5895, (short)3000, (short) (-919), (short)491}, shortArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)119;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)119}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte)119}, byteArray1);
      
      int int1 = ArrayUtils.indexOf(doubleArray1, (double) (-1), (int) (byte) (-37));
      assertEquals(4, int1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(int1 == int0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-107.0), 643.0274181342, (-292.0), 2246.0, (-1.0), (-687.1677), (-2809.490481598033), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {(-107.0), 643.0274181342, (-292.0), 2246.0, (-1.0), (-687.1677), (-2809.490481598033), 0.0}, doubleArray1, 0.01);
      
      int int2 = ArrayUtils.indexOf((boolean[]) null, false, (int) (short)5895);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, (-86), 1084, 1084);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float((double) (byte)32);
      assertEquals(32.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (byte)32);
      assertEquals(32.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float[] floatArray0 = new Float[4];
      floatArray0[0] = float0;
      Float float2 = new Float((double) (-1241.0F));
      assertEquals((-1241.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      floatArray0[2] = float0;
      floatArray0[3] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {32.0F, 32.0F, 32.0F, 32.0F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)59;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {59}, intArray0);
      assertArrayEquals(new int[] {59, 59}, intArray1);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (float) floatArray0[3]);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {32.0F, 32.0F, 32.0F, 32.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(12, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      int int0 = new Character('a');
      assertEquals('a', int0);
      
      ArrayUtils.reverse((float[]) null, (int) (byte)102, 119);
      Byte[] byteArray1 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray1, (int) 0);
      assertNull(byte0);
      assertEquals(0, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)102);
      assertNull(intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty((int[]) null);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2330.255891960261);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-426.073);
      doubleArray0[4] = (-2423.09650181092);
      ArrayUtils.shift(doubleArray0, 990);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2330.255891960261), 1.5, (-426.073), (-2423.09650181092)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 990;
      floatArray0[1] = (float) 990;
      floatArray0[2] = (-1699.1066F);
      floatArray0[3] = 3226.7F;
      floatArray0[4] = (float) 990;
      floatArray0[5] = (float) 990;
      floatArray0[6] = (float) 990;
      floatArray0[7] = 989.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {990.0F, 990.0F, (-1699.1066F), 3226.7F, 990.0F, 990.0F, 990.0F, 989.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {990.0F, 990.0F, (-1699.1066F), 3226.7F, 990.0F, 990.0F, 990.0F, 989.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 990;
      intArray0[1] = 990;
      intArray0[2] = 990;
      intArray0[3] = 990;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 990);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {990, 990, 990, 990}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-96));
      assertEquals((byte) (-96), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      longArray0[6] = (-6292L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-4034), 0, 2144366835);
      assertEquals(0, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotNull(booleanArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object1, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-107);
      ArrayUtils.reverse(byteArray0, 0, 4560);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)4, (byte) (-56), (byte)2, (byte) (-1), (byte)34}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (int) (byte) (-56));
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray2, true);
      assertNotNull(booleanArray3);
      assertEquals(4, booleanArray3.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'C');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertArrayEquals(new char[] {'C', 'C'}, charArray1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, objectArray0.length);
      assertNotSame(object2, object0);
      assertSame(object2, object1);
      assertNotSame(object1, object0);
      assertSame(object1, object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-3274), (-3274));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      Byte byte4 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte byte5 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte4;
      byteArray0[1] = byte5;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 795.0F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray2, (int) (byte) (-58));
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-74);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-74)}, intArray0);
      assertArrayEquals(new int[] {(-74)}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (int) byte0, (-26));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 119, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(18L);
      assertEquals(18L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[2] = long1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 18L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 18L);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 18.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 18.0, 18.0}, doubleArray1, 0.01);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      char[] charArray0 = new char[4];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'e');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'e', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-620);
      shortArray0[1] = (short) (-2241);
      shortArray0[2] = (short) (-2241);
      shortArray0[3] = (short) (-620);
      shortArray0[4] = (short) (-2241);
      shortArray0[5] = (short) (-2241);
      shortArray0[6] = (short) (-2241);
      shortArray0[7] = (short) (-620);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1649);
      assertFalse(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-620), (short) (-2241), (short) (-2241), (short) (-620), (short) (-2241), (short) (-2241), (short) (-2241), (short) (-620)}, shortArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)1649;
      intArray0[1] = (int) (short) (-2241);
      intArray0[2] = (int) (short) (-2241);
      intArray0[3] = (int) (short) (-620);
      intArray0[4] = 15;
      intArray0[5] = (int) (short) (-620);
      ArrayUtils.reverse(intArray0, 990, 110);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1649, (-2241), (-2241), (-620), 15, (-620)}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 15;
      longArray0[1] = (long) 'f';
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(2, longArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {15L, 102L}, longArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'y';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'f', 'y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (byte)65;
      floatArray0[3] = (float) (byte)65;
      floatArray0[4] = (float) (byte)65;
      floatArray0[5] = (float) (byte)65;
      floatArray0[6] = (float) (byte)65;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 65.0F, 65.0F, 65.0F, 65.0F, 65.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = (-6L);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)0;
      ArrayUtils.reverse(byteArray0, 167, (-722));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)33, (byte)0}, byteArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)33;
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[1] = byte0;
      Byte byte1 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[2] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)33, (byte)33, (byte)33}, byteArray2);
      
      Byte byte2 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray3 = ArrayUtils.removeAllOccurrences(byteArray1, byte2);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray3.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-6292L);
      doubleArray0[2] = (double) (-2299.777F);
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-6292.0), (-2299.777099609375), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, (-6292.0), 2.0, (-6292.0), (-2299.777099609375), Double.NaN, (-2299.777099609375), Double.NaN}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      Byte[] byteArray0 = new Byte[0];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)34;
      byteArray2[2] = (byte)12;
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte)34);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte)34, (byte)12}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)12}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 835.44319004, (-1), (double) 0);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 11.0F);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.shift(objectArray0, (-2889), 1138, (-2889));
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 4687, 10);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte)0);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ',');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertArrayEquals(new char[] {',', 'P'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      long long0 = (-292L);
      Long long1 = new Long((-292L));
      assertEquals((-292L), (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      long long2 = 490L;
      Long long3 = new Long(490L);
      assertEquals(490L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      
      long long4 = 18L;
      Long long5 = new Long(6L);
      assertEquals(6L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long2));
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = (double) (-292L);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-292L);
      doubleArray0[4] = (double) 490L;
      doubleArray0[5] = (double) 18L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2809.490481598033), 11.0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {6.0, (-292.0), 0.0, (-292.0), 490.0, 18.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 1010);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1010, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 's');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'2', '5'}, charArray0);
      assertArrayEquals(new char[] {'2', '5'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1631.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3087);
      intArray0[1] = 1;
      intArray0[2] = 1;
      ArrayUtils.reverse(intArray0, 1, (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-3087), 1, 1}, intArray0);
      
      Short[] shortArray0 = new Short[9];
      short short0 = (short)90;
      Short short1 = new Short((short)90);
      assertEquals((short)90, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)7);
      assertEquals((short)7, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)7);
      assertEquals((short)7, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      
      shortArray0[4] = short5;
      Short short6 = new Short(short0);
      assertEquals((short)90, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short3));
      assertTrue(short6.equals((Object)short0));
      
      shortArray0[4] = short6;
      Short short7 = new Short((short)8);
      assertEquals((short)8, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short0));
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short3));
      
      shortArray0[6] = short7;
      Short short8 = new Short((short)9);
      assertEquals((short)9, (short)short8);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short6));
      
      shortArray0[7] = short8;
      Short short9 = new Short((short)1772);
      assertEquals((short)1772, (short)short9);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short6));
      
      shortArray0[8] = short9;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)90);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)1, (short) (-1), (short)7, (short)90, (short)90, (short)8, (short)9, (short)1772}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-375);
      doubleArray0[1] = (double) (-375);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (-666);
      doubleArray0[7] = (double) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 931.7573, (-2051));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-375.0), (-375.0), (-1.0), (-1.0), (-1.0), (-1.0), (-666.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1609L;
      longArray0[1] = (long) (-666);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (-666);
      longArray0[4] = (long) (-2051);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (-55L);
      longArray0[7] = (long) (-375);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-55L));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-55L), 1609L, (-666L), (-1L), (-666L), (-2051L), (-1L), (-55L), (-375L), 0L}, longArray1);
      assertArrayEquals(new long[] {1609L, (-666L), (-1L), (-666L), (-2051L), (-1L), (-55L), (-375L), 0L}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2051L);
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (-3243.6318F);
      floatArray0[3] = (float) (-55L);
      floatArray0[4] = (float) (-2051);
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F, 2384);
      assertEquals((-1), int0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2051.0F), (-1.0F), (-3243.6318F), (-55.0F), (-2051.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte6 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte6;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte4;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte3;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, objectArray0.length);
      
      Byte[] byteArray2 = new Byte[1];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = byte4;
      Byte byte7 = ArrayUtils.get(byteArray2, 3039);
      assertNull(byte7);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BitSet bitSet1 = new BitSet();
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertFalse(bitSet1.equals((Object)bitSet0));
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray1);
      assertFalse(boolean0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)40;
      int int0 = ArrayUtils.indexOf(intArray0, 1573);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 34, 40, 40, 40}, intArray0);
      
      Byte[] byteArray1 = new Byte[2];
      byte byte0 = (byte) (-31);
      Byte byte1 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray1[0] = byte1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1573;
      doubleArray0[1] = (double) 34;
      doubleArray0[2] = (double) 34;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 40;
      doubleArray0[5] = (double) (byte)2;
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[7] = (double) 40;
      doubleArray0[8] = (double) (byte)2;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (double) 1573);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1573.0, 34.0, 34.0, 2.0, 40.0, 2.0, 34.0, 40.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1573.0, 34.0, 34.0, 2.0, 40.0, 2.0, 34.0, 40.0, 2.0, 1573.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-7517L);
      longArray0[1] = (long) (byte)34;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) 40;
      longArray0[4] = (long) 1573;
      longArray0[5] = (long) (byte)34;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertEquals(6, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-7517L), 34L, (-31L), 40L, 1573L, 34L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1354), (-2521));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[20];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1L);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (-14L);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) (-14L);
      floatArray0[6] = (float) byte0;
      floatArray0[7] = (float) byte0;
      floatArray0[8] = (float) 2893;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) byte0, 45);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-14.0F), 1.0F, 1.0F, 1.0F, (-14.0F), 1.0F, 1.0F, 2893.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-14.0F), 1.0F, 1.0F, 1.0F, (-14.0F), 1.0F, 1.0F, 2893.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-45));
      assertEquals((byte) (-45), (byte)byte0);
      assertNotNull(byte0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.subarray(floatArray1, 70, 2893);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1354), 70);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)15);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 92.9002;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)15, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 92.9002, 15.0, (-79.0), 0.0, 69.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 4265L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 82L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 15L, 0L, 0L, 0L, 4265L}, longArray0);
      assertArrayEquals(new long[] {0L, 15L, 0L, 0L, 0L, 4265L}, longArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 1960;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) (byte) (-79);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, (int) (byte) (-79));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1960.0F, 0.0F, (-79.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-581.31351226), (int) (byte)2, 1.0);
      assertEquals((-1), int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0, (-2100799219), Integer.MAX_VALUE);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1802;
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1802, (-1)}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1802;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1802;
      doubleArray0[5] = (double) 1802;
      doubleArray0[6] = (double) 1802;
      ArrayUtils.reverse(doubleArray0, (-1127), (-1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1802.0, (-1.0), 1802.0, 0.0, 1802.0, 1802.0, 1802.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 989, 1802);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1802, (-1)}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1127);
      floatArray0[1] = (float) 1802;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 1802;
      floatArray0[5] = (float) (-1127);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1127.0F), 1802.0F, (-1.0F), (-1.0F), 1802.0F, (-1127.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1127.0F), 1802.0F, (-1.0F), 1802.0F, (-1127.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, (-1));
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1802.0, 0.0, 1802.0, 1802.0, 1802.0, 1802.0}, doubleArray0, 0.01);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1802, (-1)}, intArray0);
      assertArrayEquals(new int[] {1802, (-1)}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-5142);
      intArray0[1] = (-2331);
      intArray0[2] = (-2331);
      intArray0[3] = (-5142);
      intArray0[4] = (-5142);
      intArray0[3] = (-347);
      intArray0[6] = 2246;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)100;
      ArrayUtils.reverse(shortArray0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)100, (short) (-1)}, shortArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      objectArray0[8] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 2, objectArray0[2]);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      
      Object object1 = ArrayUtils.get(objectArray0, 3, objectArray0[2]);
      assertEquals((byte)2, object1);
      assertNotNull(object1);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)25, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)14;
      shortArray0[4] = (short) (-1);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1));
      assertTrue(boolean0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short) (-1), (short) (-1), (short)14, (short) (-1)}, shortArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1;
      floatArray0[1] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)531);
      assertEquals((-1), int0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)14;
      intArray0[1] = (int) (short)1518;
      intArray0[2] = (int) (short)531;
      ArrayUtils.shift(intArray0, (int) (short)14, 1518, 2755);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {14, 1518, 531}, intArray0);
      
      boolean boolean1 = ArrayUtils.contains(floatArray0, 1.0F);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, (-1.0F)}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) (short) (-1);
      objectArray0[2] = (Object) 1518;
      objectArray0[3] = (Object) (short) (-1);
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(3, int1);
      assertEquals(4, objectArray0.length);
      assertFalse(int1 == int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short)14, (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte0;
      objectArray0[8] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (int) 2, objectArray0[2]);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, 3, objectArray0[2]);
      assertEquals((byte)2, object2);
      assertNotNull(object2);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short)25;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      ArrayUtils.reverse(shortArray0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)25, (short)2}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)6;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {}, intArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'y';
      floatArray0[1] = (float) 'y';
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) '.';
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 'y';
      floatArray0[6] = (float) '.';
      floatArray0[7] = (float) 'y';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {121.0F, 121.0F, 6.0F, 46.0F, (-1.0F), 121.0F, 46.0F, 121.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {121.0F, 121.0F, 6.0F, 46.0F, (-1.0F), 121.0F, 46.0F, 121.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      assertEquals((byte) (-7), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-823));
      assertNull(intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '\'');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\''}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)45, (-486));
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)30, (byte)122, (byte) (-18), (byte) (-18)}, byteArray0);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, (int) (byte)45, 2346);
      assertNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1807);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.add((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntryArray0);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-18);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)122, 1496);
      assertEquals((-1), int0);
      assertEquals(20, byteArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2271);
      intArray1[1] = (int) (byte)122;
      intArray1[2] = 2146162553;
      intArray1[3] = 2;
      int[] intArray2 = ArrayUtils.subarray(intArray1, (-1433), (int) (byte)45);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2271), 122, 2146162553, 2}, intArray1);
      assertArrayEquals(new int[] {(-2271), 122, 2146162553, 2}, intArray2);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 2146162553);
      assertFalse(boolean0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 1);
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) (byte)122);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2543L;
      floatArray0[2] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2543.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shift(intArray0, Integer.MAX_VALUE);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      longArray0[1] = (Long) long0;
      long long2 = 18L;
      Long long3 = new Long(18L);
      assertEquals(18L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[2] = long3;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long2;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long2;
      ArrayUtils.reverse((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2122), 910.75404492);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2122, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 41;
      ArrayUtils.reverse(doubleArray0, 41, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 41, (-748));
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41}, intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) 41;
      floatArray0[2] = (-1239.0394F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 400.5016F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {41.0F, 41.0F, (-1239.0394F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 41);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {41.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(41, floatArray1, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 41, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2145110791);
      floatArray0[1] = (float) (-2145110791);
      floatArray0[2] = (float) (-2145110791);
      floatArray0[3] = (float) (-2145110791);
      floatArray0[4] = (float) (-2145110791);
      floatArray0[5] = (float) (-2145110791);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2145110791), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145110791, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\'');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Character character0 = new Character('\'');
      assertEquals('\'', (char)character0);
      assertNotNull(character0);
      
      float[] floatArray0 = ArrayUtils.insert(2, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) 33);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {33.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2056.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-1834.1209166364);
      ArrayUtils.reverse(doubleArray0, 2124878556, (-2120265926));
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-2056.0), (-1.0), 0.0, (-1.0), (-1834.1209166364)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 177, 181);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1)}, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 177);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-1834.1209166364), (-2056.0), (-1.0), 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), floatArray1, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)19;
      shortArray0[1] = (short)19;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)100;
      shortArray0[5] = (short) (-922);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)19;
      doubleArray0[2] = (double) (-2649);
      ArrayUtils.shift(doubleArray0, (-1083), (-1083), (-2649));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 19.0, (-2649.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.reverse(doubleArray0, 2124878556, (int) byte0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 177;
      intArray0[1] = (-2120265926);
      intArray0[2] = (int) (byte) (-33);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-127), (-33));
      assertEquals((-1), int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {177, (-2120265926), (-33)}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2120265926);
      floatArray0[1] = (float) (byte) (-84);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 183.0F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2.12026598E9F), (-84.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.12026598E9F), (-84.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.shift(doubleArray0, 8);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 1084, (-1197), 1084);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-1), (-1)}, intArray0);
      
      ArrayUtils.reverse(doubleArray0, (-1), (-1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1), (-1));
      assertEquals((-1), int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-1), (-1)}, intArray0);
      
      float[] floatArray0 = new float[3];
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-2145969959), 2, (-1));
      assertEquals(0, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 1403, 16, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Integer integer0 = new Integer((-1034));
      assertEquals((-1034), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, 1403, 1027, (-1034));
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-16);
      shortArray0[1] = (short) (byte) (-16);
      ArrayUtils.shift(shortArray0, (-90), (-390), 1187);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)74, (int) (short)74);
      assertEquals((-1), int0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-16), (short) (-16)}, shortArray0);
      
      ArrayUtils.shift(booleanArray0, 1403);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1187;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1187.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 201.13, (int) (byte)2, (double) (byte)2);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      ArrayUtils.shift(shortArray0, 0, 2, (int) (short)2);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)2, (int) (short)2);
      assertEquals(2, int1);
      assertEquals(5, shortArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, 1173, 1173, 1173);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.shift(shortArray0, 0, 0, 0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ArrayUtils.swap(byteArray0, 2124878556, 1403, 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) (byte) (-92);
      doubleArray0[4] = (double) (byte)5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 1776, (double) 2124878556);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 5.0, (-92.0), 5.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-92), (int) (byte)2, (int) (byte)2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2124878556, 97, 2851);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-92);
      shortArray1[1] = (short) (byte)2;
      shortArray1[2] = (short) (byte) (-92);
      shortArray1[3] = (short) (byte) (-92);
      shortArray1[4] = (short) (byte)2;
      shortArray1[5] = (short) (byte)2;
      shortArray1[6] = (short) (byte) (-92);
      shortArray1[7] = (short) (byte)5;
      shortArray1[8] = (short) (byte) (-92);
      int int1 = ArrayUtils.indexOf(shortArray1, (short)673, (int) (short)5);
      assertEquals((-1), int1);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(int1 == int0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-92), (short)2, (short) (-92), (short) (-92), (short)2, (short)2, (short) (-92), (short)5, (short) (-92)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40}, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '?';
      int int0 = ArrayUtils.indexOf(intArray0, 90);
      assertEquals((-1), int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {63, 63}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) ')';
      longArray0[1] = (long) ')';
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 'x';
      longArray0[4] = (long) ')';
      longArray0[5] = (long) 'x';
      longArray0[6] = (long) 'x';
      ArrayUtils.shift(longArray0, Integer.MAX_VALUE, (-58), 0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {41L, 41L, (-1L), 120L, 41L, 120L, 120L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 120L;
      longArray1[1] = (Long) 41L;
      longArray1[2] = (Long) 41L;
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray1[3] = long0;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {382L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Float float0 = new Float((-4865.52806993417));
      assertEquals((-4865.528F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, '\u0012');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-375);
      doubleArray0[1] = (double) (-375);
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (-666);
      doubleArray0[7] = (double) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 931.7573, (-2051));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-375.0), (-375.0), (-1.0), (-1.0), (-1.0), (-1.0), (-666.0), (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1609L;
      longArray0[1] = (long) (-666);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (-666);
      longArray0[4] = (long) (-2051);
      longArray0[5] = (long) (byte) (-1);
      longArray0[6] = (-55L);
      longArray0[7] = (long) (-375);
      longArray0[8] = (long) (-2051);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-55L));
      assertNotNull(longArray1);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-55L), 1609L, (-666L), (-1L), (-666L), (-2051L), (-1L), (-55L), (-375L), (-2051L)}, longArray1);
      assertArrayEquals(new long[] {1609L, (-666L), (-1L), (-666L), (-2051L), (-1L), (-55L), (-375L), (-2051L)}, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)91}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-2481L));
      assertEquals((-2481L), (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      Long long2 = new Long((-2481L));
      assertEquals((-2481L), (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      Long[] longArray0 = new Long[5];
      longArray0[0] = long2;
      longArray0[1] = long0;
      longArray0[2] = long2;
      longArray0[3] = long1;
      longArray0[4] = long1;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {(-2481L), 0L, (-2481L), (-2481L), (-2481L)}, longArray1);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)0, 0, (-285));
      ArrayUtils.swap((byte[]) null, 0, (-2108438490), 921);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      ArrayUtils.swap((byte[]) null, 36, 36, 36);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)3, (-4556));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-7822), 2264);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-7822);
      intArray0[2] = (-1062);
      intArray0[3] = (-576);
      intArray0[4] = 2264;
      intArray0[5] = (-1);
      ArrayUtils.shift(intArray0, 9);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-576), 2264, (-1), (-1), (-7822), (-1062)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2264, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2727), (-2727));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-56);
      doubleArray0[1] = 2181.257030217673;
      doubleArray0[2] = (double) (byte) (-56);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-425));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-56.0), 2181.257030217673, (-56.0)}, doubleArray0, 0.01);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-425), 2);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 'f';
      longArray0[1] = 2031L;
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, 0);
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = ArrayUtils.get((Object[]) null, 0, (Object) null);
      assertNull(object0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, 954.0F, 0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      MockRandom mockRandom0 = new MockRandom(102L);
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1675);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-209);
      shortArray0[4] = (short) (-98);
      shortArray0[5] = (short)2712;
      shortArray0[6] = (short) (-23047);
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1675), (short)1, (short) (-209), (short) (-98), (short)2712, (short) (-23047), (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 4687, 10);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      short[] shortArray0 = new short[9];
      objectArray0[0] = (Object) (byte)28;
      shortArray0[1] = (short)615;
      shortArray0[2] = (short) (byte)28;
      shortArray0[3] = (short) (byte)28;
      shortArray0[4] = (short) (byte)28;
      shortArray0[5] = (short)615;
      shortArray0[6] = (short)13;
      shortArray0[7] = (short)615;
      shortArray0[8] = (short)615;
      ArrayUtils.shuffle(shortArray0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)615, (short)28, (short)28, (short)28, (short)615, (short)13, (short)615, (short)615, (short)0}, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '2', 2129);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      short[] shortArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1), (int) (short) (-1));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byte byte0 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-113);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      shortArray0[1] = (short) (-543);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-619);
      shortArray0[5] = (short) (-3199);
      shortArray0[6] = (short) (-22);
      shortArray0[7] = (short) (-793);
      shortArray0[8] = (short)457;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)457);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-22), (short) (-793), (short)457}, shortArray0);
      assertArrayEquals(new short[] {(short) (-7830), (short) (-543), (short)2, (short)101, (short) (-619), (short) (-3199), (short) (-22), (short) (-793)}, shortArray1);
      
      short[] shortArray2 = new short[4];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)101;
      shortArray2[1] = (short)101;
      shortArray2[2] = (short)615;
      shortArray2[3] = (short)2;
      ArrayUtils.shuffle(shortArray2);
      assertEquals(4, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)101, (short)615, (short)2, (short)101}, shortArray2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)101;
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.valueOf("YP]3s", (int) (short) (-619));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -619 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-22);
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)1759;
      shortArray0[3] = (short)3;
      shortArray0[4] = (short) (-22);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2013));
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-22), (short)101, (short)1759, (short)3, (short) (-22)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-22), (short)101, (short)1759, (short)3, (short) (-22)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1782.2047164102), 54);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.swap(booleanArray0, 1495, 2137);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      doubleArray0[2] = (-2531.745893);
      doubleArray0[3] = 1933.04854241;
      doubleArray0[4] = 1933.04854241;
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte4;
      byteArray0[1] = byte2;
      byteArray0[1] = byte4;
      byteArray0[3] = byte4;
      byteArray0[4] = byte1;
      byteArray0[5] = byte0;
      byteArray0[6] = byte2;
      byteArray0[7] = byte2;
      Byte byte5 = ArrayUtils.get(byteArray0, (-1100));
      assertNull(byte5);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte4);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      
      Byte[] byteArray2 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (-4543), (-4543), (-1157));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (-1762.0), (int) (byte)119);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) true;
      objectArray0[8] = (Object) bitSet0;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertEquals(9, objectArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      assertNotNull(bitSet0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      bitSet0.flip(614);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{614}", bitSet0.toString());
      assertEquals(615, bitSet0.length());
      assertEquals(640, bitSet0.size());
      
      ArrayUtils.shift((Object[]) null, 1785, 2, 1587);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2715.0F);
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 1785);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-2715.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)15);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 92.9002;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)15, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 92.9002, 15.0, (-79.0), 0.0, 69.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 4265L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 82L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 15L, 0L, 0L, 0L, 4265L}, longArray0);
      assertArrayEquals(new long[] {0L, 15L, 0L, 0L, 0L, 4265L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0);
      assertEquals(4, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 92.9002, 15.0, (-79.0), 0.0, 69.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2543L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 2543L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 2543L;
      doubleArray0[5] = (double) 2543L;
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2543.0, 0.0, 2543.0, 0.0, 2543.0, 2543.0}, doubleArray0, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = (-292L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 396L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, (-292L)}, longArray0);
      assertArrayEquals(new long[] {(-292L)}, longArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      doubleArray0[5] = (double) (byte)byte1;
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0);
      assertNull(byte3);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-292L);
      floatArray0[1] = (float) 396L;
      doubleArray0[4] = (double) (-292L);
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      assertEquals(0L, (long)long2);
      assertNotNull(long2);
      assertTrue(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      
      longArray0[1] = long2;
      Long long3 = new Long(0L);
      assertEquals(0L, (long)long3);
      assertNotNull(long3);
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertTrue(long3.equals((Object)long2));
      
      longArray0[2] = long3;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[1] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, true, false}, booleanArray0));
      
      Byte byte0 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.swap((Object[]) longArray0, 2004318071, 1431655765, (-4902));
      assertEquals(3, longArray0.length);
      assertSame(longArray0, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = '4';
      charArray0[2] = 'E';
      charArray0[3] = 'h';
      boolean boolean1 = ArrayUtils.contains(charArray0, ':');
      assertTrue(boolean1);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {':', '4', 'E', 'h'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift(intArray0, (-2267), (int) (byte)58, (-2267));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-666), 31);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      int[] intArray0 = new int[18];
      intArray0[0] = 2246;
      intArray0[1] = 0;
      intArray0[2] = (-52);
      ArrayUtils.shift(intArray0, (-52));
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-793), (Object) byte0);
      assertEquals((byte) (-125), object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 681.438748, 3012, 681.438748);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = ArrayUtils.get((Object[]) null, (int)  (-125), object1);
      assertEquals((byte) (-125), object4);
      assertNotNull(object4);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-125);
      shortArray0[1] = (short) (byte) (-125);
      ArrayUtils.reverse(shortArray0, (-2146429703), (-79));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-125), (short) (-125)}, shortArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1.0), (-1.0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(16, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.hashCode(object0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte byte5 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-28);
      doubleArray0[2] = (double) (byte)14;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 14.0);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-28.0), 14.0}, doubleArray0, 0.01);
      
      ArrayUtils.hashCode((Object) byte0);
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte3));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte5));
      assertFalse(byte0.equals((Object)byte4));
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1802;
      intArray0[1] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1802, (-1)}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) (-1);
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-167));
      assertEquals((-167), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(2146528116);
      assertEquals(2146528116, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 1802;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(4, integerArray1.length);
      assertEquals(4, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)74;
      ArrayUtils.reverse(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)49, (byte)74, (byte) (-43), (byte)89}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = Character.toChars((int) 'f');
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[1] = 2031L;
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'f';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 'f';
      ArrayUtils.reverse(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {102L, 0L, 102L, 102L, 2031L, 102L}, longArray0);
      
      char[] charArray2 = ArrayUtils.clone(charArray1);
      assertNotNull(charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'f'}, charArray1);
      assertArrayEquals(new char[] {'f'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) 'f';
      longArray0[4] = (long) 'f';
      longArray0[6] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 102L, 0L, 102L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 102L, 0L, 102L, 0L, 0L, 0L}, longArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 'f';
      floatArray0[2] = (float) 'f';
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      ArrayUtils.reverse(charArray0, (-5359), (-2776));
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, (-5359), (-587), 4169);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      ArrayUtils.shift(charArray0, (-1));
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2340.443809572505;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (-2809.490481598033);
      doubleArray0[4] = 1110.13;
      doubleArray0[5] = 1374.5;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 2340.443809572505;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2025.56764612), (-1338));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 2340.443809572505, 11.0, (-2809.490481598033), 1110.13, 1374.5, (-1.0), 2340.443809572505}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, 0, (-1338));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) (-1338);
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (-1338);
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (-1338), (-2400));
      assertEquals(1, int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {11.0F, (-1338.0F), 11.0F, 0.0F, (-1.0F), (-1338.0F)}, floatArray0, 0.01F);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'D';
      ArrayUtils.shift(charArray0, 1769, (-2400), (-7618));
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'i', 'D'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurences((Byte[]) null, byte0);
      assertNull(byteArray0);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(572);
      assertEquals(572, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1188));
      assertEquals((-1188), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer((-4902));
      assertEquals((-4902), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-636.76F), (-167));
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)23;
      intArray0[1] = 182;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (-1188);
      intArray0[5] = (-1);
      intArray0[6] = (-4902);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 23);
      assertEquals(0, int1);
      assertEquals(7, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {23, 182, 53, 53, (-1188), (-1), (-4902)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayUtils.shift(doubleArray0, (-86), 1084, 1084);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)15);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 92.9002;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)15, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 92.9002, 15.0, (-79.0), 0.0, 69.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 4265L;
      ArrayUtils.swap((short[]) null, (-3958), (int) (byte)69);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      char[] charArray0 = new char[5];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q');
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = '6';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2341.0F;
      floatArray0[2] = (-2299.777F);
      floatArray0[3] = (-3055.1282F);
      floatArray0[4] = 0.0F;
      ArrayUtils.reverse(floatArray0, 1708, 0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2341.0F, (-2299.777F), (-3055.1282F), 0.0F}, floatArray0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, false, 1708);
      assertEquals((-1), int0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 2341.0F, (-2299.777F), (-3055.1282F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)51;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)51, 2146162553);
      assertEquals((-1), int0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)45, (byte)0, (byte)0, (byte)122, (byte)51, (byte)45, (byte)51}, byteArray0);
      
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 2, 2);
      assertNull(intArray1);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, (int) (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short) (-17), (int) (short) (-17));
      assertNull(intArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) (short) (-17));
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-17.0)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      ArrayUtils.shift(booleanArray0, (-1458), (-1458), (-866));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, (int) (short) (-22), 2);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-105), 468);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.shift(booleanArray0, (-566), 468, (int) (short) (-22));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short) (-22));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1032.8270972);
      assertEquals(1032.8271F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[] floatArray1 = ArrayUtils.toPrimitive((Float[]) null, (-2205.67F));
      assertNull(floatArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[6] = 0;
      intArray0[7] = 2923;
      intArray0[8] = 0;
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 2923;
      longArray0[4] = (long) 0;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 2923L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.shift(booleanArray0, 36);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4740.9);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Double double0 = Double.valueOf(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = double1;
      doubleArray1[4] = (Double) 0.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1, "org.junitpioneer.jupiter.IssueExtension");
      assertNotNull(stringArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)183;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) (short)91;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (short) (-540));
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {183.0F, (-1.0F), 91.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {183.0F, (-1.0F), 91.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)183;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 183, (int) (short)183);
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {183}, intArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)68;
      byteArray0[8] = (byte)35;
      int int2 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
      assertEquals(1, int2);
      assertEquals(9, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-1), (byte) (-38), (byte)40, (byte) (-10), (byte)1, (byte)34, (byte)68, (byte)35}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-113));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-113);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-113), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -113, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 40);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {9}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-92);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-92), 4210);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(2, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-92)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte) (-92);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 1214.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-543), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -543, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, 18L);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte4);
      assertEquals((byte) (-84), object0);
      assertNotNull(object0);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, object0);
      assertNotNull(bitSet0);
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(5, byteArray0.length);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) (-292L);
      floatArray0[2] = (float) (-292L);
      floatArray0[3] = (float) (byte) (-33);
      floatArray0[4] = (float) 396L;
      floatArray0[5] = (float) byte0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-84), (int) byte0);
      assertEquals((-1), int0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-84.0F), (-292.0F), (-292.0F), (-33.0F), 396.0F, (-84.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.shift((char[]) null, (-2859), (-2859), 1874);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-666), 31);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (byte) (-1);
      Byte byte0 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)77);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = ArrayUtils.get((Byte[]) null, 774);
      assertNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte4);
      assertNull(byteArray0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)34;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)2;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 34, 40, 2}, intArray0);
      
      ArrayUtils.shift(longArray0, 3, Integer.MAX_VALUE, 2115903006);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 0L, 1360L, (-292L), 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)34;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray1, 0.01F);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = '2';
      charArray0[2] = 'U';
      charArray0[3] = 'F';
      charArray0[4] = '`';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 's');
      assertEquals((-1), int1);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'p', '2', 'U', 'F', '`'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 0);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'K');
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(floatArray0, 0, 1724, (-1));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-1), 0);
      assertNull(longArray1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) 0.0F;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int[] intArray0 = new int[18];
      intArray0[0] = (-2266);
      intArray0[1] = (-2266);
      ArrayUtils.shift(intArray0, 0, 2363, 43);
      assertEquals(18, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)34;
      intArray0[2] = (int) (byte)40;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)40;
      int int0 = ArrayUtils.indexOf(intArray0, 1573);
      assertEquals((-1), int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2, 34, 40, 40, 40}, intArray0);
      
      Byte[] byteArray1 = new Byte[2];
      Byte byte0 = new Byte((byte) (-31));
      assertEquals((byte) (-31), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-27));
      assertEquals(0, int1);
      assertEquals(3, booleanArray0.length);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 407;
      intArray0[1] = (-2331);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 70;
      intArray0[5] = (-347);
      intArray0[6] = 2246;
      intArray0[7] = 374;
      ArrayUtils.shift(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {407, (-2331), 0, 0, 70, (-347), 2246, 374}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2331);
      doubleArray0[1] = (double) 2246;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-1.0));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2331.0), 2246.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 69);
      assertEquals((-1), int1);
      assertEquals(9, booleanArray0.length);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3122.1F);
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-3122.1F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3122.1F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)34;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)2;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 34, 40, 2}, intArray0);
      
      ArrayUtils.shift(longArray0, 3, Integer.MAX_VALUE, 2115903006);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 0L, 1360L, (-292L), 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)34;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {34.0F, 34.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {34.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {34.0F}, floatArray2, 0.01F);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, 0);
      assertEquals((-1), int1);
      assertEquals(3, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)2}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-1), (short) (byte)34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (int) (short)104, (short)117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 616.750731, (-596.93230036328));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.swap(shortArray0, (-2146992905), 0, 0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = (-292L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 396L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, (-292L)}, longArray0);
      assertArrayEquals(new long[] {(-292L)}, longArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0);
      assertNull(byte3);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(5, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-292L);
      floatArray0[1] = (float) 396L;
      doubleArray0[4] = (double) (-292L);
      objectArray0[1] = (Object) byte0;
      ArrayUtils.swap((short[]) null, (-2278), 579, (-2278));
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)1}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, 1, (-3505)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)76, 1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {76, 76, 1, (-3505)}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Q';
      longArray0[1] = (long) (-3505);
      longArray0[2] = (long) 'Q';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 2944L);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {81L, (-3505L), 81L}, longArray1);
      assertArrayEquals(new long[] {81L, (-3505L), 81L}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'Q';
      floatArray0[1] = (float) 'Q';
      floatArray0[2] = (float) (-3505);
      floatArray0[3] = (float) 'Q';
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (-3505L), (-2603));
      assertNotNull(bitSet1);
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{2}", bitSet1.toString());
      assertEquals(3, bitSet1.length());
      assertEquals(4, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {81.0F, 81.0F, (-3505.0F), 81.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 81.0F;
      objectArray0[1] = (Object) 76;
      objectArray0[2] = (Object) 81.0F;
      objectArray0[3] = (Object) 'Q';
      objectArray0[4] = (Object) 81L;
      objectArray0[5] = (Object) 1;
      Object object0 = ArrayUtils.get(objectArray0, 2348, (Object) null);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[6] = null;
      objectArray0[7] = (Object) 1;
      objectArray0[8] = (Object) (byte)1;
      Object object1 = new Object();
      assertNotNull(object1);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(objectArray0, object1);
      assertNotNull(bitSet2);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(9, objectArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertFalse(bitSet2.equals((Object)bitSet1));
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, (-984));
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)15);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)69);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte)69;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)69;
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 4265L;
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'n';
      boolean boolean1 = ArrayUtils.contains(charArray0, 'S');
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'n', 'n', 'n', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ArrayUtils.reverse((boolean[]) null, (-984), (-1274));
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-22));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 11, 2);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1);
      assertEquals(3, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-105), 468);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray0);
      
      int[] intArray1 = ArrayUtils.clone((int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.shift(booleanArray0, (-566), 468, 11);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short) (-22));
      assertEquals((-1), int0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      ArrayUtils.reverse(booleanArray0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)100}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'u';
      charArray0[2] = 's';
      charArray0[3] = 'u';
      charArray0[4] = '?';
      charArray0[5] = '!';
      charArray0[6] = '?';
      charArray0[7] = 'p';
      charArray0[8] = 'E';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'h', 'u', 's', 'u', '?', '!', '?', 'p', 'E'}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) (short)100;
      longArray0[4] = (long) 'E';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'E';
      doubleArray0[1] = (double) 69L;
      doubleArray0[2] = (double) 's';
      doubleArray0[3] = (double) (short)100;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 100L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 115.0, (int) (short)0, 100.0);
      assertEquals(0, int0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {69.0, 69.0, 115.0, 100.0, 0.0, 100.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.reverse(booleanArray0, 2904, 2684);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 2);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-3674.6), 0, 0.0);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-15), 0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)92, 0);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-3772.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)101;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)101;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 101.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-3772.5), 0.0, 101.0, 0.0, 101.0, 1.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = ',';
      charArray0[4] = ',';
      ArrayUtils.reverse(charArray0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {',', ',', '\\', '\\', '\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, 1);
      assertEquals(0, objectArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'o');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'o'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 'o';
      longArray0[4] = (long) 1;
      longArray0[5] = 0L;
      ArrayUtils.shift(longArray0, 2, 1, 10);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1L, 1L, 1L, 111L, 1L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(13, byteArray1.length);
      assertEquals(13, byteArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3617.36F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3617.36F);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte4;
      byteArray0[2] = byte4;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte2;
      Byte byte5 = ArrayUtils.get(byteArray0, (int)  (-74));
      assertNull(byte5);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[0];
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (int) (byte) (-92), 554);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray1);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 923;
      intArray0[1] = 1200;
      intArray0[2] = 1171;
      intArray0[3] = 1542;
      ArrayUtils.reverse(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1542, 1171, 1200, 923}, intArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-465.0F);
      floatArray0[1] = (float) 1200;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2143.9207F), 1171);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-465.0F), 1200.0F}, floatArray0, 0.01F);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)13;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)2);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-101), (byte) (-121), (byte)61, (byte)13}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)2, (byte) (-101), (byte) (-121), (byte)61, (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[1] = 645.0F;
      floatArray0[2] = 645.0F;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      ArrayUtils.shuffle(byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)42, (byte)42, (byte)42}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean1);
      assertEquals(1, booleanArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 645.0F;
      floatArray0[2] = 3056.4138F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-2502.0F);
      floatArray0[5] = 1844.0F;
      floatArray0[6] = 2191.2783F;
      floatArray0[7] = 3240.406F;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, Integer.MAX_VALUE, 645.0F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      short[] shortArray0 = new short[10];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-1058));
      assertNotNull(shortArray2);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      assertEquals(10, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 92);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2346;
      shortArray0[1] = (short)6393;
      shortArray0[2] = (short)4507;
      shortArray0[3] = (short)1162;
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      Short short0 = new Short((short)1162);
      assertEquals((short)1162, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)26);
      assertEquals((short)26, (short)short1);
      assertNotNull(short1);
      assertFalse(short1.equals((Object)short0));
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1577));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)16);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 1631.0);
      assertEquals(1, int0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (float) 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-3087);
      intArray0[1] = 1;
      intArray0[2] = 1;
      ArrayUtils.reverse(intArray0, 1, (int) (short) (-1));
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-3087), 1, 1}, intArray0);
      
      Short[] shortArray0 = new Short[9];
      short short0 = (short)90;
      Short short1 = new Short((short)90);
      assertEquals((short)90, (short)short1);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)1);
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      
      shortArray0[1] = short2;
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertNotNull(short3);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)7);
      assertEquals((short)7, (short)short4);
      assertNotNull(short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      
      shortArray0[3] = short4;
      Short short5 = new Short((short)7);
      assertEquals((short)7, (short)short5);
      assertNotNull(short5);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertTrue(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short2));
      
      shortArray0[4] = short5;
      Short short6 = new Short(short0);
      assertEquals((short)90, (short)short6);
      assertNotNull(short6);
      assertFalse(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      
      shortArray0[5] = short6;
      Short short7 = new Short((short)8);
      assertEquals((short)8, (short)short7);
      assertNotNull(short7);
      assertFalse(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short5));
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short2));
      assertFalse(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short0));
      
      shortArray0[6] = short7;
      Short short8 = new Short((short)9);
      assertEquals((short)9, (short)short8);
      assertNotNull(short8);
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short7));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short6));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short5));
      
      shortArray0[7] = short8;
      Short short9 = new Short((short)1772);
      assertEquals((short)1772, (short)short9);
      assertNotNull(short9);
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short7));
      assertFalse(short9.equals((Object)short8));
      
      shortArray0[8] = short9;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)90);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)90, (short)1, (short) (-1), (short)7, (short)7, (short)90, (short)8, (short)9, (short)1772}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Long[] longArray2 = ArrayUtils.toObject(longArray1);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.reverse(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray2);
      assertFalse(longArray0.equals((Object)longArray2));
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-122);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)79, (byte) (-80), (byte) (-122)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)79, (byte) (-80), (byte) (-122)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (-4543));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4543);
      doubleArray0[0] = (double) (-4543);
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-4543));
      assertEquals((-1), int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-4543.0), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2775.0, 79);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, Double.NaN);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2146990532), (byte) (-14));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146990532, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      char[] charArray0 = new char[0];
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P]l~&rd");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[5];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int) (byte)8, (byte)8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      Character character0 = new Character('6');
      assertEquals('6', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '\u0000', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences((char[]) null, 'K');
      assertNull(charArray1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 4686;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, 1811L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 4686L, 77L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, 4686L, 77L, (-1L), 1811L}, longArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 77L;
      objectArray0[1] = (Object) 'M';
      objectArray0[2] = (Object) 77L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "zD]i)t8@EiVQ`Kt.U5");
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3099;
      shortArray0[1] = (short)5947;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short) (-2810);
      shortArray0[4] = (short)17790;
      shortArray0[5] = (short)22797;
      shortArray0[6] = (short)52;
      ArrayUtils.swap(shortArray0, 16, (int) (short)17790, (-1));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3099, (short)5947, (short)76, (short) (-2810), (short)17790, (short)22797, (short)52}, shortArray0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'M');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = (Character) 'M';
      characterArray0[1] = (Character) 'M';
      characterArray0[2] = (Character) 'M';
      characterArray0[3] = (Character) 'M';
      characterArray0[4] = (Character) 'M';
      characterArray0[5] = (Character) 'M';
      characterArray0[6] = (Character) 'M';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray2);
      assertEquals(7, charArray2.length);
      assertEquals(7, characterArray0.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M', 'M', 'M'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-511.5232497286532));
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-8179);
      ArrayUtils.swap(shortArray0, (int) (short) (-8179), 538, 538);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-8179)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      short[] shortArray0 = new short[10];
      ArrayUtils.shift(shortArray0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-939);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-939), (-629));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-939)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, 2007.432407025822);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)107;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = '\u0000';
      charArray0[5] = '~';
      charArray0[7] = '5';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray1, 3617.6494059);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '&';
      intArray0[1] = (int) (byte)107;
      intArray0[2] = (int) 'l';
      intArray0[3] = (int) (byte)0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {38, 107, 108, 0, Integer.MAX_VALUE, 126, 53}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[2] = '6';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertArrayEquals(new char[] {'6', '\u0000', '6', '\u0000'}, charArray0);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)107;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = '\u0000';
      charArray0[5] = '~';
      charArray0[7] = '5';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', 'Z', 'l', '&', '\u0000', '~', '\u0000', '5', 'A'}, charArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-67), (byte)107}, byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 101.0F;
      floatArray0[1] = (float) 33;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {101.0F, 33.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)35;
      Byte byte7 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      
      byteArray0[4] = byte7;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte6;
      shortArray0[6] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(14, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-33), (short) (-84), (short)0, (short) (-84), (short)35, (short)0, (short) (-84)}, shortArray0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = Double.valueOf((double) byte2);
      assertEquals((-33.0), (double)double0, 0.01);
      assertNotNull(double0);
      assertFalse(byte2 == byte6);
      assertFalse(byte2 == byte0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(92.9002);
      assertEquals(92.9002, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-33.0), 92.9002}, doubleArray1, 0.01);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "org.junitpioneer.jupiter.IssueExtension");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) byte6;
      floatArray0[2] = (float) (byte) (-84);
      floatArray0[3] = (float) byte0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-84.0F), 35.0F, (-84.0F), (-84.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 273.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1438.051F;
      floatArray0[1] = (-5472.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1825.0F;
      floatArray0[4] = (-4569.083F);
      floatArray0[5] = (-1192.2031F);
      floatArray0[6] = 1021.0F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1192.2031F), (-3705));
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {1438.051F, (-5472.0F), (-1.0F), 1825.0F, (-4569.083F), (-1192.2031F), 1021.0F}, floatArray0, 0.01F);
      
      ArrayUtils.shift((long[]) null, (-1));
      int[] intArray0 = new int[2];
      intArray0[0] = (-3705);
      intArray0[1] = (-1);
      ArrayUtils.swap(intArray0, (-1533), 0, (-1));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3705), (-1)}, intArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)455;
      shortArray0[1] = (short)2814;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)455, (short)2814, (short)455, (short)2814}, shortArray1);
      assertArrayEquals(new short[] {(short)455, (short)2814}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-519.0624F));
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-519.0624F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte) (-84), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      
      byteArray0[3] = byte5;
      byte byte6 = (byte)35;
      Byte byte7 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte7);
      assertNotNull(byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      
      byteArray0[4] = byte7;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Byte byte8 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte8);
      assertNotNull(byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byte8;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte5;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte4;
      objectArray0[5] = (Object) byte1;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals("{1, 2, 3, 4, 5}", bitSet0.toString());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, objectArray0.length);
      assertFalse(byte0 == byte6);
      assertFalse(byte0 == byte2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-84);
      floatArray0[1] = (float) byte2;
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) byte6;
      floatArray0[5] = (float) (byte)27;
      floatArray0[6] = (float) (byte) (-84);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-84.0F), (-33.0F), 27.0F, (-1.0F), 35.0F, 27.0F, (-84.0F), (-1.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-84.0F), (-33.0F), 27.0F, (-1.0F), 35.0F, 27.0F, (-84.0F)}, floatArray0, 0.01F);
      
      ArrayUtils.shift(longArray1, (-807));
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      long[] longArray0 = new long[1];
      ArrayUtils.shuffle(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      intArray0[1] = 2508;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2508);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-786), 2508}, intArray0);
      assertArrayEquals(new int[] {2508, (-786), 2508}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-786);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte byte0 = (byte)45;
      byte byte1 = (byte) (-18);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-18);
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)122;
      byteArray1[1] = (Byte) (byte)45;
      byteArray1[2] = (Byte) (byte) (-18);
      byteArray1[3] = (Byte) (byte)122;
      byteArray1[4] = (Byte) (byte)122;
      byteArray1[5] = (Byte) (byte)45;
      byteArray1[6] = (Byte) (byte)122;
      Byte byte2 = new Byte((byte) (-18));
      assertEquals((byte) (-18), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = ArrayUtils.get(byteArray1, (int)  (-18), byte2);
      assertEquals((byte) (-18), (byte)byte3);
      assertNotNull(byte3);
      assertEquals(7, byteArray1.length);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte) (-18), object0);
      assertNotNull(object0);
      assertTrue(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte2));
      assertFalse(byte1 == byte0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((byte) (-18), object1);
      assertNotNull(object1);
      assertTrue(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte3));
      assertFalse(object1.equals((Object)byte0));
      assertTrue(object1.equals((Object)byte2));
      assertFalse(byte1 == byte0);
      
      Byte byte4 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)object1));
      
      Byte byte5 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)object0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)object1));
      assertFalse(byte5.equals((Object)byte4));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) byte5, (-786));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(7, byteArray1.length);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)object0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)object1));
      assertFalse(byte5.equals((Object)byte4));
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 'f';
      longArray1[1] = (long) 2508;
      longArray1[2] = (long) byte0;
      longArray1[3] = (long) (byte)33;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray1, (java.util.Random) mockRandom0);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2508L, 45L, 33L, 102L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-113);
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte) (-28);
      byteArray1[1] = (Byte) (byte)35;
      byteArray1[2] = (Byte) (byte) (-28);
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[4] = byte0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-28), (int) (byte) (-1));
      assertEquals(1, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte) (-28), (byte) (-1), (byte) (-113)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2340.443809572505;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (-2809.490481598033);
      doubleArray0[4] = 1110.13;
      doubleArray0[5] = 1374.5;
      ArrayUtils.reverse((long[]) null, (-1343), (-60));
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 11);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      ArrayUtils.swap(byteArray0, 1403, (-84), 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3921L, (-3173), (double) 3921L);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap(byteArray0, 1403, (-84), 1776);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-16)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)101);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)101;
      longArray0[2] = (long) (byte) (-111);
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[4] = (long) (byte) (-111);
      longArray0[6] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, 1, (int) (byte)101);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-111L), 0L, (-111L), 101L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-111);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      BitSet bitSet0 = new BitSet((byte)0);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-111);
      objectArray0[1] = (Object) (-111L);
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) (byte) (-111);
      objectArray0[5] = (Object) 1.0F;
      objectArray0[6] = (Object) 101L;
      objectArray0[7] = (Object) 101L;
      ArrayUtils.shift(objectArray0, (int) (byte)101);
      assertEquals(8, objectArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-111.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      
      Boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)1;
      byteArray2[1] = (Byte) (byte)1;
      byteArray2[2] = byte0;
      byteArray2[3] = (Byte) (byte)1;
      byteArray2[4] = byte1;
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (-311), 1537);
      assertNotNull(byteArray3);
      assertEquals(5, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 2, 2);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ArrayUtils.shift((Object[]) byteArray0, 2, (-3749), (-3749));
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      BitSet bitSet0 = new BitSet(0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      long[] longArray0 = new long[6];
      doubleArray0[2] = (double) 'f';
      longArray0[1] = 2067L;
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      ArrayUtils.shift(floatArray0, 2013265920);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = ArrayUtils.insert(0, doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 102.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 19, 2013265920);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-92);
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte1);
      assertTrue(boolean0);
      assertTrue(byte1.equals((Object)byte0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-125);
      shortArray0[1] = (short) (byte) (-92);
      shortArray0[2] = (short) (-3045);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)2707;
      shortArray0[5] = (short) (byte) (-92);
      shortArray0[6] = (short) (byte)55;
      shortArray0[7] = (short) (byte)55;
      shortArray0[8] = (short) (byte) (-125);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2652), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2652, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Byte byte0 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      ArrayUtils.swap(byteArray0, (int) (byte)5, (int) (byte) (-107), (int) (byte) (-81));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-2146129586);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) (byte) (-107);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 332, (-1038.7573));
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2.146129586E9), 1.5, (-107.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) 1.5;
      objectArray0[4] = (Object) byte1;
      Byte byte2 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Object object0 = ArrayUtils.get(objectArray0, (-2146129586), (Object) byte2);
      assertEquals((byte)11, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) byte0;
      ArrayUtils.swap(objectArray0, 332, 332, (-86));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) (float)floatArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) floatArray0[0]);
      assertEquals(2, int0);
      assertEquals(1, floatArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 77.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1700.05673460716, (int) (short)0, 1622.44915913266);
      assertEquals((-1), int1);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 77.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2);
      assertNotNull(bitSet0);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)0}, shortArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 835.44319004, (-1), (double) 0);
      assertEquals((-1), int1);
      assertEquals(5, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      Float float0 = new Float(1.5);
      assertEquals(1.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 119;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 99;
      intArray0[3] = 2822;
      intArray0[4] = 99;
      intArray0[5] = (-2476);
      intArray0[6] = (-2146890213);
      intArray0[7] = (-712);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {119, Integer.MAX_VALUE, 99, 2822, 99, (-2476), (-2146890213), (-712)}, intArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ArrayUtils.shift(booleanArray0, (-712), 99, 47);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)121;
      shortArray0[1] = (short) (-1828);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) (-1467);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-31));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)121, (short) (-1828), (short)2, (short) (-1467)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 9L;
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 653.87, 414);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-27), 414);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      longArray0[6] = (-6292L);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-4034), 0, 2144366835);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = Double.NaN;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 194.93, 199);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      ArrayUtils.swap((boolean[]) null, (-1338), 6);
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      byteArray0[2] = byte2;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-18), 19);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {(-823)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'Z');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'P');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'P', 'Z'}, charArray1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)122, 19);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-59));
      assertEquals((byte) (-59), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = new byte[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-59);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -59, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (short) (-7830), (int) (short) (-7830));
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.insert(321, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      ArrayUtils.swap(intArray0, 65, 1234, 65);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-3754), booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)2;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)2;
      longArray0[5] = 954L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 2L, 0L, 0L, 2L, 954L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 2L, 0L, 0L, 2L, 954L}, longArray2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2286.0F), (-3083), (double) (-2286.0F));
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.reverse(booleanArray0, (-1), (-1));
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      boolean[] booleanArray0 = null;
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1933.04854241;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 613.6F;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {613.6F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1933.04854241, (-2485), 662.38);
      assertEquals(0, int0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0, 0, (-371));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2425), (float) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2425, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1560;
      floatArray0[1] = (float) 1560;
      floatArray0[2] = (float) 1560;
      floatArray0[3] = (float) 1560;
      floatArray0[4] = (float) 1560;
      floatArray0[5] = (-2286.0F);
      floatArray0[6] = (float) 1560;
      floatArray0[7] = (float) 1560;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1560.0F, 1560.0F, 1560.0F, 1560.0F, 1560.0F, (-2286.0F), 1560.0F, 1560.0F}, floatArray0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1560;
      longArray0[1] = (long) 1560;
      longArray0[2] = (long) 1560;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1560L, 1560L, 1560L}, longArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)39;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)62;
      intArray0[1] = (int) (byte) (-60);
      intArray0[2] = (int) (byte)39;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'i');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'i'}, charArray1);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 2026);
      assertNull(intArray0);
      
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2178.03), (-4573), (double) (-4573));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = 's';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ':');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'@', 's'}, charArray0);
      assertArrayEquals(new char[] {':', '@', 's'}, charArray1);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)55, (-914));
      assertEquals((-1), int0);
      
      Byte[] byteArray1 = new Byte[0];
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 576, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-79)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 's';
      longArray0[1] = (long) 's';
      longArray0[2] = (long) 's';
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 115L);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {115L, 115L, 115L}, longArray0);
      assertArrayEquals(new long[] {115L, 115L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-54);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 69, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(18L);
      assertEquals(18L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      longArray0[2] = long1;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 18L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 18.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 18.0, 1.0}, doubleArray1, 0.01);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      char[] charArray0 = new char[6];
      ArrayUtils.reverse(charArray0, 1, 928);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2063.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2063.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2299.777F);
      floatArray0[2] = 1467.2874F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2341.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      Integer integer0 = new Integer(585);
      assertEquals(585, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(572);
      assertEquals(572, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(585);
      assertEquals(585, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(572);
      assertEquals(572, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 585;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 2341.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1467.2874F;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1374.5);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {585.0, 0.0, 2341.0, 0.0, 0.0, 1467.287353515625, 1374.5}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {585.0, 0.0, 2341.0, 0.0, 0.0, 1467.287353515625}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = '\\';
      charArray0[2] = 'D';
      charArray0[3] = ',';
      charArray0[4] = ']';
      charArray0[5] = 't';
      ArrayUtils.reverse(charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'t', ']', ',', 'D', '\\', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'v';
      charArray0[1] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', '.'}, charArray0);
      
      ArrayUtils.reverse(charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'.', 'v'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      char[] charArray0 = new char[21];
      ArrayUtils.reverse(charArray0, 43, 24);
      assertEquals(21, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      Integer integer0 = new Integer((-167));
      assertEquals((-167), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-167));
      assertEquals((-167), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1188));
      assertEquals((-1188), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = new Integer(572);
      assertEquals(572, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)0;
      ArrayUtils.reverse(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)90, (byte)49, (byte)89, (byte) (-43), (byte)74, (byte) (-13), (byte)60}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(641);
      assertEquals(641, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(4686);
      assertEquals(4686, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer((-1188));
      assertEquals((-1188), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-13);
      ArrayUtils.reverse(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-13)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ' ';
      charArray0[2] = '!';
      charArray0[3] = 'y';
      charArray0[4] = '.';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '`';
      charArray1[1] = '.';
      charArray1[2] = 'y';
      charArray1[3] = 'y';
      charArray1[4] = '.';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      assertArrayEquals(new char[] {'`', '.', 'y', 'y', '.'}, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[1] = byte1;
      int[] intArray0 = new int[0];
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 69, (int) (byte)6);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'Z');
      assertEquals((-1), int0);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'`', ' ', '!', 'y', '.'}, charArray0);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-110));
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-3772.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)101;
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, (int) (byte)127);
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-407), (short) (-4080));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -407, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1624.534F);
      floatArray0[1] = (-1624.534F);
      byte[] byteArray0 = new byte[4];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)127, 1);
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-1624.534F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      Float[] floatArray3 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray3);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray3.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1624.534F));
      assertEquals((-1624.5340576171875), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((short)269);
      assertEquals(269.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-15643.0));
      assertEquals((-15643.0), (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(1);
      assertEquals(1.0, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      doubleArray0[4] = double4;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      ArrayUtils.reverse(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertArrayEquals(new float[] {(-1624.534F), (-1624.534F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1624.534F), (-1624.534F)}, floatArray1, 0.01F);
      
      ArrayUtils.swap((Object[]) doubleArray0, (-1), 1);
      assertEquals(5, doubleArray0.length);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-939);
      longArray0[1] = (-820L);
      longArray0[2] = (-820L);
      ArrayUtils.shift(longArray0, 470, (-686), (-939));
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-939L), (-820L), (-820L)}, longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-820L);
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-820L);
      floatArray0[3] = (float) (-820L);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-820.0F), 1.0F, (-820.0F), (-820.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-820.0F), 1.0F, (-820.0F), (-820.0F), (-820.0F), 1.0F, (-820.0F), (-820.0F)}, floatArray1, 0.01F);
      
      ArrayUtils.reverse(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-820.0F), (-820.0F), 1.0F, (-820.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      char[] charArray0 = new char[13];
      ArrayUtils.reverse(charArray0, 43, 24);
      assertEquals(13, charArray0.length);
      
      ArrayUtils.shift(charArray0, 43);
      assertEquals(13, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte) (-119);
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-65), (byte)103, (byte) (-1), (byte)100, (byte)86, (byte) (-1), (byte)29, (byte) (-119)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-65), (byte)103, (byte) (-1), (byte)100, (byte)86, (byte) (-1), (byte)29, (byte) (-119)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1110.13;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-611.001989), (-375));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1110.13}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, (-3057), (-375));
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      
      ArrayUtils.swap(booleanArray0, (-773), (-773), 1084);
      assertEquals(1, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1077.11083777), (-27));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)70, (int) (short)1);
      assertEquals(0, int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)1, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)7;
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-72), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)7, (byte)7, (byte) (-72), (byte) (-72), (byte)7, (byte)3, (byte)7}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      byteArray0[7] = (byte) (-72);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2400.3851289153777;
      ArrayUtils.shift(byteArray0, (int) (byte)3, (int) (byte)7, (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)7, (byte)7, (byte) (-72), (byte)7, (byte)3, (byte) (-72), (byte) (-72)}, byteArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-72);
      longArray0[1] = (long) (byte) (-72);
      longArray0[2] = (long) (byte) (-72);
      longArray0[3] = (long) (byte) (-72);
      longArray0[4] = (long) (byte) (-72);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-72L), (-72L), (-72L), (-72L), (-72L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-72L), (-72L), (-72L), (-72L), (-72L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)70, (int) (short)1);
      assertEquals(0, int0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)70, (short)1, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-89);
      ArrayUtils.shift(byteArray0, (int) (byte) (-89), 2, 108);
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1033, (int) (short)1033);
      assertEquals((-1), int1);
      assertEquals(0, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '%';
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1033;
      shortArray0[2] = (short)1033;
      shortArray0[4] = (short)1033;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (-1));
      assertEquals((-1), int1);
      assertEquals(5, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)1033, (short)0, (short)1033, (short)0, (short)1033}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      byte byte0 = (byte)119;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte byte5 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      
      byte byte6 = (byte) (-74);
      Byte byte7 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte7);
      assertNotNull(byte7);
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte5;
      byteArray0[1] = byte7;
      byteArray0[2] = byte7;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte3;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)119;
      byteArray1[6] = byte2;
      byteArray1[7] = (byte) (-74);
      ArrayUtils.shift(byteArray1, (int) byte6, 1, (int) (byte) (-74));
      assertEquals(8, byteArray1.length);
      assertFalse(byte6 == byte2);
      assertFalse(byte6 == byte0);
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119, (byte)119, (byte) (-74), (byte)119, (byte) (-1), (byte) (-74)}, byteArray1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-58);
      shortArray0[1] = (short)958;
      shortArray0[2] = (short) (byte)119;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte2;
      shortArray0[5] = (short) (byte)119;
      shortArray0[6] = (short) byte2;
      shortArray0[7] = (short) byte2;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)54);
      assertEquals((-1), int0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-58), (short)958, (short)119, (short)119, (short) (-1), (short)119, (short) (-1), (short) (-1)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0, "");
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)29;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)29}, byteArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4239);
      shortArray0[2] = (short)54;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short)573;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)0);
      assertEquals(1, int0);
      assertEquals(5, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-4239), (short)0, (short)54, (short)54, (short)573}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[11];
      Long long0 = new Long(1535L);
      assertEquals(1535L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(1535L, (long)long1);
      assertNotNull(long1);
      assertEquals(11, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      
      longArray0[2] = long2;
      Long long3 = new Long(1L);
      assertEquals(1L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      long long4 = 0L;
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long4));
      
      longArray0[4] = long5;
      Long long6 = new Long(long4);
      assertEquals(0L, (long)long6);
      assertNotNull(long6);
      assertFalse(long6.equals((Object)long2));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long5));
      
      longArray0[5] = long6;
      Long long7 = new Long(1L);
      assertEquals(1L, (long)long7);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long0));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long4));
      
      longArray0[6] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(11, longArray1.length);
      assertEquals(11, longArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)109;
      ArrayUtils.shift(byteArray0, (int) (byte)46, (-1), (int) (byte)111);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-39), (byte)52, (byte)111, (byte)46, (byte)109}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2299.777F);
      floatArray0[2] = 1467.2874F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2341.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, 69);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1535L);
      assertEquals(1535L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(1535L, (long)long1);
      assertNotNull(long1);
      assertEquals(7, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long(1L);
      assertEquals(1L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      
      longArray0[3] = long3;
      Float float0 = new Float((-660.31358890446));
      assertEquals((-660.3136F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-660.3136F), (-660.3136F), (-660.3136F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-660.3136F), (-660.3136F), (-660.3136F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-660.3136F), (-660.3136F), (-660.3136F)}, floatArray2, 0.01F);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-262.0), 1.0);
      assertEquals((-1), int1);
      assertEquals(0, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-180));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 182.9394663170752, (int) (byte) (-15), (double) (byte) (-15));
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, 14, 2000, 14);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1679.3939F, (-1999));
      assertEquals((-1), int0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 0L);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 681.438748, 11);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1867.99191604826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 110, 2145640314);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, 6, 6, (-2116));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'n');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'n'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      intArray0[1] = 2508;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2508);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-786), 2508}, intArray0);
      assertArrayEquals(new int[] {2508, (-786), 2508}, intArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-786);
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)33;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, 840);
      assertEquals((-1), int0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte)45, (byte) (-18), (byte) (-18), (byte)33, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 22);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {22}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 1138, 1138, 1138);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, 47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 51.0F;
      ArrayUtils.shift(floatArray0, (-15));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {51.0F}, floatArray0, 0.01F);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-710.8532);
      doubleArray0[1] = (double) (-15);
      doubleArray0[2] = (double) (-6292L);
      doubleArray0[3] = (double) 51.0F;
      doubleArray0[4] = (double) 2543L;
      doubleArray0[5] = (double) (-15);
      doubleArray0[6] = 1933.04854241;
      doubleArray0[7] = (double) (byte)0;
      doubleArray0[8] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (int) (byte)0, 2015.0);
      assertNotNull(doubleArray1);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2015.0, (-710.8532), (-15.0), (-6292.0), 51.0, 2543.0, (-15.0), 1933.04854241, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-710.8532), (-15.0), (-6292.0), 51.0, 2543.0, (-15.0), 1933.04854241, 0.0, (-1.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-2714));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2714, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, false, (-2142700843));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.shift(objectArray0, (-15));
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      int int0 = 39;
      ArrayUtils.reverse((byte[]) null, 39, 967);
      Integer integer0 = new Integer(39);
      assertEquals(39, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((byte)105);
      assertEquals(105, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-3087));
      assertNotNull(intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {39, 39, 39}, intArray0);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 1, int0);
      assertNotNull(intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {39, 39, 39}, intArray0);
      assertArrayEquals(new int[] {39, 39, 39, 39}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-666), 31);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-1));
      assertEquals(7, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'V';
      charArray0[1] = '\\';
      charArray0[2] = 'P';
      charArray0[3] = ',';
      charArray0[4] = 'l';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, ',');
      assertNotNull(charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {',', 'V', '\\', 'P', ',', 'l'}, charArray1);
      assertArrayEquals(new char[] {'V', '\\', 'P', ',', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-4543));
      assertEquals((-4543), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-4543)}, intArray0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.toPrimitive(object1);
      assertNotNull(object2);
      assertSame(object1, object2);
      assertSame(object2, object1);
      
      Byte byte1 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) 0.0;
      objectArray0[3] = null;
      objectArray0[4] = null;
      objectArray0[5] = object1;
      objectArray0[6] = null;
      Object object3 = ArrayUtils.get(objectArray0, 0);
      assertNotNull(object3);
      assertEquals(8, objectArray0.length);
      assertSame(object3, object1);
      assertSame(object3, object2);
      
      objectArray0[7] = object3;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) null);
      assertNotNull(bitSet0);
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{3, 4, 6}", bitSet0.toString());
      assertEquals(8, objectArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (byte)11;
      ArrayUtils.swap(shortArray0, 108, (-636));
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)11, (short)11}, shortArray0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(242);
      assertEquals(242, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(242);
      assertEquals(242, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(46);
      assertEquals(46, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray1.length);
      assertEquals(3, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 424.3252676838;
      doubleArray0[6] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 424.3252676838, (-1.0)}, doubleArray0, 0.01);
      
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Object[] objectArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2157.624725831454), 1136);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1.0, 0.0, 424.3252676838, (-1.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte6);
      assertNotNull(byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byte5;
      ArrayUtils.shift(objectArray0, 2139318310, 0, (-111));
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (-111);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) (-111);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-111.0F), 0.0F, 0.0F, (-111.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 40);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {9}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-92);
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte) (-92), 4210);
      assertNotNull(bitSet1);
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(2, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte)48, (byte) (-92)}, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (byte) (-92);
      floatArray0[2] = (float) 40;
      floatArray0[3] = (-108.5041F);
      floatArray0[4] = (float) (byte)48;
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (-1624.534F), (-292));
      assertNotNull(bitSet2);
      assertEquals(64, bitSet2.size());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertEquals(5, floatArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertArrayEquals(new float[] {0.0F, (-92.0F), 40.0F, (-108.5041F), 48.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(999.0);
      assertEquals(999.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {999.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-92);
      ArrayUtils.swap(byteArray0, 2124878556, 1403, 2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) (byte)5;
      doubleArray0[3] = (double) (byte) (-92);
      doubleArray0[4] = (double) (byte)5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, 1776, 1.0);
      assertEquals(1, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 5.0, (-92.0), 5.0}, doubleArray0, 0.01);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-92), (int) (byte)2, (int) (byte)2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-92)}, byteArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      Double[] doubleArray0 = new Double[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "DGBPo5ZcJ&");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2543L;
      floatArray0[2] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2543.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[8];
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('W');
      assertEquals('W', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) characterArray0);
      assertFalse(boolean0);
      assertEquals(1, characterArray0.length);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 438;
      intArray0[1] = (-2324);
      intArray0[2] = 438;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-928), (-2324));
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      long[] longArray0 = new long[7];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short)1649;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      shortArray0[7] = (short) (byte)2;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1649);
      assertTrue(boolean0);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)1649, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      intArray0[2] = (-1725);
      ArrayUtils.reverse(intArray0, (int) (short)2, 990);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2, 2, (-1725)}, intArray0);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) (short)2;
      longArray1[1] = (long) (byte)34;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean1);
      assertEquals(2, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {2L, 34L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      Character character0 = new Character('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)79, (-430));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 92);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2346;
      shortArray0[1] = (short)6393;
      shortArray0[2] = (short)4507;
      shortArray0[3] = (short)1162;
      shortArray0[4] = (short) (-2241);
      shortArray0[5] = (short) (-620);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1162);
      assertTrue(boolean0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2346, (short)6393, (short)4507, (short)1162, (short) (-2241), (short) (-620)}, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)2346;
      intArray0[1] = (int) (short)6393;
      intArray0[2] = (int) (short)1162;
      intArray0[3] = (int) (short)4507;
      intArray0[4] = (int) (short)4507;
      ArrayUtils.reverse(intArray0, 47, 15);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2346, 6393, 1162, 4507, 4507}, intArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)6393;
      longArray0[1] = (long) (short)2346;
      longArray0[2] = (long) 1162;
      longArray0[3] = (long) (short)2346;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      assertEquals(4, longArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {6393L, 2346L, 1162L, 2346L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(480.8275602904926);
      assertEquals(480.8275602904926, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      int int0 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) null, 2);
      assertEquals((-1), int0);
      assertEquals(1, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(characterArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, 1675, (float) 1675);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1675, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)34;
      intArray0[3] = (int) (byte)40;
      intArray0[4] = (int) (byte)2;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 34, 40, 2}, intArray0);
      
      ArrayUtils.shift(longArray0, 3, Integer.MAX_VALUE, 2115903006);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {406L, 0L, (-1119L), 0L, 1360L, (-292L), 0L, 0L}, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-292L);
      floatArray0[4] = (float) (-292L);
      floatArray0[5] = (float) (byte)40;
      floatArray0[6] = (float) (byte)34;
      floatArray0[7] = (float) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-915), (float) (byte)40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -915, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)15;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)15;
      intArray0[4] = (int) (byte)69;
      intArray0[5] = (int) (byte)34;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(1, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {15, 0, 0, 15, 69, 34}, intArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (byte)15;
      ArrayUtils.shift(longArray0, (int) (byte)2, (int) (byte)69, (int) (byte)34);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {3L, 15L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2364, (double) 2364);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2364, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)28);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (int) (byte)28, (double) (byte)28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, 0, 32);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      longArray0[2] = 3921L;
      longArray0[3] = 0L;
      longArray0[4] = (-6292L);
      longArray0[5] = 0L;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 2543L;
      floatArray0[2] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (int) (byte)0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2543.0F, 0.0F}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) (-6292L);
      Object object0 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertEquals((-6292L), object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 2543.0F;
      objectArray0[5] = (Object) 3921L;
      objectArray0[6] = (Object) 0.0F;
      objectArray0[7] = (Object) 0.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2543L;
      doubleArray0[1] = (double) 2543.0F;
      doubleArray0[2] = (double) 3921L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-6292L);
      doubleArray0[5] = (double) 2543L;
      doubleArray0[6] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 3, (double) 3);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2543.0, 2543.0, 3921.0, 3.0, 0.0, (-6292.0), 2543.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2543.0, 2543.0, 3921.0, 0.0, (-6292.0), 2543.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '9';
      charArray0[2] = ',';
      charArray0[3] = 'M';
      charArray0[4] = 'v';
      charArray0[5] = 'k';
      charArray0[6] = 'q';
      charArray0[7] = '2';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'l', '9', ',', 'M', 'v', 'k', 'q', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)100}, shortArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'u';
      charArray0[2] = 's';
      charArray0[3] = 'u';
      charArray0[4] = '?';
      charArray0[5] = '!';
      charArray0[6] = '?';
      charArray0[7] = 'p';
      charArray0[8] = 'E';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'h', 'u', 's', 'u', '?', '!', '?', 'p', 'E'}, charArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) (short)100;
      longArray0[4] = (long) 'E';
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 396L);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {104L, 63L, 104L, 100L, 69L}, longArray1);
      assertArrayEquals(new long[] {104L, 63L, 104L, 100L, 69L}, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1.0F, (int) (short)0);
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)100);
      assertEquals((-1), int0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'h', 'u', 's', 'u', '?', '!', '?', 'p', 'E'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1279);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Random.setNextRandom(1279);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = '&';
      charArray0[5] = '1';
      charArray0[6] = '.';
      charArray0[7] = 'R';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', '&', '1', '.', 'R', 'B'}, charArray0);
      assertArrayEquals(new char[] {')', 'x', 'J', '?', '&', '1', '.', 'R', 'B'}, charArray1);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-2));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 16, (-1034));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 382L);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {382L}, longArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      char[] charArray1 = ArrayUtils.insert((int) (byte)2, charArray0, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
      assertArrayEquals(new char[] {'3', '3', '3', '3', '3', '3', '3', '3'}, charArray1);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'3', '3', '3', '3'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-1391.209396));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '(');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertArrayEquals(new char[] {'(', 'f', 'f'}, charArray1);
      
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-23), object0);
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.shift((float[]) null, (int) 'f');
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)13;
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)32, (int) (byte)32);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)13}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 113;
      ArrayUtils.shift(doubleArray0, (-891), 113, (-891));
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {113.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'B';
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) '1';
      doubleArray0[3] = (double) '.';
      doubleArray0[4] = (double) '1';
      doubleArray0[5] = (double) 'B';
      doubleArray0[6] = (double) '.';
      doubleArray0[7] = (double) 'J';
      doubleArray0[8] = (double) ')';
      ArrayUtils.shift(doubleArray0, (-1181), 55, (-2377));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {74.0, 49.0, 46.0, 49.0, 66.0, 46.0, 74.0, 41.0, 66.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 99;
      floatArray0[1] = (float) 55;
      floatArray0[2] = (float) '1';
      floatArray0[3] = (float) (-2377);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {99.0F, 55.0F, 49.0F, (-2377.0F), 99.0F, 55.0F, 49.0F, (-2377.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {99.0F, 55.0F, 49.0F, (-2377.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3505);
      doubleArray0[1] = (double) 11;
      ArrayUtils.shift(doubleArray0, 2, 11, 113);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-3505.0), 11.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      ArrayUtils.shift(doubleArray0, (-86), 1084, 1084);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      char[] charArray0 = new char[9];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 1.0);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte byte4 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-1));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.shift((double[]) null, (int) (byte) (-1));
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-5395), (int) (byte) (-74));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5395, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      ArrayUtils.shift(doubleArray0, 37);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-2021), (-2021), (-2021));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 1L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (-1411L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      longArray0[8] = (long) 0;
      ArrayUtils.reverse(longArray0, 0, 0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 1L, 0L, 0L, 0L, (-1411L), 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      float[] floatArray0 = new float[16];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2439.125F), 1);
      assertEquals((-1), int0);
      assertEquals(16, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-477.8);
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 3147.8957;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {396L, 0L}, longArray0);
      assertArrayEquals(new long[] {396L, 0L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-292L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2191.2783F, 2147039218);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-292.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 1062);
      assertEquals(3, int0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-84));
      assertEquals((byte) (-84), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 366.1006F;
      floatArray0[1] = (float) (-6292L);
      floatArray0[2] = (float) (byte) (-84);
      floatArray0[3] = (float) (byte)41;
      floatArray0[4] = 4948.8F;
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-6292L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 303.63266F, 2);
      assertEquals((-1), int0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {366.1006F, (-6292.0F), (-84.0F), 41.0F, 4948.8F, (-1.0F), (-6292.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (byte) (-39);
      floatArray0[5] = 2191.2783F;
      floatArray0[6] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-39.0F), 581);
      assertEquals(4, int1);
      assertEquals(7, floatArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-39.0F), 2191.2783F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0}, doubleArray1, 0.01);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) (byte)2;
      float[] floatArray1 = ArrayUtils.insert(1, floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {89.0F, 89.0F, 2.0F, 2.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {89.0F, 2.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(objectArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      byte byte0 = (byte)2;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)2}, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)34;
      intArray0[3] = (int) (byte)40;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 34, 40, 0}, intArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)40;
      byteArray1[1] = (Byte) (byte)40;
      byteArray1[2] = (Byte) (byte)40;
      byteArray1[3] = (Byte) (byte)2;
      byteArray1[4] = (Byte) (byte)2;
      byteArray1[5] = (Byte) (byte)2;
      byteArray1[6] = (Byte) (byte)2;
      Byte byte1 = ArrayUtils.get(byteArray1, (int) byte0);
      assertEquals((byte)40, (byte)byte1);
      assertNotNull(byte1);
      assertEquals(7, byteArray1.length);
      assertFalse(byte1.equals((Object)byte0));
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(727L);
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (-958L));
      assertNotNull(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-958L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ArrayUtils.shuffle(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 4686;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) (-1);
      long[] longArray1 = ArrayUtils.add(longArray0, 1811L);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 4686L, 77L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, 4686L, 77L, (-1L), 1811L}, longArray1);
      
      float[] floatArray0 = new float[7];
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 77L;
      objectArray0[1] = (Object) 'M';
      objectArray0[2] = (Object) 77L;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "zD]i)t8@EiVQ`Kt.U5");
      assertNotNull(stringArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3099;
      shortArray0[1] = (short)5947;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short) (-2810);
      shortArray0[4] = (short)17790;
      shortArray0[5] = (short)22797;
      shortArray0[6] = (short)52;
      ArrayUtils.swap(shortArray0, 16, (int) (short)17790, (-1));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)3099, (short)5947, (short)76, (short) (-2810), (short)17790, (short)22797, (short)52}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      Float float0 = new Float(2303.0828F);
      assertEquals(2303.0828F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      ArrayUtils.swap((Object[]) floatArray0, (-2145974522), 93, 93);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-24);
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)33;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)102;
      ArrayUtils.reverse(byteArray1, 732, 48);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte) (-24), (byte)35, (byte)33, (byte)2, (byte)102}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayUtils.shift(objectArray0, (-2889), 74, (-2889));
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)102;
      ArrayUtils.reverse(byteArray0, (int) (byte) (-1), (-666));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)2, (byte)102}, byteArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)2;
      objectArray0[1] = (Object) (byte) (-1);
      objectArray0[2] = (Object) (byte) (-1);
      objectArray0[3] = (Object) (byte)102;
      objectArray0[4] = (Object) (byte)102;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (byte) (-1);
      objectArray0[7] = (Object) (byte)102;
      ArrayUtils.shift(objectArray0, (int) (byte)102);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.indexOf(floatArray0, (-1.0F), (-3274));
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1800);
      assertNull(intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-71);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-71), (-2465));
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-71)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1932.511074), (-1932.511074));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '5';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'z');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&', '5'}, charArray0);
      assertArrayEquals(new char[] {'&', '5'}, charArray1);
      
      char[] charArray2 = ArrayUtils.subarray(charArray0, 3, (-928));
      assertNotNull(charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'&', '5'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)76, (-3505));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)76, (byte)1}, byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (-3505);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {76, 76, 1, (-3505)}, intArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)76, 1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean2);
      assertEquals(4, intArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {76, 76, 1, (-3505)}, intArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)1, 0, 1.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte) (-107);
      ArrayUtils.swap(byteArray0, (-4556), (int) (byte) (-107), (int) (byte)7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte) (-1), (byte) (-1), (byte) (-92), (byte)7, (byte)5, (byte) (-107)}, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte) (-92);
      doubleArray0[2] = 2103.856326;
      doubleArray0[3] = 2415.606136247275;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1373, 1373, 0.0);
      assertEquals((-1), int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), (-92.0), 2103.856326, 2415.606136247275}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), (-5), (-1034));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ArrayUtils.shift(booleanArray0, (int) (byte) (-16));
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer integer0 = new Integer((byte) (-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 0, (int) (byte) (-16));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (-2146129586), (int) (byte) (-107), (int) (byte) (-107));
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-125), (byte)55, (byte)7, (byte) (-92), (byte) (-1), (byte)5, (byte) (-107), (byte)2, (byte) (-1)}, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-107);
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = (double) (byte)7;
      doubleArray0[3] = (double) (byte)55;
      doubleArray0[4] = (double) (-2146129586);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = (double) (byte)55;
      doubleArray0[7] = (double) (byte)5;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1373, (double) 1373);
      assertEquals(7, int0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-107.0), (-1.0), 7.0, 55.0, (-2.146129586E9), (-1.0), 55.0, 5.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(1560, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      ArrayUtils.swap(booleanArray0, (-2146239672), 915, 1021);
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 1021);
      assertEquals(1021.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      floatArray0[1] = float1;
      Float float2 = new Float(2159.8706439);
      assertEquals(2159.8706F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      floatArray0[2] = float2;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.swap(booleanArray0, (-934), 6, (-934));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 33);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1077.11083777), (-27));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      ArrayUtils.swap(booleanArray0, (-823), (-27));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      doubleArray0[2] = (-2531.745893);
      doubleArray0[3] = 681.438748;
      doubleArray0[4] = (-2809.490481598033);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 2555.4956;
      doubleArray0[7] = 2340.443809572505;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 11);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1933.04854241, (-1454.64965568211), (-2531.745893), 681.438748, (-2809.490481598033), Double.NaN, 2555.4956, 2340.443809572505}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.swap(booleanArray0, 4, 110);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-4543), (-4543));
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1.0F));
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert(3162, booleanArray0, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertTrue(boolean0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 1961.0F);
      assertEquals((-1), int0);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-532);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-532));
      assertTrue(boolean0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-532)}, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-532), (short) (-532));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -532, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Byte byte1 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) byte0, (int) byte0, (-1251));
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      Object object0 = new Object();
      assertNotNull(object0);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(stringArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-3948);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte) (-49);
      shortArray0[3] = (short) (byte) (-49);
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-49);
      ArrayUtils.swap(shortArray0, 20, (int) (short) (-49), (int) (byte) (-49));
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-3948), (short) (-49), (short) (-49), (short) (-49), (short)0, (short)0, (short) (-49)}, shortArray0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 72, (int) (short) (-49));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      int int0 = bitSet0.previousSetBit(128);
      assertEquals((-1), int0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object3 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object3);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      ArrayUtils.reverse((int[]) null, 20, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = ArrayUtils.get(objectArray0, (-1247));
      assertNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, (-1247), object0);
      assertNull(object1);
      assertEquals(4, objectArray0.length);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, (-1247), (Object) null);
      assertNull(object2);
      assertEquals(4, objectArray0.length);
      
      objectArray0[2] = null;
      Object object3 = ArrayUtils.get(objectArray0, 1626);
      assertNull(object3);
      assertEquals(4, objectArray0.length);
      
      objectArray0[3] = null;
      ArrayUtils.swap(objectArray0, (-1247), (-1247), 1214);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1214;
      doubleArray0[1] = (double) 1626;
      doubleArray0[2] = (double) (-1247);
      doubleArray0[3] = (double) (-1247);
      doubleArray0[4] = (double) 1214;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 703.5816144419207, (double) 1214);
      assertEquals(4, int0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1214.0, 1626.0, (-1247.0), (-1247.0), 1214.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)8397;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1);
      assertTrue(boolean1);
      assertEquals(9, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)8397, (short)1, (short)1, (short)1}, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf((float[]) null, (-872.6478F));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2146280902;
      intArray0[1] = 1214;
      intArray0[2] = (-1);
      intArray0[3] = 1626;
      intArray0[4] = 1626;
      intArray0[5] = 2;
      intArray0[6] = (int) (short)1;
      intArray0[7] = 1214;
      ArrayUtils.reverse(intArray0, 45, 1880);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2146280902, 1214, (-1), 1626, 1626, 2, 1, 1214}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1897);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertArrayEquals(new short[] {(short)1897}, shortArray1);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (byte)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 'M';
      doubleArray0[2] = (double) (float)floatArray0[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (double) floatArray0[0]);
      assertEquals(2, int0);
      assertEquals(1, floatArray0.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 77.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-84));
      assertFalse(boolean1);
      assertEquals(7, shortArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)0, (short)0, (short)1, (short)1}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 35, (-2727));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      short[] shortArray0 = new short[9];
      Long long0 = new Long((short)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)45;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)122, (int) (byte)45);
      assertEquals((-1), int1);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-18), (byte)33, (byte)33, (byte)45}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2699.547659565272, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      
      byte byte0 = (byte)77;
      Byte byte1 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = (byte) (-1);
      byte[] byteArray0 = new byte[4];
      byte byte3 = (byte)122;
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2316), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2316, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)100;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)100}, shortArray0);
      
      char char0 = 's';
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)100}, shortArray0);
      assertArrayEquals(new short[] {(short)100}, shortArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)100;
      doubleArray0[1] = (-1585.957105979);
      doubleArray0[2] = (double) 's';
      doubleArray0[3] = (double) (short)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1626.97077));
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {100.0, (-1585.957105979), 115.0, 0.0}, doubleArray0, 0.01);
      
      byte byte0 = (byte)1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)54, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 54, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(20, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-78);
      doubleArray0[1] = (double) 1L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) byte0, 13);
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-78.0), 1.0}, doubleArray0, 0.01);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (-2388.78997), (int) byte0);
      assertEquals((-1), int1);
      assertEquals(2, doubleArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-78.0), 1.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) byte0;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      Short short0 = new Short((short)2798);
      assertEquals((short)2798, (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2798;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)2798, (-3135));
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {2798L}, longArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)33);
      assertNull(byteArray0);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2710, (-3135));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)0, (byte)69}, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)15, (int) (byte)0, (int) (byte)15);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)0, (byte)69}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)0, (byte)69}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)0, (byte)69}, byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 92.9002;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (byte)15;
      doubleArray0[5] = (double) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)15, (int) (byte)0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{2, 4}", bitSet0.toString());
      assertEquals(5, bitSet0.length());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 92.9002, 15.0, (-79.0), 15.0, 69.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte)15;
      longArray0[4] = (long) (byte)15;
      longArray0[5] = 4265L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 82L);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 15L, 0L, 15L, 15L, 4265L}, longArray0);
      assertArrayEquals(new long[] {0L, 15L, 0L, 15L, 15L, 4265L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 42;
      intArray0[1] = 42;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 42;
      ArrayUtils.swap(objectArray0, 42, 42, 42);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = 873.738976061;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)2, 1760, 2.0);
      assertEquals(1, int0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 873.738976061}, doubleArray0, 0.01);
      
      ArrayUtils.shift((short[]) null, (int) (byte)2, 1, 430);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2146114952, 1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) 0, 1.0);
      assertEquals(2, int1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)0);
      assertFalse(boolean0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0, 1092);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      IntStream intStream1 = bitSet0.stream();
      assertNotNull(intStream1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(2, intArray0.length);
      assertNotSame(intStream1, intStream0);
      assertFalse(intStream1.equals((Object)intStream0));
      assertArrayEquals(new int[] {2, 2}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1802;
      intArray0[1] = 1802;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1802, 1802}, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1802;
      doubleArray0[1] = (double) 1802;
      doubleArray0[2] = (double) 1802;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1802;
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'L');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 2543L;
      Byte byte0 = new Byte((byte) (-44));
      assertEquals((byte) (-44), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)53, (-24));
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)127, (byte)127, (byte)127}, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (-1007), (short) (byte) (-44));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1007, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)107, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte)100, (-2745));
      assertEquals((-1), int0);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)107, (byte) (-67), (byte)0, (byte)0}, byteArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = ' ';
      charArray0[2] = '&';
      charArray0[3] = 'Y';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'.', ' ', '&', 'Y'}, charArray1);
      assertArrayEquals(new char[] {'.', ' ', '&', 'Y'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)50;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(68, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      Byte byte0 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)53;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      byte byte1 = (byte) (-81);
      Byte byte2 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      boolean boolean0 = ArrayUtils.isSameType(byte2, byte3);
      assertTrue(boolean0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (byte)53;
      shortArray0[2] = (short) (byte)53;
      shortArray0[3] = (short) (byte)53;
      shortArray0[4] = (short) (byte)53;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)53, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      long[] longArray0 = new long[10];
      ArrayUtils.shift(longArray0, 2146662424);
      assertEquals(10, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shift(longArray0, 2146662424);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayUtils.shuffle(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ArrayUtils.shift(byteArray0, (int) (byte)79);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0, "mYxDG@CG(ASdq(");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)79;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1));
      assertEquals((-1), int0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)79}, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'u';
      intArray0[1] = (int) 'u';
      intArray0[2] = (int) (short) (-631);
      intArray0[3] = (-1908);
      ArrayUtils.swap(intArray0, 1, (-369));
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {117, 117, (-631), (-1908)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = 'J';
      charArray0[1] = ')';
      charArray0[3] = 'c';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'c');
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', ')', 'J', 'c'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', ')', 'J'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '1', (int) ')');
      assertEquals((-1), int0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '1';
      intArray0[1] = (int) 'B';
      intArray0[3] = (-1);
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {66, 0, (-1), 49}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, (-2237), (int) (byte)17, (-2237));
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[7] = (-1.0F);
      ArrayUtils.shift(floatArray0, 0, 11, 11);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, (-1135.0F), 0.0F, 0.0F, 1242.14F, 1477.31F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(167);
      assertEquals(167, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 167;
      intArray0[1] = (int) (byte) (-118);
      intArray0[2] = (int) (byte) (-118);
      intArray0[3] = (int) (byte)38;
      intArray0[4] = (int) (byte)38;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)38;
      intArray0[7] = (int) (byte) (-118);
      intArray0[8] = (int) (byte)13;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-118), (-118), 38, 38, 0, 38, (-118), 13, 167}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      ArrayUtils.shift(floatArray0, 0, 11, 11);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, (-1135.0F), 0.0F, 0.0F, 1242.14F, 1477.31F}, floatArray0, 0.01F);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(167);
      assertEquals(167, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      
      Byte byte3 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 167;
      intArray0[1] = (int) (byte) (-118);
      intArray0[2] = (int) (byte) (-118);
      intArray0[3] = (int) (byte)38;
      intArray0[4] = (int) (byte)38;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)38;
      intArray0[7] = (int) (byte) (-118);
      intArray0[8] = (int) (byte)13;
      ArrayUtils.shuffle(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-118), (-118), 38, 38, 0, 38, (-118), 13, 167}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 0, 0, (-34));
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      
      ArrayUtils.shift(floatArray1, Integer.MAX_VALUE);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0, 1067);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[1] = 2031L;
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 102L;
      ArrayUtils.shift(floatArray0, 2013265920);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {102.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = 'J';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '^');
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'B', 'J'}, charArray0);
      assertArrayEquals(new char[] {'B', 'J'}, charArray1);
      
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = '1';
      charArray2[1] = 'B';
      charArray2[2] = '.';
      charArray2[3] = 'J';
      charArray2[4] = 'B';
      int int0 = ArrayUtils.lastIndexOf(charArray2, 's', 7);
      assertEquals((-1), int0);
      assertEquals(5, charArray2.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'1', 'B', '.', 'J', 'B'}, charArray2);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'R';
      charArray0[2] = '1';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'?', 'R', '1'}, charArray0);
      assertArrayEquals(new char[] {'?', 'R', '1'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '1', 2146936099);
      assertEquals(2, int0);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'?', 'R', '1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'x';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = ')';
      charArray0[5] = '1';
      charArray0[6] = '.';
      charArray0[7] = 'R';
      charArray0[8] = 'B';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'X');
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray0);
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'J', 7);
      assertEquals(2, int0);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {')', 'x', 'J', '?', ')', '1', '.', 'R', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      Byte byte3 = Byte.valueOf((byte)119);
      assertEquals((byte)119, (byte)byte3);
      assertNotNull(byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      
      Byte byte4 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte3;
      byteArray0[1] = byte4;
      byteArray0[2] = byte4;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte2;
      Byte byte5 = ArrayUtils.get(byteArray0, (int)  (-74));
      assertNull(byte5);
      assertEquals(8, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '_', 1);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(doubleArray3, (-2123), (-2123));
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '9');
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'c', 1);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = '0';
      charArray0[2] = '\'';
      charArray0[3] = 'Z';
      charArray0[4] = 'G';
      charArray0[5] = 'T';
      charArray0[6] = 'o';
      charArray0[7] = 'Y';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ';', 0);
      assertEquals((-1), int0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'.', '0', '\'', 'Z', 'G', 'T', 'o', 'Y'}, charArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2285;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-452);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2372);
      shortArray0[5] = (short)0;
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1789));
      assertEquals((-1), int1);
      assertEquals(6, shortArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)2285, (short)0, (short) (-452), (short)0, (short) (-2372), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      short[] shortArray0 = new short[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0);
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, (-234));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((byte)42);
      assertEquals(42L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertArrayEquals(new long[] {42L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'f'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(byteArray0, 1, (-733), (int) (byte)0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)51;
      shortArray0[2] = (short)958;
      shortArray0[3] = (short)54;
      shortArray0[4] = (short) (byte)45;
      shortArray0[5] = (short)54;
      shortArray0[6] = (short) (byte)51;
      int int0 = new Byte((byte)45);
      assertEquals((byte)45, int0);
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-42L));
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {406L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      ArrayUtils.shift(byteArray0, 4, 194, (int) (byte) (-73));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-73), (byte)16, (byte) (-73), (byte) (-73), (byte) (-73), (byte) (-73), (byte) (-73)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      ArrayUtils.shift(byteArray0, (int) (byte)107, (int) (byte)107, (int) (byte)107);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);
      assertNull(longArray0);
      
      ArrayUtils.shift((byte[]) null, (int) (byte)0, Integer.MAX_VALUE, (-3227));
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-2147165548), 52, (-2147165548));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-7822));
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {(-7822L), (-7822L), (-7822L), (-7822L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Long[] longArray0 = new Long[7];
      Long long0 = new Long(1535L);
      assertEquals(1535L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(1535L, (long)long1);
      assertNotNull(long1);
      assertEquals(7, longArray0.length);
      assertTrue(long1.equals((Object)long0));
      
      longArray0[1] = long1;
      Long long2 = new Long((-1));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      
      longArray0[2] = long2;
      Long long3 = new Long(1L);
      assertEquals(1L, (long)long3);
      assertNotNull(long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      
      longArray0[3] = long3;
      long long4 = 0L;
      Long long5 = new Long(0L);
      assertEquals(0L, (long)long5);
      assertNotNull(long5);
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      
      longArray0[4] = long5;
      Long long6 = new Long(long4);
      assertEquals(0L, (long)long6);
      assertNotNull(long6);
      assertTrue(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long3));
      assertFalse(long6.equals((Object)long1));
      assertTrue(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long0));
      
      longArray0[5] = long6;
      Long long7 = new Long(1L);
      assertEquals(1L, (long)long7);
      assertNotNull(long7);
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long2));
      assertTrue(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long6));
      
      longArray0[6] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertNotNull(longArray1);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {1535L, 1535L, (-1L), 1L, 0L, 0L, 1L}, longArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)109;
      ArrayUtils.shift(byteArray0, (int) (byte)46, (-1), (int) (byte)111);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-117), (byte)0, (byte) (-39), (byte)52, (byte)111, (byte)46, (byte)109}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.shift((Object[]) classArray0, (int) (byte)102);
      assertEquals(0, classArray0.length);
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, true);
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = ',';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'C');
      assertNotNull(charArray1);
      assertEquals(10, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'C', 'C', 'C', ',', 'C', 'C', 'C', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'C', 'C', ',', 'C', 'C', 'C', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) classArray0, (Object) byte0);
      assertEquals((-1), int0);
      assertEquals(0, classArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-166), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArrayUtils.swap(byteArray0, 15, (-1115), (-1115));
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-1115));
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)0;
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)15);
      assertEquals((-1), int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (byte)69, 47, 0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1809);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1809.0), (-1809));
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1809.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = ArrayUtils.get(objectArray0, 0, object1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0);
      assertNotNull(stringArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', '\u0000'}, charArray1);
      
      long[] longArray0 = new long[6];
      doubleArray0[2] = (double) 'f';
      longArray0[1] = 2067L;
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'f');
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'f', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'f', 'f', '\u0000'}, charArray2);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 102.0, 0.0, 262.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.0);
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 102.0, 0.0, 262.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {262.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-831.2961951286387));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-852.8328));
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = '0';
      charArray0[2] = '>';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'_', '0', '>', 'j', 'L'}, charArray0);
      
      double[] doubleArray2 = ArrayUtils.addFirst(doubleArray1, 65.1742604986332);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {65.1742604986332}, doubleArray2, 0.01);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-21);
      Byte byte2 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf(byte1);
      assertEquals((byte) (-21), (byte)byte4);
      assertNotNull(byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte5);
      assertNotNull(byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte)40, (byte)2, (byte)34, (byte)34, (byte)2}, byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'O';
      charArray0[3] = 'O';
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'T');
      assertNotNull(charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(7, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'O', 'O', 'O', 'O', 'O', 'O'}, charArray0);
      assertArrayEquals(new char[] {'T', 'O', 'O', 'O', 'O', 'O', 'O'}, charArray1);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap(doubleArray1, (int) (byte)2, (int) (byte)40);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      ArrayUtils.reverse((short[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2262.808702;
      doubleArray0[1] = 257.60418000000004;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (-7001.55);
      doubleArray0[4] = (-419.9895204840206);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-407.904843);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2262.808702);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {2262.808702, 257.60418000000004, 1.5, (-7001.55), (-419.9895204840206), Double.NaN, (-407.904843)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-922);
      shortArray0[1] = (short)100;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)19);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-922), (short)100}, shortArray0);
      assertArrayEquals(new short[] {(short)19, (short) (-922), (short)100}, shortArray1);
      
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, (byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shuffle(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-4677.0437885);
      doubleArray0[0] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 927.3583954149528;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4677.0437885), 0.0, (-1.0), 927.3583954149528}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-426);
      shortArray0[1] = (short) (-426);
      shortArray0[2] = (short)1433;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-426), (short) (-426), (short)1433, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-426), (short) (-426), (short)1433, (short) (-1), (short)0, (short) (-1)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1585.957105979));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-4677.0437885), 0.0, (-1.0), 927.3583954149528}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32, (byte)72, (byte)54, (byte)0, (byte)0, (byte)13, (byte)119, (byte)2, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-666), 31);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) 31;
      doubleArray0[6] = (double) 11;
      doubleArray0[7] = (double) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-707));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3}", bitSet0.toString());
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-1.0), Double.NaN, (-1.0), 31.0, 11.0, (-1.0)}, doubleArray0, 0.01);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 6, (-219));
      assertEquals(3, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ArrayUtils.shuffle(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)22);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)22, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3370.441137626);
      doubleArray0[1] = (-4677.0437885);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 927.3583954149528;
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3370.441137626), (-4677.0437885), 0.0, (-1.0), 927.3583954149528}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-426);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)1433;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-426), (short)0, (short)1433, (short) (-1), (short)0, (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-426), (short)0, (short)1433, (short) (-1), (short)0, (short) (-1)}, shortArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1585.957105979));
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-3370.441137626), (-4677.0437885), 0.0, (-1.0), 927.3583954149528}, doubleArray0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert((int) (short)0, byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32, (byte)72, (byte)54, (byte)0, (byte)0, (byte)21, (byte)119, (byte)2, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      long long1 = 0L;
      DoubleStream doubleStream0 = mockRandom0.doubles(0L);
      assertNotNull(doubleStream0);
      
      int int0 = 2;
      int int1 = (-611);
      int int2 = mockRandom0.nextInt((-611));
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      IntStream intStream0 = mockRandom0.ints((int) (byte)0, 2);
      assertNotNull(intStream0);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        mockRandom0.doubles(0.0, (double) 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (-4585), (double) (-4585));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 202.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 202.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      char[] charArray0 = new char[3];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '\u0000';
      doubleArray0[1] = (double) '\u0000';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 12, (-75.8946309781484));
      assertEquals((-1), int0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)1048;
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1520;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 1520, 0.1);
      assertEquals((-1), int0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1520.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1520;
      floatArray0[1] = (float) 1520;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1520.0F, 1520.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      short[] shortArray0 = new short[14];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertFalse(boolean0);
      assertEquals(14, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, (-3087), 1, 1);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-87));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (short) (-87);
      doubleArray0[4] = (double) (short) (-87);
      doubleArray0[5] = (double) (short) (-87);
      doubleArray0[6] = (double) (short) (-87);
      doubleArray0[7] = (double) (short) (-87);
      doubleArray0[8] = (double) (short) (-87);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-87), (-87.0));
      assertEquals((-1), int0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-87.0), 0.0, (-87.0), (-87.0), (-87.0), (-87.0), (-87.0)}, doubleArray0, 0.01);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short)3, (-1));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertArrayEquals(new short[] {}, shortArray1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-87.0), 0.0, (-87.0), (-87.0), (-87.0), (-87.0), (-87.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 14, 14, 33);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1247), (-1247), (-1247));
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1247);
      doubleArray0[1] = (double) (-1247);
      doubleArray0[2] = (double) (-1247);
      doubleArray0[3] = (double) (-1247);
      doubleArray0[4] = (double) (-1247);
      doubleArray0[5] = (double) (-1247);
      doubleArray0[6] = (double) (-1247);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1247.0), (-1247.0));
      assertEquals((-1), int0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1247.0), (-1247.0), (-1247.0), (-1247.0), (-1247.0), (-1247.0), (-1247.0)}, doubleArray0, 0.01);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)1);
      assertFalse(boolean1);
      assertEquals(0, shortArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-4543));
      assertEquals((-4543), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-4543)}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4543, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 12L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 1, 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1L), 476);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 476;
      intArray0[1] = 476;
      intArray0[2] = 476;
      intArray0[3] = 476;
      intArray0[4] = 476;
      intArray0[5] = 476;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 1072, 0);
      assertNotNull(bitSet1);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertEquals(6, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {476, 476, 476, 476, 476, 476}, intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 476, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      short[] shortArray0 = new short[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-59));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(10, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 4686;
      intArray0[0] = 4686;
      int int1 = 97;
      intArray0[1] = 97;
      int int2 = (-1);
      intArray0[2] = (-1);
      int int3 = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Byte[] byteArray0 = new Byte[18];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byteArray0[0], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'a';
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {97.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertArrayEquals(new long[] {}, longArray1);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-1687), (-1687));
      assertNull(doubleArray0);
      
      Double[] doubleArray1 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-7);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte) (-7)}, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((double[]) null, (-1687));
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1371.5);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-29.71139594793);
      doubleArray0[3] = 102.0;
      doubleArray0[4] = (-1312.967961464326);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1371.5), Double.NaN, (-29.71139594793), 102.0, (-1312.967961464326), 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, (-1.0), 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 829;
      intArray0[2] = (-583);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 829, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, (BitSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      Object object0 = ArrayUtils.get((Object[]) null, 680);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, 680);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get(objectArray0, 0, (Object) byte0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)5);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 309;
      floatArray0[1] = (float) 309;
      floatArray0[2] = (float) 309;
      floatArray0[3] = (float) 309;
      ArrayUtils.shift(floatArray0, (-1441), 521, 521);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {309.0F, 309.0F, 309.0F, 309.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      byte[] byteArray0 = null;
      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-38));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 870;
      floatArray0[3] = (float) (-6292L);
      ArrayUtils.shift(floatArray0, (-1135));
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-6292.0F), 0.0F, 0.0F, 870.0F}, floatArray0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      ArrayUtils.reverse((Object[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 406L;
      doubleArray0[1] = (double) 870;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 59, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (short) (-517);
      ArrayUtils.shift(floatArray0, (int) (short) (-517), 3, (-100));
      assertArrayEquals(new float[] {0.0F, (-517.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (short) (-7824);
      ArrayUtils.shift(floatArray0, (int) (short) (-7824), 3, (-3471));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-7824.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2331);
      floatArray0[1] = (float) (byte) (-56);
      ArrayUtils.shift(floatArray0, (-2679));
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-779);
      ArrayUtils.reverse(intArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-779);
      floatArray0[1] = (float) (-779);
      floatArray0[2] = (float) (-779);
      floatArray0[3] = (float) (-779);
      floatArray0[4] = (float) (-779);
      floatArray0[5] = (float) (-779);
      floatArray0[6] = (float) (-779);
      floatArray0[7] = (float) (-779);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertEquals(8, floatArray1.length);
      
      ArrayUtils.swap(floatArray0, (-779), (-779));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-779);
      longArray0[1] = (long) (-779);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (-779));
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-100), Integer.MAX_VALUE, 3);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      ArrayUtils.isEmpty(intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1242.14F;
      floatArray0[2] = 1477.31F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 6;
      ArrayUtils.shift(floatArray0, (-1), 6, (-1));
      Byte byte0 = new Byte((byte) (-8));
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1135.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1242.14F;
      floatArray0[6] = 1477.31F;
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      int int0 = 11;
      ArrayUtils.shift(floatArray0, 0, 11, 11);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(167);
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, (-3471), (-3471), (-3471));
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      float[] floatArray0 = new float[13];
      ArrayUtils.shuffle(floatArray0);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      ArrayUtils.swap(byteArray0, (int) (byte)69, 1960);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte)15;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)15);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 92.9002;
      doubleArray0[2] = (double) (byte)15;
      doubleArray0[3] = (double) (byte) (-79);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)69;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)15, (int) (byte)0);
      assertEquals("{2}", bitSet0.toString());
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)15;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = 4265L;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 82L);
      assertNotNull(longArray1);
      
      ArrayUtils.lastIndexOf(byteArray1, (byte) (-26), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)69}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      ArrayUtils.insert((-965), (boolean[]) null, (boolean[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)3;
      ArrayUtils.swap(byteArray0, (int) (byte)3, 15, (int) (byte)3);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)7;
      shortArray0[1] = (short) (byte) (-72);
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[3] = (short) (byte)7;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)32);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = (double) 15;
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      int[] intArray0 = ArrayUtils.add((int[]) null, 1069);
      assertArrayEquals(new int[] {1069}, intArray0);
      
      ArrayUtils.shift((int[]) null, (int) (short)32, 2040109465, (int) (short)7);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {15.0, 15.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1136.238883866, 351);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2329.3);
      doubleArray0[1] = (double) (short)74;
      doubleArray0[2] = (-2329.3);
      doubleArray0[3] = (double) (short)74;
      doubleArray0[4] = (-2329.3);
      doubleArray0[2] = (-2329.3);
      doubleArray0[6] = (-2329.3);
      doubleArray0[7] = (double) (short)74;
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      Byte[] byteArray1 = new Byte[20];
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      Byte byte2 = new Byte((byte) (-1));
      Byte byte3 = new Byte(byte0);
      ArrayUtils.indexesOf((Object[]) byteArray2, (Object) byte3);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (byte)1);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      ArrayUtils.isSameLength(byteArray0, (byte[]) null);
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short) byte0;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray0, (-811));
      assertArrayEquals(new short[] {(short) (-110), (short)0, (short)1, (short)1}, shortArray0);
      
      Byte byte4 = new Byte((byte) (-78));
      ArrayUtils.lastIndexOf((Object[]) byteArray2, (Object) byte4);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1077.11083777), (-27));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'D', (-4137));
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'g', (-113));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1045.5638571092018);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-1);
      shortArray0[3] = (short) (byte)0;
      shortArray0[6] = (short) (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-4556), (short)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4556, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'J');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 0.0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      ArrayUtils.shift(byteArray0, (-4556), 19, (-7));
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      ArrayUtils.reverse(shortArray0, (-846), 1024);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 1.0);
      assertEquals(0, doubleArray2.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)107;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = '&';
      charArray0[4] = 'Y';
      charArray0[5] = '~';
      charArray0[6] = '<';
      charArray0[7] = '5';
      charArray0[8] = 'A';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'Z');
      assertArrayEquals(new char[] {' ', 'l', '&', 'Y', '~', '<', '5', 'A'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      ArrayUtils.reverse((byte[]) null, (-666), 31);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      int[] intArray0 = new int[3];
      intArray0[0] = 2246;
      intArray0[1] = 0;
      intArray0[2] = (-52);
      ArrayUtils.shift(intArray0, (-52));
      assertArrayEquals(new int[] {0, (-52), 2246}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (-2267);
      ArrayUtils.shift(intArray0, (int) (short)1, 2, 931);
      assertArrayEquals(new int[] {1, 1, (-2267)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, (-2266), (int) (byte)58, (-2266));
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      doubleArray0[2] = (-2531.745893);
      doubleArray0[3] = 681.438748;
      doubleArray0[4] = (-2809.490481598033);
      doubleArray0[5] = Double.NaN;
      ArrayUtils.shift((int[]) null, 374);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-700), (-700), (int) (byte) (-106));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      ArrayUtils.toPrimitive(floatArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      int[] intArray0 = new int[8];
      ArrayUtils.shift(intArray0, 1165, 1165, 1165);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      long long3 = 18L;
      Long long4 = new Long(18L);
      longArray0[2] = long4;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long3;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long3;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short) (-2810);
      ArrayUtils.swap(shortArray0, (-101), (int) (short)3099, 0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2246.4224261287177;
      doubleArray0[5] = 424.3252676838;
      doubleArray0[6] = (-1.0);
      ArrayUtils.indexOf(doubleArray0, 2246.4224261287177);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      Byte byte0 = new Byte((byte)11);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      Object object1 = ArrayUtils.toPrimitive(object0);
      objectArray0[1] = object1;
      Byte byte1 = new Byte((byte)11);
      ArrayUtils.indexesOf(objectArray0, (Object) byte1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (byte)11;
      ArrayUtils.swap(shortArray0, 3043, 0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)104;
      Byte byte1 = new Byte((byte)104);
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)104}, byteArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, 2, 2, (-1483));
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) integerArray0, object0, 1239);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-5);
      Byte byte1 = new Byte((byte) (-5));
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 2246.4224261287177;
      doubleArray0[5] = 424.3252676838;
      doubleArray0[6] = (-1.0);
      ArrayUtils.indexOf(doubleArray0, 2246.4224261287177);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0;
      Byte byte0 = new Byte((byte)11);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      Object object1 = ArrayUtils.toPrimitive(object0);
      objectArray0[1] = object1;
      Byte byte1 = new Byte((byte)11);
      ArrayUtils.indexesOf(objectArray0, (Object) byte1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)11;
      shortArray0[1] = (short) (byte)11;
      ArrayUtils.swap(shortArray0, 3043, 0);
      assertArrayEquals(new short[] {(short)11, (short)11}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayUtils.shift(objectArray0, (-2889), (-2889), (-2889));
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.shift(objectArray0, 1);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      ArrayUtils.shift((Object[]) integerArray0, (-1388));
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) bitSet0;
      bitSet0.flip(0);
      objectArray0[2] = (Object) bitSet0;
      bitSet0.set(0, 0);
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      ArrayUtils.shift(objectArray0, 0, 0, 0);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2299.777F);
      floatArray0[2] = 1467.2874F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2341.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2184.0723F;
      ArrayUtils.reverse(floatArray0, 0, 0);
      assertArrayEquals(new float[] {0.0F, (-2299.777F), 1467.2874F, 0.0F, 2341.0F, 0.0F, 0.0F, 2184.0723F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3055.1282F);
      floatArray0[1] = 2191.2783F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 317.9766F;
      int int0 = ArrayUtils.indexOf(floatArray0, 317.9766F);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      ArrayUtils.toPrimitive(longArray0);
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-84);
      Byte byte1 = new Byte((byte) (-84));
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-33);
      Byte byte3 = new Byte((byte) (-33));
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-84));
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      byteArray0[3] = byte5;
      byte byte6 = (byte)35;
      Byte byte7 = new Byte((byte)35);
      byteArray0[4] = byte7;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte2;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) (byte) (-33);
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte6;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertEquals(14, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 4100.34318789552);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4100.34318789552, 0.0}, doubleArray1, 0.01);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      Byte byte2 = Byte.valueOf((byte)89);
      Byte byte3 = new Byte((byte)89);
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte3;
      byteArray0[1] = (Byte) byte0;
      byteArray0[2] = byte3;
      byteArray0[3] = byte2;
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.addFirst(doubleArray0, 1.5);
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '8');
      assertArrayEquals(new char[] {'8'}, charArray1);
      assertNotNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(205, doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      int int0 = ArrayUtils.indexOf(doubleArray1, 0.0, 262.0);
      assertArrayEquals(new double[] {0.0, 262.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'f');
      assertEquals(1, charArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[1] = 2031L;
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'f';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 'f';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {102L, 0L, 102L, 102L, 2031L, 102L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "o,+}FK6\"H");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'g', (int) 'g');
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0, "[4qva!tw<UlkkgtB");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '3');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'm');
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "P]l~&rd");
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'm';
      intArray0[1] = (int) 'm';
      intArray0[2] = (int) 'm';
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'm';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, '\u0012');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '3');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      char[] charArray0 = new char[13];
      boolean boolean0 = ArrayUtils.contains(charArray0, '#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      ArrayUtils.lastIndexOf(intArray0, (-1649), 1286);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      ArrayUtils.lastIndexOf(doubleArray0, (-15643.0), (-2409), 0.0);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1286, (-2409));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.lastIndexOf(intArray0, 2, 2);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      ArrayUtils.lastIndexOf(doubleArray0, (double) 0, 0, (-595.61032));
      Byte byte0 = new Byte((byte)0);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 408, (-946));
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2142700843));
      assertEquals("{0, 1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2635;
      intArray0[6] = (-1442);
      intArray0[7] = 5;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1442));
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      ArrayUtils.isEmpty(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = (int) (short) (-7830);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      ArrayUtils.toObject(intArray1);
      ArrayUtils.toPrimitive((Float[]) null);
      ArrayUtils.toPrimitive((Float[]) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-564);
      shortArray0[1] = (short) (-1);
      ArrayUtils.lastIndexOf((double[]) null, 3038.4183197631, 380);
      ArrayUtils.reverse((double[]) null, 6, (-1));
      long[] longArray0 = ArrayUtils.insert((int) (short) (-7830), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 31;
      floatArray0[1] = (float) 31;
      floatArray0[2] = (float) 31;
      floatArray0[3] = (-2286.0F);
      ArrayUtils.isNotEmpty(floatArray0);
      long[] longArray0 = new long[0];
      ArrayUtils.removeElements(longArray0, longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 31.0F;
      doubleArray0[2] = (double) 31;
      doubleArray0[3] = (double) (-2286.0F);
      ArrayUtils.indexOf(doubleArray0, 31.0, 31, 2258.646224);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.reverse(booleanArray0, 2904, 53);
      ArrayUtils.add(floatArray0, 0, (-2286.0F));
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (-1);
      floatArray1[1] = (float) 53;
      int int0 = new Integer(53);
      ArrayUtils.reverse(doubleArray0, 0, 31);
      assertArrayEquals(new double[] {(-2286.0), 31.0, 31.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1276.77F;
      floatArray0[1] = (-4407.7F);
      floatArray0[2] = (-2286.0F);
      floatArray0[3] = (-327.88705F);
      floatArray0[4] = 303.039F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 1.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 317.9766F, (-2064));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[16];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertNotNull(booleanArray1);
      
      ArrayUtils.indexesOf(booleanArray1, true);
      assertEquals(0, booleanArray1.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      float[] floatArray0 = new float[4];
      ArrayUtils.toObject(floatArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (-314));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -314, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.lastIndexOf(intArray0, 2, 2);
      double[] doubleArray0 = new double[0];
      ArrayUtils.isEmpty((short[]) null);
      ArrayUtils.subarray(doubleArray0, 65536, 65536);
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)961);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-113));
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      ArrayUtils.get(objectArray0, (-2231));
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = ArrayUtils.toPrimitive(object0);
      Object object2 = ArrayUtils.toPrimitive(object1);
      objectArray0[2] = object2;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2231);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1933.04854241;
      doubleArray0[1] = (-1454.64965568211);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = (-292L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 396L);
      assertArrayEquals(new long[] {(-292L)}, longArray1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-292L);
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) (-1454.64965568211);
      objectArray0[4] = (Object) 1933.04854241;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)89;
      Byte byte1 = new Byte((byte)89);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)89);
      byteArray0[1] = byte2;
      ArrayUtils.get(byteArray0, (int) byte0);
      ArrayUtils.indexesOf(objectArray0, (Object) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-292L);
      floatArray0[1] = (float) 396L;
      doubleArray0[4] = (double) (-292L);
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) (byte)89;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 396L, (-934));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)2);
      assertFalse(boolean0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-477.8);
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 3147.8957;
      doubleArray0[6] = (-1062.839019275428);
      long[] longArray0 = new long[2];
      longArray0[0] = 396L;
      longArray0[1] = 396L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-292L));
      assertArrayEquals(new long[] {396L, 396L}, longArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (-117.63836289);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 396L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 396L, (-408));
      assertEquals("{0, 1}", bitSet0.toString());
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 1481, 1481);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1481, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ArrayUtils.isSorted(booleanArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 15, 2043L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 15, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      longArray0[4] = (-292L);
      longArray0[5] = 917L;
      longArray0[6] = 0L;
      longArray0[7] = 954L;
      ArrayUtils.add(longArray0, 2, (long) 2);
      ArrayUtils.removeElement(longArray0, 872L);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)4900;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-4095);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 3849, (short) (-3833));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3849, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (int) (short) (-2732), (short) (-2732));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2732, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      Float float0 = new Float(2303.0828F);
      Float[] floatArray0 = new Float[1];
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {2303.0828F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-7830);
      int[] intArray0 = new int[0];
      ArrayUtils.toObject(intArray0);
      ArrayUtils.toPrimitive((Float[]) null);
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      ArrayUtils.isEmpty((byte[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1217.6398F;
      floatArray0[3] = 1564.2F;
      floatArray0[4] = (-2055.82F);
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1217.6398F;
      floatArray1[3] = 1564.2F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-2055.82F);
      floatArray1[7] = (-2055.82F);
      floatArray1[8] = 1564.2F;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 406L;
      longArray0[1] = 0L;
      longArray0[2] = (-1119L);
      longArray0[3] = 1360L;
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, 76, 46, 65);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-79));
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      
      ArrayUtils.indexesOf((double[]) null, (-2117.011603193), (int) (byte) (-79));
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 406L);
      assertArrayEquals(new long[] {0L, (-1119L), 1360L, 0L, 0L, 0L, 0L}, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray1, (byte) (-79), 65);
      assertArrayEquals(new byte[] {(byte) (-79), (byte) (-79)}, byteArray1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      Byte byte0 = new Byte((byte)77);
      Byte byte1 = new Byte((byte)1);
      Byte.valueOf((byte)77);
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[2] = (long) (byte) (-58);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1);
      
      ArrayUtils.toObject((char[]) null);
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 3);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(3, classArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 309.7979F;
      floatArray0[1] = (float) (-58L);
      floatArray0[2] = (float) (-1L);
      boolean boolean2 = ArrayUtils.contains(floatArray0, 2539.075F);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      ArrayUtils.swap((Object[]) null, (-1247), (-1247), (-1247));
      ArrayUtils.isNotEmpty((float[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1247);
      doubleArray0[1] = (double) (-1247);
      doubleArray0[2] = (double) (-1247);
      doubleArray0[3] = (double) (-1247);
      Character.valueOf('<');
      Character character0 = new Character('[');
      Character character1 = new Character('R');
      Character.valueOf('u');
      Character character2 = new Character('[');
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-100));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.isSorted(floatArray0);
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'a');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'a'}, charArray0);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)0);
      assertNull(byteArray0);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (byte)0);
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      
      Character[] characterArray0 = new Character[7];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('M');
      characterArray0[1] = character1;
      Character character2 = new Character('I');
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      characterArray0[3] = character3;
      Character character4 = new Character((char) character2);
      characterArray0[4] = character4;
      Character character5 = Character.valueOf('F');
      characterArray0[5] = character5;
      Character character6 = new Character('F');
      characterArray0[6] = character6;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(7, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) 1676;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 382L, 46);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      Object object0 = new Object();
      ArrayUtils.lastIndexOf((Object[]) null, object0, 0);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (short)2;
      ArrayUtils.lastIndexOf(doubleArray0, 2164.458366376279, 0);
      ArrayUtils.reverse(doubleArray0, 104, (-2144933192));
      assertEquals(13, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      Float[] floatArray0 = new Float[8];
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains((Object[]) floatArray0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      long[] longArray0 = new long[7];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)1;
      ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        Character.toChars((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-96));
      Byte[] byteArray0 = new Byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte0, (int) (byte) (-96));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.reverse(intArray0);
      Long long0 = new Long(3759L);
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-600));
      assertArrayEquals(new int[] {(-600), 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[4] = (Object) 2699.547659565272;
      objectArray0[5] = (Object) 0.0;
      Byte byte0 = new Byte((byte)115);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2699.547659565272;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1933.04854241;
      ArrayUtils.lastIndexOf(doubleArray0, 2699.547659565272);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 0.0;
      objectArray0[1] = (Object) 1933.04854241;
      objectArray0[2] = (Object) 1933.04854241;
      objectArray0[3] = (Object) 2699.547659565272;
      objectArray0[4] = (Object) 2699.547659565272;
      objectArray0[5] = (Object) 0.0;
      Byte byte0 = new Byte((byte)115);
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      int[] intArray0 = new int[10];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-943), (-943));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 16, (-1034));
      Integer integer0 = new Integer((-1034));
      Byte byte0 = new Byte((byte)83);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (-669L);
      longArray0[2] = (long) (-1034);
      longArray0[3] = (long) 3;
      longArray0[4] = (long) 3;
      ArrayUtils.shift(longArray0, (-650), (-1034), 2112);
      float[] floatArray0 = new float[0];
      ArrayUtils.addAll(floatArray0, floatArray0);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      int int0 = 1282;
      ArrayUtils.lastIndexOf(byteArray0, (byte) (-7), 1282);
      int int1 = 1072;
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 1072, (short)1573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-110));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (byte) (-110);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (byte) (-1);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2246.0);
      assertArrayEquals(new double[] {0.0, 1.0, (-110.0), (-1.0), (-1.0), 1.0, (-1.0), 0.0, 2246.0}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = '\\';
      charArray0[2] = '~';
      charArray0[3] = '\\';
      charArray0[4] = ',';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {',', '\\', '~', '\\', ','}, charArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 5136);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2, 2);
      assertEquals(0, int0);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)111;
      Byte byte1 = new Byte((byte)111);
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)63);
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)111);
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-1));
      byteArray0[6] = byte7;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((float) 2);
      floatArray0[0] = float0;
      Float float1 = new Float((float) byte0);
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertEquals(2, floatArray1.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 6, (-1633));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.shift(longArray0, 2367);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 2073);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1686;
      intArray0[1] = 656;
      intArray0[2] = 2;
      intArray0[3] = 9;
      intArray0[4] = (-378);
      ArrayUtils.isNotEmpty(intArray0);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ArrayUtils.isSorted(byteArray0);
      ArrayUtils.indexOf(intArray1, 0);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 9;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)113;
      longArray0[3] = (long) (byte)113;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      longArray0[7] = (long) 2;
      ArrayUtils.shift(longArray0, 1686, 0, (int) (byte)0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      long[] longArray0 = new long[2];
      int[] intArray0 = new int[3];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1390);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1390, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-2772));
      ArrayUtils.reverse((Object[]) null);
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      ArrayUtils.reverse((Object[]) null);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1314);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = (-1457);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 262.0;
      doubleArray0[1] = 0.0;
      ArrayUtils.addFirst(doubleArray0, 0.0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1314);
      longArray0[1] = (long) 0;
      int[] intArray0 = new int[5];
      longArray0[0] = (long) (-1);
      intArray0[2] = (-2018);
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert(759, byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1867.99191604826;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-477.8);
      doubleArray0[4] = (-117.63836289);
      doubleArray0[5] = 3147.8957;
      doubleArray0[6] = (-1062.839019275428);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      long long3 = 18L;
      Long long4 = new Long(18L);
      longArray0[2] = long4;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long3;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long3;
      ArrayUtils.indexesOf(doubleArray0, (double) long0, 0.0);
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 313;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 313);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 313, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-2218.611), (double) (-4573));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-929.6), (-929.6));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short) (-71);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-71.0), (int) (short) (-71), 0.0);
      assertEquals("{1}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      ArrayUtils.shuffle((Object[]) longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      Long[] longArray0 = new Long[3];
      long long0 = 0L;
      Long long1 = new Long(0L);
      longArray0[0] = long1;
      Long long2 = new Long(long0);
      longArray0[1] = long2;
      Long long3 = new Long(0L);
      longArray0[2] = long3;
      ArrayUtils.nullToEmpty(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) long0;
      doubleArray0[1] = (double) long0;
      doubleArray0[2] = (double) long0;
      ArrayUtils.indexesOf(doubleArray0, (double) long0, 0.0);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 313);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 313, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 2147108559);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147108559, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, (-1120));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1120, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 2015);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2015, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.removeElement(doubleArray0, 0.0);
      char[] charArray0 = new char[1];
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-823));
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'f');
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertNotNull(charArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)45;
      ArrayUtils.indexOf(byteArray0, (byte)51, (int) (byte)45);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)122, 19);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {(-823)}, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-786);
      intArray0[1] = 2508;
      ArrayUtils.addFirst(intArray0, 2508);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-786);
      longArray0[1] = 128L;
      longArray0[2] = (long) 2508;
      longArray0[3] = (long) (-786);
      longArray0[4] = 0L;
      longArray0[5] = (long) (-786);
      longArray0[6] = (long) 2508;
      ArrayUtils.reverse(longArray0, 2508, (-786));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-786));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -786, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      float[] floatArray0 = new float[9];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      float[] floatArray0 = new float[8];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      
      Object object0 = new Object();
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertEquals(8, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)53);
      assertArrayEquals(new byte[] {(byte) (-31), (byte) (-103), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = Float.NaN;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, Float.NaN);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-4476.0F));
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.reverse(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)39);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-3009.994F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      float[] floatArray0 = new float[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 2);
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)101);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)101;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)0;
      ArrayUtils.reverse(longArray0, 0, (int) (byte)101);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 101L, 0L}, longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 0);
      assertEquals(3, bitSet0.cardinality());
  }
}
