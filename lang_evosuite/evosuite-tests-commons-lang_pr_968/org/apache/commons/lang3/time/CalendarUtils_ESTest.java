/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 23:06:27 GMT 2025
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.TimeZone;
import org.apache.commons.lang3.time.CalendarUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CalendarUtils_ESTest extends CalendarUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1938);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      int int0 = calendarUtils0.INSTANCE.getMonth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1026, 1026, 1026, 1026, 1026);
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getYear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-119), (-119), (-119), (-119), (-119), (-119));
      mockGregorianCalendar0.setLenient(false);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getYear();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1026, 1026, 1026, 1026, 1026);
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getMonth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-119), (-119), (-119), (-119), (-119), (-119));
      mockGregorianCalendar0.setLenient(false);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getMonth();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1026, 1026, 1026, 1026, 1026);
      mockGregorianCalendar0.setTimeZone((TimeZone) null);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getDayOfMonth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-119), (-119), (-119), (-119), (-119), (-119));
      mockGregorianCalendar0.setLenient(false);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        calendarUtils0.getDayOfMonth();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1938);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      int int0 = calendarUtils0.getYear();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2793), 476, 476, 745, 2530);
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      int int0 = calendarUtils0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-119), (-119), (-119), (-119), (-119), (-119));
      CalendarUtils calendarUtils0 = new CalendarUtils(mockGregorianCalendar0);
      int int0 = calendarUtils0.getDayOfMonth();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalendarUtils calendarUtils0 = null;
      try {
        calendarUtils0 = new CalendarUtils((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // calendar
         //
         verifyException("java.util.Objects", e);
      }
  }
}
