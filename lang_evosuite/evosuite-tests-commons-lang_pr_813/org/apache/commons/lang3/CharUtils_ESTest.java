/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 04:07:15 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.CharUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CharUtils_ESTest extends CharUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('9');
      int int0 = CharUtils.toIntValue(character0, 2471);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('\u0081');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl(' ');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = CharUtils.isAscii('\u008E');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = CharUtils.toString('\u0081');
      assertEquals("\u0081", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('k');
      assertEquals('k', (char)character0);
      
      int int0 = CharUtils.toIntValue(character0, (-2248));
      assertEquals((-2248), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Character character0 = Character.valueOf('0');
      int int0 = CharUtils.toIntValue(character0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('6');
      assertEquals('6', (char)character0);
      
      int int0 = CharUtils.toIntValue(character0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = CharUtils.toIntValue('s', 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = CharUtils.toIntValue('(', (-13));
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = CharUtils.toIntValue('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject("2");
      assertEquals('2', (char)character0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char char0 = CharUtils.toChar("0,Hko2p?r?Q{]-#@", 'Z');
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char char0 = CharUtils.toChar("\u0085");
      assertEquals('\u0085', char0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char char0 = CharUtils.toChar("6hsz+4W");
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char char0 = CharUtils.toChar("X_L");
      assertEquals('X', char0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('6');
      char char0 = CharUtils.toChar(character0, 'G');
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char char0 = CharUtils.toChar((Character) null, 'Q');
      assertEquals('Q', char0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject('\u0088');
      char char0 = CharUtils.toChar(character0);
      assertEquals('\u0088', char0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      char char0 = CharUtils.toChar(character0);
      assertEquals('5', char0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject("b");
      char char0 = CharUtils.toChar(character0);
      assertEquals('b', char0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = CharUtils.compare('v', '\"');
      assertEquals(84, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = CharUtils.compare('m', 'z');
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toIntValue((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The character must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toChar((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The String must not be empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiNumeric('!');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('k');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaLower('8');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('|');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('?');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphaUpper('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha('\u0089');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha('X');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlpha('r');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toIntValue('t');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The character t is not in the range '0' - '9'
         //
         verifyException("org.apache.commons.lang3.CharUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = CharUtils.unicodeEscaped('1');
      assertEquals("\\u0031", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('1');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('\u0088');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiAlphanumeric('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiControl('\r');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('\u0088');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = CharUtils.isAsciiPrintable('\u0000');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = CharUtils.isAscii('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = CharUtils.isAscii('\u0080');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = CharUtils.unicodeEscaped((Character) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = CharUtils.toString((Character) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = CharUtils.toString((Character) '\r');
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = CharUtils.toString('');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = CharUtils.toString('\u0080');
      assertEquals("\u0080", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = CharUtils.toIntValue((Character) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = CharUtils.toIntValue('\u0081', 626);
      assertEquals(626, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = CharUtils.toIntValue('5', (int) '5');
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = CharUtils.toIntValue('1');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char char0 = CharUtils.toChar("", 'l');
      assertEquals('l', char0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char char0 = CharUtils.toChar(",", '\u0000');
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char char0 = CharUtils.toChar((Character) null, '!');
      assertEquals('!', char0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject(" is not in the range '0' - '9'");
      char char0 = CharUtils.toChar(character0, 'p');
      assertEquals(' ', char0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Character character0 = CharUtils.toCharacterObject((String) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toChar((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The Character must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharUtils charUtils0 = new CharUtils();
      assertEquals('\r', CharUtils.CR);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = CharUtils.unicodeEscaped((Character) '\u0000');
      assertNotNull(string0);
      assertEquals("\\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharUtils.toChar("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String must not be empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = CharUtils.compare('?', '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Character character0 = new Character(' ');
      // Undeclared exception!
      try { 
        CharUtils.toIntValue(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The character   is not in the range '0' - '9'
         //
         verifyException("org.apache.commons.lang3.CharUtils", e);
      }
  }
}
