/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 21:13:32 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.IntBinaryOperator;
import java.util.function.ToIntFunction;
import org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentRuntimeException;
import org.apache.commons.lang3.concurrent.ConcurrentUtils;
import org.apache.commons.lang3.concurrent.ConstantInitializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ConcurrentUtils_ESTest extends ConcurrentUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("DP", "DP", "DP", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      ExecutionException executionException0 = new ExecutionException("DP", mockThrowable0);
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError(executionException0);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError1);
      mockError0.fillInStackTrace();
      ConcurrentHashMap<Error, Error> concurrentHashMap1 = new ConcurrentHashMap<Error, Error>();
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) mockError0, (ConcurrentInitializer<Error>) constantInitializer0);
      ConcurrentUtils.initialize((ConcurrentInitializer<Error>) constantInitializer0);
      constantInitializer0.toString();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) mockError0, (ConcurrentInitializer<Error>) constantInitializer0);
      assertFalse(concurrentHashMap0.isEmpty());
      assertFalse(concurrentHashMap0.equals((Object)concurrentHashMap1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) mockError0, (ConcurrentInitializer<Error>) constantInitializer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(4);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<Delayed, Error> concurrentHashMap0 = new ConcurrentHashMap<Delayed, Error>();
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, forkJoinPool0);
      Error error0 = ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) null, (Error) mockError0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      MockError mockError0 = new MockError("Not a checked exception: ");
      ConcurrentInitializer<Error> concurrentInitializer0 = null;
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) mockError0, (ConcurrentInitializer<Error>) null);
      mockError0.getStackTrace();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      executionException0.fillInStackTrace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "98|Bg3C}sbQK");
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentSkipListMap<Delayed, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Delayed, Error>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      MockThrowable mockThrowable1 = new MockThrowable("RS=gI", executionException0);
      MockError mockError0 = new MockError("RS=gI", mockThrowable1);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(mockError0).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      scheduledThreadPoolExecutor0.schedule(callable0, (long) 0, timeUnit0);
      ExecutionException executionException1 = new ExecutionException("Mz", (Throwable) null);
      ConcurrentUtils.handleCause(executionException1);
      assertNotSame(executionException1, executionException0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "KA!JLQp)";
      MockThrowable mockThrowable0 = new MockThrowable();
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("KA!JLQp)", "KA!JLQp)", "KA!JLQp)", 0);
      ExecutionException executionException0 = new ExecutionException("KA!JLQp)", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // KA!JLQp)
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      int int0 = 0;
      StackTraceElement stackTraceElement0 = new StackTraceElement("KA!JLQp)", "KA!JLQp)", "KA!JLQp)", 0);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      ExecutionException executionException0 = new ExecutionException("KA!JLQp)", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // KA!JLQp)
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.cancel(false);
      assertFalse(boolean0);
      
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentSkipListMap<Delayed, Error> concurrentSkipListMap1 = new ConcurrentSkipListMap<Delayed, Error>();
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Delayed, Error>) concurrentSkipListMap1, (Delayed) null, (ConcurrentInitializer<Error>) constantInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&k5");
      ToIntFunction<Error> toIntFunction0 = (ToIntFunction<Error>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      concurrentHashMap0.reduceValuesToInt((-1L), toIntFunction0, (-2184), intBinaryOperator0);
      MockError mockError0 = new MockError("", mockRuntimeException0);
      MockError mockError1 = new MockError(mockError0);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) mockError1, (ConcurrentInitializer<Error>) constantInitializer0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, forkJoinPool0);
      callableBackgroundInitializer0.start();
      ConcurrentUtils.initialize((ConcurrentInitializer<Error>) callableBackgroundInitializer0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError1);
      concurrentUtils_ConstantFuture0.isDone();
      ConcurrentHashMap<Delayed, Error> concurrentHashMap1 = null;
      try {
        concurrentHashMap1 = new ConcurrentHashMap<Delayed, Error>((-2184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ConcurrentUtils.extractCause(executionException0);
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      MockError mockError0 = new MockError("Not a checked exception: ", mockThrowable0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      mockThrowable0.getSuppressed();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      SynchronousQueue<Runnable> synchronousQueue0 = new SynchronousQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor(2339, (-109), (-109), timeUnit0, synchronousQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, (ExecutorService) null);
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      MockError mockError0 = new MockError("+NpH!ZtbfX/j`cy:6");
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) mockError0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      Error error0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) null, (Error) null, (ConcurrentInitializer<Error>) null);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(9, threadPoolExecutor_DiscardOldestPolicy0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<Error> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, 1L, timeUnit0);
      MockError mockError0 = new MockError((String) null);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Delayed, Error>) null, (Delayed) scheduledFuture0, (ConcurrentInitializer<Error>) constantInitializer0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture");
      MockError mockError0 = new MockError(mockRuntimeException0);
      mockError0.getMessage();
      ExecutionException executionException0 = new ExecutionException("org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExecutionException executionException0 = null;
      ConcurrentUtils.extractCauseUnchecked((ExecutionException) null);
      MockThrowable mockThrowable0 = new MockThrowable("org.junitpioneer.jupiter.params.Range", (Throwable) null);
      mockThrowable0.getSuppressed();
      mockThrowable0.printStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      MockError mockError0 = new MockError(mockThrowable0);
      mockError0.getStackTrace();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isCancelled();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(843, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("org.junitpioneer.jupiter.params.Range");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "org.junitpioneer.jupiter.params.Range");
      MockThread mockThread2 = new MockThread(mockThread1);
      MockThread mockThread3 = null;
      try {
        mockThread3 = new MockThread(mockThread2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      Error error0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) null, (ConcurrentInitializer<Error>) null);
      assertNull(error0);
      
      ConcurrentUtils.handleCauseUnchecked((ExecutionException) null);
      Error error1 = ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null);
      assertNull(error1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Throwable throwable0 = null;
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException((Throwable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>((Error) null);
      concurrentUtils_ConstantFuture0.isCancelled();
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      // Undeclared exception!
      try { 
        ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) null, (Error) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockError mockError0 = new MockError();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      Throwable throwable0 = ConcurrentUtils.checkedException(executionException0);
      MockError mockError1 = new MockError("", throwable0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError1);
      concurrentUtils_ConstantFuture0.isCancelled();
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(1769, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      ForkJoinTask<Error> forkJoinTask0 = forkJoinPool0.submit(callable0);
      forkJoinTask0.getException();
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadFactory0);
      MockThread mockThread0 = new MockThread((ThreadGroup) null, "");
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread.dumpStack();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread1, 1769, 100L, timeUnit0);
      ConcurrentUtils.constantFuture((Delayed) scheduledFuture0);
      ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Delayed>(scheduledFuture0);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      concurrentUtils_ConstantFuture0.get(100L, timeUnit1);
      MockError mockError0 = new MockError("", (Throwable) null);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      boolean boolean0 = concurrentUtils_ConstantFuture1.isDone();
      concurrentUtils_ConstantFuture1.isDone();
      boolean boolean1 = concurrentUtils_ConstantFuture1.cancel(true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap1 = new ConcurrentSkipListMap<Error, Error>();
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>((Error) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap1, (Error) null, (ConcurrentInitializer<Error>) constantInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      mockError0.getSuppressed();
      concurrentUtils_ConstantFuture0.cancel(false);
      Future<Error> future0 = ConcurrentUtils.constantFuture((Error) mockError0);
      assertNotNull(future0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExecutionException executionException0 = null;
      ConcurrentUtils.extractCause((ExecutionException) null);
      MockError mockError0 = new MockError((Throwable) null);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.isDone();
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("854/km@nBn^");
      mockThrowable0.getStackTrace();
      MockError mockError0 = new MockError("854/km@nBn^", mockThrowable0);
      MockThrowable mockThrowable1 = new MockThrowable("854/km@nBn^", mockError0);
      MockError mockError1 = new MockError(mockThrowable1);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError1);
      Error error0 = ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) constantInitializer0);
      assertSame(error0, mockError1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&k5");
      MockError mockError0 = new MockError("&k5", mockRuntimeException0);
      MockError mockError1 = new MockError(mockError0);
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError1);
      ConcurrentUtils.createIfAbsent((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) mockError1, (ConcurrentInitializer<Error>) constantInitializer0);
      assertFalse(concurrentHashMap0.isEmpty());
      
      Error error0 = ConcurrentUtils.initialize((ConcurrentInitializer<Error>) constantInitializer0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(error0);
      boolean boolean0 = concurrentUtils_ConstantFuture0.isDone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExecutionException executionException0 = mock(ExecutionException.class, new ViolatedAssumptionAnswer());
      doReturn((Throwable) null).when(executionException0).getCause();
      ConcurrentUtils.extractCause(executionException0);
      ExecutionException executionException1 = new ExecutionException("v`]2!]!M83:GA,", (Throwable) null);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("v`]2!]!M83:GA,", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExecutionException executionException0 = null;
      ConcurrentUtils.extractCause((ExecutionException) null);
      MockError mockError0 = new MockError((Throwable) null);
      ConcurrentUtils.constantFuture((Error) mockError0);
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      // Undeclared exception!
      try { 
        mockError0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) null, (ConcurrentInitializer<Error>) null);
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.handleCause(executionException0);
      assertNull(executionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConcurrentSkipListMap<Delayed, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Delayed, Error>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardOldestPolicy0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<Error> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 0, timeUnit0);
      MockError mockError0 = new MockError("*dsKh)RnTS");
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Delayed, Error>) concurrentSkipListMap0, (Delayed) scheduledFuture0, (ConcurrentInitializer<Error>) constantInitializer0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: *dsKh)RnTS
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentHashMap0, (Error) mockError0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException("", mockThrowable0);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      MockError mockError0 = new MockError("", concurrentRuntimeException0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      long long0 = 1332L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Error error0 = concurrentUtils_ConstantFuture0.get(1332L, timeUnit0);
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      executionException0.getSuppressed();
      mockError0.getCause();
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0);
      callableBackgroundInitializer0.initialize();
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentHashMap0, error0, (ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConcurrentHashMap<Error, Error> concurrentHashMap0 = new ConcurrentHashMap<Error, Error>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&k5");
      ExecutionException executionException0 = new ExecutionException("", mockRuntimeException0);
      executionException0.addSuppressed(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, (ExecutorService) null);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Callable<Delayed> callable0 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer());
      CallableBackgroundInitializer<Delayed> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Delayed>(callable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<Delayed>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConstantInitializer<Error> constantInitializer0 = new ConstantInitializer<Error>(mockError0);
      Error error0 = ConcurrentUtils.initialize((ConcurrentInitializer<Error>) constantInitializer0);
      assertSame(error0, mockError0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>((Error) null);
      concurrentUtils_ConstantFuture0.get();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      concurrentUtils_ConstantFuture0.get((-2810L), timeUnit0);
      Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer());
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(4);
      CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, forkJoinPool0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.initialize((ConcurrentInitializer<Error>) callableBackgroundInitializer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // start() must be called first!
         //
         verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ExecutionException executionException0 = new ExecutionException((String) null, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ExecutionException executionException0 = new ExecutionException("", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "Duplicate advice for ";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      ExecutionException executionException0 = new ExecutionException("Duplicate advice for ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCause(executionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockError mockError0 = new MockError("", mockThrowable0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockError mockError0 = new MockError();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.cancel(false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockRuntimeException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException(mockThrowable0);
      ConcurrentRuntimeException concurrentRuntimeException0 = ConcurrentUtils.extractCauseUnchecked(executionException0);
      executionException0.getSuppressed();
      executionException0.getSuppressed();
      MockError mockError0 = new MockError(concurrentRuntimeException0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.checkedException(mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      concurrentUtils_ConstantFuture0.get();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('d');
      executionException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.extractCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockError mockError0 = new MockError("");
      MockError mockError1 = new MockError("", mockError0);
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError1);
      boolean boolean0 = concurrentUtils_ConstantFuture0.isDone();
      assertTrue(boolean0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      concurrentUtils_ConstantFuture0.get((-1L), timeUnit0);
      assertTrue(concurrentUtils_ConstantFuture0.isDone());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) null, (ConcurrentInitializer<Error>) null);
      Error error0 = ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) concurrentUtils_ConstantFuture0;
      objectArray0[2] = (Object) "75?Kayvr-foHBu";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) uRI0;
      objectArray0[5] = (Object) mockError0;
      objectArray0[6] = (Object) mockPrintStream0;
      objectArray0[7] = (Object) uRI0;
      mockPrintStream0.printf("75?Kayvr-foHBu", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append('h');
      mockError0.printStackTrace(printStream0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      concurrentUtils_ConstantFuture0.get(1L, timeUnit0);
      ConcurrentInitializer<Error> concurrentInitializer0 = null;
      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null);
      concurrentUtils_ConstantFuture0.get();
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      MockError mockError0 = new MockError("");
      ExecutionException executionException0 = new ExecutionException("", mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ExecutionException executionException0 = new ExecutionException("", mockThrowable0);
      ConcurrentUtils.extractCauseUnchecked(executionException0);
      MockThrowable mockThrowable1 = new MockThrowable("");
      ExecutionException executionException1 = new ExecutionException("", mockThrowable1);
      try { 
        ConcurrentUtils.handleCause(executionException1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockError mockError0 = new MockError();
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      ExecutionException executionException0 = new ExecutionException(mockError0);
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) null, (ConcurrentInitializer<Error>) null);
      ExecutionException executionException0 = new ExecutionException((Throwable) null);
      ConcurrentUtils.handleCauseUnchecked(executionException0);
      assertNull(executionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      ExecutionException executionException0 = new ExecutionException("", mockThrowable0);
      try { 
        ConcurrentUtils.handleCause(executionException0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcurrentSkipListMap<Error, Error> concurrentSkipListMap0 = new ConcurrentSkipListMap<Error, Error>();
      MockError mockError0 = new MockError();
      ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Error>) concurrentSkipListMap0, (Error) mockError0, (Error) mockError0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockError mockError0 = new MockError("H5x|!C4G2.\"A{A51Ya");
      ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0);
      MockError mockError1 = (MockError)concurrentUtils_ConstantFuture0.get();
      ExecutionException executionException0 = new ExecutionException("", mockError1);
      executionException0.fillInStackTrace();
      executionException0.getStackTrace();
      // Undeclared exception!
      try { 
        ConcurrentUtils.handleCauseUnchecked(executionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }
}
