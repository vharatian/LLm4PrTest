/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 12:46:13 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.nio.InvalidMarkException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "dv*]Co";
      stringArray0[0] = "dv*]Co";
      stringArray0[1] = "=cbI[qp+BsL)MyE";
      stringArray0[2] = "1{FJUI57>hFk^cl;(@!";
      stringArray0[3] = "m{t{bcPlo7#qdv\"e>m{t{bcPlo7#qdv\"e>";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\"N!+#B6C<V";
      String string3 = StringUtils.stripEnd("dv*]Co", "\"N!+#B6C<V");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("dv*]Co", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("=cbI[qp+BsL)MyE");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1{FJUI57>hFk^cl;(@!", (CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '?', 0, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("$", "$", "$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference: group index is missing
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.chomp("D'.ofGcU}_ULJB%g[Z7");
      assertEquals("D'.ofGcU}_ULJB%g[Z7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "D'.ofGcU}_ULJB%g[Z7", 91, 111);
      assertEquals(16, int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      Vector<String> vector0 = new Vector<String>(111);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(111, vector0.capacity());
      assertFalse(vector0.contains(string0));
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) vector0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("&Nt", "&Nt", "o<P T.[Don't clear/set the same property more than once.", 64);
      assertEquals("o<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '1';
      charArray0[2] = 'X';
      charArray0[3] = 'G';
      charArray0[4] = '^';
      charArray0[5] = '2';
      charArray0[6] = 'H';
      charArray0[7] = 'g';
      charArray0[8] = 't';
      int int0 = StringUtils.indexOfAny((CharSequence) "o<P T.[Don't clear/set the same property more than once.", charArray0);
      assertArrayEquals(new char[] {'.', '1', 'X', 'G', '^', '2', 'H', 'g', 't'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      StringUtils.join((Object[]) stringArray0, (String) null, (-1955803258), 3);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 8192);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string2, ",");
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("\r", (-1474));
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("\r", 8192, "\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("dL#3/uMzgWrN");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DL#3/UMZGWRN", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) string2;
      boolean boolean0 = StringUtils.endsWithAny("\r", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripStart("+Irhs |D$8g_", "\r");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("+Irhs |D$8g_", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Or2HnD1mIS-", (CharSequence) "\r", 32);
      assertEquals(11, int0);
      
      String string1 = "io";
      // Undeclared exception!
      try { 
        StringUtils.repeat("io", 1908874353);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      // Undeclared exception!
      StringUtils.center("ExpectedExceptionm", 65536, "ExpectedExceptionm");
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "{", "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("[", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", 105, (-1));
      assertFalse(int1 == int0);
      assertEquals(28, int1);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      Stack<Locale.FilteringMode> stack1 = new Stack<Locale.FilteringMode>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      boolean boolean0 = stack0.containsAll(stack1);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertTrue(boolean0);
      assertFalse(stack0.contains(string0));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(string0));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.reverseDelimited("m", '|');
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("m", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("Search and Replace array lengts don't math: ", "</1");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("</1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("m", "</1");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("m", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce("m", "m", "m");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("m", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("m", 8192);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      StringUtils.center("m", 8192);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 8192;
      String string1 = StringUtils.rotate("", 8192);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat('L', 8192);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.repeat("G +i*i#;X@Xok8:7", 1392);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, "G +i*i#;X@Xok8:7", 1392);
      assertEquals(22256, int0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertEquals("R6uh&eGD}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", Integer.MIN_VALUE);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#Lu@z\"~gPsan>X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripAccents("`tZ=W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`tZ=W", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("R6uh&eGD}", "TA+k 1(xK|[-r@~jD", "R>>ln36");
      assertNull(stringArray1);
      
      String string2 = StringUtils.defaultString("w", "`tZ=W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("w", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(15, stringArray0.length);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`tZ=W", (CharSequence) "w");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(""));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(stack0.contains(""));
      assertNotNull(listIterator0);
      
      char char0 = '8';
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '8');
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals("", string0);
      assertTrue(stack0.contains(""));
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("\"v;`2#y%=TIzRI", "Search and Replace array lengts don't math: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\"v;`2#y%=TIzRI", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("", "\"v;`2#y%=TIzRI", "|5L");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("org.junitpioneer.jupiter.params.ShortRange", 8192);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      // Undeclared exception!
      StringUtils.isAsciiPrintable(string5);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("p{InCombiningDiacriticalMarks}+\n");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("p{InCombiningDiacriticalMarks}+\n"));
      assertNotNull(vector0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "p{InCombiningDiacriticalMarks}+");
      assertNotNull(predicate0);
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(boolean0);
      assertFalse(vector0.contains("p{InCombiningDiacriticalMarks}+"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '7', 5, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(5) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("ExpectedExceptionm");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("ExpectedExceptionm", "#lJ;", 88, 12);
      assertEquals("#lJ;ceptionm", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)4;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)97, (byte)32, (byte)0, (byte) (-46), (byte)4}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(string1.equals((Object)string0));
      assertEquals("a \u0000\uFFFD\u0004", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 8192);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 8192, "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultIfBlank("<P T.[Don't clear/set the same property more than once.<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("<P T.[Don't clear/set the same property more than once.<P T.[Don't clear/set the same property more than once.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("<P T.[Don't clear/set the same property more than once.<P T.[Don't clear/set the same property more than once.");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("<P T.[Don't clear/set the same property more than once.<P T.[Don't clear/set the same property more than once.", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      StringUtils.rightPad("", 8192, 'm');
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String string0 = "ExpectedExceptionm";
      String string1 = "&C]ea:2j;>;}^ZLbH";
      // Undeclared exception!
      StringUtils.repeat("&C]ea:2j;>;}^ZLbH", 65536);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("\r", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      try { 
        StringUtils.getBytes("H}ZwoT", "H}ZwoT");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate(";", 8192);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("", 8192, ";");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) string2, Integer.MAX_VALUE);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("Locale must not be null", charset0);
      assertEquals(23, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.toRootUpperCase(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.params.ByteRange", 8181, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", string1, "org.junitpioneer.jupiter.params.ByteRange");
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(string1, "org.junitpioneer.jupiter.params.ByteRange");
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String string0 = "J9JeB8V<";
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      StringUtils.repeat("J9JeB8V<", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ';';
      String string0 = StringUtils.replace("0XArb:9xSE:PEsXJs", "0XArb:9xSE:PEsXJs", "0XArb:9xSE:PEsXJs", 59);
      assertEquals("0XArb:9xSE:PEsXJs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("0XArb:9xSE:PEsXJs", ';');
      assertTrue(string1.equals((Object)string0));
      assertEquals("0XArb:9xSE:PEsXJs", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("0XArb:9xSE:PEsXJs");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0XArb:9xSE:PEsXJs", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0XArb:9xSE:PEsXJs");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "0XArb:9xSE:PEsXJs";
      charSequenceArray0[1] = (CharSequence) "0XArb:9xSE:PEsXJs";
      charSequenceArray0[2] = (CharSequence) "0XArb:9xSE:PEsXJs";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = "io";
      String string1 = StringUtils.wrapIfMissing("io", '@');
      assertFalse(string1.equals((Object)string0));
      assertEquals("@io@", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("io");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("B", "B");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("B", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '@';
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) '@';
      doubleArray0[3] = (double) '@';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '@', 60, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (-667.071);
      String string0 = StringUtils.join(doubleArray0, '1', 1, 3);
      assertArrayEquals(new double[] {10.0, 1.0, 10.0, 10.0, (-667.071)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("1.0110.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("7s", 76, "A{6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("A{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A7sA{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A{6A", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_<P T.[Don'tGclear/szt the same property more than once.");
      assertEquals("_<PT.[Don'tGclear/sztthesamepropertymorethanonce.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("The String must not be empty", "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" String must not be empty", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("The String must not be empty", " String must not be empty");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" String must not be emptyThe String must not be empty", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((char[]) null, 'h', (-1410), 42);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 4209, "");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-877);
      shortArray0[1] = (short)1165;
      shortArray0[2] = (short)256;
      shortArray0[3] = (short)64;
      shortArray0[4] = (short)68;
      shortArray0[5] = (short)3334;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Q', (int) (short)64, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = "`dmE";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("`dmE", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "#Lu@z\"~gPsan>X");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", 34);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 34, 34);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("...pache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("#Lu@z\"~gPsan>X", 'b');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("b#Lu@z\"~gPsan>Xb", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "#Lu@z\"~gPsan>X", 34);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(":Cw6<cm", 64, ":Cw6<cm");
      assertFalse(string1.equals((Object)string0));
      assertEquals(":Cw6<cm:Cw6<cm:Cw6<cm:Cw6<cm:Cw6<cm:Cw6<cm:Cw6<cm:Cw6<cm::Cw6<cm", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", 12, "#-lLT@=(r2/h");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#-lLT@=(r2/h", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "#-lLT@=(r2/h");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.replaceChars("", "", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) ":Cw6<cm", 33);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Minimum abbreviation width is %d", ":", 3, 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":i:", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)12;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_8", "_8");
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "_8", 2);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("\n", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Strings must not be nulltemp.dir", " ", "_&|[r+g/Hy");
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("c7)R=aFDHo", 'f');
      assertEquals("fc7)R=aFDHof", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+sm>", 'X');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, ',', 29, 2147483645);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("%'tGeI", "%'tGeI");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("maxWith cannot be negative", 'm');
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String string0 = StringUtils.truncate("<dO7bw@Nk{Y&", 4468, 1403);
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isWhitespace("<dO7bw@Nk{Y&");
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("}!lnzU~vxMU)U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("}!LNZu~VXmu)u", string1);
      assertNotNull(string1);
      
      double double1 = StringUtils.getJaroWinklerDistance("", "}!lnzU~vxMU)U");
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String string2 = StringUtils.stripEnd("}!lnzU~vxMU)U", "}!lnzU~vxMU)U");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("", "<dO7bw@Nk{Y&", 140);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "<dO7bw@Nk{Y&";
      charSequenceArray0[2] = (CharSequence) "}!LNZu~VXmu)u";
      charSequenceArray0[3] = (CharSequence) "}!LNZu~VXmu)u";
      charSequenceArray0[4] = (CharSequence) "}!lnzU~vxMU)U";
      boolean boolean1 = StringUtils.equalsAny("}!lnzU~vxMU)U", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsAny((CharSequence) "<dO7bw@Nk{Y&", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("_<P T.[Don'tGclear/szt the same property more than once.");
      assertEquals("_<PT.[Don'tGclear/sztthesamepropertymorethanonce.", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.";
      charSequenceArray0[1] = (CharSequence) "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.";
      charSequenceArray0[2] = (CharSequence) "_<P T.[Don'tGclear/szt the same property more than once.";
      charSequenceArray0[3] = (CharSequence) "_<P T.[Don'tGclear/szt the same property more than once.";
      charSequenceArray0[4] = (CharSequence) "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.";
      charSequenceArray0[5] = (CharSequence) "_<P T.[Don'tGclear/szt the same property more than once.";
      charSequenceArray0[6] = (CharSequence) "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.";
      charSequenceArray0[7] = (CharSequence) "_<PT.[Don'tGclear/sztthesamepropertymorethanonce.";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(4, int0);
      
      String string1 = StringUtils.trimToEmpty("_<PT.[Don'tGclear/sztthesamepropertymorethanonce.");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_<PT.[Don'tGclear/sztthesamepropertymorethanonce.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, "4I}");
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, "4I}");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2735;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'j', 1214, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.swapCase("m");
      assertEquals("M", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M", (CharSequence) "m", Integer.MAX_VALUE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.chop("#\n");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "#\n", (CharSequence) "#", 57);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#";
      stringArray0[1] = "#\n";
      stringArray0[2] = "#";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.substringBetween("_8", "_8");
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "_8", 2);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("\n", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      String string3 = StringUtils.stripStart("`", "Br,', is neither of type Map.Entry nor an Array");
      assertFalse(string3.equals((Object)string2));
      assertEquals("`", string3);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "`";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "_8";
      String string4 = StringUtils.substringAfter("`", "4I}");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("_8", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (-1088L);
      longArray0[6] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'j', 2, 2735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("@De", 'O');
      assertEquals("@De", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,";
      stringArray0[1] = "@De";
      stringArray0[2] = "@De";
      stringArray0[3] = "@De";
      stringArray0[4] = "@De";
      stringArray0[5] = "@De";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@De", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("@De");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (-1332));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "Cannot store ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank("Cannot store ");
      assertFalse(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '^', 0, 1);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("@De");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@De", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", 'l');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("ay of ", "7QIV");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ay of ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("7QIV", "ay of ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7QIV", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'S';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      int int0 = StringUtils.indexOfAny((CharSequence) "7QIV", charArray0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'S', 'l', 'l', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("ay of ", (-1096));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "u/o3DqSTcHoU";
      stringArray0[1] = "7QIV";
      stringArray0[2] = "";
      stringArray0[3] = "7QIV";
      stringArray0[4] = "";
      stringArray0[5] = "7QIV";
      stringArray0[6] = "";
      stringArray0[7] = "ay of ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.IntRange";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.IntRange";
      byte[] byteArray0 = StringUtils.getBytes("org.junitpioneer.jupiter.params.IntRange", (String) null);
      assertEquals(40, byteArray0.length);
      assertNotNull(byteArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '|', (-2), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("</6");
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[</6]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("</6"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[</6]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("</6"));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'm');
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[</6]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(string1.equals((Object)string0));
      assertEquals("</6", string1);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("</6"));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("p{InCombiningDiacriticalMarks}+", "m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "m", charArray0);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", 'm');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("mp{InCombiningDiacriticalMarks}+m", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertEquals("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 314;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '&', 314, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.leftPad("*Uh3:>", 3459, "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(string0, "Minimum abbreviation width with offset is %d");
      assertEquals(0.67, double0, 0.01);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, "Minimum abbreviation width with offset is %d");
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "m", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceChars("m", 'A', 'A');
      assertEquals("m", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = (int) '\u0080';
      intArray0[2] = (int) 'A';
      intArray0[3] = 5;
      intArray0[4] = (int) 'X';
      intArray0[5] = 5;
      intArray0[6] = (int) '\u0080';
      intArray0[7] = (int) '\u0080';
      String string1 = StringUtils.join(intArray0, 'A', 2, 5);
      assertArrayEquals(new int[] {5, 128, 65, 5, 88, 5, 128, 128}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("65A5A88", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.SystemPropertyExtension", "The String must not be empty", "Avqr#I4^tf-");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripEnd("/?eP6F &\"1|c.xVi5v", "vj-!1%hqw-[d5yz");
      assertEquals("/?eP6F &\"1|c.xVi", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", "\"1dnW,7T5><JEngD", "QSqVeU{DC!?{");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Iv0qT9OBGt9?ioB");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'S';
      int int0 = StringUtils.indexOfAny((CharSequence) "\"1dnW,7T5><JEngD", charArray0);
      assertArrayEquals(new char[] {'`', 'S'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'S', (int) (byte)60, 2147483592);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1792;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, '2');
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("W<K|YIC+) eRm", 'M');
      assertFalse(string2.equals((Object)string0));
      assertEquals("W<K|YIC+) eRm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 1792);
      assertNull(string3);
      
      int int1 = StringUtils.compare("W<K|YIC+) eRm", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, "W<K|YIC+) eRm");
      assertEquals(0, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart("Z", (String) null);
      assertEquals("Z", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.center("n;:B8", 15, "io");
      assertEquals("ioioin;:B8ioioi", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "n;:B8";
      stringArray0[1] = "ioioin;:B8ioioi";
      stringArray0[2] = "Minimum abbreviation width is %d";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Minimum abbreviation width is %d";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("ioioin;:B8ioioi", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.center(" L", 5);
      assertEquals("  L  ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("yMw", " L");
      assertFalse(string1.equals((Object)string0));
      assertEquals("yMw", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("  L  ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("  L  ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" L");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split(" L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsAny("  L  ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removeStart("  L  ", "yMw");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("  L  ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "  L  ", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("Zbm$", "4VUpJ'.Z");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("{}", ".:~[W>cq/");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("{}", 8192);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("ZF0./fMm5G,cB", "maxWith cannot be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ZF0./fMm5G,cB", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("4VUpJ'.Z", "Zbm$", (-2863));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string2);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      char[] charArray0 = new char[26];
      charArray0[0] = 'm';
      charArray0[1] = '=';
      charArray0[2] = 'm';
      charArray0[4] = 'm';
      charArray0[3] = 'm';
      charArray0[2] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      String string0 = StringUtils.join(charArray0, 'L', 2, 10);
      assertEquals(26, charArray0.length);
      assertEquals("mLmLmL\u0000LmLmL\u0000L\u0000", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("XpKq&uv0", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XpKq&uv0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("mLmLmL\u0000LmLmL\u0000L\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeAll("XpKq&uv0", "mLmLmL\u0000LmLmL\u0000L\u0000");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("XpKq&uv0", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("*EIoX8+");
      assertEquals("*EIOX8+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("*EIOX8+");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*EIOX8+";
      stringArray0[1] = "*EIoX8+";
      stringArray0[2] = "*EIoX8+";
      stringArray0[3] = "*EIoX8+";
      stringArray0[4] = "*EIOX8+";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*EI", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = 'f';
      charArray0[2] = ']';
      charArray0[3] = 'W';
      charArray0[4] = '$';
      charArray0[5] = '0';
      charArray0[6] = 'B';
      charArray0[7] = '9';
      charArray0[8] = '3';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "*EIoX8+", charArray0);
      assertArrayEquals(new char[] {'=', 'f', ']', 'W', '$', '0', 'B', '9', '3'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.junitpioneer.jupiter.params.Range";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("org.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.swapCase("m");
      assertEquals("M", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("m", "m");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      stringArray0[1] = "ExpectedException";
      stringArray0[2] = "ExpectedException";
      stringArray0[3] = "m";
      stringArray0[6] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = ' ';
      int int0 = StringUtils.indexOfAny((CharSequence) "m", charArray0);
      assertArrayEquals(new char[] {'m', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.normalizeSpace("junit-pioneer");
      assertEquals("junit-pioneer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("m");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.getDigits("9X");
      assertEquals("9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing(":Cw6<c", "9");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9:Cw6<c9", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "9", (CharSequence) "9");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("9:Cw6<c9", "9", "9");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterator<?>) null, "m");
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ":Cw6<c", (CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "8", "8");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("8", 'A', 'A');
      assertEquals("8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("`@W?'X", 2095);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X`@W?'", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("+3b4LnOMR", 8, "8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+3b4LnOMR", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("8", "-#?N*{X-R");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("\n");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'f';
      charArray0[2] = 'A';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "`@W?'X", charArray0);
      assertArrayEquals(new char[] {'A', 'f', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare("8", "`@W?'X", false);
      assertEquals((-40), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "8", charArray0);
      assertArrayEquals(new char[] {'A', 'f', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("\n", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.rotate("9D", (-268));
      assertEquals("9D", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, (-268), "org.apache.commons.lang3.StringUtils");
      assertNull(string1);
      
      String string2 = StringUtils.overlay("9D", (String) null, (-268), (-268));
      assertTrue(string2.equals((Object)string0));
      assertEquals("9D", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.repeat('\u0080', (-2723));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.uncapitalize("Minimum abbreviation width is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("M5ZPt", "<P T.[Don't clear/set the same property more than once.", "m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M5ZPt", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumeric("M5ZPt");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "M5ZPt", (CharSequence) "<P T.[Don't clear/set the same property more than once.", (-2723));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chop("<P T.[Don't clear/set the same property more than once.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<P T.[Don't clear/set the same property more than once", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-936);
      shortArray0[1] = (short)31;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2;
      String string4 = StringUtils.join(shortArray0, '\u0080', (int) (short)2, 3);
      assertArrayEquals(new short[] {(short) (-936), (short)31, (short)1, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("1", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.center("n;:B8", 15, "io");
      assertEquals("ioioin;:B8ioioi", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "ioioin;:B8ioioi");
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(locale_FilteringMode0));
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = vector0.add(locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(vector0.isEmpty());
      assertEquals("[EXTENDED_FILTERING]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean0);
      assertFalse(vector0.contains(locale_FilteringMode0));
      assertTrue(vector0.contains(locale_FilteringMode1));
      
      boolean boolean1 = vector0.add(locale_FilteringMode0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(vector0.isEmpty());
      assertEquals("[EXTENDED_FILTERING, IGNORE_EXTENDED_RANGES]", vector0.toString());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(locale_FilteringMode1));
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "io", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substringBeforeLast("cCFl", "u^0OoG&&=|");
      assertFalse(string1.equals((Object)string0));
      assertEquals("cCFl", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      boolean boolean0 = StringUtils.isBlank("m");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "m", (CharSequence) "");
      assertEquals(1, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "m", 1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string0 = StringUtils.replaceFirst("", "Object varargs must not be null", "m");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("", " ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "TfHOSc:{b@Z", (CharSequence) "");
      assertEquals(11, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "TfHOSc:{b@Z", (CharSequence) "", 12);
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      String string0 = StringUtils.replaceFirst("TfHOSc:{b@Z", "", "TfHOSc:{b@Z");
      assertEquals("TfHOSc:{b@ZTfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("TfHOSc:{b@ZTfHOSc:{b@Z", " in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.swapCase("m");
      assertEquals("M", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "m", (CharSequence) "M");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.truncate("NRqijppE}`VE", 1482, 1482);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 841);
      assertEquals(0, int0);
      
      String string1 = StringUtils.remove("ioio", '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("ioio", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("ioio");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ioio", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ioio", (CharSequence) "ioio");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rotate("ioio", 86);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("ioio", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("ioio", 0, "ioio");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("ioio", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '.';
      charArray0[1] = '.';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "ioio", charArray0);
      assertArrayEquals(new char[] {'.', '.'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string5 = null;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("\r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "ro", (CharSequence) "ro");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing("ro", "r");
      assertEquals("ror", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("ccP/[Y", '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("ccP/[Y", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("[5ff![5ff!", supplier0);
      assertEquals("[5ff![5ff!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[5ff![5ff!", (CharSequence) "[5ff![5ff!");
      assertTrue(boolean0);
      
      String string1 = StringUtils.overlay("%y.W,gx]zzwVHMM", "%y.W,gx]zzwVHMM", (-691), 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%y.W,gx]zzwVHMM", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, 't');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "%y.W,gx]zzwVHMM";
      charSequenceArray0[1] = (CharSequence) "[5ff![5ff!";
      String string3 = StringUtils.stripStart("^p\"pF", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("^p\"pF", string3);
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "^p\"pF";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("4<q[hiMy`o,`[");
      assertFalse(string1.equals((Object)string0));
      assertEquals("4<q[hiMy`o,`[", string1);
      assertNotNull(string1);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ListIterator<Locale.Category> listIterator0 = stack0.listIterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = stack0.add(locale_Category0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[FORMAT]", stack0.toString());
      assertTrue(boolean0);
      assertTrue(stack0.contains(locale_Category0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '?');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("9");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToEmpty("mENBU5ML");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("mENBU5ML", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "mENBU5ML", (CharSequence) " ", (-4165));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("D9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- w", 3058, " vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isMixedCase("mENBU5ML");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.strip(" ", " ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("3xv", "mENBU5ML");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("mENBU5ML3xvmENBU5ML", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing(" vs ", "%");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("% vs %", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.ordinalIndexOf("D9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- wD9- w", " ", 3098);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "Cannot store ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      char char0 = ';';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.params.DoubleRange";
      objectArray0[2] = (Object) "J-OG3_zu.!A";
      objectArray0[3] = (Object) locale_FilteringMode0;
      objectArray0[4] = (Object) "Cannot store ";
      objectArray0[5] = (Object) 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[7] = (Object) "Cannot store ";
      objectArray0[8] = (Object) "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ';', 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.repeat("X+?8< /479cV1:p,&Z5", 1);
      assertEquals("X+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("Strings must not be null", 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "b3=9O7Y^/";
      stringArray0[1] = "i_'Jnn5Y2Z";
      stringArray0[2] = "";
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("m", "\n", 1, 9);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("m", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.left("b3=9O7Y^/", 4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("b3=9", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", 2, "`tZ=Woffset cannot be negative");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("``", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int0 = StringUtils.indexOfAny((CharSequence) "S8Dq`F{W:", charArray0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween("Object varargs must not be null", (String) null, "offset cannot be negative`tZ=W");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2853.0F;
      floatArray0[2] = 658.0F;
      floatArray0[3] = 0.0F;
      String string4 = StringUtils.join(floatArray0, 'u', (-721), (-721));
      assertArrayEquals(new float[] {0.0F, 2853.0F, 658.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.substringAfterLast("~", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.startsWithAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("\r", "Z5Nlg");
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "~", (CharSequence) "~", (int) (short)0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'P');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.center(" L", 5);
      assertEquals("  L  ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("y:w", " L");
      assertFalse(string1.equals((Object)string0));
      assertEquals("y:w", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("  L  ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("  L  ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" L");
      assertTrue(boolean0);
      
      String string3 = StringUtils.truncate("wk=[6wwk=[6w", 77, 77);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace(" L");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.toRootLowerCase("y:w");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("y:w", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y:w";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("y:w", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("lObject varargs must not be null", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("=P?A?C`f/", '/');
      assertEquals("/=P?A?C`f/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("'m9F!RHT!ixA<Azog;IPhR9?{", "Locale must not be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'m9F!RHT!ixA<Azog;IPhR9?{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("blank_blank_blank_2014");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("blank_blank_blank_2014", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Wa3>%WB#ruO", (CharSequence) "'m9F!RHT!ixA<Azog;IPhR9?{");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Wa3>%WB#ruO", 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.difference("K-OfusVV=[SECdz", "K-OfusVV=[SECdz");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "K-OfusVV=[SECdz", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" ", " vs ", " ");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.repeat('s', (int) 's');
      assertEquals("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 's');
      assertFalse(string1.equals((Object)string0));
      assertEquals("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f type ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultString("org.junitpioneer.jupiter.RepeatFailedTestExtension", "f type ");
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "3xv", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.defaultIfEmpty("1O&pK^%", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1O&pK^%", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "1O&pK^%", 0, 3);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("f1O&pK^%type1O&pK^%", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'V', (int) (short)5, 5);
      assertArrayEquals(new short[] {(short)5}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ", Length: ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf(", Length: ", ", Length: ", 717);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace(", Length: ", ", Length: ", "fNMOYABC}X*_h", (int) (short)5);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fNMOYABC}X*_h", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, 'k', 5, (int) (short)5);
      assertNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "fNMOYABC}X*_h", (CharSequence) "fNMOYABC}X*_h");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.stripEnd(", Length: ", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(", Length:", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("fNMOYABC}X*_h", (short)5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("X*_hfNMOYABC}", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = StringUtils.repeat('\u0080', (-2723));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String[] stringArray0 = new String[18];
      String string0 = "Kq&v0";
      stringArray0[0] = "Kq&v0";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(treeSet0.contains("Kq&v0"));
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("Kq&v0"));
      assertNotNull(treeSet1);
      
      boolean boolean1 = treeSet1.add("t set");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet1.contains("Kq&v0"));
      assertTrue(treeSet1.contains("t set"));
      
      Stream<String> stream0 = treeSet1.stream();
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("Kq&v0"));
      assertTrue(treeSet1.contains("t set"));
      assertNotNull(stream0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotSame(treeSet0, treeSet1);
      assertFalse(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(treeSet0.contains("Kq&v0"));
      assertNotNull(iterator0);
      
      boolean boolean2 = treeSet0.add("Kq&v0");
      assertNotSame(treeSet0, treeSet1);
      assertFalse(treeSet0.equals((Object)treeSet1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(treeSet0.contains("Kq&v0"));
      assertFalse(treeSet0.contains("t set"));
      
      String string1 = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "Strings must not be null");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap$NavigableSubMap$SubMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.rightPad(".params.LongRangewk=[6wwk", (-904), '=');
      assertEquals(".params.LongRangewk=[6wwk", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".params.LongRangewk=[6wwk", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'm', 336, 865);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast("3 vwk=[P6w", "CJ}FWB;IjH+S");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "3 vwk=[P6w", 32);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("%/}");
      assertEquals(10, stack0.capacity());
      assertEquals("[%/}]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("%/}"));
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals(10, stack0.capacity());
      assertEquals("[%/}]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("%/}"));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'm');
      assertEquals(10, stack0.capacity());
      assertEquals("[%/}]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string1.equals((Object)string0));
      assertEquals("%/}", string1);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains(string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("Uf{e\"-d8Ez7ZTU", "m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Uf{e\"-d8Ez7ZTU", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("}@K(0\")", "Array and element cannot both be null", 5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("}@K(0\")", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("S]yu6J!C Q");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S]YU6J!C Q", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("m", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("m", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("Array and element cannot both be null", 36, (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Array and element cannot both be null", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd((String) null, "X33\t");
      assertNull(string7);
      
      String string8 = StringUtils.repeat("m", 8192);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.removeFirst("CSi(", ", ");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertEquals("CSi(", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("S0/:%Q,O-}Q}6zn");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      charSequenceArray0[1] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      String string1 = StringUtils.strip("S0/:%Q,O-}Q}6zn", "S0/:%Q,O-}Q}6zn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.abbreviateMiddle("{vLUYXk@GaX!3)lt:", "F.??XE5fj~ FPAHMK", 14);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{vLUYXk@GaX!3)lt:", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("Yd");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("YD", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("S0/:%Q,O-}Q}6zn", "{vLUYXk@GaX!3)lt:");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S0/:%Q,O-}Q}6zn", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("MlqE!", 14, 14);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S0/:%Q,O-}Q}6zn";
      stringArray0[1] = "YD";
      stringArray0[2] = "{vLUYXk@GaX!3)lt:";
      stringArray0[3] = "F.??XE5fj~ FPAHMK";
      stringArray0[4] = "MlqE!";
      stringArray0[5] = "S0/:%Q,O-}Q}6zn";
      String string6 = StringUtils.repeat('v', 98);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isMixedCase("Yd");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("...s");
      assertEquals("...s", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(string0));
      assertNotNull(stack1);
      
      stack1.ensureCapacity((-1621));
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(string0));
      
      ListIterator<String> listIterator0 = stack1.listIterator();
      assertNotSame(stack1, stack0);
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains(string0));
      assertNotNull(listIterator0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("...s");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("Arguments cannot both be null", "...s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "kHmZ", 6);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("SkHmZ ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd((String) null, "|qpe*[FK's");
      assertNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("V/'`R&>");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("V/'`R&>", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.ordinalIndexOf("V/'`R&>", "Search and Replace array lengths don't match: ", 1114111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("o", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "o", (CharSequence) "<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.");
      assertEquals(1, int0);
      
      String string1 = StringUtils.replaceFirst("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", "", "o");
      assertFalse(string1.equals((Object)string0));
      assertEquals("o<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("yMQpk458M;Q`_^%h[", 51, 1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("o<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", "e");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEachRepeatedly("}QR]d,cIFK-]D;R55^", stringArray0, stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}QR]d,cIFK-]D;R55^", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "e", 51);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(string0));
      assertNotNull(listIterator0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("Uf{e\"-d8Ez7ZTU", "m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Uf{e\"-d8Ez7ZTU", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("}@K(0\")", "m", 5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}@m\")", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "m";
      stringArray0[1] = "`5 $3,OsLM]wux:";
      stringArray0[2] = "m";
      stringArray0[3] = "}@K(0\")";
      stringArray0[4] = "m";
      String string3 = StringUtils.replaceEach("Locale must not be null", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Array and element cannot both be null", 414, "`5 $3,OsLM]wux:");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsArray and element cannot both be null`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsLM]wux:`5 $3,OsL", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", 'o');
      assertEquals("org.junitpioneer.jupiter.params.IntRangeo", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)127;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.junitpioneer.jupiter.params.IntRange";
      stringArray0[1] = "org.junitpioneer.jupiter.params.IntRangeo";
      stringArray0[2] = "org.junitpioneer.jupiter.params.IntRangeo";
      stringArray0[3] = "org.junitpioneer.jupiter.params.IntRangeo";
      String string1 = StringUtils.replaceEach("org.junitpioneer.jupiter.params.IntRangeo", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.IntRangeo", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("org.junitpioneer.jupiter.params.IntRangeo", "org.junitpioneer.jupiter.params.IntRange", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "@r4c>< _");
      assertNull(stringArray0);
      
      String string2 = StringUtils.defaultString("v=<Ofsq&.&C", "wk=[6w");
      assertFalse(string2.equals((Object)string1));
      assertEquals("v=<Ofsq&.&C", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "v=<Ofsq&.&C", (CharSequence) "wk=[6w");
      assertEquals(11, int0);
      
      String string3 = StringUtils.substringBefore("Object varargs must not be null", "Object varargs must not be null");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = "n";
      String string1 = StringUtils.stripAccents("Index: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index: ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Index: ";
      stringArray0[1] = "M:r;f&lX\"d!";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Index: ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isBlank("n");
      assertFalse(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.join((List<?>) linkedList0, "org.junitpioneer.jupiter.params.DoubleRange", (-4384), (-4384));
      assertEquals(1, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      assertNotNull(string2);
      
      char char0 = ';';
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, ';', 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", 'o');
      assertEquals("org.junitpioneer.jupiter.params.IntRangeo", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)127;
      String string1 = StringUtils.join(byteArray0, 'o', 3, (int) (byte)11);
      assertEquals(14, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("11o-49o127o0o0o0o0o0", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.params.IntRange", charArray0);
      assertArrayEquals(new char[] {'}'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("u:h0E6+Q+VWa", "11o-49o127o0o0o0o0o0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("11o-49o127o0o0o0o0o0u:h0E6+Q+VWa11o-49o127o0o0o0o0o0", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("<K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[2];
      objectArray0[0] = (Object) "...";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("maxWith cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst(",?%Ef-kcK~*)^#Do", "dq3]W!3");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",?%Ef-kcK~*)^#Do", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(objectArray0, '@', 110, 110);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, '@');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&enDj", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&enDj", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", 34);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      String string2 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(2, locale_FilteringModeArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IGNORE_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "R6uh&enDj");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("R6uh&enDj", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 34, 34);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...pache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "c");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, ',');
      assertNull(string5);
      
      String string6 = StringUtils.toRootUpperCase("");
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, '2');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1), 26);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.strip("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '`');
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("j9-L{['{l]AI(%XM0", 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("j9-L{['{l]AI(%XM0", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(7, stringArray0.length);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      String string0 = "Cannot store ";
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "Cannot store ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      char char0 = ';';
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.params.DoubleRange";
      objectArray0[2] = (Object) "J-OG3_zu.!A";
      objectArray0[3] = (Object) locale_FilteringMode0;
      objectArray0[4] = (Object) "Cannot store ";
      objectArray0[5] = (Object) 0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "Cannot store ";
      objectArray0[8] = (Object) "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ';', 0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat("\r", "\r", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", "Cannot store ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isBlank("Cannot store ");
      assertFalse(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.repeat("\r", (-1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", ">lf<jSQH");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.defaultString("Comparator should not be null.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Comparator should not be null.", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Cannot store ", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("2>i6#$Ia", "RepeatFailedTestExtension", "2>i6#$Ia");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("2>i6#$Ia", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("v|0Eq;L]v}=;");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("v|0Eq;L]v}=", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("", (-804));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("Zbm$", "4VUpJ'.Z");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "4VUpJ'.Z");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (double) (-1);
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), 1.5, (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1.0p-1.0p-1.0p1.5p-1.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("Zbm$", "]As(y|~Iex?4:{", "org.apache.commons.lang3.StringUtils");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "4VUpJ'.Z");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.unwrap((String) null, 'f');
      assertNull(string3);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = locale0.toLanguageTag();
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ko-KR", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase((String) null, locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("c", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("c", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeFirst("TH>7hyb+^S6Z}", "`tZ=Woffset cannot be negative");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("TH>7hyb+^S6Z}", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "m", "m");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is %d", "m", "m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.abbreviate("ms.LongRange", "tju;&*`ekisBk", 57);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ms.LongRange", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "tju;&*`ekisBk", (CharSequence) "");
      assertEquals(13, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("4t$", "", "i$!Oi.+Bn\"*ft5[;u0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", (CharSequence) "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B");
      assertEquals(1, int0);
      
      String string0 = StringUtils.swapCase("+Irhs |D$8g_?#gpr4>'.?H=L^Z'B");
      assertEquals("+iRHS |d$8G_?#GPR4>'.?h=l^z'b", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", (CharSequence) "+iRHS |d$8G_?#GPR4>'.?h=l^z'b", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.abbreviateMiddle("+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int2 = StringUtils.getFuzzyDistance("+iRHS |d$8G_?#GPR4>'.?h=l^z'b", "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(88, int2);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, (int) 'c');
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5737;
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " ";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) 5737L;
      String string3 = StringUtils.join(objectArray0, "-<\"IY=f5%9S~{");
      assertEquals(4, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" -<\"IY=f5%9S~{-<\"IY=f5%9S~{-<\"IY=f5%9S~{5737", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) " -<\"IY=f5%9S~{-<\"IY=f5%9S~{-<\"IY=f5%9S~{5737", 102);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", ".yVIU`96.params.LongRangewk=[6wwk");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("(F@t", (String) null);
      assertEquals("(F@t", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte) (-57);
      String string2 = StringUtils.join(byteArray0, 'C', (int) (byte)102, (int) (byte)32);
      assertArrayEquals(new byte[] {(byte)31, (byte)32, (byte)98, (byte)106, (byte)70, (byte)102, (byte) (-1), (byte) (-92), (byte) (-57)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '[');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode1;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[7] = locale_FilteringMode4;
      locale_FilteringModeArray0[8] = locale_FilteringMode3;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "\n";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("\n", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "\n";
      String string1 = StringUtils.abbreviate("\n", 14, 14);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\n", 14);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("      \n       ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((long[]) null, '');
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "\n", 97);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((byte[]) null, '_');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = "|1MG[hu(I.q*!IY@NP";
      String string1 = StringUtils.strip("|1MG[hu(I.q*!IY@NP");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|1MG[hu(I.q*!IY@NP", string1);
      assertNotNull(string1);
      
      String string2 = "x.AL<D;j(pq(Q";
      String string3 = StringUtils.capitalize("x.AL<D;j(pq(Q");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X.AL<D;j(pq(Q", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "X.AL<D;j(pq(Q", (CharSequence) "x.AL<D;j(pq(Q");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("io");
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat("org.junitpioneer.", "Ov$jkm{S*~/l", 1114111);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 64, 48);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("DpW/cik");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DpW/cik", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('7', 48);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("777777777777777777777777777777777777777777777777", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String string5 = StringUtils.capitalize(";(dQIeG");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(";(dQIeG", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m";
      int[] intArray0 = StringUtils.toCodePoints("wk=[6w");
      assertArrayEquals(new int[] {119, 107, 61, 91, 54, 119}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("a\u0000aMz6*%", "F1p[", 9);
      assertEquals("a\u0000aMz6*%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("|RgQ`gjadb");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|RGQ`GJADB", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("<P T.[Don't clear/set the same property more than once.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".ecno naht erom ytreporp emas eht tes/raelc t'noD[.T P<", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultString("SgwiV}L{J", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("SgwiV}L{J", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getDigits(" ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(string0));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'm');
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains(string1));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("Uf{e\"-d8Ez7ZTU", "m");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Uf{e\"-d8Ez7ZTU", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("}@K(0\")", "Array and element cannot both be null", 5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}@K(0\")", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("S]yu6J!C Q");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S]YU6J!C Q", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "m", charArray0);
      assertArrayEquals(new char[] {'E', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.toRootLowerCase("}@K(0\")");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("}@k(0\")", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "}@k(0\")", (CharSequence) "S]YU6J!C Q", (-1340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.chomp("j^(X{\"vV5");
      assertEquals("j^(X{\"vV5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("Index: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index:", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = '';
      charArray0[8] = '';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Index: ", charArray0);
      assertArrayEquals(new char[] {'', '', '', '', '', '', '', '', ''}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.center("eF3}^^[dqVU`P|Y", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("eF3}^^[dqVU`P|Y", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("eF3}^^[dqVU`P|Y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Strings must not be null", 'r');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("rStrings must not be nullr", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("w1\"oAeV<:nf");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("w1\"oAeV<:nf", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", '');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.startsWithAny("eF3}^^[dqVU`P|Y", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.substringAfterLast("\r", "w1\"oAeV<:nf");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfAny("eF3}^^[dqVU`P|Y", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.chop("rStrings must not be nullr");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("rStrings must not be null", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("MS:|", (-2274));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("MS:|", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.rightPad("O", 13, "Wy8lJt-;#qgr");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("OWy8lJt-;#qgr", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst(" vs ", "Locale must not be null", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" vs ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("OWy8lJt-;#qgr", 1262, " vs ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.deleteWhitespace((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+\n", 1279, 16);
      assertEquals("...ticalMarks}+\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = null;
      String string3 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string3);
      
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = 3588;
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 3588);
      assertNull(stringArray0);
      
      boolean boolean3 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[1], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("\n", "\n", "3b");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("\n", 'L');
      assertFalse(string2.equals((Object)string0));
      assertEquals("L\nL", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("3b");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfterLast("uJ|kKp$A{oZ0?<", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("CL7!@)+&|.x", (int) 'L', (int) 'L');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("\n", 98, 97);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("#DPs1~UjHQ}JQO", (-34), "L\nL");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("#DPs1~UjHQ}JQO", string6);
      assertNotNull(string6);
      
      String string7 = "\\u";
      String string8 = StringUtils.defaultIfBlank(", '", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals(", '", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp("A6KsRCzt$kK");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertEquals("A6KsRCzt$kK", string9);
      assertNotNull(string9);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "#DPs1~UjHQ}JQO";
      charSequenceArray0[2] = (CharSequence) "A6KsRCzt$kK";
      String string10 = StringUtils.replaceFirst("uJ|kKp$A{oZ0?<", "3b", "WPcG=~oJu2'e*ZC;}");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertEquals("uJ|kKp$A{oZ0?<", string10);
      assertNotNull(string10);
      
      charSequenceArray0[3] = (CharSequence) "uJ|kKp$A{oZ0?<";
      String string11 = StringUtils.appendIfMissing((String) null, "A6KsRCzt$kK", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string11);
      
      String string12 = StringUtils.normalizeSpace((String) null);
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9", (CharSequence) "", 324);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.repeat("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (-1526));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (CharSequence) "", 85);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "[_@q6GR/9XlMZ-zgd", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = StringUtils.getBytes("#DrYw4ne#Lu@z\"~gPsan>X", (Charset) null);
      assertEquals(22, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "`tZ=Woffset cannot be negative", (CharSequence) "", 7);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "#DrYw4ne#Lu@z\"~gPsan>X";
      String string3 = StringUtils.joinWith("ExpectedException", objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ExpectedException#DrYw4ne#Lu@z\"~gPsan>X", string3);
      assertNotNull(string3);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`tZ=Woffset cannot be negative", (CharSequence) "", 108);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(30, int3);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(arrayDeque1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertNotNull(list0);
      
      String string0 = StringUtils.mid("0GKO|\"{F", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains("0GKO|\"{F"));
      assertNotNull(stream0);
      
      String string1 = StringUtils.repeat("dN%V3?Xhno\"", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left(" vs ", 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" vs ");
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(4789);
      assertEquals(0, charBuffer0.position());
      assertEquals(4789, charBuffer0.length());
      assertEquals(4789, charBuffer0.capacity());
      assertEquals(4789, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4789, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.isMixedCase(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(4789, charBuffer0.length());
      assertEquals(4789, charBuffer0.capacity());
      assertEquals(4789, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4789, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("0GKO|\"{F", '');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0GKO|\"{F", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) "0GKO|\"{F";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "0GKO|\"{F";
      String string4 = StringUtils.appendIfMissingIgnoreCase("0GKO|\"{F", charSequenceArray0[4], (CharSequence[]) null);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0GKO|\"{F", string4);
      assertNotNull(string4);
      
      charSequenceArray0[5] = (CharSequence) "0GKO|\"{F";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny(charBuffer0, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(4789, charBuffer0.length());
      assertEquals(4789, charBuffer0.capacity());
      assertEquals(4789, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4789, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("0GKO|\"{F"));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("0GKO|\"{F"));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "0GKO|\"{F");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertFalse(arrayList0.contains("0GKO|\"{F"));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.left(" vs ", 1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("000-30101040101053", 21);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("000-30101040101053", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("000-30101040101053", "&aq");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("000-30101040101053", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string5 = StringUtils.stripStart("000-30101040101053", " vs ");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("000-30101040101053", string5);
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "000-30101040101053";
      charSequenceArray0[1] = (CharSequence) " vs ";
      boolean boolean0 = StringUtils.endsWithAny("vs", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "vs", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.join((Object[]) null, ';');
      assertNull(string6);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) " vs ", (CharSequence) "&aq", 743);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.compare((String) null, "?&,VDh<ivHBU!+&Mb", true);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.ArrayUtils", 160, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.forLanguageTag("org.apache.commons.lang3.ArrayUtils");
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = StringUtils.upperCase("org.apache.commons.lang3.ArrayUtils", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.ARRAYUTILS", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("ORG.APACHE.COMMONS.LANG3.ARRAYUTILS");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceFirst((String) null, ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils", ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.wrapIfMissing(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils", ',');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils,", string3);
      assertNotNull(string3);
      
      charSequenceArray0[4] = (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils,";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "ORG.APACHE.COMMONS.LANG3.ARRAYUTILS";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[8] = (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,org.apache.commons.lang3.ArrayUtils";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      int int0 = 2;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", 2, 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) charSequenceArray0[1];
      objectArray0[2] = (Object) charSequenceArray0[1];
      objectArray0[3] = (Object) charSequenceArray0[0];
      objectArray0[4] = (Object) charSequenceArray0[0];
      String string0 = StringUtils.joinWith("1", objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@257a66d11offset cannot be negative1offset cannot be negative1offset cannot be negative1offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      String string1 = StringUtils.appendIfMissing("offset cannot be negative", "offset cannot be negative", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[3]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("java.lang.Object@257a66d11offset cannot be negative1offset cannot be negative1offset cannot be negative1offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", 't');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("toffset cannot be negativet", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[0], (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = "Don't clear/set the same property more than once.";
      String string1 = StringUtils.stripToEmpty("Don't clear/set the same property more than once.");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Don't clear/set the same property more than once.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll((String) null, "Don't clear/set the same property more than once.", "Don't clear/set the same property more than once.");
      assertNull(string2);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Don't clear/set the same property more than once.", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 3456.252032983027;
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("", (String) null, 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("", 1, 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("q;sxIv. ", "q;sxIv. ", 108);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("q;sxIv. ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeAll("", (String) null);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast(":%}", ":%}");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.abbreviate("TfHOSc:{b@Z", "", 0, 0);
      assertEquals("TfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "TfHOSc:{b@Z";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("", "%.y|bs&7*o<A=%.y|bs&7*o<A=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "TfHOSc:{b@Z", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultIfEmpty("Can only resolve parameter of type ", "TfHOSc:{b@Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Can only resolve parameter of type ", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "Minimum abbreviation width with offset is %d", 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3075);
      assertEquals(3075, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3075, charBuffer0.capacity());
      assertEquals(3075, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3075, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, 1881);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m";
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = '\\';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "wk=[6w", charArray0);
      assertArrayEquals(new char[] {'2', '\\'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.center("qw(djcxMtt]/\"nn", 3045);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("m");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.defaultIfBlank("\r", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("qw(djcxMtt]/\"nn", '2');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("2qw(djcxMtt]/\"nn2", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("D_NR");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("D_NR", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '/');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.startsWithAny("2qw(djcxMtt]/\"nn2", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substringAfterLast((String) null, "Y%e|YM");
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      int int0 = StringUtils.indexOf((CharSequence) "m", (CharSequence) "m");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "m", (CharSequence) "m");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "m", (CharSequence) "m", 0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string1 = StringUtils.swapCase("nhp9BZQ&dTU");
      assertFalse(string1.equals((Object)string0));
      assertEquals("NHP9bzq&Dtu", string1);
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "m", (CharSequence) null);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("ExpectedException");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.abbreviate("", "1)k[", (-1821), 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.isBlank("1)k[");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removePattern("-XFgF*?^JdC7l;?", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-XFgF*?^JdC7l;?", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.stripAccents("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("_", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode2;
      locale_FilteringModeArray0[2] = locale_FilteringMode1;
      locale_FilteringModeArray0[3] = locale_FilteringMode0;
      locale_FilteringModeArray0[4] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode3;
      String string2 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(6, locale_FilteringModeArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("IGNORE_EXTENDED_RANGESAUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGMAP_EXTENDED_RANGES", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "<5MD=O8wb@@'bvQ", (CharSequence) "<5MD=O8wb@@'bvQ");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("<5MD=O8wb@@'bvQ", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.abbreviate("8/oQo^8 k", 14, 14);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("8/oQo^8 k", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("ExceptionWasThrown", 9);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ExceptionWasThrown", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compare("<P T.[Don'tGclear/szt the same property more than once._<P T.[Don'tGclear/szt the same property more than once._", "8/oQo^8 k", false);
      assertEquals(71, int0);
      
      String string5 = StringUtils.join((Object[]) null, "\r");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[1] = "";
      String string2 = "dQEq>8FnZW8~}T@Q^6q";
      String string3 = StringUtils.abbreviateMiddle("dQEq>8FnZW8~}T@Q^6q", "", 14);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dQEq>8FnZW8~}T@Q^6q", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("Yd");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("YD", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("DefaultLocale", "f4D(rOsciN],m@[");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("efaultLocale", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-287), (-287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("bom$", (String) null, 1);
      assertEquals("bom$", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "bom$", "x]^");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripEnd(" vs ", " vs ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "The Character must not be nullepc+@?.");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9s>RMX1P2fIThe Array must not be null", (CharSequence) null, 5);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("CANlN", "", 497, 507);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.trimToNull("]XG4}C\"L30M]XG4}C\"L30M");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "ExpectedException";
      charSequenceArray0[2] = (CharSequence) "ExceptionWasThrown";
      charSequenceArray0[3] = (CharSequence) "_";
      charSequenceArray0[4] = (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]XG4}C\"L30M]XG4}C\"L30M", "", 0, 58);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.stripAccents("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("_", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBefore("<5MD=O8wb@@'bvQ", "9'wv``)*\"Ql0QC");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<5MD=O8wb@@'bvQ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_";
      stringArray0[1] = "<5MD=O8wb@@'bvQ";
      stringArray0[2] = "_";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "9'wv``)*\"Ql0QC", "_");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank("<5MD=O8wb@@'bvQ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      String string3 = StringUtils.removePattern("_", "_");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("<5MD=O8wb@@'bvQ", "<5MD=O8wb@@'bvQ", locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(int1 == int0);
      assertEquals(43, int1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare((String) null, "Y,xIE&H/UJ", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.defaultString((String) null, "]XG4}C\"L30M]XG4}C\"L30M");
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1), 2484);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(listIterator0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean1 = arrayList0.add(locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      
      String string0 = StringUtils.truncate("RepeatFailedTestExtension", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat((String) null, "x", 37);
      assertNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_rdr?yJwjrZ,g*RZ'", (CharSequence) "");
      assertEquals(17, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("->}eX:yono_ KC", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("->}eX:yono_ KC", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("|A6AdeNJ^$X!>l3", 'k', 'k');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("|A6AdeNJ^$X!>l3", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'r');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.stripAccents("org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.ReportEntryExtension", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "org.junitpioneer.jupiter.ReportEntryExtension";
      stringArray0[1] = "org.junitpioneer.jupiter.ReportEntryExtension";
      stringArray0[2] = "org.junitpioneer.jupiter.ReportEntryExtension";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.junitpioneer.jupiter.ReportEntryExtension");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 7, "~9*Q ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("org.apache.commons.lang3.ArrayUtils", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtil", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string5 = StringUtils.replaceFirst("", "]XG4}C\"L30M]XG4}C\"L30M", "maxWith cannotv#e negive");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add((Object) "");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.ReportEntryExtension"));
      assertTrue(arrayList0.contains(""));
      
      String string6 = StringUtils.center("", (-1), "org.apache.commons.lang3.ArrayUtil");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("m"));
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("m"));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, 'm');
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains(string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("Uf{e\"-d8Ez7ZTU", "m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Uf{e\"-d8Ez7ZTU", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("}@K(0\")", "Array and element cannot both be null", 5);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}@K(0\")", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("S]yu6J!C Q");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S]YU6J!C Q", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("m", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("m", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.truncate("<", 14, 14);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("#uB", (-34), (String) null);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("#uB", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultIfBlank("<", "}@K(0\")");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("<", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp("G=lx\n");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertEquals("G=lx", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.chomp("G=lx\n");
      assertEquals("G=lx", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string2 = StringUtils.substringAfterLast("e~y(_wwBIn}B", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad(stringArray0[4], 28, "96n!s=tJEI1wFDy0Qp");
      assertEquals(12, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("9 .?Sk-arX", "z");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("9 .?Sk-arX", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.center("\n", 10, "D9- w");
      assertEquals("D9- \nD9- w", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2689);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2689, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2689, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2689, charBuffer0.capacity());
      assertEquals(2689, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      String string1 = StringUtils.join(byteArray0, 't');
      assertArrayEquals(new byte[] {(byte)63}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("63", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "D9- w", (CharSequence) "63");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("D9- w");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("Wa3>%WB#ruO", "Wa3>%WB#ruO", (int) (byte)63);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("Cannot store ", 1252);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Cannot clear and set the following system properties at the same time: ", ')', 'O');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Cannot clear and set the following system properties at the same time: ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'M');
      assertNull(string5);
      
      Object[] objectArray0 = new Object[0];
      String string6 = StringUtils.join(objectArray0, "Wa3>%WB#ruO");
      assertEquals(0, objectArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.normalizeSpace("D9- \nD9- w");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("D9- D9- w", string7);
      assertNotNull(string7);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("Cannot store "));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'M', (-1206), 86);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1206
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.remove("4xLKIZu7kENm:g", 'N');
      assertEquals("4xLKIZu7kEm:g", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '3';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      charArray0[8] = 'N';
      String string1 = StringUtils.join(charArray0, 'N');
      assertArrayEquals(new char[] {'N', 'N', 'N', '3', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NNNNNN3NNNNNNNNNN", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("US-5A'BaKN6f^'$28 vs  sv 82$'^\f6NKaB'A5-SU");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("US-5A'BaKN6f^'$28 vs sv 82$'^ 6NKaB'A5-SU", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.rightPad("", (int) (short)0, 'Y');
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\n", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("j6ho;]ZddXYd", 'c', 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("j6ho;]ZddXYd", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("j6ho;]ZddXYd", '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}j6ho;]ZddXYd}", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "}j6ho;]ZddXYd}", "XArb:9xSE:PEsXJs");
      assertEquals(10, int0);
      
      String string3 = StringUtils.abbreviate("XArb:9xSE:PEsXJs", 10);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("XArb:9x...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("XArb:9xSE:PEsXJs", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("XArb:9xSE:PEsXJs", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.normalizeSpace(" ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("}j6ho;]ZddXYd}", (int) (short)0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz'-Ofu|V;=[SECdzpdn]YP\":9rvU?u\"U", "\n", (-2255));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 320);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("n;:B8", 46, "io");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ioioioioioioioioioion;:B8ioioioioioioioioioioi", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "ioioioioioioioioioion;:B8ioioioioioioioioioioi");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("c!", "", 15);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c!c!c!c!c!c!c!c!c!c!c!c!c!c!c!", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip((String) null, ".");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("a7:-q,(ib4", 15);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("a7:-q,(ib4     ", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ".";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[1];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      String string2 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(1, locale_FilteringModeArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("EXTENDED_FILTERING", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.abbreviate("", 14, 14);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-100);
      String string4 = StringUtils.join(byteArray0, '_', 5, (int) (byte) (-100));
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte) (-100), (byte) (-100), (byte) (-100), (byte) (-100), (byte) (-100)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("hG0ar", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("hG0ar", string5);
      assertNotNull(string5);
      
      CharSequence charSequence1 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(12, stringArray0.length);
      assertNull(charSequence1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(12, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)1627;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, '1');
      assertArrayEquals(new short[] {(short)0, (short)0, (short)1627, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("0101162710", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("0101162710", "0101162710");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0101162710";
      stringArray0[1] = "0101162710";
      stringArray0[2] = "Threshold must not be negative";
      stringArray0[3] = "0101162710";
      stringArray0[4] = "";
      stringArray0[5] = "0101162710";
      stringArray0[6] = "0101162710";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      String string3 = StringUtils.join((Object[]) stringArray0, "0101162710");
      assertEquals(7, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0101162710010116271001011627100101162710Threshold must not be negative0101162710010116271001011627100101162710010116271001011627100101162710", string3);
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "0101162710010116271001011627100101162710Threshold must not be negative0101162710010116271001011627100101162710010116271001011627100101162710";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "0101162710";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "0101162710";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      int int0 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToNull(";");
      assertEquals(";", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(";", ";");
      assertTrue(string1.equals((Object)string0));
      assertEquals(";", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("S)EwY,D;jj", ";");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.removeEndIgnoreCase(";", "iMaaHH@_[&6xv");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(";", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ";", 0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat('O', 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("offset cannot be ", " ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("S1,P;*moC1_", '$');
      assertEquals("$S1,P;*moC1_$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("S1,P;*moC1_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("S1,P;*moC1_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("S1,P;*moC1_", '$');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("$S1,P;*moC1_$", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("S1,P;*moC1_", "Minimum abbreviation width with offset is %d");
      assertNull(string3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 4387.6367F;
      floatArray0[1] = (float) '$';
      floatArray0[2] = (float) '$';
      floatArray0[3] = (float) '$';
      floatArray0[4] = (float) '$';
      floatArray0[5] = (float) '$';
      floatArray0[6] = (float) '$';
      String string4 = StringUtils.join(floatArray0, '^', 322, (-4827));
      assertArrayEquals(new float[] {4387.6367F, 36.0F, 36.0F, 36.0F, 36.0F, 36.0F, 36.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S1,P;*moC1_";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("S1,P;*moC1_", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("%Q)jwi<kg> ");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("%Q)jwi<kg>", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter("$S1,P;*moC1_$", "S1,P;*moC1_");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("$", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("[", "Expected exactly one annotation to provide an ArgumentSource, found %d.", 914, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Expected exactly one annotation to provide an ArgumentSource, found %d.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('W', (-4827));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore(">yqR|R+]", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[Expected exactly one annotation to provide an ArgumentSource, found %d.";
      stringArray0[1] = "Expected exactly one annotation to provide an ArgumentSource, found %d.";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      double[] doubleArray0 = new double[0];
      String string5 = StringUtils.join(doubleArray0, 'e');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'W';
      charArray0[3] = '+';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'e';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'W', '+', 'W', 'W', 'e'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase("Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.rightPad("dtQ8gOELL6LT$W/>Um|", 84, '*');
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dtQ8gOELL6LT$W/>Um|", (CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("dtQ8gOELL6LT$W/>Um|", '*', '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      String string2 = StringUtils.leftPad("", (-114), "dtQ8gOELL6LT$W/>Um|");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfBlank("", "3VQS0OT8kuRrN2");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("3VQS0OT8kuRrN2", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("dtQ8gOELL6LT$W/>Um|");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-356));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The Array must not be null";
      charSequenceArray0[1] = (CharSequence) "The Array must not be null";
      charSequenceArray0[2] = (CharSequence) "The Array must not be null";
      charSequenceArray0[3] = (CharSequence) "The Array must not be null";
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      charSequenceArray0[5] = (CharSequence) "The Array must not be null";
      charSequenceArray0[6] = (CharSequence) "The Array must not be null";
      charSequenceArray0[7] = (CharSequence) "The Array must not be null";
      charSequenceArray0[8] = (CharSequence) "The Array must not be null";
      String string0 = StringUtils.appendIfMissing("The Array must not be null", "The Array must not be null", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      stringArray0[2] = "The Array must not be null";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.repeat("m]", 100);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]m]", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("dq3]W!3", "The Array must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dq3]W!3", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[6], (CharSequence) "dq3]W!3");
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceAll("The Array must not be null", "0lffO2Q'IZWk{+!wn", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("The Array must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('t', 3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ttt", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, "");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, 2357, 75);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 19);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = 'l';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'3', 'l'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, 19);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = StringUtils.stripToEmpty("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(">6z|p$5-,v8_'8", (String) null, (-534), 79);
      assertFalse(string2.equals((Object)string1));
      assertEquals(">6z|p$5-,v8_'8", string2);
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string3 = StringUtils.chop("q|<9n gC`vy");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q|<9n gC`v", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 55);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.overlay((String) null, "", 2690, 55);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.stripAccents("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("_", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[6];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "_";
      stringArray0[2] = "_";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("_", "org.apache.commons.lang3.StringUtils");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1311));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.unwrap("_", "jWTa");
      assertEquals("_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("0.0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("io", "io");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "\r";
      objectArray0[3] = (Object) 32;
      objectArray0[4] = (Object) "io";
      objectArray0[5] = (Object) "\r";
      objectArray0[6] = (Object) 32;
      String string1 = StringUtils.joinWith("\r", objectArray0);
      assertEquals(7, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0\r\r\r\r\r32\rio\r\r\r32", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", 'u');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("_<P T.[Don't clear/set the same property more than once.", "tg>4w< ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("tg>4w< _<P T.[Don't clear/set the same property more than once.tg>4w< ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(" ", "jHdWPrH/ChN4Y", "\r");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.lowerCase("");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("-TyxM!|Y");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-TyxM!|Y", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "-TyxM!|Y", '^');
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceIgnoreCase("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", "[_@q6GR/9XlMZ-zgd", 3344);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[_@q6GR/9XlMZ-zgd", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("V::uKaj{KQ[mI[");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[Im[QK{jaKu::V", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "[_@q6GR/9XlMZ-zgd";
      charSequenceArray0[1] = (CharSequence) "-TyxM!|Y";
      charSequenceArray0[2] = (CharSequence) "V::uKaj{KQ[mI[";
      charSequenceArray0[3] = (CharSequence) "[_@q6GR/9XlMZ-zgd";
      charSequenceArray0[4] = (CharSequence) "`tZ=Woffset cannot be negative";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[7] = (CharSequence) "[_@q6GR/9XlMZ-zgd";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-TyxM!|Y";
      stringArray0[1] = "[_@q6GR/9XlMZ-zgd";
      stringArray0[2] = "V::uKaj{KQ[mI[";
      stringArray0[3] = "[_@q6GR/9XlMZ-zgd";
      stringArray0[4] = "[_@q6GR/9XlMZ-zgd";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("6 n", "[_@q6GR/9XlMZ-zgd");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("6 n", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[7], 3344);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.rightPad("", 4, "V::uKaj{KQ[mI[");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals("V::u", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "V::u", charSequenceArray0[6]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("m", "m", "\r", 100);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("n;:B8", 46, "io");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ioioioioioioioioioion;:B8ioioioioioioioioioioi", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "ioioioioioioioioioion;:B8ioioioioioioioioioioi");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("c!", "", 15);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c!c!c!c!c!c!c!c!c!c!c!c!c!c!c!", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "c!");
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      String string3 = StringUtils.center((String) null, 32);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (-1362));
      assertNull(string4);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 15;
      intArray0[2] = 32;
      intArray0[3] = (-1942);
      intArray0[4] = (-1);
      String string5 = StringUtils.join(intArray0, 'm');
      assertArrayEquals(new int[] {15, 0, 32, (-1942), (-1)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("15m0m32m-1942m-1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.overlay("org.junitpioneer.jupiter.params.IntRange", "D_/'d/'y", (-1362), 98);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("D_/'d/'y", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.repeat("ro", 84);
      assertEquals("rorororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororororo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], ", Length: ");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf("org.junitpioneer.jupiter.TempDirectory", charSequenceArray0[3], 2);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfBlank(", Length: ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'r');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("junit-pioneer\n", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.startsWithAny(", Length: ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string4 = StringUtils.substringAfterLast("rDqgqTj=", "Tqx5=aHNz>");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfAny("org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(38, int1);
      
      String string5 = StringUtils.chop("Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width is %", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle((String) null, ">LJ`QFAeG", 1630);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      int int0 = StringUtils.ordinalIndexOf("fv,QXNFtu", "", 776);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fv,QXNFtu";
      stringArray0[1] = "";
      stringArray0[2] = " EF}q%Tl_'W(c|]\"";
      stringArray0[3] = "]v=Yz1m]HQ]";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        StringUtils.mid("Wa3>%WB#ruO", (short)8, Integer.MAX_VALUE);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 's');
      assertEquals("4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", (-2702));
      assertTrue(string1.equals((Object)string0));
      assertEquals("4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringAfterLast("4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", "4l'o<>ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.TempDirectory$CloseablePath", 'f');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("forg.junitpioneer.jupiter.TempDirectory$CloseablePathf", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("bq:i`JY[B@p_}|><gld");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("bq:i`JY[B@p_}|><gld", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4l'o<>", 'U');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trimToEmpty("4l'o<>");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("4l'o<>", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'', '', '', '', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.center(" vs ", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("q.NyL:nA2E ", "q.NyL:nA2E ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q.NyL:nA2E ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("q.NyL:nA2E ", 'r');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("rq.NyL:nA2E r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("q.NyL:nA2E ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("q.NyL:nA2E ", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y%e|YM", 'r');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.startsWithAny("vs", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.substringAfterLast(" vs ", "{}");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(object0));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean3 = arrayList0.add((Object) locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(arrayList0.contains(object0));
      
      String string7 = StringUtils.join((List<?>) arrayList0, "vs", 16, (-495));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertFalse(arrayList0.contains(object0));
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap(" vs ", "Don't clear/set the same property more than once.");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals(" vs ", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.trim((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 64, 48);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("DpW/cik");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DpW/cik", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("\r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3626);
      shortArray0[1] = (short) (-660);
      shortArray0[2] = (short)12;
      shortArray0[3] = (short)16;
      String string3 = StringUtils.join(shortArray0, 'M', 2899, 64);
      assertArrayEquals(new short[] {(short) (-3626), (short) (-660), (short)12, (short)16}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'8', 'M', 'M', 'M', 'M'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("8MMMM", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("a3a#*^],2Xn.Z(", (String) null, (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("a3a#*^],2Xn.Z(", string5);
      assertNotNull(string5);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("a3a#*^],2Xn.Z(", supplier0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("a3a#*^],2Xn.Z(", string6);
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("DpW/cik");
      assertArrayEquals(new int[] {68, 112, 87, 47, 99, 105, 107}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(intArray0);
      
      String string7 = StringUtils.wrapIfMissing("\r", 'M');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("M\rM", string7);
      assertNotNull(string7);
      
      Supplier<CharSequence> supplier1 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "a3a#*^],2Xn.Z(", supplier1);
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertTrue(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("a3a#*^],2Xn.Z(", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "M\rM", (CharSequence) "a3a#*^],2Xn.Z(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("e: ", "9^/!BFYCUwQ_=\"P(");
      assertFalse(string2.equals((Object)string0));
      assertEquals("e: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad(",-9", 39, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",-9                                    ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) ",-9                                    ", (-3017));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.swapCase("Strings must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("sTRINGS MUST NOT BE NULL", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "sTRINGS MUST NOT BE NULL");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", (-81), "%;&gv@*E~O)");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string5);
      assertNotNull(string5);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("%;&gv@*E~O)"));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "%;&gv@*E~O)", 0, 1791);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1791
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = "[_@q6GR/9XlMZ-zgd";
      String string2 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-TyxM!|Y", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("-TyxM!|Y");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-TyxM!|Y", string3);
      assertNotNull(string3);
      
      char char0 = '^';
      int int0 = StringUtils.countMatches((CharSequence) "-TyxM!|Y", '^');
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)55;
      char char1 = '}';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '}', 3, (int) (byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 64, 48);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull("DpW/cik");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DpW/cik", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-3626);
      shortArray0[1] = (short) (-660);
      shortArray0[2] = (short)12;
      shortArray0[3] = (short)16;
      String string3 = StringUtils.join(shortArray0, 'M', 2899, 64);
      assertArrayEquals(new short[] {(short) (-3626), (short) (-660), (short)12, (short)16}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("\r", (int) (short)12, "Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Search and \r", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.SPACE;
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals(" ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", "DpW/cik");
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.normalizeSpace("L\"9{O~T1?4.eN7]RFmg");
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertEquals("L\"9{O~T1?4.eN7]RFmg", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.stripToNull((String) null);
      assertNull(string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) null;
      String string11 = StringUtils.removeIgnoreCase("jl[qCQ;i#n>'+", "uqP");
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertEquals("jl[qCQ;i#n>'+", string11);
      assertNotNull(string11);
      
      charSequenceArray0[6] = (CharSequence) "jl[qCQ;i#n>'+";
      charSequenceArray0[7] = (CharSequence) " ";
      charSequenceArray0[8] = (CharSequence) " ";
      int int1 = StringUtils.indexOfAny((CharSequence) "L\"9{O~T1?4.eN7]RFmg", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      stringArray0[1] = "wk=[V6w";
      stringArray0[2] = "wk=[V6w";
      stringArray0[3] = "m";
      stringArray0[4] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      String string0 = StringUtils.mid("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", 127, 322);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("[Ui($tn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Ui($tn", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfBlank("org.junitpioneer.jupiter.RepeatFailedTestExtension", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.RepeatFailedTestExtension", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.endsWith("m", "[Ui($tn");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric("m");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((float[]) null, '?');
      assertNull(string3);
      
      String string4 = StringUtils.reverseDelimited("m", '?');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("m", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.RepeatFailedTestExtension", (CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("[Ui($tn", "org.junitpioneer.jupiter.RepeatFailedTestExtension", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.chop("[Ui($tn");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("[Ui($t", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) stringArray1, (String) null, 322, (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Minimum abbreviation width with offset is %d", (int) 'L');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'u';
      charArray0[4] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'u', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals("LLLuL", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charBuffer0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'u', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals("LLLuL", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripAccents("Q&%veOXskcu8Q<");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q&%veOXskcu8Q<", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("Ib[EwQ+!z|XtLM", "Xuz", "s7 qqVasG0kH,)6u");
      assertNull(stringArray1);
      
      String string2 = StringUtils.defaultString((String) null, "E06=~r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("E06=~r", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "R>>ln36";
      stringArray2[1] = "H/w%$XEC-L' ,Jv`5";
      stringArray2[2] = "Q&%veOXskcu8Q<";
      stringArray2[3] = "E06=~r";
      String string3 = StringUtils.firstNonBlank(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray2.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals("R>>ln36", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("\n", "\n", "3b");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("gP~nb?vj8o]", 'L');
      assertFalse(string2.equals((Object)string0));
      assertEquals("LgP~nb?vj8o]L", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("3b");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfterLast("uJ|kKp$A{oZ0?<", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("CL7!@)+&|.x", 941, 941);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("A6KsRCzt$kK", 28, "]XG4}C\"L30M]XG4}C\"L30M");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("A6KsRCzt$kK]XG4}C\"L30M]XG4}C", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("java.lang.Object@763c153c3b\n", "wJcQ1Z*]");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.replaceFirst("Q", "io", "LgP~nb?vj8o]L");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Q", string7);
      assertNotNull(string7);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(941));
      assertNotNull(arrayList0);
      
      boolean boolean2 = arrayList0.add(objectArray0[1]);
      assertEquals(2, objectArray0.length);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("\n"));
      assertFalse(arrayList0.contains(941));
      
      String string8 = StringUtils.join((List<?>) arrayList0, "uJ|kKp$A{oZ0?<", 2029, (-353));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertTrue(arrayList0.contains("\n"));
      assertFalse(arrayList0.contains("3b"));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains(string0));
      assertNotNull(treeSet1);
      
      boolean boolean0 = treeSet1.add("U.*S}*rx5FS");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean0);
      assertFalse(treeSet1.contains(string0));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      
      SortedSet<String> sortedSet0 = treeSet1.tailSet("wk=[6w");
      assertNotSame(treeSet1, treeSet0);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains(string0));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertFalse(sortedSet0.contains(string0));
      assertNotNull(sortedSet0);
      
      boolean boolean1 = treeSet1.add("");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      
      Stream<String> stream0 = treeSet1.stream();
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(stream0);
      
      Iterator<String> iterator0 = treeSet1.descendingIterator();
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "maxWith cannot be negative");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("U.*S}*rx5FSmaxWith cannot be negative", string1);
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("U.*S}*rx5FSmaxWith cannot be negative", "XpKq&uv0s /sqdXYt'N;(Pw~)_");
      assertEquals(0.21, double0, 0.01);
      
      String string2 = StringUtils.rightPad("Strings must not be null", 64, "s /sqdXYt'N;(Pw~)_");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be nulls /sqdXYt'N;(Pw~)_s /sqdXYt'N;(Pw~)_s /s", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.EMPTY;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "-tL65IcW8'}8z");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 127);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.swapCase("Strings must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("sTRINGS MUST NOT BE NULL", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "maxWith cannot be negative", (CharSequence) "|N[]qBS");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.leftPad(":w*+0Psl<w>j\"S", (-1947), "codefx");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(":w*+0Psl<w>j\"S", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeAll(":w*+0Psl<w>j\"S", "sTRINGS MUST NOT BE NULL");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals(":w*+0Psl<w>j\"S", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("lI|5_f@u6rI3?^#9");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'q';
      charArray0[2] = 'P';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'*', 'q', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.removeFirst("@De", "Can only resolve parameter of type ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("@De", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals((-18), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.trimToNull("]XG4}C\"L30M]XG4}C\"L30M");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Jp)vR";
      charSequenceArray0[2] = (CharSequence) "ExceptionWasThrown";
      charSequenceArray0[3] = (CharSequence) "_";
      charSequenceArray0[4] = (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.center((String) null, (-18), (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.mid("Minimum abbreviation width is %d", 2, 4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("nimu", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("]XG4}C\"L30M]XG4}C\"L30M", "\"");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("o", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", "<P T.[Don't clear/set the same property more than once.");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Br,");
      assertEquals("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Br,", 198, 'L');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Br,LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "Br,");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars("', is neither of type Map.Entry nor an Array", '2', 'L');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Minimum abbreviation width is %d", 'L');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("LMinimum abbreviation width is %dL", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("NzFUI1&4O-)", 'e');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("eNzFUI1&4O-)e", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("eNzFUI1&4O-)e", 'e');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      String string5 = StringUtils.upperCase("', is neither of type Map.Entry nor an Array", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("', IS NEITHER OF TYPE MAP.ENTRY NOR AN ARRAY", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 'L';
      floatArray0[2] = (float) '2';
      floatArray0[3] = 2242.8652F;
      floatArray0[4] = (float) 198;
      floatArray0[5] = (float) 198;
      floatArray0[6] = (float) 'e';
      floatArray0[7] = (float) 'e';
      floatArray0[8] = (float) 'L';
      String string6 = StringUtils.join(floatArray0, '\\');
      assertArrayEquals(new float[] {0.0F, 76.0F, 50.0F, 2242.8652F, 198.0F, 198.0F, 101.0F, 101.0F, 76.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("0.0\\76.0\\50.0\\2242.8652\\198.0\\198.0\\101.0\\101.0\\76.0", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNumeric("0.0>.0(.0\u00942.8652\u000198.0\u000198.0A.0A.0>.0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) " vs ";
      String string1 = StringUtils.appendIfMissing(" vs ", " vs ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " vs ";
      stringArray0[1] = " vs ";
      stringArray0[2] = " vs ";
      stringArray0[3] = " vs ";
      String string2 = StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace(" vs ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("vs", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) "vs", 3);
      assertEquals(2, int0);
      
      String string4 = StringUtils.removeEnd("", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 69);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)118;
      shortArray0[1] = (short) (-3393);
      shortArray0[2] = (short)3857;
      shortArray0[3] = (short) (-819);
      shortArray0[4] = (short)2325;
      String string1 = StringUtils.join(shortArray0, 'R', (int) (short)118, (-1483));
      assertArrayEquals(new short[] {(short)118, (short) (-3393), (short)3857, (short) (-819), (short)2325}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "'EE%;<4");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      String string0 = StringUtils.removeStart("9EZ[d0}!M", "9EZ[d0}!M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'8', 'P', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.center("", (-2601));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfBlank("&CRIIBUmi3{)wfl;0", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&CRIIBUmi3{)wfl;0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("s8\"", '8');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("8s8\"8", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&CRIIBUmi3{)wfl;0", 'T');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("org.junitpioneer.jupiter.params.RangeSourceProvider", (String) null);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.left("s8\"", (-2601));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.substringsBetween("\n", "9EZ[d0}!M", "8s8\"8");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.replaceIgnoreCase("Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", 32);
      assertEquals("Ul]0PeY|Bt,*B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ul]0PeY|Bt,*B";
      stringArray0[1] = "io";
      boolean boolean0 = StringUtils.startsWithAny("io", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Ul]0PeY|Bt,*B", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, '.');
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ul]0PeY|Bt,*B.io.......", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Ul]0PeY|Bt,*B", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) charBuffer0, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "#Lu@z\"~gPsan>X";
      String string3 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("R6uh&eGD}", string3);
      assertNotNull(string3);
      
      int int0 = Integer.MIN_VALUE;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", Integer.MIN_VALUE);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      locale_FilteringModeArray0[1] = locale_FilteringMode0;
      String string4 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(2, locale_FilteringModeArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("IGNORE_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", string4);
      assertNotNull(string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "IGNORE_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("IGNORE_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = 6;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("#Lu@z\"~gPsan>X", 6, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.replaceChars("DefaultTimeZone", "DefaultTimeZone", "DefaultTimeZone");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      String string1 = " h<A`\"\"eU'ay6]H2]I";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" h<A`\"\"eU'ay6]H2]I", "h]xs1Ck_", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Zbm$", "Zbm$");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfBlank("Zbm$", "X*4");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Zbm$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.RegExUtils", "set", "=ob7,+j!5NcZm5Zgf{j", 127);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtils", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("=ob7,+j!5NcZm5Zgf{j", "~<3):)u58eF-?4?JK", true);
      assertEquals((-65), int0);
      
      String string3 = StringUtils.mid("=63 E 8", (-65), 7);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=63 E 8", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("...");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "=63 E 8");
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) " ", (-65));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[1] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[2] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[3] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[4] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[5] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      stringArray0[6] = "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", (CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", 5);
      assertEquals(0, int0);
      
      String string2 = StringUtils.right("CkNWJHU'", 5);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WJHU'", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", supplier0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string3);
      assertNotNull(string3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("Ms}SL-W,~yz", "...", 5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Ms...", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", (CharSequence) "+Irhs |D$8g_?#gpr4>'.?H=L^Z'B", 15);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid(" but was: ", (-2200), (-2200));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("@.5dMF#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@.5dMF#", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("wk=[V6w");
      assertTrue(boolean0);
      
      String string3 = StringUtils.defaultIfBlank("C@keEC~/{QM", "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("C@keEC~/{QM", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("C@keEC~/{QM");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.trim("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.endsWith("", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric(" but was: ");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.join((float[]) null, '?');
      assertNull(string5);
      
      String string6 = StringUtils.reverseDelimited("@.5dMF#", '/');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("@.5dMF#", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "wk=[V6w";
      charSequenceArray0[2] = (CharSequence) "@.5dMF#";
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("u{d/Qy%e7q(C1-4[$", "C@keEC~/{QM", 16);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(2, enumSet0.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean4 = enumSet0.add(locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertEquals(3, enumSet0.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      
      String string7 = StringUtils.join((Iterable<?>) enumSet0, "@.5dMF#");
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(3, enumSet0.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("IGNORE_EXTENDED_RANGES@.5dMF#MAP_EXTENDED_RANGES@.5dMF#REJECT_EXTENDED_RANGES", string7);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.leftPad("/'Bua5TfwG3A,", 12, "/'Bua5TfwG3A,");
      assertEquals("/'Bua5TfwG3A,", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be ", "/'Bua5TfwG3A,");
      assertEquals(0.26, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.stripAccents("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("_", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBefore("<5MD=O8wb@@'bvQ", "9'wv``)*\"Ql0QC");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<5MD=O8wb@@'bvQ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_";
      stringArray0[1] = "<5MD=O8wb@@'bvQ";
      stringArray0[2] = "_";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.center("g5w!p?|9", 16);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("    g5w!p?|9    ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("    g5w!p?|9    ", 16);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("    g5w!p?|9    ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("W3L]1hTq{yq", (-2456), "<5MD=O8wb@@'bvQ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("W3L]1hTq{yq", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The Array must not be null";
      charSequenceArray0[1] = (CharSequence) "The Array must not be null";
      charSequenceArray0[2] = (CharSequence) "The Array must not be null";
      charSequenceArray0[3] = (CharSequence) "The Array must not be null";
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "The Array must not be null", 321);
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charSequenceArray0[4]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("The Array must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.stripAccents("E~4R$~y8cs~$");
      assertEquals("E~4R$~y8cs~$", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("`tZ=W", "The Character must not be null", "org.junitpioneer.jupiter.params.Range");
      assertNull(stringArray1);
      
      String string1 = StringUtils.defaultString("z1H4sv`gwy%E_-", "z1H4sv`gwy%E_-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("z1H4sv`gwy%E_-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "R6uh&eGD}";
      charSequenceArray0[3] = (CharSequence) "R6uh&eGD}";
      charSequenceArray0[4] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0L0L-1Lm1934b0L-1L0L1065L-785";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("0L0L-1Lm1934b0L-1L0L1065L-785", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("W}cDG{cKuo>o,3%Y7&", '\\');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("W}cDG{cKuo>o,3%Y7&", "W}cDG{cKuo>o,3%Y7&");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W}cDG{cKuo>o,3%Y7&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("\\W}cDG{cKuo>o,3%Y7&\\", 'x');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("x\\W}cDG{cKuo>o,3%Y7&\\x", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", (-2560), 'u');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("pD,JvzW%dJs`i'Z~-", "\">d$PRV.~G\"f");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("pD,JvzW%dJs`i'Z~-", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", 15, '\"');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((double[]) null, 'u', 32, 101);
      assertNull(string8);
      
      String string9 = StringUtils.swapCase("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertEquals("                                           oa\"{Y|hHD}]_.xJ                                           ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.left("\\W}cDG{cKuo>o,3%Y7&\\", 26);
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string10);
      assertNotNull(string10);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "pD,JvzW%dJs`i'Z~-", 15);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      String string11 = StringUtils.join(objectArray0, '\"');
      assertEquals(0, objectArray0.length);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      String string0 = StringUtils.strip("<K\"1@l]aGYiX>UOhX5;", ",d");
      assertEquals("<K\"1@l]aGYiX>UOhX5;", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "<K\"1@l]aGYiX>UOhX5;";
      charSequenceArray0[1] = (CharSequence) "<K\"1@l]aGYiX>UOhX5;";
      charSequenceArray0[2] = (CharSequence) "<K\"1@l]aGYiX>UOhX5;";
      charSequenceArray0[3] = (CharSequence) "<K\"1@l]aGYiX>UOhX5;";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ",d", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "'';i(=FaBbU=:G");
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.truncate("<K\"1@l]aGYiX>UOhX5;", 100, 2026);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("@DefaultLocale can only be used with language tag if language, country, and variant are not set", ",d");
      assertEquals(20, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("m|7");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], (-3128), 5243);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) ",d", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'c';
      int int3 = StringUtils.indexOfAny((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", charArray0);
      assertArrayEquals(new char[] {'j', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(10, int3);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase("<K\"1@l]aGYiX>UOhX5;", locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<K\"1@L]AGYIX>UOHX5;", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "The character ";
      stringArray0[1] = "The character ";
      stringArray0[2] = "The character ";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.replaceEach("The character ", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "The character ", (CharSequence) "The character ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfBlank("{}{}", "blank_blank_blank_2014");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}{}", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeStart("blank_blank_blank_2014", "{}{}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("blank_blank_blank_2014", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'Z', 90, 90);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEnd("_!do", "Wa3>%WB#ruO");
      assertFalse(string1.equals((Object)string0));
      assertEquals("_!do", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('%', 169);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_!do", charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replacePattern("7{hHO8]/[CH;&-", "J6&", "Locale must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("7{hHO8]/[CH;&-", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Wa3>%WB#ruO", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.abbreviate("RepeatFailedTestExtension", 13);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("RepeatFail...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("RepeatFail...");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("RepeatFail...", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x!mdmm";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.unwrap("\r", 'z');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "RepeatFailedTestExtension", (CharSequence) "RepeatFail...");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.StringUtils", (CharSequence) null, 1263);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\r", 'Q');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "wk=[6w";
      charSequenceArray0[1] = (CharSequence) "wk=[6w";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("wk=[6w", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|IJfQtn5~l";
      stringArray0[1] = "wk=[6w";
      stringArray0[2] = "|IJfQtn5~l";
      stringArray0[3] = "0L0L-1L-1934L0L-1L0L1065L-785]s9|%@[";
      stringArray0[4] = "|IJfQtn5~l";
      stringArray0[5] = "|IJfQtn5~l";
      stringArray0[6] = "wk=[6w";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz'-Ofu|V;=[SECdz", "pdn]YP\":9rvU?u\"U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz7\"'-Ofu|V;=[SECdz'-Ofu|V;=[SECdz", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase(" vs  vs ", "0L0L-1L-1934L0L-1L0L1065L-785]s9|%@[");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs  vs ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("0L0L-1L-1934L0L-1L0L1065L-785]s9|%@[");
      assertEquals(36, int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(2, enumSet1.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_FilteringMode1));
      assertNotNull(enumSet1);
      
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.copyOf(enumSet0);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode0));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      assertNotNull(enumSet2);
      
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = enumSet2.add(locale_FilteringMode3);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode3));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      
      boolean boolean2 = enumSet2.add(locale_FilteringMode0);
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode3));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet2.iterator();
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode3));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '&');
      assertSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet2.size());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("AUTOSELECT_FILTERING&REJECT_EXTENDED_RANGES", string3);
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode3));
      assertFalse(enumSet2.contains(locale_FilteringMode1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "ZVwJ>!3uPZM;3<4");
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "m", (CharSequence) null);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceOnce("%.y|bs&7*o<A=", "rbR&3K", "rbR&3K");
      assertEquals("%.y|bs&7*o<A=", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare((String) null, (String) null, false);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("m"));
      assertNotNull(treeSet0);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.center("YxKuse9-'y4[%%1", 2681);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.defaultIfBlank((String) null, "p{InCombiningDiacriticalMarks}+");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", 'm');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("mp{InCombiningDiacriticalMarks}+m", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents("%.y|bs&7*o<A=");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("%.y|bs&7*o<A=", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("blank_blank_blank_2014", 'j');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string8 = StringUtils.trimToEmpty("offset cannot be negative");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("offset cannot be negative", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 't');
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "p\\8Di\"";
      String string2 = StringUtils.stripAccents("p8Di\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p8Di\"", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "p8Di\"", (CharSequence) "4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", 64);
      assertEquals((-1), int0);
      
      String string3 = "j]Gx5j%MJiq";
      // Undeclared exception!
      StringUtils.rightPad("j]Gx5j%MJiq", 65536, "4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" ?;]-^kHk5", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785";
      char char0 = '!';
      String string1 = StringUtils.unwrap("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", '!');
      assertTrue(string1.equals((Object)string0));
      assertEquals("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", string1);
      assertNotNull(string1);
      
      int int0 = 123;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", (CharSequence) "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", 123);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", 2147483645);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("@De", 'O');
      assertEquals("@De", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("@De", "@De", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = StringUtils.repeat("org.junitpioneer.vintage.TimeoutExtension", 944);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "o", 944);
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("W}cDG{cKuo>o,3%Y7&", '\\');
      assertTrue(string1.equals((Object)string0));
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("W}cDG{cKuo>o,3%Y7&", "W}cDG{cKuo>o,3%Y7&");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W}cDG{cKuo>o,3%Y7&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("\\W}cDG{cKuo>o,3%Y7&\\", 'x');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("x\\W}cDG{cKuo>o,3%Y7&\\x", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", (-2560), 'u');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("pD,JvzW%dJs`i'Z~-", "\">d$PRV.~G\"f");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("pD,JvzW%dJs`i'Z~-", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", 15, '\"');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((double[]) null, 'u', 32, 101);
      assertNull(string8);
      
      String string9 = StringUtils.swapCase("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertEquals("                                           oa\"{Y|hHD}]_.xJ                                           ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.left("\\W}cDG{cKuo>o,3%Y7&\\", 26);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string1));
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string10);
      assertNotNull(string10);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wk=[6w";
      String string11 = StringUtils.replaceEachRepeatedly("                                           OA\"{y|Hhd}]_.Xj                                           ", (String[]) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string11);
      assertNotNull(string11);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "W}cDG{cKuo>o,3%Y7&", (CharSequence) "wk=[6w", 535);
      assertEquals(18, int0);
      
      String string12 = StringUtils.removeEnd("x\\W}cDG{cKuo>o,3%Y7&\\x", "");
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string11));
      assertTrue(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertEquals("x\\W}cDG{cKuo>o,3%Y7&\\x", string12);
      assertNotNull(string12);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(hashSet0.contains("Zbm$"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Object[]) null, 'h');
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Zbm$", "Zbm$");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
      
      String string4 = StringUtils.strip("Zbm$");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Zbm$", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("Zbm$", "offset cannot be negative", 407);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Zbm$", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) null, '3', 1090, 3);
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2470);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.substringBeforeLast((String) null, "offset cannot be negative");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '\"', 944, 133);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("XpKq&uv0s /sqdXYt'N;(Pw~)_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((long[]) null, 'B', 2147483617, 3178);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "XpKq&uv0s /sqdXYt'N;(Pw~)_");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents("0");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("0", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("1Y!");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.stripStart(", Length: ", "CV!!=zIA/=&^H&)");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(", Length: ", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.prependIfMissing(", Length: ", "\"Z", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\"Z, Length: ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("0");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("0", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Jp)vR", (CharSequence) "s /sqdXYt'N;(Pw~)_");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 100, "#B*iICQ>");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("#B*iICQ>#B*iICQ>#B*iICQ>#B*iICQ>#B*iICQ>#B*iICQ>#B*iICQ>Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.replacePattern("\n", "\n", "3b");
      assertEquals("3b", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "3b";
      charSequenceArray0[1] = (CharSequence) "3b";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "3b";
      charSequenceArray0[6] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "3b", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\n", "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.truncate("3b", 927, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", " ");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.toRootLowerCase("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@defaultlocale can only be used with language tag if language, country, and variant are not setbr,", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], 1, (-1111));
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) "");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart(".y|bs&7*o<A=", "%");
      assertFalse(string1.equals((Object)string0));
      assertEquals(".y|bs&7*o<A=", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("tPjrH~0f*", (-1639), "tPjrH~0f*");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("tPjrH~0f*", string2);
      assertNotNull(string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2689);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2689, charBuffer0.limit());
      assertEquals(2689, charBuffer0.capacity());
      assertEquals(2689, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2689, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "tPjrH~0f*", (CharSequence) "");
      assertEquals(9, int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(2689, charBuffer0.limit());
      assertEquals(2689, charBuffer0.capacity());
      assertEquals(2689, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2689, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat((String) null, "org.junitpioneer.jupiter.TempDirectory", (-1658));
      assertNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.TempDirectory", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(38, int1);
      
      String string4 = StringUtils.center("Wa3>%WB#ruO", 1421);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(".y|bs&7*o<A=", 'M', 'f');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(".y|bs&7*o<A=", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((long[]) null, 'M');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.center("\n", 1031);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultIfBlank("lpHyJl9<Y_I<Opkrv", "AD\"sn\"c}LFk|XI");
      assertFalse(string2.equals((Object)string1));
      assertEquals("lpHyJl9<Y_I<Opkrv", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("lpHyJl9<Y_I<Opkrv", 'Z');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ZlpHyJl9<Y_I<OpkrvZ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("#B*iICQ>'-Ofu|V;=[SECdz");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("#B*iICQ>'-Ofu|V;=[SECdz", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("AD\"sn\"c}LFk|XI", '|');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToEmpty("#B*iICQ>'-Ofu|V;=[SECdz");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("#B*iICQ>'-Ofu|V;=[SECdz", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,";
      charSequenceArray0[2] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) " vs ";
      charSequenceArray0[5] = (CharSequence) " vs ";
      charSequenceArray0[6] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,";
      charSequenceArray0[7] = (CharSequence) " vs ";
      charSequenceArray0[8] = (CharSequence) " vs ";
      String string1 = StringUtils.appendIfMissing("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", " vs ", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.LF;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = ']';
      charArray0[2] = '4';
      charArray0[3] = 'K';
      charArray0[4] = '4';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'U', ']', '4', 'K', '4'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", charSequenceArray0[0], 0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeEnd("\n", "9s>RMX1P2fI");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "S0/:%Q,O-}Q}6zn", "org.junitpioneer.jupiter.params.ByteRange");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("TQflO'omoq");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TQflO'omoq", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("-TyxM!|Y");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("-TyxM!|Y", string3);
      assertNotNull(string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("TQflO'omoq"));
      assertNotNull(treeSet0);
      
      String string4 = StringUtils.reverse("[_@q6GR/9XlMZ-zgd");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("dgz-ZMlX9/RG6q@_[", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TQflO'omoq";
      stringArray0[1] = "Failed to delete temp directory ";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern((String) null, "S0/:%Q,O-}Q}6zn");
      assertNull(string6);
      
      String string7 = StringUtils.appendIfMissing("The character ", "TQflO'omoq", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("The character TQflO'omoq", string7);
      assertNotNull(string7);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string8 = StringUtils.wrapIfMissing("The character ", "F.??XE5fj~ FPAHMK");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertEquals("F.??XE5fj~ FPAHMKThe character F.??XE5fj~ FPAHMK", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("F.??XE5fj~ FPAHMKThe character F.??XE5fj~ FPAHMK", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("|yJU\"9%^", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isBlank("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("m", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "E:1!1dX");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.truncate("#*^vd", 10);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#*^vd", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("Threshold must not be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Threshold must not be negative", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#*^vd";
      stringArray0[1] = "Threshold must not be negative";
      stringArray0[2] = "#*^vd";
      stringArray0[3] = "m";
      stringArray0[4] = "kapVO";
      stringArray0[5] = "Threshold must not be negative";
      stringArray0[6] = "m";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.rightPad("Tr q", 102, '9');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Tr q99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "m", "m");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isBlank("Threshold must not be negative");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "m", "m");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 0;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "c97)R=aFDHo", "[KqDgxnVBz6`0 ~==");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("c97)R=aFDHo", 32, "c97)R=aFDHo");
      assertFalse(string1.equals((Object)string0));
      assertEquals("c97)R=aFDc97)R=aFDHoc97)R=aFD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("c97)R=aFDc97)R=aFDHoc97)R=aFD");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c97)R=aFDc97)R=aFDHoc97)R=aFD", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("c97)R=aFDHoX+?8< /479cV1:p,&Z5", 32, "c97)R=aFDHo");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("\n", (String) null);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'L', (-2382), 1954);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("org.apache.commons.lang3.StringUtils0\"P~y-McNVIaw<Q;%", "r>E%Apt*H&4>J");
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils0\"P~y-McNVIaw<Q;%", string2);
      assertNotNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("Y^boL2ialu-=", charset0);
      assertEquals(12, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(byteArray0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils0\"P~y-McNVIaw<Q;%", (-464));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils0\"P~y-McNVIaw<Q;%", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("org.apache.commons.lang3.StringUtils0\"P~y-McNVIaw<Q;%");
      assertFalse(boolean0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string4 = StringUtils.join((List<?>) linkedList0, ":y>xB>n", 1267, 8);
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannot be negive", 'H');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~9*Q +~9*Q ", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("~9*Q +~9*Q ", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 12 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("Jp)vR");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.stripStart("Z", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertEquals("Z", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Z", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.prependIfMissing("G=lx", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("G=lx", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("Illegal range. Equal from and to will produce an empty range.");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Illegal range. Equal from and to will produce an empty range.", (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.leftPad("Illegal range. Equal from and to will produce an empty range.", 100, "FBAFX{(%=>");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("FBAFX{(%=>FBAFX{(%=>FBAFX{(%=>FBAFX{(%=Illegal range. Equal from and to will produce an empty range.", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.repeat("maxWith cannot be negative", 944);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot be negative", (CharSequence) string0, 944);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(hashSet0.contains("Zbm$"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(hashSet0.contains("/NeMu4@l2eOpB3p2fD; vs  vs "));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("UdmL6Bqa.34v#E", "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("H?zX^fI'2@#zH", "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("H?zX^fI'2@#zH", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "UdmL6Bqa.34v#E", (CharSequence) "H?zX^fI'2@#zH", 7);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.joinWith("D<aK9c+E1N5T}", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("D<aK9c+E1N5T}D<aK9c+E1N5T}D<aK9c+E1N5T}D<aK9c+E1N5T}D<aK9c+E1N5T}D<aK9c+E1N5T}", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Zbm$", (CharSequence) "", (-1423));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The Array must not be null";
      charSequenceArray0[1] = (CharSequence) "The Array must not be null";
      charSequenceArray0[2] = (CharSequence) "The Array must not be null";
      charSequenceArray0[3] = (CharSequence) "The Array must not be null";
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      charSequenceArray0[5] = (CharSequence) "The Array must not be null";
      charSequenceArray0[6] = (CharSequence) "The Array must not be null";
      charSequenceArray0[7] = (CharSequence) "The Array must not be null";
      charSequenceArray0[8] = (CharSequence) "The Array must not be null";
      String string0 = StringUtils.appendIfMissing("The Array must not be null", "The Array must not be null", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("The Array must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      stringArray0[2] = "The Array must not be null";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "The Array must not be null";
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = 'U';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'K', '4', ']', 'U'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The Array must not be null", (CharSequence) "\n", 3);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeEnd("9s>RMX1P2fI", "The Array must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9s>RMX1P2fI", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.substringBefore("):N", "):N");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "org.junitpioneer.jupiter.SystemPropertyExtension", "a,Z+<-pLV");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars((String) null, "", "");
      assertNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("/yM6-^v6$D{", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/yM6-^v6$D{", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension", 108);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '-');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      charSequenceArray0[1] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      String string2 = StringUtils.strip("S0/:%Q,O-}Q}6zn", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("S0/:%Q,O-}Q}6zn", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviateMiddle("{vLUYXk@GaX!3)lt:", "p{InCombiningDiacriticalMarks}+", 14);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("{vLUYXk@GaX!3)lt:", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("Yd");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("YD", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart((String) null, "{vLUYXk@GaX!3)lt:");
      assertNull(string5);
      
      String string6 = StringUtils.truncate("._tb9r4oy`qtNImRM", 14, 14);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("mRM", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("wO,fRYI}q*N}q");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("wO,fRYI}q*N}q", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.reverse("9s>RMX1P2fIThe Array must not be null9s>RMX1P2fIThe Array must not be null-m~b'wJ^0Bi7");
      assertEquals("7iB0^Jw'b~m-llun eb ton tsum yarrA ehTIf2P1XMR>s9llun eb ton tsum yarrA ehTIf2P1XMR>s9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("7iB0^Jw'b~m-llun eb ton tsum yarrA ehTI\f2P1XMR>s9llun eb ton tsum yarrA ehTI\f2P1XMR>s9");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("7iB0^Jw'b~m-llun eb ton tsum yarrA ehTI\f2P1XMR>s9llun eb ton tsum yarrA ehTI\f2P1XMR>s9", 49, 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("llun eb ton tsum yarrA ehTI\f2P1XMR>s9", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      String string0 = StringUtils.rotate(";", 27);
      assertEquals(";", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(";", ";", 53);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints(";");
      assertArrayEquals(new int[] {59}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ";", (CharSequence) "{}");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean1 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, '2');
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("EXTENDED_FILTERING2EXTENDED_FILTERING", string1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOf((CharSequence) "EXTENDED_FILTERING2EXTENDED_FILTERING", 53, 0);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("W<K|YIC+) eRm", 'M');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W<K|YIC+) eRm", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween(";", "", "@y^V2o<z<");
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviate("._tb9r4oy`qtNImRMm", 53);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("._tb9r4oy`qtNImRMm", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean1 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, 'a');
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("MAP_EXTENDED_RANGESaMAP_EXTENDED_RANGES", string0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 0;
      String string0 = StringUtils.wrapIfMissing("X+?8< /479cV1:p,&Z5", 'I');
      assertEquals("IX+?8< /479cV1:p,&Z5I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "X+?8< /479cV1:p,&Z5", "+7");
      assertEquals(1, int0);
      
      String string1 = StringUtils.leftPad("w0=6!", 1218, 'I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("<P T.[Don't clear/set the same property more than once._", "VVTEE@*#QH;Xv+.3et");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<P T.[Don't clear/set the same property more than once._", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      charArray0[3] = 'I';
      charArray0[4] = '\\';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "<P T.[Don't clear/set the same property more than once._", charArray0);
      assertArrayEquals(new char[] {'I', 'I', '=', 'I', '\\'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.defaultString("IX+?8< /479cV1:p,&Z5I", ".Atvs]K@4iIrv|V+y_");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IX+?8< /479cV1:p,&Z5I", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "X+?8< /479cV1:p,&Z5", charArray0);
      assertArrayEquals(new char[] {'I', 'I', '=', 'I', '\\'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.removeAll(".Atvs]K@4iIrv|V+y_", "]XG4}C\"L30M]XG4}C\"L30M");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("m0b");
      assertEquals("m0b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "m0b", 2688, (-999));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("#cul5%$SS");
      assertFalse(string1.equals((Object)string0));
      assertEquals("#cul5%$SS", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("#cul5%$SS", (-999), '!');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#cul5%$SS", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("m0b", supplier0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("m0b", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = '!';
      charArray0[2] = '&';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '!';
      charArray0[7] = '!';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "m0b", charArray0);
      assertArrayEquals(new char[] {' ', '!', '&', '!', '!', '!', '!', '!'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "#cul5%$SS", (CharSequence) "m0b", 108);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.stripToNull("#cul5%$SS");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("#cul5%$SS", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("#cul5%$SS");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("#cul5%$SS", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("#cul5%$SS", "#cul5%$SS");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '!';
      String string6 = StringUtils.join(intArray0, ')');
      assertArrayEquals(new int[] {33}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("33", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      intArray0[1] = 108;
      intArray0[2] = 108;
      int int0 = StringUtils.compareIgnoreCase(" vs ", " vs ", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid(" vs ", 108, 108);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "BJ}X]9[+|u&Ip");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("BJ}X]9[+|u&Ip");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny(" ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = StringUtils.getBytes("(ah0Dz&/", (Charset) null);
      assertArrayEquals(new byte[] {(byte)40, (byte)97, (byte)104, (byte)48, (byte)68, (byte)122, (byte)38, (byte)47}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean2 = StringUtils.isBlank(" ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.capitalize("m");
      assertEquals("M", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.strip("{xs", "{xs");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("{xs", "0C%VAyV");
      assertFalse(string1.equals((Object)string0));
      assertEquals("{xs", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@a";
      stringArray0[1] = "E>o43RdB,$JV";
      stringArray0[2] = "0C%VAyV";
      stringArray0[3] = "{xs";
      stringArray0[4] = "@a";
      stringArray0[5] = "{xs";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@a", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{xs", (CharSequence) "0C%VAyV", 98);
      assertEquals(8, int0);
      
      String string3 = StringUtils.right("@a", 5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("@a", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate("ExpectedException", "p{InCombiningDiacriticalMarks}+io", 98);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("ExpectedException", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+io", (CharSequence) " ");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.rightPad("S9<25i@Ku", 91, 'f');
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S9<25i@Ku", (CharSequence) "S9<25i@Ku");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.jupiter.params.Range", 91, 91);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\`)\\u}@zs9)p*X8";
      String string3 = StringUtils.replaceIgnoreCase("S9<25i@Ku", ")l?oj/Pv)7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("S9<25i@Ku", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S9<25i@Ku", (CharSequence) ")l?oj/Pv)7", 91);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty(")l?oj/Pv)7");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("S9<25i@Ku");
      assertArrayEquals(new int[] {83, 57, 60, 50, 53, 105, 64, 75, 117}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.stripEnd("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "S9<25i@Ku");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      charSequenceArray0[2] = (CharSequence) "S9<25i@Ku";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.truncate("", 2, 90);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.compare("", "S9<25i@Ku");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-9), int3);
      
      boolean boolean1 = StringUtils.containsWhitespace("S9<25i@Ku");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.toRootLowerCase("k]2");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("k]2", string6);
      assertNotNull(string6);
      
      int int4 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "k]2", (CharSequence) "", 46);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(3, int4);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, "|IJfQtn5~l");
      assertNull(string1);
      
      String string2 = "!mdm";
      String string3 = "|IJfQtn5~l|IJfQtn5~l";
      String string4 = StringUtils.removeEnd(".cwHRo[&6p4D/U", "|IJfQtn5~l|IJfQtn5~l");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(".cwHRo[&6p4D/U", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('z', 10);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("zzzzzzzzzz", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "|IJfQtn5~l");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.replacePattern("]XG4}C\"L30M]XG4}C\"L30M", (String) null, "-TyxM!|Y");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.ordinalIndexOf("|IJfQtn5~l", "|IJfQtn5~l", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("71nBwurn3ZT-L~+Y", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      stringArray0[1] = "wk=[V6w";
      stringArray0[2] = "wk=[V6w";
      stringArray0[3] = "m";
      stringArray0[4] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      String string0 = StringUtils.removeEnd("x!mdm", "m");
      assertEquals("x!md", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('z', 169);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", (CharSequence) "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replacePattern("", "]XG4}C\"L30M]XG4}C\"L30M", "m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf("m", "", 10);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.abbreviate("m", 10);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("m", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp(";");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(";", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "m", (char[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.appendIfMissing("x!md", "m", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("x!mdm", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int3 = StringUtils.getFuzzyDistance("x!mdm", "m", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("yMQpk458M;Q`_^%h[", " ", locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, (int) 'c');
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((float[]) null, 'c', (-1151), (-908));
      assertNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "|");
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("H4a$;Jk*lu/3q", "junit-pioneer");
      assertFalse(string3.equals((Object)string0));
      assertEquals("H4a$;Jk*lu/3q", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Wa3>%WB#ruO";
      stringArray0[1] = "H4a$;Jk*lu/3q";
      stringArray0[2] = null;
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Wa3>%WB#ruO";
      stringArray1[1] = "Wa3>%WB#ruO";
      stringArray1[2] = "Wa3>%WB#ruO";
      stringArray1[3] = "Wa3>%WB#ruO";
      stringArray1[4] = null;
      stringArray1[5] = "H4a$;Jk*lu/3q";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("junit-pioneer", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("wB");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("junit-pioneers:s8$-f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "CJ}FWlB;IjH+S");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("RepeatFailedTestExtension", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '-');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      charSequenceArray0[1] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      String string2 = StringUtils.strip("S0/:%Q,O-}Q}6zn", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertEquals("S0/:%Q,O-}Q}6zn", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      charSequenceArray0[3] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "S0/:%Q,O-}Q}6zn", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[1], "");
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.truncate((String) null, 2026, 2879);
      assertNull(string3);
      
      int int0 = StringUtils.compare((String) null, "m|7");
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.toRootLowerCase("irT{*K_?9oPlIt");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("irt{*k_?9oplit", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], 2879, 49);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "S0/:%Q,O-}Q}6zn");
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      int int3 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 217, 0);
      assertEquals("X+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "[KqDgxnVBz6`0 ~==", "<P T.[Don't clear/set the same property more than once.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center((String) null, (-2992), (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("[KqDgxnVBz6`0 ~==");
      assertFalse(string2.equals((Object)string0));
      assertEquals("[KqDgxnVBz6`0 ~==", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Rp]=z]Q|',[$_nc", "X+?8< /479cV1:p,&Z5", " vs ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("HOW8E", (-715), "c!");
      assertEquals("HOW8E", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "HOW8E");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("Minimum abbreviation width is %d", (String) null, 1219);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "c!");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(32, int2);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "_+d^A", charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'u');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("bqx81,J4!]e4f", 'u');
      assertFalse(string3.equals((Object)string0));
      assertEquals("ubqx81,J4!]e4fu", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";mnLOSa?F:pwXL\"K*", 'e');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.DefaultLocaleExtension", 'u');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("uorg.junitpioneer.jupiter.DefaultLocaleExtensionu", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("3b9EZ[d0}!M", supplier0);
      assertEquals("3b9EZ[d0}!M", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("3b9EZ[d0}!M", "3b9EZ[d0}!M");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3b9EZ[d0}!M";
      stringArray0[1] = "3b9EZ[d0}!M";
      stringArray0[2] = "3b9EZ[d0}!M";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "3b9EZ[d0}!M");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeAll("ywGC8", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ywGC8", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.repeat('q', (-2723));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("P2!:&ovV^*!J%>", "P2!:&ovV^*!J%>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P2!:&ovV^*!J%>";
      String string2 = StringUtils.join((short[]) null, 'R', 33, 33);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)2306;
      longArray0[1] = (long) 'R';
      String string3 = StringUtils.join(longArray0, 'R');
      assertArrayEquals(new long[] {2306L, 82L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2306R82", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('R', (-499));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("dd3`F@C1={O", supplier0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("dd3`F@C1={O", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)47;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.replaceIgnoreCase("Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 32);
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ul]0PeY|Bt,*B";
      stringArray0[1] = "io";
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("", '(');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.swapCase("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertEquals("oBJECT VARARGS MUST NOT BE NULL", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.chop("#\n");
      assertEquals("#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#\n", (CharSequence) "#");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.TempDirectory", "Ul]0PeY|Bt,*B", "io", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("yrotceriDpmeT.retipuj.reenoiptinuj.gro", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.TempDirectory";
      stringArray0[1] = "org.junitpioneer.jupiter.TempDirectory";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("D `+,", "n5Ma");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("D `+,", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "yrotceriDpmeT.retipuj.reenoiptinuj.gro", (CharSequence) "yrotceriDpmeT.retipuj.reenoiptinuj.gro");
      assertEquals(0, int0);
      
      String string5 = StringUtils.lowerCase("io");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("io", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'x';
      String string0 = StringUtils.join(charArray0, 'm');
      assertArrayEquals(new char[] {'8', 'P', 'T', 'T', 'x'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("8mPmTmTmx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("8mPmTmTmx", '4', 'T');
      assertTrue(string1.equals((Object)string0));
      assertEquals("8mPmTmTmx", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "8mPmTmTmx";
      String string2 = StringUtils.trim("8mPmTmTmx");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("8mPmTmTmx", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[2] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[3] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[4] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[5] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[6] = (CharSequence) "8mPmTmTmx";
      charSequenceArray0[7] = (CharSequence) "8mPmTmTmx";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isBlank("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceFirst("G=lx", "m", "m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G=lx", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '_');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[1], charSequenceArray0[0], 713);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap("", "G=lx");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("+");
      assertArrayEquals(new int[] {43}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.replaceEach("N", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("N", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("G=lx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center((String) null, 1260, "Search and Replace array lengths don't match: ");
      assertNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '-');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("}h<W5W9z_F)*#'>e", 64, '-');
      assertFalse(string2.equals((Object)string0));
      assertEquals("------------------------}h<W5W9z_F)*#'>e------------------------", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, "}h<W5W9z_F)*#'>e", (CharSequence[]) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("S0/:%Q,O-}Q}6zn", (String) null, 69);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("9{/dVk66");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("9{/dVk66");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.stripAccents("Threshold must not be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "9{/dVk66", (CharSequence) "S0/:%Q,O-}Q}6zn", 43);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.rightPad((String) null, 64, "maxWith cannot be negative");
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("oWJ7)oSy?z9L`@U6", "S0/:%Q,O-}Q}6zn");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("oWJ7)oSy?z9L`@U", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultString((String) null, "^Y~G)_");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("^Y~G)_", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isEmpty("^Y~G)_");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string8 = StringUtils.replaceFirst("`7j`ga6~wXV=p=IV4z", "S0/:%Q,O-}Q}6zn", "oWJ7)oSy?z9L`@U6");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("`7j`ga6~wXV=p=IV4z", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("gP~nb?vj8o]", 'L');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LgP~nb?vj8o]L", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "gP~nb?vj8o]";
      charSequenceArray0[1] = (CharSequence) "3b";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@43f1692b3b\n";
      charSequenceArray0[3] = (CharSequence) "gP~nb?vj8o]";
      charSequenceArray0[4] = (CharSequence) "3b";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string3 = StringUtils.stripToNull("z.} #|~\"B)4R{ozZ%");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("z.} #|~\"B)4R{ozZ%", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string4 = StringUtils.substringBefore(" ", "_");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank(")BkA:rz)}{D+|poi[%", supplier0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(")BkA:rz)}{D+|poi[%", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      charArray0[6] = 'L';
      String string6 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("LLLLLLL", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'q', 759, 1821);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 759
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.overlay("jHdWPrH/ChN4Y", "jHdWPrH/ChN4Y", 57, 57);
      assertEquals("jHdWPrH/ChN4YjHdWPrH/ChN4Y", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("!;'!Qze}56f\"0 O", "jHdWPrH/ChN4YjHdWPrH/ChN4Y", 57, 1431);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!;'!Qze}56f\"0 OjHdWPrH/ChN4YjHdWPrH/ChN4Y", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("jHdWPrH/ChN4YjHdWPrH/ChN4Y", "!;'!Qze}56f\"0 O");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("!;'!Qze}56f\"0 O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("!;'!Qze}56f\"0 OjHdWPrH/ChN4YjHdWPrH/ChN4Y");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "!;'!Qze}56f\"0 OjHdWPrH/ChN4YjHdWPrH/ChN4Y", (CharSequence) "jHdWPrH/ChN4Y");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "jHdWPrH/ChN4YjHdWPrH/ChN4Y";
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string2 = StringUtils.stripToNull("_");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_", string2);
      assertNotNull(string2);
      
      boolean boolean5 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string3 = StringUtils.substringBefore("Wy8lJt-;#qgr", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Wy8lJt-;#qgr", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank(">/;", supplier0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(">/;", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("_");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("_", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, ':', 57, 1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.CharSequenceUtils";
      stringArray0[1] = "org.apache.commons.lang3.CharSequenceUtils";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.unwrap("Search and Replace array lengths don't match: ", 'c');
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String string1 = StringUtils.stripToNull("_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      boolean boolean5 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      
      String string2 = StringUtils.substringBefore(";9{r5p", " vs ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";9{r5p", string2);
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, (int) 'c');
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", " ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("~-,qKm-Lzq~6[gIDB_");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~-,qKm-Lzq~6[gIDB_", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[1], (CharSequence) "~-,qKm-Lzq~6[gIDB_");
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.leftPad("~-,qKm-Lzq~6[gIDB_", 102, " ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                                                    ~-,qKm-Lzq~6[gIDB_", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.splitByCharacterType("|IJfQtn5~l|IJfQtn5~lNd$");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(19, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("wk=[V6wm", 'W');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Wwk=[V6wmW", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("=Y(>J79VOE|om).n[3", (-276), 321);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=Y(>J79VOE|om).n[3", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-162), 2147483645);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.remove((String) null, '=');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "2x]", 6, 3155);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.strip("{xs", "{xs");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{xs", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "@a", "@a");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.truncate("0C%VAyV", 47, 47);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(", Length: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviate("", (String) null, Integer.MAX_VALUE, 2637);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string4 = StringUtils.upperCase("@a");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@A", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 27, "io");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", 8, 27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[0] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      boolean boolean0 = StringUtils.containsNone((CharSequence) " vs ", charArray0);
      assertArrayEquals(new char[] {'', '', '\u0000', '', ''}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.center(" vs ", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" vs ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("vs", 'r');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("rvsr", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("%QVD^KEd!mnK}4wt");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("%QVD^KEd!mnK}4wt", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%QVD^KEd!mnK}4wt", 'r');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("vs", "rvsr");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.chop("vs");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("v", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAllUpperCase(" vs ");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      String string0 = StringUtils.removeEnd("]XG4}C\"L30M", "]XG4}C\"L30M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray1 = new Object[22];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "";
      objectArray1[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "";
      objectArray1[4] = (Object) " ";
      objectArray1[5] = (Object) " ";
      objectArray1[6] = (Object) "]XG4}C\"L30M";
      String string3 = StringUtils.joinWith("The Array must not be null", objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(22, objectArray1.length);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("8", "]XG4}C\"L30M", 2201);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("8", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The Array must not be nullThe Array must not be nulljava.lang.Object@71c840e0The Array must not be nullThe Array must not be null The Array must not be null The Array must not be null]XG4}C\"L30MThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be nullThe Array must not be null", (CharSequence) "8");
      assertEquals(72, int0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "S0/:%Q,O-}Q}6zn", 83);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("S0/:%Q,O-}Q}6zn", "S0/:%Q,O-}Q}6zn");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '-');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      int int0 = 83;
      boolean boolean1 = StringUtils.contains((CharSequence) "S0/:%Q,O-}Q}6zn", 83);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceFirst("S0/:%Q,O-}Q}6zn", "F.??XE5fj~ FPAHMK", (String) null);
      assertTrue(string3.equals((Object)string0));
      assertEquals("S0/:%Q,O-}Q}6zn", string3);
      assertNotNull(string3);
      
      String string4 = "rtVOF";
      // Undeclared exception!
      try { 
        Charset.forName("org.junitpioneer.jupiter.params.DoubleRange");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.params.DoubleRange
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 126);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'N', 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5737;
      String string2 = StringUtils.uncapitalize("6r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6r", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) "6r";
      String string3 = StringUtils.joinWith("6r", objectArray0);
      assertEquals(14, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6r6r6r6r6r6r6r6r6r6r6r6r6r6r", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "6r");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "6r6r6r6r6r6r6r6r6r6r6r6r6r6r";
      charSequenceArray0[1] = (CharSequence) " ";
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      charArray0[7] = '7';
      charArray0[8] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'7', 'c', 'c', '7', '7', 'c', 'c', '7', '7'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("_<P T.[Don't clear/set the same property more than once.");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.join(intArray0, '/');
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("102", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "6r", (CharSequence) "6r");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string5 = StringUtils.truncate("_<P T.[Don't clear/set the same property more than once.", 0, 5737);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("_<P T.[Don't clear/set the same property more than once.", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.replaceChars("s /sqDdXYt'N;(Pw~)_", "Minimum abbreviation width is %d", (String) null);
      assertEquals("/qDXY'N;(P~)_", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("/qDXY'N;(P~)_", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals((-37), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("_"));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.substringBetween("wk=[V6wm", "", "wk=[V6wm");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("", "]XG4}C\"L30M]XG4}C\"L30M");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithAny(" ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.leftPad("", (-1298), '^');
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeStart("D<??A", "|X$:5kCu");
      assertEquals("D<??A", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'f';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "9EZ[d0}!M", charArray0);
      assertArrayEquals(new char[] {'[', 'f'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.center((String) null, 0);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("D<??A");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfBlank("D<??A", "D<??A");
      assertTrue(string4.equals((Object)string2));
      assertEquals("D<??A", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, '[');
      assertNull(string5);
      
      String string6 = StringUtils.stripAccents("tYG");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("tYG", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '9');
      assertNull(stringArray0);
      
      String string7 = StringUtils.trimToEmpty("D<??A");
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("D<??A", string7);
      assertNotNull(string7);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(object0));
      assertNotNull(stack0);
      
      String string8 = StringUtils.join((List<?>) stack0, '?', 0, 0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertFalse(stack0.contains(0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.difference("org.junitpioneer.jupiter.params.DoubleRange", "org.apache.commons.lang3.StringUtils");
      assertEquals("apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate("ExpectedExceptionm", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ExpectedExceptionm", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "=M4[|";
      int int0 = 102;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=M4[|", "(`XlJo#?~^>pq<cf#", 102);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = ".g]_;4bII[D";
      String string4 = StringUtils.replaceFirst("Q_tVem5 fmg0[dg,l7", "3b", "`J~y9% _;C{s/!fRld");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q_tVem5 fmg0[dg,l7", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllUpperCase(".g]_;4bII[D");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeFirst("\n", "3b");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\n", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumericSpace("3b");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = "7.f%AW4<x";
      String string7 = StringUtils.stripAccents("0yeA_Bv$~0'[E8.M;");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("0yeA_Bv$~0'[E8.M;", string7);
      assertNotNull(string7);
      
      int int1 = 2410;
      String string8 = StringUtils.center("\n", 2410);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2410);
      assertEquals(2410, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2410, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2410, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2410, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2410, charBuffer0.capacity());
      assertEquals(2410, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2410, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(2410, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(2410, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2410, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      
      // Undeclared exception!
      try { 
        charBuffer0.reset();
        fail("Expecting exception: InvalidMarkException");
      
      } catch(InvalidMarkException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("0XArb:9xSE:PEsXJs");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEnd((String) null, "0XArb:9xSE:PEsXJs");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Qg\".sJC");
      assertEquals("Qg\".sJC", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Qg\".sJC", "Qg\".sJC");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("Don't clear/set the same property more than once.", "yxM!|Y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Qg\".sJC");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split((String) null, 'y');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.center("]XG4}C\"L30M", 2201, "Strings must not be null");
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars(string0, "Zbm$", "junit-pioneer");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("v");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("v", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P\"6(UBUjV8ak+,=", (CharSequence) "P\"6(UBUjV8ak+,=", 33);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("%ST_", (-2376), 'W');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%ST_", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~9*Q ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("=~?4ei", "=~?4ei");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha("Don't clear/set the same property more than once.");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("", (-8), 'M');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("w0=6!", 17);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      assertNotNull(vector0);
      
      String string6 = StringUtils.joinWith("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 160, 32);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("\n", "");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("6{Bjwyz#4|B:4*mQ)");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6{bjwyz#4|b:4*mq)", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "6{Bjwyz#4|B:4*mQ)", (CharSequence) "\n", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.repeat("bio", 76);
      assertEquals("biobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobio", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "biobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobio", (CharSequence) "biobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobiobio");
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, '>', '>');
      assertNull(string1);
      
      String string2 = StringUtils.join((long[]) null, 'Q');
      assertNull(string2);
      
      String string3 = StringUtils.rotate("", 83);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("3xvwk=[6w", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      String string1 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MIN_VALUE;
      char char0 = '<';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '<', 1224, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("DebfaultLocale", "\"HhmZ)T6(;o(B}AH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\"HhmZ)T6(;o(B}AH");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[21];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "s /sqdXYt'N;(Pw~)_";
      charSequenceArray0[3] = (CharSequence) "\"HhmZ)T6(;o(B}AH";
      charSequenceArray0[4] = (CharSequence) "DebfaultLocale";
      charSequenceArray0[5] = (CharSequence) "DebfaultLocale";
      String string1 = StringUtils.chop("_3^{skKe");
      assertFalse(string1.equals((Object)string0));
      assertEquals("_3^{skK", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "_3^{skK";
      charSequenceArray0[7] = (CharSequence) "\"HhmZ)T6(;o(B}AH";
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(21, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "_3^{skKe";
      charSequenceArray1[1] = (CharSequence) "\"HhmZ)T6(;o(B}AH";
      String string3 = StringUtils.substring("h|", (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|", string3);
      assertNotNull(string3);
      
      charSequenceArray1[2] = (CharSequence) "|";
      charSequenceArray1[3] = (CharSequence) "\"HhmZ)T6(;o(B}AH";
      charSequenceArray1[4] = (CharSequence) "DebfaultLocale";
      int int0 = StringUtils.lastIndexOfAny("_3^{skK", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.right("\"HhmZ)T6(;o(B}AH", (-1509));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween((String) null, "", "The Array must not be null");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(" ", (String) null);
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.strip("MFS{\"`Md9W[fW&l9", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertEquals("MFS{\"`Md9W[fW&l9", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "MFS{\"`Md9W[fW&l9", (CharSequence) null, 2332);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negative", " ", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("", "Don't clear/set the same property more than once.");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.leftPad("", 14, ' ');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("              ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.split("Td\"GJV3!?$u6.", 'e');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'Z');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'F');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("c)yd.Fs  ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c)yd.Fs  ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", 'S');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringAfter("", "");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("n'<%4?0*AKh{`ha");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("1z$m{T`iKJw]cRg");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.abbreviate("1)k[", "...", 1582, 1582);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1)k[", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(39, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.upperCase("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray2, "%gwuFF9MSx!Ad+mW", 102, 0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(39, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("%gwuFF9MSx!Ad+mW");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("%gwuFF9MSx!Ad+mW", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isMixedCase("%gwuFF9MSx!Ad+mW");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-62);
      String string6 = StringUtils.join(byteArray0, 'k');
      assertArrayEquals(new byte[] {(byte)26, (byte) (-19), (byte)32, (byte)104, (byte) (-99), (byte)16, (byte)1, (byte) (-62)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("26k-19k32k104k-99k16k1k-62", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 0;
      String string0 = "X+?8< /479cV1:p,&Z5";
      String string1 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string1);
      assertNotNull(string1);
      
      int int0 = 9;
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 32, 32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.joinWith("[KqDgxnVBz6`0 ~==", objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", "}5';5TE.q(CjD,@AC[");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("}5';5TE.q(CjD,@AC[", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "#\n#\n#\n#\n", (-890), 322);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'c');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.center((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", '{', '{');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'c');
      assertNull(string5);
      
      boolean boolean4 = StringUtils.isEmpty("Y,xIE&H/UJ");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-49);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-49);
      floatArray0[3] = (float) '%';
      floatArray0[4] = (float) 415;
      floatArray0[5] = (float) '{';
      floatArray0[6] = (float) '%';
      floatArray0[7] = (float) '%';
      floatArray0[8] = (float) (-49);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'c', 415, 4375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 415
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.remove("m", 'k');
      assertEquals("m", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("M", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("M", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("M");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("M", "M");
      assertNull(string2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1499.141F;
      floatArray0[1] = (float) 'u';
      String string3 = StringUtils.join(floatArray0, 'k');
      assertArrayEquals(new float[] {1499.141F, 117.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1499.141k117.0", string3);
      assertNotNull(string3);
      
      String string4 = "\\u";
      String string5 = StringUtils.replace((String) null, string4, "Locale must not be null", 1940);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNull(string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("M", "m");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-762.91422);
      doubleArray0[2] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {0.7, (-762.91422), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("0.7X-762.91422X0.0X0.0X0.0X0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("0.7X-762.91422X0.0X0.0X0.0X0.0", 4, "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.7X-762.91422X0.0X0.0X0.0X0.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Array and element cannot both be null", '_');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_Array and element cannot both be null_", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_Array and element cannot both be null_", "io");
      assertEquals(23, int0);
      
      String string3 = StringUtils.leftPad("VVTEE@*#QH;Xv+.3et", 3, 'm');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("VVTEE@*#QH;Xv+.3et", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("", "\r");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.length("VVTEE@*#QH;Xv+.3et");
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      String string5 = StringUtils.normalizeSpace("\r");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertNotNull(enumSet1);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'X');
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals("REJECT_EXTENDED_RANGES", string6);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, 'B');
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("MAP_EXTENDED_RANGES", string0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.remove("offset cannot be negative", '!');
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      String string1 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "offset cannot be negative", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("offset cannot be negative", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(")tx{4)qHp^", 0, '!');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")tx{4)qHp^", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '!';
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, ':');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("offset cannot be negative", (-1939));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("be negativeoffset cannot ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, '>', '>');
      assertNull(string1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 'Q';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) 0;
      String string2 = StringUtils.join(doubleArray0, '\'', 2673, 32);
      assertArrayEquals(new double[] {62.0, 0.0, 81.0, 72.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("", "", 2673, (-1294));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      String string0 = StringUtils.rotate(";", 27);
      assertEquals(";", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) ";", (CharSequence) ";", 53);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.swapCase("XpKq&uv0.H9%");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("xPkQ&UV0.h9%", string2);
      assertNotNull(string2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ";");
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      String string3 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 0, "=}L(pXJ2#y@>Zs74");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("1)k[", "org.junitpioneer.vintage.ExpectedExceptionExtension", 867, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 52
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Zs;0m@7-b/* |1+TSGd", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Zs;0m@7-b/* |1+TSGd");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.leftPad((String) null, (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '>';
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {62.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("n", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertEquals("n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("vIhxy");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vIhxy", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "n";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      String string3 = StringUtils.join(objectArray0, "org.apache.commons.lang3.StringUtils");
      assertEquals(3, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("vIhxy", objectArray0);
      assertEquals(3, objectArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("......", 777);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("......", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad((String) null, 64, "G=lx");
      assertNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "vIhxy", (-930));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '>';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "vIhxy", charArray0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '>', '>', '>'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: 0");
      assertEquals(",Length:0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ",Length:0", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Zbm$", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'v';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Zbm$", charArray0);
      assertArrayEquals(new char[] {'7', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.center("XpKq&uv0.H9%", (-430));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("XpKq&uv0.H9%", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfBlank("*+-1A", "XpKq&uv0.H9%");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("*+-1A", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("Array element ", '>');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(">Array element >", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("io");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("io", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'D');
      assertNull(stringArray1);
      
      String string7 = StringUtils.trimToEmpty("");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join(charArray0, 'D', 1233, 1035);
      assertArrayEquals(new char[] {'7', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.removePattern("`J~y9% _;C{s/!fRld", "XpKq&uv0.H9%");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertEquals("`J~y9% _;C{s/!fRld", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '<');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(90, comparator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(90));
      assertNotNull(priorityQueue0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(90));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "&&|4L'%t&13&rO-+");
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertFalse(priorityQueue0.contains("&&|4L'%t&13&rO-+"));
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) supplier0;
      objectArray0[1] = (Object) "Wa3>%WB#ruO";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "&&|4L'%t&13&rO-+";
      String string1 = StringUtils.joinWith("@/zQ `77(fgOQ9|vl", objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("@/zQ `77(fgOQ9|vl");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@/zQ `77(fgOQ9|vl", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("@/zQ `77(fgOQ9|vl", "Mock for Supplier, hashCode: 167675210@/zQ `77(fgOQ9|vlWa3>%WB#ruO@/zQ `77(fgOQ9|vljava.lang.Object@3ba68662@/zQ `77(fgOQ9|vljava.lang.Object@3a3610fe@/zQ `77(fgOQ9|vl&&|4L'%t&13&rO-+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim("<P T.[Don't clear/set the same property more than once.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<P T.[Don't clear/set the same property more than once.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("Locale must not be null", 'L');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("LLocale must not be nullL", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize("]pX0");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("]pX0", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Wa3>%WB#ruO", (CharSequence) "", 108);
      assertEquals(11, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-49));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("<P T.[Don't clear/set the same property more than once."));
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator1 = arrayDeque0.descendingIterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(arrayDeque0.contains("<P T.[Don't clear/set the same property more than once."));
      assertNotNull(iterator1);
      
      String string6 = StringUtils.join(iterator1, 'L');
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertFalse(arrayDeque0.contains("<P T.[Don't clear/set the same property more than once."));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("-TyxM!|Y", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "-TyxM!|Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeStart("Don't clear/set the same property more than once.", "-TyxM!|Y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~9*Q ", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'H');
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("~9*Q +~9*Q ", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "~9*Q +~9*Q ", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(11, int2);
      
      String string5 = StringUtils.stripEnd((String) null, "~)!cp@KCbpdf]");
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Don't clear/set the same property more than once.");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string6 = StringUtils.center((String) null, 35, "4W=l\"efUR>g-|3R");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("h]9m|%~%Lv? v");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.rightPad("*fNnx", 2419);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*fNnx");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*fNnx", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("*fNnx", "(|");
      assertEquals(2, int0);
      
      boolean boolean1 = StringUtils.isNumeric(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) string0, (CharSequence) "(|");
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.wrap("Y,xIE&H/UJ", "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negativeY,xIE&H/UJoffset cannot be negative", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) string0, ", Length: 0");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "Threshold must not be negative", (CharSequence) ", Length: 0");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string3 = StringUtils.overlay("Array and element cannot both be null", "offset cannot be negative", (-2274), 1350);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("x!mdmm", "`J~y9% _;C{s/!fRld", 5);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.defaultString("x!mdmm", "-");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("x!mdmm", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.equals((CharSequence) "Threshold must not be negative", (CharSequence) "x!mdmm");
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean7 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7);
      
      int int2 = StringUtils.countMatches((CharSequence) "`J~y9% _;C{s/!fRld", 'E');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.mid("bfW-gT", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1Q;4i7Vv1ANPP3", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Br,", (CharSequence) "E");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 176, "");
      assertEquals("                                                                                                                                                                                ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-371));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("offset cannot be negative", supplier0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("offset cannot be negative", "offset cannot be negative");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("offset cannot be negative", 55, 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("jatM]P}P?tpZ|0K1");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jatM]P}P?tpZ|0K1", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("(r>e:", "(r>e:");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(r>e:", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumeric("(r>e:");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumeric("(r>e:");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'U');
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("Wa3>%WB#ruO", (-1173), 13);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("6rZwaXxTE&]om2");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6rZwaXxTE&]om2", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("6rZwaXxTE&]om2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("6rZwaXxTE&]om2", ">-hY?-j1|f_2 _>-hY?");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("6rZwaXxTE&]om2", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumeric("Wa3>%WB#ruO");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWith(charSequenceArray0[1], "6rZwaXxTE&]om2");
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumeric("6rZwaXxTE&]om2");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string4 = StringUtils.join((float[]) null, '?');
      assertNull(string4);
      
      String string5 = StringUtils.reverseDelimited("6rZwaXxTE&]om2", '2');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("6rZwaXxTE&]om", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "6rZwaXxTE&]om", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("<<K<<K", '&');
      assertEquals("&<<K<<K&", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("&<<K<<K&", '&');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 't');
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      assertFalse(string1.equals((Object)string0));
      assertEquals("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("4l'o<>");
      assertEquals(6, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = "\"_#zYEQg]K+&/d+*Gl";
      String string3 = StringUtils.replaceChars("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", string3);
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string4 = StringUtils.prependIfMissingIgnoreCase("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", "4l'o<>", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.replaceChars((String) null, "\"_#zYEQg]K+&/d+*Gl", ":a");
      assertNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string7 = "n2";
      String string8 = StringUtils.repeat("=[B+", "n2", 1872);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string8, "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&");
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.rightPad("S9<25i@Ku", 91, 'f');
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S9<25i@Ku", (CharSequence) "S9<25i@Ku");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.jupiter.params.Range", 91, 91);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\`)\\u}@zs9)p*X8";
      String string3 = StringUtils.replaceIgnoreCase("S9<25i@Ku", ")l?oj/Pv)7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S9<25i@Ku", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S9<25i@Ku", (CharSequence) ")l?oj/Pv)7", 91);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty(")l?oj/Pv)7");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("S9<25i@Ku");
      assertArrayEquals(new int[] {83, 57, 60, 50, 53, 105, 64, 75, 117}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.stripEnd("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "S9<25i@Ku");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      charSequenceArray0[2] = (CharSequence) "S9<25i@Ku";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.join((float[]) null, '', 0, 90);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("S9<25i@Ku", 'f');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.ordinalIndexOf("org.junitpioneer.jupiter.params.Range", ")l?oj/Pv)7", (-454));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.wrap("dUNTKvTDkFl", "8;");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("8;dUNTKvTDkFl8;", string6);
      assertNotNull(string6);
      
      int[] intArray1 = StringUtils.toCodePoints("dUNTKvTDkFl");
      assertNotSame(intArray1, intArray0);
      assertEquals(11, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String string7 = StringUtils.replaceEach("Minimum abbreviation width with offset is %d", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.center("@QBR?Ql4v7:%Cg", 91, "Illegal range. The step cannot be zero.");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("Illegal range. The step cannot be zero@QBR?Ql4v7:%CgIllegal range. The step cannot be zero.", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~9*Q ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Don't clear/set the same property more than once.", "", (-2728));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.split("", "<5MD=O8wb@@'bvQ");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.normalizeSpace("8");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("8", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "8", 727, 9);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("&:");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviateMiddle("=A-.WhPXFM1U_vq$}.", "yHc", 12);
      assertEquals("=A-.WyHcq$}.", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("m]4M`>j@d", "[K", 203);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("[K");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("m]4M`>j@d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripAccents("p(,v");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p(,v", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("Locale must not be null", "\"{F");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"{F", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("[K", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\"{F", (CharSequence) "m]4M`>j@d", 203);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad("[K", 23, "w");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[Kwwwwwwwwwwwwwwwwwwwww", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "fQ2", (CharSequence) "fQ2");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Zbm$", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, "oT<,06", 102, (-975));
      assertEquals(1, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("nyIn\"aGp=Z#q]`b");
      assertFalse(string1.equals((Object)string0));
      assertEquals("nyIn\"aGp=Z#q]`b", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "nyIn\"aGp=Z#q]`b");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripAccents("Q*6vnwT[aQO^9");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Q*6vnwT[aQO^9", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("+!?|6*h4|d0YuZ}", "NJc0S37d,o");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("+!?|6*h4|d0YuZ}", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "nyIn\"aGp=Z#q]`b");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.stripAccents("zd");
      assertEquals("zd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "zd");
      assertTrue(string1.equals((Object)string0));
      assertEquals("zd", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String string2 = StringUtils.join((int[]) null, '\"');
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("zd");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("zd", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.center("<5MD=O8wb@@'bvQ", 1041, "offset cannot be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("`tZ=W", (-3535), (-8));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`tZ=W", string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.lowerCase("wuv96MK0B]8SR(/q6\"");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("wuv96mk0b]8sr(/q6\"", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "wuv96MK0B]8SR(/q6\"", 53);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'I');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[3] = (-1934L);
      longArray0[4] = 0L;
      String string0 = StringUtils.removeIgnoreCase(".H9%", ".H9%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" VS ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wj\":^W$qB)Tl<]]", "1ct#`fFBlMRqU");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring("", 32, 32);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "", "1ct#`fFBlMRqU");
      assertNull(stringArray1);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("1ct#`fFBlMRqU", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 'O');
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tZ=W", 548, "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", "offset cannot be negative");
      assertEquals(0.68, double0, 0.01);
      
      String string1 = StringUtils.removeStartIgnoreCase("`tZ=W", "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`tZ=W", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "offset cannot be negative";
      objectArray0[1] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      objectArray0[2] = (Object) "`tZ=W";
      objectArray0[3] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      String string2 = StringUtils.join(objectArray0, 'w');
      assertEquals(5, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("`tZ=W", "offset cannot be negative");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`tZ=W", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("offset cannot be negative", supplier0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.join(objectArray0, '3', 1090, (-1));
      assertEquals(5, objectArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.truncate("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", 548);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "`tZ=W", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(boolean0);
      
      String string8 = StringUtils.reverseDelimited((String) null, '3');
      assertNull(string8);
      
      int int1 = StringUtils.compareIgnoreCase("Uog2jA6mc", "offset cannot be negative", false);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 548;
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = (double) 1090;
      doubleArray0[3] = (double) 548;
      doubleArray0[4] = (double) 548;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) '3';
      doubleArray0[7] = (double) (-1);
      String string9 = StringUtils.join(doubleArray0, 'w');
      assertArrayEquals(new double[] {548.0, 51.0, 1090.0, 548.0, 548.0, (-1.0), 51.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertEquals("548.0w51.0w1090.0w548.0w548.0w-1.0w51.0w-1.0", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org", '9');
      assertEquals("9org9", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9org9", '9');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("Q]@= R_0y\"U^$,~", 64);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q]@= R_0y\"U^$,~", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ", 1959);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertNotNull(arrayDeque1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String string1 = StringUtils.mid(" ", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(stream0);
      
      String string2 = StringUtils.repeat("", 4);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("", '^');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("<P T.[", 1959);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, '2');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("W<K|YIC+) eRm", 'M');
      assertFalse(string2.equals((Object)string0));
      assertEquals("W<K|YIC+) eRm", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 32);
      assertNull(string3);
      
      int int1 = StringUtils.compare("W<K|YIC+) eRm", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, "W<K|YIC+) eRm");
      assertEquals(0, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      int int0 = StringUtils.compare("W`3J)L055Q[", (String) null);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("du}({4)\"");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("du}({4)\"", stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 13, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Don't cl");
      assertEquals("don't cl", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("y{c`Jk#(4;DKY");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((char[]) null, 'y', (-181), (-181));
      assertNull(string1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-181);
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'u';
      floatArray0[5] = (float) '!';
      String string2 = StringUtils.remove((String) null, "y{c`Jk#(4;DKY");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("offset cannot be negative", "Don't cl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5737;
      String string2 = StringUtils.uncapitalize("6r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6r", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) "6r";
      String string3 = StringUtils.joinWith("6r", objectArray0);
      assertEquals(14, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("6r6r6r6r6r6r6r6r6r6r6r6r6r6r", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "6r");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "6r6r6r6r6r6r6r6r6r6r6r6r6r6r";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) "6r";
      charSequenceArray0[3] = (CharSequence) "6r";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.endsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = "6r";
      stringArray0[2] = "6r6r6r6r6r6r6r6r6r6r6r6r6r6r";
      stringArray0[3] = "6r";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "6r", 5737);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.difference("Br,@DefaultLocale can only be useu with language tag if language, country, and variant are not set", (String) null);
      assertEquals("Br,@DefaultLocale can only be useu with language tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.stripAccents("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "_");
      assertTrue(string1.equals((Object)string0));
      assertEquals("_", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String string2 = StringUtils.replaceIgnoreCase("&uv0", "\r", "offset cannot be negative", (-8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&uv0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("$jq");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("qj$", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/p5z";
      stringArray0[1] = null;
      stringArray0[2] = "Ul]0PeY|Bt,*B";
      stringArray0[3] = "$jq";
      stringArray0[4] = "qj$";
      stringArray0[5] = "io";
      stringArray0[6] = "\r";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removePattern("/SOS!%Ks[V}0'}|e", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("/SOS!%Ks[V}0'}|e", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("&uv0", 'X');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("&uv0", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "&uv0", (CharSequence) "&uv0");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      char[] charArray0 = new char[19];
      String string0 = StringUtils.wrapIfMissing("0XArb:9xSE:PEsXJs", '\u0000');
      assertEquals("0XArb:9xSE:PEsXJs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("o<P T.[Don't clear/set the sae property more than once.", "o<P T.[Don't clear/set the sae property more than once.");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 56
         // o<P T.[Don't clear/set the sae property more than once.
         //                                                         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^,8? )'%;mZouv$Q{b", "The String must not be empty", Integer.MIN_VALUE);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Wa3>%WB#ruO");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Wa3>%WB#ruO", charSequenceArray0[0], Integer.MIN_VALUE);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("The String must not be empty", "The String must not be empty");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsWhitespace("Wa3>%WB#ruO");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootLowerCase("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a[nf!g=z!bew\"e<p t.[don't clear/set the same property more than once.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '3', 2259, (-2494));
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "maxWith cannot be negative", 4498);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\r", 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Zbm$", "Zbm$", 3070);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Zbm$", "Zbm$");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfBlank("Zbm$", "X*4");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Zbm$", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Zbm$", (CharSequence) "Zbm$", 5);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.right("Zbm$", 548);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Zbm$", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("Zbm$", supplier0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Zbm$", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "X*4", 3070, 2381);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.join((List<?>) null, "", (-1), 51);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("Zbm$", "S");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.remove("Zbm$", ')');
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertEquals("Zbm$", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.reverseDelimited("", ')');
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Wa3>%WB#ruO", "Wa3>%WB#ruO");
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Wa3>%WB#ruO", "Wa3>%WB#ruO", 3070);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Wa3>%WB#ruO8", "Wa3>%WB#ruO8");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "X*4";
      String string2 = StringUtils.defaultIfBlank((String) null, "3;pQTO]{S~dD");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3;pQTO]{S~dD", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "3;pQTO]{S~dD", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      int int0 = StringUtils.compareIgnoreCase("6g", "-6H`94CD*T:f[;N", false);
      assertEquals(9, int0);
      
      int int1 = 90;
      String string0 = StringUtils.mid("T&fxAxH<!", 9, 36);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "kXS\"\"nTL";
      String string2 = StringUtils.appendIfMissing("6g", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6g", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add("yQF,dfOH*%");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      
      hashSet0.forEach(consumer0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      assertFalse(hashSet0.contains("yQF,dfOH*%"));
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string1);
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      assertFalse(hashSet0.contains(""));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "");
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("%lBIbA9", 2);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%lBIbA9", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      char char0 = '*';
      String string0 = StringUtils.rightPad("dtQ8gOELL6LT$W/>Um|", 84, '*');
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dtQ8gOELL6LT$W/>Um|", (CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("dtQ8gOELL6LT$W/>Um|", '*', '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("dtQ8gOELL6LT$W/>Um|", "dtQ8gOELL6LT$W/>Um|", (-2525));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = "t9Knf}~\"z2?n/qbh?";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("t9Knf}~\"z2?n/qbh?", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.chomp("q");
      assertEquals("q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "_");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals((-37), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.getDigits("Jp)vR");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripAccents("Z");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Z", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.stripStart("G=lx", (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("G=lx", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "G=lx");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.prependIfMissing("ADx!?E", "Failed to get parent directory from provider", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Failed to get parent directory from providerADx!?E", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.normalizeSpace("");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "h&+iU@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.rightPad("S9<25i@Ku", 80, 'f');
      assertEquals("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S9<25i@Ku", (CharSequence) "S9<25i@Ku");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.jupiter.params.Range", 80, 80);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\`)\\u}@zs9)p*X8";
      String string3 = StringUtils.replaceIgnoreCase("S9<25i@Ku", ")l?oj/Pv)7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S9<25i@Ku", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S9<25i@Ku", (CharSequence) ")l?oj/Pv)7", 80);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty(")l?oj/Pv)7");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("S9<25i@Ku");
      assertArrayEquals(new int[] {83, 57, 60, 50, 53, 105, 64, 75, 117}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.stripEnd("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "S9<25i@Ku");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      String string5 = StringUtils.trimToNull("!]Ia21$Kyq+LTDy");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("!]Ia21$Kyq+LTDy", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getDigits("y!o");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "!]Ia21$Kyq+LTDy");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.stripAccents("!]Ia21$Kyq+LTDy");
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("!]Ia21$Kyq+LTDy", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.substringsBetween("Jp)vR", "N<PHXEmzSqf>sg_[x0M", "!]Ia21$Kyq+LTDy");
      assertNull(stringArray0);
      
      String string8 = StringUtils.stripStart((String) null, "S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      assertNull(string8);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "G=lx", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string9 = StringUtils.prependIfMissing("Don't cl", "y!o", (CharSequence[]) null);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertEquals("y!oDon't cl", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.normalizeSpace("\n");
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertEquals("", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.removeFirst("i{(X6 Mmxw;9jX_", "S9<25i@Kufffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertEquals("i{(X6 Mmxw;9jX_", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'r';
      charArray0[3] = '~';
      charArray0[4] = 'M';
      charArray0[5] = 'r';
      String string1 = StringUtils.join(charArray0, 'M', 82, 0);
      assertArrayEquals(new char[] {'M', 'M', 'r', '~', 'M', 'r'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 903.472F;
      floatArray0[1] = (float) 82;
      floatArray0[2] = (float) 0;
      String string2 = StringUtils.join(floatArray0, 'w');
      assertArrayEquals(new float[] {903.472F, 82.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("903.472w82.0w0.0", string2);
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 99);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 99;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '2', (-3219), 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3219
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.substringBefore("lTta>I", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("_<P T.[Don'tGclear/szt the same property more than once.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.removeIgnoreCase("@DefaultLocale can only be used with language tag if anguage, country, and variant are not ", "p{InCombiningDiacriticalMarks}+");
      assertEquals("@DefaultLocale can only be used with language tag if anguage, country, and variant are not ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[2] = "9'wv``)*\"Ql0QC";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "$FqSF>`, {i..\"D{N`";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("ThXUNJ_", 14, ' ');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("       ThXUNJ_", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "@DefaultLocale can only be used with language tag if anguage, country, and variant are not ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "       ThXUNJ_";
      charSequenceArray0[6] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("$FqSF>`, {i..\"D{N`");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.split("       ThXUNJ_", 'n');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, '[');
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[0], supplier0);
      assertEquals(8, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[1] = null;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[9];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[3] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      locale_FilteringModeArray0[4] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[5] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[6] = locale_FilteringMode6;
      Locale.FilteringMode locale_FilteringMode7 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[7] = locale_FilteringMode7;
      Locale.FilteringMode locale_FilteringMode8 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[8] = locale_FilteringMode8;
      String string1 = StringUtils.join(locale_FilteringModeArray0);
      assertEquals(9, locale_FilteringModeArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES";
      CharSequence charSequence1 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(charSequence1.equals((Object)string0));
      assertTrue(charSequence1.equals((Object)string1));
      assertEquals("MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES", charSequence1);
      assertNotNull(charSequence1);
      
      charSequenceArray0[3] = (CharSequence) "MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES";
      String string2 = StringUtils.abbreviate("MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES", 14, 14);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...ANGESIGN...", string2);
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "...ANGESIGN...";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      String string3 = StringUtils.join(byteArray0, 'p', (int) (byte) (-100), (int) (byte) (-100));
      assertArrayEquals(new byte[] {(byte) (-100)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string4 = StringUtils.strip("GIt\"X@TC", "s`>Z6");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("GIt\"X@TC", string4);
      assertNotNull(string4);
      
      charSequenceArray0[6] = (CharSequence) "GIt\"X@TC";
      CharSequence charSequence2 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(charSequence2.equals((Object)string1));
      assertFalse(charSequence2.equals((Object)string0));
      assertFalse(charSequence2.equals((Object)string2));
      assertFalse(charSequence2.equals((Object)string3));
      assertFalse(charSequence2.equals((Object)string4));
      assertEquals("MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES", charSequence2);
      assertNotNull(charSequence2);
      
      charSequenceArray0[7] = (CharSequence) "MAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESREJECT_EXTENDED_RANGESMAP_EXTENDED_RANGESMAP_EXTENDED_RANGESIGNORE_EXTENDED_RANGESEXTENDED_FILTERINGAUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGES";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width is %d", ":", 3, 3);
      assertEquals(":i:", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(3));
      assertNotNull(stack0);
      
      boolean boolean0 = StringUtils.isBlank(":i:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap("}pf]", (String) null);
      assertEquals("}pf]", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "}pf]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("}pf]", "}pf]", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("}pf]", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "}pf]";
      String string2 = StringUtils.repeat(")j\u0006^Ipk1PDPI{", (-2783));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = "...";
      String string4 = StringUtils.center("...", 669);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEqualsstring4);
      assertNotNull(string4);
      
      charSequenceArray0[3] = (CharSequence
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}pf]";
      stringArray0[1] = "}pf]";
      stringArray0[2] = "...";
      stringArray0[3] = null;
      stringArray0[4] = "b3=9O7Y^/";
      stringArray0[5] = "}pf]";
      stringArray0[6] = "";
      stringArray0[7] = "}pf]";
      String string5 = StringUtils.replaceEachRepeatedly("i_'Jnn5Y2Z", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("i_'Jnn5Y2Z", string5);
      assertNotNull(string5);
      
      charSequenceArray0[4] = (CharSequence) "i_'Jnn5Y2Z";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("&6hFKbJn._^S", "...", 669, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.abbreviate("i;YE26Sp2[BVfOI", 13, 13);
      assertEquals("...Sp2[BVfOI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("o;g.junitpioneer.jupiter.params.IntRange");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "temp.dirExpectedException");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)27}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("\u001B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("MAXwITH CANNOT BE NEGATIVE", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("maxWith cannot be negative", "j2M!1(/rk");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 9
         // j2M!1(/rk
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'e';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'e';
      floatArray0[3] = (float) 'e';
      floatArray0[4] = 3038.7024F;
      String string1 = StringUtils.join(floatArray0, 'u');
      assertArrayEquals(new float[] {101.0F, 0.0F, 101.0F, 101.0F, 3038.7024F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("101.0u0.0u101.0u101.0u3038.7024", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "101.0u0.0u101.0u101.0u3038.7024";
      stringArray0[1] = "101.0u0.0u101.0u101.0u3038.7024";
      stringArray0[2] = "Org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "101.0u0.0u101.0u101.0u3038.7024";
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("101.0u0.0u101.0u101.0u3038.7024", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(stringArray0[5]);
      assertEquals(6, stringArray0.length);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-20);
      try { 
        StringUtils.toString(byteArray0, "101.0u0.0u101.0u101.0u3038.7024");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("n");
      assertEquals("n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "n";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "*_2>%I");
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.truncate("n", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(">-hY?-j1|f_2 _>-hY?", "itwbc&", 0, 1066);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">-hY?-j1|f_2 _>-hY?", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.upperCase("Strings must not be nullWa3>%WB#ruO");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("STRINGS MUST NOT BE NULLWA3>%WB#RUO", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("4|=9", 'N');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("N4|=9N", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid((String) null, 4991, 1066);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.equalsAny(charSequenceArray0[0], stringArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isBlank("STRINGS MUST NOT BE NULLWA3>%WB#RUO");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Zbm$", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("", 1804);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((float[]) null, '>', 72, 110);
      assertNull(string5);
      
      String string6 = null;
      String[] stringArray1 = StringUtils.split("Strings must not be null", (String) null, 1804);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 72;
      intArray0[1] = 1804;
      intArray0[2] = 777;
      intArray0[3] = (int) '>';
      intArray0[4] = (int) '>';
      intArray0[5] = (-930);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '>', (-930), 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -930
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("...", (String) null);
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Arguments cannot both be null", "lO_>N<u");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals((-37), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("_"));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.trimToNull("]XG4}C\"L30M]XG4}C\"L30M");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("Jp)vR");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "]XG4}C\"L30M]XG4}C\"L30M", (CharSequence) "]XG4}C\"L30M]XG4}C\"L30M");
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripAccents("Z");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Z", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Don't cl", "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.stripStart("G=lx", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("G=lx", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "]XG4}C\"L30M]XG4}C\"L30M", "G=lx");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.prependIfMissing("ADx!?E", "Failed to get parent directory from provider", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Failed to get parent directory from providerADx!?E", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.normalizeSpace("");
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'c');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string3 = StringUtils.replaceChars("cdNeJ@W>(", '%', '\'');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("cdNeJ@W>(", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((long[]) null, '{');
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("?wPILpnf");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("?wPILpnf", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Y,xIE&H/UJ");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "Q3!Y^_%Y=qUk4^7A");
      assertEquals(4, int0);
      
      String string1 = StringUtils.defaultString("Loca=zHust not benull", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Loca=zHust not benull");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '7';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'>', '>', '>', '7', '>', '>', '>', '>'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Q3!Y^_%Y=qUk4^7A");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("Q3!Y^_%Y=qUk4^7A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.join(intArray0, '>');
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0>0>0>0", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string1 = StringUtils.wrap((String) null, "9([^UzP");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) string0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.overlay("", "-", (-119), (byte) (-41));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "m", (-119));
      assertNull(stringArray1);
      
      boolean boolean3 = StringUtils.equals((CharSequence) string0, (CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,org.junitpioneer.jupiter.params.RangeSourceProvider";
      charSequenceArray0[1] = (CharSequence) "-";
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,org.junitpioneer.jupiter.params.RangeSourceProvider";
      String string3 = StringUtils.mid((String) null, (byte)1, 628);
      assertNull(string3);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) "m";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      short[] shortArray0 = new short[0];
      String string4 = StringUtils.join(shortArray0, '5', 841, (int) (byte) (-41));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'c');
      assertEquals(0, int0);
      
      String string1 = "Y,xIE&H/UJ\\";
      String string2 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Y,xIE&H/UJ";
      stringArray1[1] = "Y,xIE&H/UJ";
      stringArray1[2] = "Y,xIE&H/UJ";
      stringArray1[3] = "...";
      stringArray1[4] = "Y,xIE&H/UJ";
      stringArray1[5] = "Y,xIE&H/UJ";
      stringArray1[6] = "Y,xIE&H/UJ";
      stringArray1[7] = "Y,xIE&H/UJ";
      stringArray1[8] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("(|", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("&:");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviateMiddle("=A-.WhPXFM1U_vq$}.", "yHc", 12);
      assertEquals("=A-.WyHcq$}.", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-61);
      // Undeclared exception!
      try { 
        Charset.forName("\"^p'o&/5\"=[G}:o/zk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"^p'o&/5\"=[G}:o/zk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", ",[8)Cy^?V.`[1@", 83);
      assertEquals("@DefaultLocale can only be used wit,[8)Cy^?V.`[1@, country, and variant are not set", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "@DefaultLocale can only be used wit,[8)Cy^?V.`[1@, country, and variant are not set";
      boolean boolean0 = StringUtils.startsWithAny(",[8)Cy^?V.`[1@", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], ", Length: ");
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.truncate("m|7", 2, 2026);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(", Length: ", 2, 32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Length: ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, "");
      assertNull(stringArray0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray1[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray1[2] = (CharSequence) ", Length: ";
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) "7";
      String string3 = StringUtils.stripStart((String) null, "7");
      assertNull(string3);
      
      charSequenceArray1[5] = (CharSequence) null;
      charSequenceArray1[6] = (CharSequence) "";
      charSequenceArray1[7] = (CharSequence) "Length: ";
      charSequenceArray1[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(9, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = '}';
      charArray0[2] = 'V';
      charArray0[3] = 'h';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = '5';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'b', '}', 'V', 'h', 'F', 'F', '5'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("b}VhFF5", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("c97)R=aFDHo", (-2207), 'u');
      assertFalse(string1.equals((Object)string0));
      assertEquals("c97)R=aFDHo", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited("c97)R=aFDHo", 'u');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("c97)R=aFDHo", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, (-68), '\\');
      assertNull(string3);
      
      String string4 = StringUtils.strip("X+?8< /479cV1:p,&Z5", "...");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("X+?8< /479cV1:p,&Z5", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("c97)R=aFDHo");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("C97)r=AfdhO", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "...", "]b5q{H,");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("X+?8< /479cV1:p,&Z5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1745;
      String string0 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)1745}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("1745", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("1745");
      assertEquals(4, int0);
      
      int int1 = StringUtils.compareIgnoreCase("pQMGYJs", "pQMGYJs", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.mid("pQMGYJs", 51, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "pQMGYJs");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("pQMGYJs");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "pQMGYJs";
      charSequenceArray0[4] = (CharSequence) "1745";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "";
      int int2 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      byte[] byteArray0 = StringUtils.getBytes("Q3!Y^_%Y=qUk4^7A", (Charset) null);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '$', 32, 2072);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("\n", "[0m>0-bj#\\.%9] $Mjb", (String) null, (int) (byte)1);
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("ag if language, country, and variant are not setBr,", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "BB}@#1";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.removeIgnoreCase((String) null, " ");
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.join((short[]) null, '{', (int) (short)321, (int) (short) (-725));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", ", '");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f2 HLl9O=c+J|wTAQ", 'Y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(90, comparator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(90));
      assertNotNull(priorityQueue0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(90));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "&&|4L'%t&13&rO-+");
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertFalse(priorityQueue0.contains(90));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Wa3>%WB#ruO");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("", "9[{[CTf+rE(", "&&|4L'%t&13&rO-+");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Wa3>%WB#ruO", 16);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Wa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruO", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Wa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruO", "9[{[CTf+rE(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, '^');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Wa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruOWa3>%WB#ruO");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 3444);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substring("AkNy?K G}Z", (-236));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("AkNy?K G}Z", string4);
      assertNotNull(string4);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(90));
      assertNotNull(vector0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(string2));
      assertNotNull(arrayList1);
      
      String string5 = StringUtils.join((List<?>) arrayList0, "L9HkNnJke%", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars(",y M8t)\u0000V", '^', 'O');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(",y M8t)\u0000V", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",y M8t)\u0000V", (CharSequence) ",y M8t)\u0000V");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.repeat('s', (int) 's');
      assertEquals("sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 's');
      assertEquals(115, int0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("m>0-bj#\\.%9] $Mjb", supplier0);
      assertEquals("m>0-bj#\\.%9] $Mjb", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)8;
      String string1 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8, (short)8, (short)8, (short)8}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("80808080808", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("m>0-bj#\\.%9] $Mjb");
      assertEquals(17, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)53;
      String string2 = StringUtils.join(byteArray0, '0');
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte) (-3), (byte)101, (byte)4, (byte)101, (byte)53}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("101000-30101040101053", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate((String) null, 5);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("101000-30101040101053", "ExceptionWasThrown");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ExceptionWasThrown101000-30101040101053ExceptionWasThrown", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("TU])BAb\"hpp+FP", '0');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0TU])BAb\"hpp+FP0", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "m>0-bj#\\.%9] $Mjb", '0');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("z9cjG", stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";", ";");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(";", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = null;
      String string2 = StringUtils.leftPad("", 8153, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      String string0 = StringUtils.rightPad("T$W/", 2023, "e?m");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "e?m", (CharSequence) "e?m");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right(string0, 2023);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("e?m", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = "e?m";
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = "T$W/";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[1] = 'n';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = 'N';
      charArray0[5] = ',';
      charArray0[6] = '`';
      charArray0[7] = '.';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "|IJfQtn5~l", (CharSequence) "|IJfQtn5~l");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("|IJfQtn5~l", "|IJfQtn5~l", "|IJfQtn5~l");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|IJfQtn5~l", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "|IJfQtn5~l", false);
      assertFalse(int1 == int0);
      assertEquals((-92), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.trimToNull("AD\"sn\"c}LFk|XI");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("AD\"sn\"c}LFk|XI", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("AD\"sn\"c}LFk|XI");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "|IJfQtn5~l");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripAccents("6LT$W/>Um|");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("6LT$W/>Um|", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("Don't cl", "oWJ7)oSy?z9L`@U6", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertNull(stringArray0);
      
      String string5 = StringUtils.stripStart("Failed to get parent directory from provider", "[=U(&|M\u0000pq\"SA<P");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Failed to get parent directory from provider", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.prependIfMissing("Failed to get parent directory from provider", "|IJfQtn5~l", (CharSequence[]) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("|IJfQtn5~lFailed to get parent directory from provider", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.normalizeSpace("Failed to get parent directory from provider");
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Failed to get parent directory from provider", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '%');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string3 = StringUtils.substringAfterLast("\r", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int2);
      
      String string4 = StringUtils.mid("Aborting to protect against StackOverflowError - output of one loop is the input of another", 0, 1404);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y,xIE&H/UJ", "i/6T*f9g0");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.truncate("i/6T*f9g0", 0, 32);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("i/6T*f9g0", string5);
      assertNotNull(string5);
      
      boolean boolean6 = StringUtils.isEmpty("i/6T*f9g0");
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.CR;
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("\r", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.lastIndexOfAny("\r", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "Q3!Y^_%Y=qUk4^7A");
      assertEquals(4, int0);
      
      String string1 = StringUtils.defaultString("Loca=zHust not benull", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Loca=zHust not benull");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Loca=zHust not benull", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[1] = (CharSequence) "Q3!Y^_%Y=qUk4^7A";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charSequenceArray0[1];
      String string3 = StringUtils.join(objectArray0, "Q3!Y^_%Y=qUk4^7A");
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Q3!Y^_%Y=qUk4^7A", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isBlank("Q3!Y^_%Y=qUk4^7A");
      assertFalse(boolean0);
      
      String string4 = StringUtils.joinWith("Loca=zHust not benull", objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Q3!Y^_%Y=qUk4^7A", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("l1CY}U>}lA~6F", 4);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("l...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 3264, "l...");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Loca=zHust not benull", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "9", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfBlank("a[NF!g=z!beW\"E", (String) null);
      assertEquals("a[NF!g=z!beW\"E", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("The Character must not be null", 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals("xThe Character must not be nullx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 321, '%');
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "1qSgWYh<GkXC!K");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("t%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsetset", 321, 'Q');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQt%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-XpsetsetQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((double[]) null, 'b', 2142, Integer.MAX_VALUE);
      assertNull(string5);
      
      String string6 = StringUtils.swapCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.left("-kzsE", 321);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("-kzsE", string7);
      assertNotNull(string7);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "m", (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Expected exception %s was not thrown.", 'x');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, '>', '>');
      assertNull(string1);
      
      String string2 = StringUtils.join((long[]) null, 'Q');
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("", (String) null, (-930));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<", "|})f\"}F%@:8*u", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Z[OrgW3>3 L+'q", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z[OrgW3>3 L+'q", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "c(h", (CharSequence) "|})f\"}F%@:8*u");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, ".H9%", 4886);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.abbreviate("XpKq&uv0", 4886);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("XpKq&uv0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("qU");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("qU", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "offset cannot be negative");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "XpKq&uv0", (char[]) null);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.trimToNull("Z[OrgW3>3 L+'q");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Z[OrgW3>3 L+'q", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("qU", "Z[OrgW3>3 L+'q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = "Br,";
      String string1 = StringUtils.wrapIfMissing("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Br,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string1);
      assertNotNull(string1);
      
      char char0 = 'L';
      String string2 = StringUtils.join((Object[]) null, 'L', (-611), 1954);
      assertNull(string2);
      
      String string3 = "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]";
      String string4 = StringUtils.removeAll("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "r>E%Apt*H&4>J");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string4);
      assertNotNull(string4);
      
      byte[] byteArray0 = StringUtils.getBytes("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (Charset) null);
      assertEquals(101, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string5 = StringUtils.overlay("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 1954, (-611));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 'L');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      assertFalse(boolean0);
      
      String string6 = StringUtils.joinWith("7dx", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("oWJ7)oSy?z97dx`@U6wj\":^W$qB)Tl<]]", string6);
      assertNotNull(string6);
      
      byte[] byteArray1 = StringUtils.getBytes("offset cannot be negative", (Charset) null);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(25, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 244.3722;
      String string7 = StringUtils.removeEnd((String) null, "Br,");
      assertNull(string7);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "Extension context \"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-762.91422);
      doubleArray0[2] = 0.0;
      char char0 = 'X';
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {0.7, (-762.91422), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("0.7X-762.91422X0.0", string0);
      assertNotNull(string0);
      
      int int0 = 4;
      String string1 = StringUtils.center("0.7X-762.91422X0.0", 4, "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.7X-762.91422X0.0", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string2 = "Array and element cannot both be null";
      String string3 = StringUtils.wrapIfMissing("Array and element cannot both be null", '_');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_Array and element cannot both be null_", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "_Array and element cannot both be null_", "io");
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      boolean boolean0 = StringUtils.isBlank("_Array and element cannot both be null_");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Array and element cannot both be null", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", "c");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.rightPad("S9<25i@Ku", 52, 'f');
      assertEquals("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S9<25i@Ku", (CharSequence) "S9<25i@Ku");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.jupiter.params.Range", 52, 52);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\`)\\u}@zs9)p*X8";
      String string3 = StringUtils.replaceIgnoreCase("S9<25i@Ku", ")l?oj/Pv)7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S9<25i@Ku", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S9<25i@Ku", (CharSequence) ")l?oj/Pv)7", 52);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty(")l?oj/Pv)7");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("S9<25i@Ku");
      assertArrayEquals(new int[] {83, 57, 60, 50, 53, 105, 64, 75, 117}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.stripEnd("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffff", "S9<25i@Ku");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S9<25i@Kufffffffffffffffffffffffffffffffffffffffffff", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "S9<25i@Kufffffffffffffffffffffffffffffffffffffffffff";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      charSequenceArray0[2] = (CharSequence) "S9<25i@Ku";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.join((float[]) null, '', 0, 90);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("org.junitpioneer.jupiter.params.Range", "set", 86);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.Range", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split(")[<;@A/a", "8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.chop("{tJQ}LywKl");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("{tJQ}LywK", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.normalizeSpace((String) null);
      assertNull(string8);
      
      int int4 = StringUtils.indexOf((CharSequence) "8", 110, 1433);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      int int5 = StringUtils.lastOrdinalIndexOf("8", "set", 90);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals((-1), int5);
      
      String string9 = StringUtils.replaceEachRepeatedly("V(x9#_", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertEquals("V(x9#_", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "m", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3109;
      shortArray0[1] = (short)2306;
      shortArray0[2] = (short)3109;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2253);
      String string1 = StringUtils.stripAccents("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("\r", "I)\u0004X>1", "\r");
      assertNull(stringArray0);
      
      String string2 = StringUtils.stripStart("yQ(`S%", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("yQ(`S%", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.repeat("|x)|L", "k@:t?K/}}", 108);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) 108;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 108;
      String string2 = StringUtils.join(doubleArray0, 'Y');
      assertArrayEquals(new double[] {108.0, 108.0, (-1.0), 108.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("108.0Y108.0Y-1.0Y108.0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("s`6!9M> My'o2F2AI", 1973, "<P T.[");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Zbm$", "s`6!9M> My'o2F2AI");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.truncate((String) null, 103);
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("2lq");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("2lq", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split(string3, "108.0Y108.0Y-1.0Y108.0", 1973);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(279, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.defaultIfEmpty("", " vs ");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(" vs ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase(string1, "", "k@:t?K/}}");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("-TyxM!|Y", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "-TyxM!|Y";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeStart("Don't clear/set the same property more than once.", "<P T.[");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("~9*Q ", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'H');
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("~9*Q +~9*Q ", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "~9*Q +~9*Q ", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(11, int2);
      
      String string5 = StringUtils.stripEnd((String) null, "~)!cp@KCbpdf]");
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Don't clear/set the same property more than once.");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.left("-TyxM!|Y", (-4));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "-TyxM!|Y", "");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      int int4 = StringUtils.getFuzzyDistance("~9*Q ", "", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      String string7 = StringUtils.trim(">-hY?-j1|f_2 _>-hY?");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals(">-hY?-j1|f_2 _>-hY?", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":Cw6<c", "5");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.chop("C\n");
      assertEquals("C", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "IQHbV]|bCb2L_u?{", (CharSequence) "IQHbV]|bCb2L_u?{");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.chop("The type must not be null");
      assertEquals("The type must not be nul", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.rightPad("S9<25i@Ku", 91, 'f');
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "S9<25i@Ku", (CharSequence) "S9<25i@Ku");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.jupiter.params.Range", 91, 91);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "\\`)\\u}@zs9)p*X8";
      String string3 = StringUtils.replaceIgnoreCase("S9<25i@Ku", ")l?oj/Pv)7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("S9<25i@Ku", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "S9<25i@Ku", (CharSequence) ")l?oj/Pv)7", 91);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty(")l?oj/Pv)7");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("S9<25i@Ku");
      assertArrayEquals(new int[] {83, 57, 60, 50, 53, 105, 64, 75, 117}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.stripEnd("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", "S9<25i@Ku");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "S9<25i@Kuffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      charSequenceArray0[2] = (CharSequence) "S9<25i@Ku";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.join((float[]) null, '', 0, 90);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("org.junitpioneer.jupiter.params.Range", "set", 86);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.params.Range", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split(")[<;@A/a", "8");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.chop("{tJQ}LywKl");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("{tJQ}LywK", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string8 = StringUtils.normalizeSpace((String) null);
      assertNull(string8);
      
      int int4 = StringUtils.indexOf((CharSequence) "8", 110, 1433);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      String string0 = StringUtils.join(longArray0, '_', (-1), (-1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("Minimum abbreviation width with offset is %d", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)34;
      String string2 = StringUtils.join(byteArray0, '~');
      assertArrayEquals(new byte[] {(byte) (-51), (byte)7, (byte)34}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-51~7~34", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOfAny("{", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("WjG!TLS)", "%HJ5BdXJVK)a", 1675);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%HJ5BdXJVK)a", (CharSequence) "WjG!TLS)");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.substringAfterLast("WjG!TLS)", "j2M!1(/rk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width with offset is %d", "j2M!1(/rk", 1675);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "j2M!1(/rk", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      int int0 = StringUtils.indexOf((CharSequence) "", 1675, 1675);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("The String must not be empty", (-1507), 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The...", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsNone((CharSequence) "%HJ5BdXJVK)a", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string2 = StringUtils.join(longArray0, '#');
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1934L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0#0#-1#-1934#0#0#0#0#0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("r", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "%HJ5BdXJVK)a";
      stringArray2[1] = "Minimum abbreviation width with offset is %d";
      String string4 = StringUtils.replaceEach("", stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray2.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("U+caL+kMX", "", stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("U+caL+kMX", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '%');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string3 = StringUtils.substringAfterLast("\r", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int2);
      
      boolean boolean6 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "Y,xIE&H/UJ", (CharSequence) "Y,xIE&H/UJ");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      String string4 = StringUtils.join((long[]) null, '%');
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("i/6T*f9g0Threshold must not be negativei/6T*f9g0", "Y,xIE&H/UJ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string5);
      assertNotNull(string5);
      
      boolean boolean7 = StringUtils.startsWithAny("i/6T*f9g0Threshold must not be negativei/6T*f9g0", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean7);
      
      boolean boolean8 = StringUtils.equalsAnyIgnoreCase("Y,xIE&H/UJ", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean8);
      
      String string6 = StringUtils.join((Object[]) stringArray0, ',');
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(",", string6);
      assertNotNull(string6);
      
      boolean boolean9 = StringUtils.containsOnly((CharSequence) "i/6T*f9g0", charArray0);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string1 = StringUtils.truncate("Strings must not be null", 1355, 1328);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("|x)|L", "z1ofu4Ni[");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean4 = StringUtils.containsWhitespace("k@:t?K/}}");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string2 = StringUtils.removeIgnoreCase("z1ofu4Ni[", (String) null);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z1ofu4Ni[", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("z1ofu4Ni[", '{');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.ordinalIndexOf("", "", 21);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.wrap("Strings must not be null", "UdmL6Bqa.34v#Eorg.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("UdmL6Bqa.34v#Eorg.apache.commons.lang3.StringUtilsStrings must not be nullUdmL6Bqa.34v#Eorg.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "|x)|L", (CharSequence) "z1ofu4Ni[");
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(9, int3);
      
      String string4 = StringUtils.stripEnd("{a[aVHtfn{Q", "{a[aVHtfn{Q");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "|x)|L", (CharSequence) "z1ofu4Ni[");
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals((-1), int4);
      
      String string5 = StringUtils.left("z1ofu4Ni[", (-1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)charSequence0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "k@:t?K/}}", "{a[aVHtfn{Q");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("/.-$4=KhGww[~L\"zr5");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(13, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Zbm$", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("", 1804);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 1874);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1804;
      intArray0[1] = 1874;
      intArray0[2] = 538;
      intArray0[3] = 4597;
      intArray0[4] = (-1);
      intArray0[5] = 1874;
      intArray0[6] = (-1);
      intArray0[7] = 4597;
      String string6 = StringUtils.join(intArray0, 'n');
      assertArrayEquals(new int[] {1804, 1874, 538, 4597, (-1), 1874, (-1), 4597}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("1804n1874n538n4597n-1n1874n-1n4597", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 1259);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^,8? )'%;mZouv$Q{b", "The String must not be empty", Integer.MIN_VALUE);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Wa3>%WB#ruO");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("Wa3>%WB#ruO");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Wa3>%WB#ruO", charSequenceArray0[0], Integer.MIN_VALUE);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.", charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.Wa3>%WB#ruO", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty("Wa3>%WB#ruO");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MIN_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) Integer.MIN_VALUE;
      floatArray0[3] = (float) Integer.MIN_VALUE;
      floatArray0[4] = (float) 0;
      String string3 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {(-2.14748365E9F), 0.0F, (-2.14748365E9F), (-2.14748365E9F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-2.14748365E9e0.0e-2.14748365E9e-2.14748365E9e0.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("^,8?", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.Wa3>%WB#ruO", ", Length: 0", (-2192), 44);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals(", Length: 0e property more than once.Wa3>%WB#ruO", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getDigits("FJ_TP;Iyn%h6=R");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("6", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ", Length: 0me property more than once.Wa3>%WB#ruO", (CharSequence) "6", 2973);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.getDigits("org.apache.commons.lang3.StringUtils");
      assertEquals("3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "{}");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultString("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", "R&Zi?Y^");
      assertFalse(int1 == int0);
      assertEquals((-17), int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %d";
      stringArray0[1] = "Don't clear/set the same property more than once.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Don't clear/set the same property more than once.");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.removeIgnoreCase("R&Zi?Y^", "Minimum abbreviation width is %d");
      assertEquals("R&Zi?Y^", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", 'H');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int2 = StringUtils.ordinalIndexOf("R&Zi?Y^", "Don't clear/set the same property more than once.", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.wrap("Minimum abbreviation width is %d", "\"U8G[@|6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"U8G[@|6Minimum abbreviation width is %d\"U8G[@|6", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("Don't clear/set the same property more than once.");
      assertEquals(49, intArray0.length);
      assertNotNull(intArray0);
      
      String[] stringArray3 = new String[0];
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      
      String string2 = StringUtils.replaceEach("F.G", stringArray3, stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("F.G", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      String string3 = StringUtils.defaultIfBlank((String) null, "m");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("m", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("R&Zi?Y^");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string1 = StringUtils.truncate("Strings must not be null", 1355, 1328);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("|x)|L", "z1ofu4Ni[");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean4 = StringUtils.containsWhitespace("k@:t?K/}}");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string2 = StringUtils.toRootLowerCase(" vs ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", 538);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1355;
      intArray0[1] = 1328;
      intArray0[2] = 0;
      intArray0[3] = 538;
      intArray0[4] = (-1);
      intArray0[5] = 538;
      intArray0[6] = 4597;
      intArray0[7] = 1328;
      String string3 = StringUtils.join(intArray0, 'n');
      assertArrayEquals(new int[] {1355, 1328, 0, 538, (-1), 538, 4597, 1328}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1355n1328n0n538n-1n538n4597n1328", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[21];
      charSequenceArray0[0] = (CharSequence) "k@:t?K/}}";
      charSequenceArray0[1] = (CharSequence) "";
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(21, charSequenceArray0.length);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "G=lx\n", (String) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("G=lx\n", "a\"'p1{~G1ywM#@T4T$", "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right((String) null, 's');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'm');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("R6uh&eGD}");
      assertEquals(9, int0);
      
      int int1 = StringUtils.compareIgnoreCase("Comparator should not be null.", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.mid("x}6NP(", 1, 16);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("x}6NP(", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("x}6NP(", "x}6NP(");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("x}6NP(");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.right((String) null, 256);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "x}6NP(";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "x}6NP(";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "x}6NP(";
      charSequenceArray0[8] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "|IJfQtn5~l", (CharSequence) "|IJfQtn5~l");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("|IJfQtn5~l", "oWJ7)oSy?z9L`@U6", "|IJfQtn5~l");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|IJfQtn5~l", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "|IJfQtn5~l", false);
      assertFalse(int1 == int0);
      assertEquals((-92), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(" "));
      assertNotNull(treeSet0);
      
      int int2 = StringUtils.compareIgnoreCase(" ", " ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.rightPad("g58>WF", 90, "-niK^/:m~Ko&N.,#%");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g58>WF-niK^/:m~Ko&N.,#%-niK^/:m~Ko&N.,#%-niK^/:m~Ko&N.,#%-niK^/:m~Ko&N.,#%-niK^/:m~Ko&N.,#", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("|IJfQtn5~l");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("|IJfQtn5~l", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("vEUvij0#!91", (String) null, "oWJ7)oSy?z9L`@U6");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("vEUvij0#!91", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|IJfQtn5~l", (CharSequence) "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.repeat(" ", "p C+R3v,0R.!6L", (-1901));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-928));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("Loca=zHust not benull", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Loca=zHust not benull");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Loca=zHust not benull", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[1] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[2] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.remove("", "Loca=zHust not benull");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", "", 360);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.substringAfter("9:Cw6<c", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, ", '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string1 = StringUtils.overlay("X+?8< /479cV1:p,&Z5", "Ce2-L3EE0FR\"", (-1), 24);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ce2-L3EE0FR\"", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6oWJ7)oSy?z9L`@U6");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate((String) null, 0);
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("4 eji;VIY(i[gwF");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("4 eji;VIY(i[gwF", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", " vs ", (String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.replaceFirst((String) null, "t%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsetset", "Strings must not be nullWa3>%WB#ruO");
      assertNull(string4);
      
      String string5 = StringUtils.wrap((String) null, 'E');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("P2!:&ovV^*!J%>", "P2!:&ovV^*!J%>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P2!:&ovV^*!J%>";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "RepeatFailedTestExtension";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("dd3`F@C1={O");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.defaultString("Ht7)9U3:a<yoW", "mxq3T#u(-,cb");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Ht7)9U3:a<yoW", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "dd3`F@C1={O", (char[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = StringUtils.replaceChars("", '1', '1');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P2!:&ovV^*!J%>", '1');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "P2!:&ovV^*!J%>", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.leftPad("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (-1), 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "[0m>0-bj#\\.%9] $Mjb");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isBlank("o@OU=h");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "[0m>0-bj#\\.%9] $Mjb", (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", 29);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", "$\"k9#{E:<I4^cW\">", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "af^XzNYz:.Ry");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\n", 0, "af^XzNYz:.Ry");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String string0 = StringUtils.rightPad("dtQ8gOELL6LT$W/>Um|", 84, '*');
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dtQ8gOELL6LT$W/>Um|", (CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("dtQ8gOELL6LT$W/>Um|", '*', '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      int int0 = StringUtils.indexOfAny((CharSequence) "he|=@|/DXA5dOS", "offset cannot be negative");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeEnd("e}ZU", "dtQ8gOELL6LT$W/>Um|");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("e}ZU", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Wa3>%WB#ruO", ", '");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], (CharSequence) ", '");
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1576;
      shortArray0[1] = (short)2843;
      shortArray0[2] = (short)2843;
      shortArray0[3] = (short) (-725);
      shortArray0[4] = (short) (-725);
      shortArray0[5] = (short) (-1471);
      shortArray0[6] = (short) (-725);
      shortArray0[7] = (short)53;
      int int0 = StringUtils.indexOfAny((CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "he|=@|/DXA5dOS");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isBlank("~<3):)u58eF-?4?JK");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.removeEnd("dtQ8gOELL6LT$W/>Um|", "z_*ag>?>eW");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";B72r.o*O]Jbv", (CharSequence) ">vFo\"uTJX:RY/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.strip("Br,");
      assertEquals("Br,", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "E", (CharSequence) "Br,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.repeat("", 84);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "m", 1426, 1426);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "m", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(linkedHashSet0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(hashSet0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add("yQF,dfOH*%");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      assertFalse(linkedHashSet0.contains(string0));
      
      hashSet0.forEach(consumer0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(hashSet0.contains("yQF,dfOH*%"));
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string1);
      assertTrue(linkedHashSet0.contains("yQF,dfOH*%"));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(hashSet0.contains("yQF,dfOH*%"));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("", (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "");
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.uncapitalize("");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("%lBIJA9", 2);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%lBIJA9", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "%lBIJA9", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.RangeSourceProvider", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-712);
      intArray0[1] = (-1567);
      intArray0[2] = (-1716);
      intArray0[3] = 122;
      intArray0[4] = 0;
      intArray0[5] = (-1218);
      String string0 = StringUtils.join(intArray0, '>', 108, (-3016));
      assertArrayEquals(new int[] {(-712), (-1567), (-1716), 122, 0, (-1218)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("org.junitpioneer.jupiter.params.RangeSourceProvider", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceProvider", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars((String) null, "org.junitpioneer.jupiter.params.RangeSourceProvider", "");
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1218)));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains((-1218)));
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1218)));
      assertNotNull(spliterator0);
      
      boolean boolean1 = linkedList0.add((Object) "");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-1218)));
      
      String string3 = StringUtils.join((List<?>) linkedList0, 'a', 108, 0);
      assertEquals(2, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertTrue(linkedList0.contains(""));
      assertFalse(linkedList0.contains((-1218)));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "m>0-bj#\\.%9] $Mjb[0");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", Integer.MIN_VALUE);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#Lu@z\"~gPsan>X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripAccents("`tZ=W");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`tZ=W", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("R6uh&eGD}", "TA+k 1(xK|[-r@~jD", "R>>ln36");
      assertNull(stringArray1);
      
      String string3 = StringUtils.defaultString("w", "`tZ=W");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("w", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(15, stringArray0.length);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.rightPad("Illegal range. The step cannot be zero.", 99, 'H');
      assertEquals("Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string0);
      assertNotNull(string0);
      
      String string1 = "{c/";
      String string2 = StringUtils.mid("{c/", 15, 52);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.trimToNull("Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH";
      String string5 = ";";
      stringArray0[2] = ";";
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string6);
      assertNotNull(string6);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(52));
      assertNotNull(treeSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      treeSet0.clear();
      assertFalse(treeSet0.contains(52));
      
      // Undeclared exception!
      try { 
        treeSet0.subSet(object0, false, (Object) "Illegal range. The step cannot be zero.HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^,8? )'%;mZouv$Q{b", "The String must not be empty", Integer.MIN_VALUE);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Wa3>%WB#ruO");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripAccents("Wa3>%WB#ruO");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Wa3>%WB#ruO", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Wa3>%WB#ruO", charSequenceArray0[0], Integer.MIN_VALUE);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.", charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.Wa3>%WB#ruO", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Wa3>%WB#ruO");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MIN_VALUE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) Integer.MIN_VALUE;
      floatArray0[3] = (float) Integer.MIN_VALUE;
      floatArray0[4] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {(-2.14748365E9F), 0.0F, (-2.14748365E9F), (-2.14748365E9F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-2.14748365E9e0.0e-2.14748365E9e-2.14748365E9e0.0", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("^,8?", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "X+?8< /479cV1:p,&Z5", 0, 51);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X+?8< /479cV1:p,&Z5but ran %d ms.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "7%D#es{Z");
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("z;", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("-TyxM!|Y");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-TyxM!|Y", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(" 'R@p0|Ip1N", " vs ", "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      String string4 = StringUtils.replaceFirst(" vs ", "", "-TyxM!|Y");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("-TyxM!|Y vs ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("Uq`V,t,OH9Q:Ta+", '9');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("9Uq`V,t,OH9Q:Ta+9", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.wrapIfMissing("x", 'A');
      assertEquals("AxA", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "AxA", "XpKq&uv0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("AxA");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[20];
      objectArray0[0] = (Object) "x";
      objectArray0[1] = (Object) "XpKq&uv0";
      String string1 = StringUtils.joinWith("AxA", objectArray0);
      assertEquals(20, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xAxAXpKq&uv0AxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxA", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("xAxAXpKq&uv0AxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxA", 118);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("xAxAXpKq&uv0AxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxAAxA", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("XpKq&uv0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("xpKq&uv0", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("<<K<<K", "s /sqDdXYt'N;(Pw~)_", (CharSequence[]) null);
      assertEquals("s /sqDdXYt'N;(Pw~)_<<K<<K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("Zbm$", "Zbm$", "oWJ7)oSy?z9L`@U6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("oWJ7)oSy?z9L`@U6", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "junit-pioneer", (String) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("oWJ7)oSy?z9L`@U6", 925);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("oWJ7)oSy?z9L`@U6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rotate("p{InCombiningDiacriticalMarks}+", 925);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ombiningDiacriticalMarks}+p{InC", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "InCombiningDiacriticalMarks}+p{", (CharSequence) "", 1645);
      assertEquals(31, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string5 = StringUtils.appendIfMissingIgnoreCase("InCombiningDiacriticalMarks}+p{", "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("InCombiningDiacriticalMarks}+p{", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("junit-pioneer", supplier0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("junit-pioneer", string6);
      assertNotNull(string6);
      
      StringUtils.rightPad("oWJ7)oSy?z9L`@U6", 925, 'w');
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.abbreviate("2/{h8~7$h\"p49DUr-", 4, 4);
      assertEquals("2...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("WjG!TLS)", "%HJ5BdXJVK)a", 1675);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%HJ5BdXJVK)a", (CharSequence) "WjG!TLS)");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.substringAfterLast("WjG!TLS)", "j2M!1(/rk");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Minimum abbreviation width with offset is %d", "j2M!1(/rk", 1675);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "j2M!1(/rk", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("The String must not be empty", (-1507), 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The...", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsNone((CharSequence) "%HJ5BdXJVK)a", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string2 = StringUtils.join(longArray0, '#');
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1934L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0#0#-1#-1934#0#0#0#0#0", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("Zbm$", "Zbm$");
      assertEquals("Zbm$", string0);
      assertNotNull(string0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Zbm$"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains("Zbm$"));
      assertFalse(list0.contains("Zbm$"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains("Zbm$"));
      assertFalse(hashSet0.contains("Zbm$"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(hashSet0.contains("Zbm$"));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("UdmL6Bqa.34v#E", "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("H?zX^fI'2@#zH", "/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("H?zX^fI'2@#zH", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("/NeMu4@l2eOpB3p2fD; vs  vs ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/NeMu4@l2eOpB3p2fD; vs  vs ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "/NeMu4@l2eOpB3p2fD; vs  vs ";
      stringArray0[5] = "UdmL6Bqa.34v#E";
      stringArray0[6] = "UdmL6Bqa.34v#E";
      String string4 = StringUtils.replaceEach("Illegal range. There's no way to get from %s to %s with a step of %s.", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) (short)108, "qGRy>avo");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("qGRy>avoAborting to protect against StackOverflowError - output of one loop is the input of anotherqGRy>avoq", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = "Minimum abbreviation width is %d";
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d", (String) null);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = "g,nv";
      String string3 = StringUtils.defaultIfBlank("g,nv", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("g,nv", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "g,nv";
      charSequenceArray0[1] = (CharSequence) "X*4";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "X*4", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("9'wv``)*\"Ql0QC", "tYj");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9'wv``)*\"Ql0QC", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray1[1] = "U";
      stringArray1[2] = "9'wv``)*\"Ql0QC";
      stringArray1[3] = ".H9%";
      stringArray1[4] = null;
      stringArray1[5] = "Threshold must not be negative";
      stringArray1[6] = "Threshold must not be negative";
      stringArray1[7] = null;
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.substringsBetween("a6M}9?K>NY", ".H9%", "p{InCombiningDiacriticalMarks}+");
      assertNull(stringArray3);
      
      String string3 = StringUtils.join((Object[]) stringArray2, 'n', 1683, 1683);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("p{InCombiningDiacriticalMarks}+", "", 1);
      assertEquals(31, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "9'wv``)*\"Ql0QC", (CharSequence) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("%', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.strip("{xs", "{xs");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{xs", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "@a", "@a");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.truncate("0C%VAyV", 47, 47);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(", Length: ");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: ", (CharSequence) "{xs", (-3235));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.unwrap("_*/AD qQ;devu%>2e ", '(');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_*/AD qQ;devu%>2e ", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = StringUtils.getBytes("", (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.rotate("", 8192);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1117, 1117);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '(');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.endsWithAny("m", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "m", (CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, (-1964), 'V');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("_2", "_2", "_2");
      assertEquals("_2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("_2", "_2", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank("", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Kq&v0", "The Character must not be nullepc+@?.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ",", (CharSequence) "Kq&v0", 1924);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("i_'Jnn5Y2Z", (String[]) null, (String[]) null);
      assertEquals("i_'Jnn5Y2Z", string0);
      assertNotNull(string0);
      
      int int0 = (-3657);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("i_'Jnn5Y2Z", "6fU1a|2E2", 4, (-3657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnce((String) null, (String) null, "Va\u0001I?,");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa9y3>%WB ruO", supplier0);
      assertEquals("Wa9y3>%WB ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa9y3>%WB ruO";
      charSequenceArray0[1] = (CharSequence) "Wa9y3>%WB ruO";
      charSequenceArray0[2] = (CharSequence) "Wa9y3>%WB ruO";
      charSequenceArray0[3] = (CharSequence) "Wa9y3>%WB ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa9y3>%WB ruO", "Wa9y3>%WB ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa9y3>%WB ruO", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^,8? )'%;mZouv$Q{b", "The String must not be empty", Integer.MIN_VALUE);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Wa9y3>%WB ruO");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("Q3!Y^_%Y=qUk4^7A");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Q3!Y^_%Y=qUk4^7A", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String must not be empty", charSequenceArray0[2], 14);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("Wa9y3>%WB ruO", 14, " vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Wa9y3>%WB ruO ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("The String must not be empty", "z'LTm.Ao}fY<");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("The String must not be empty", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = StringUtils.overlay("8U?vMx&R3#cr", "8U?vMx&R3#cr", (-629), 14);
      assertEquals("8U?vMx&R3#cr", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "8U?vMx&R3#cr", "vw#D2L_#*r8");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("Wa3>%WB#ruO", "c97)R=aFDHo", (-2860), 6);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c97)R=aFDHoB#ruO", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "[KqDgxnVBz6`0 ~==", "/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6oWJ7)oSy?z9L`@U6");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("&CayH=B89CvThresh>Gd must n_7 be negative", 1586);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("&CayH=B89CvThresh>Gd must n_7 be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6oWJ7)oSy?z9L`@U6");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6/aUoWJ7)oSy?z9L`@U6oWJ7)oSy?z9L`@U6", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("c97)R=aFDHo", (String) null, " vs ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1745;
      String string0 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)1745}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("1745", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("1745");
      assertEquals(4, int0);
      
      int int1 = StringUtils.compareIgnoreCase("pQMGYJs", "pQMGYJs", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.mid("pQMGYJs", 51, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "pQMGYJs");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("pQMGYJs");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "BJ}X]9[+|u&Ip";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "pQMGYJs";
      charSequenceArray0[4] = (CharSequence) "1745";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "";
      int int2 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      byte[] byteArray0 = StringUtils.getBytes("Q3!Y^_%Y=qUk4^7A", (Charset) null);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.rotate((String) null, (-1));
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("[0m>0-bj#\\.%9] $Mjb", "BB}@#1", "~<3):)u58eF-?4?JK", (-1644));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0m>0-bj#\\.%9] $Mjb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(", '", "BB}@#1");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1576;
      shortArray0[1] = (short)2843;
      shortArray0[2] = (short)2843;
      shortArray0[3] = (short)321;
      shortArray0[4] = (short) (-725);
      shortArray0[5] = (short) (-1471);
      shortArray0[6] = (short) (-725);
      shortArray0[7] = (short)53;
      String string3 = StringUtils.join(shortArray0, 'f', (int) (short)321, (-1049));
      assertArrayEquals(new short[] {(short)1576, (short)2843, (short)2843, (short)321, (short) (-725), (short) (-1471), (short) (-725), (short)53}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "Wa3>%WB#ruO");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.replaceChars("", 'f', 'W');
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'f');
      assertNull(string5);
      
      String string6 = StringUtils.rotate((String) null, 13);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)3109;
      shortArray0[1] = (short)2306;
      String string1 = StringUtils.strip("X+?8< /479cV1:p,&Z5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("X+?8< /479cV1:p,&Z5", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("org.junitpioneer.jupiter.SystemPropertyExtension", "X+?8< /479cV1:p,&Z5");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.SystemPropertyExtension", string2);
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)2306;
      doubleArray0[1] = (double) 32;
      doubleArray0[2] = (double) 97;
      String string3 = StringUtils.join(doubleArray0, '$', 9, (int) (short)0);
      assertArrayEquals(new double[] {2306.0, 32.0, 97.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.SystemPropertyExtension", (int) (short)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfBlank("a[NF!g=z!beW\"E", (String) null);
      assertEquals("a[NF!g=z!beW\"E", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("The Character must not be null", 'x');
      assertFalse(string1.equals((Object)string0));
      assertEquals("xThe Character must not be nullx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 321, '%');
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "1qSgWYh<GkXC!K");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("t%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsetset", 321, 'Q');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQt%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-XpsetsetQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((double[]) null, 'b', 2142, Integer.MAX_VALUE);
      assertNull(string5);
      
      String string6 = StringUtils.swapCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.left("-kzsE", 321);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("-kzsE", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("W}cDG{cKuo>o,3%Y7&", 15, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y7&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrapIfMissing("Y7&", 'x');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("xY7&x", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", (-2560), 'u');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("pD,JvzW%dJs`i'Z~-", "\">d$PRV.~G\"f");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("pD,JvzW%dJs`i'Z~-", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", 15, '5');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((double[]) null, 'u', 32, 101);
      assertNull(string7);
      
      String string8 = StringUtils.swapCase("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("                                           oa\"{Y|hHD}]_.xJ                                           ", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.left("Y7&", 26);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertEquals("Y7&", string9);
      assertNotNull(string9);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      charSequenceArray0[1] = (CharSequence) "Y7&";
      charSequenceArray0[2] = (CharSequence) "W}cDG{cKuo>o,3%Y7&";
      charSequenceArray0[6] = (CharSequence) "xY7&x";
      charSequenceArray0[4] = (CharSequence) "\">d$PRV.~G\"f";
      charSequenceArray0[5] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      charSequenceArray0[6] = (CharSequence) "W}cDG{cKuo>o,3%Y7&";
      charSequenceArray0[7] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWith("xY7&x", "pD,JvzW%dJs`i'Z~-");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string10 = StringUtils.join((Object[]) charSequenceArray0, '9', 32, 32);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "|IJfQtn5~l", (CharSequence) "|IJfQtn5~l");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.center("/NeMu4@l2eOpB3p2fD; vs  vs ", 34);
      assertFalse(string1.equals((Object)string0));
      assertEquals("   /NeMu4@l2eOpB3p2fD; vs  vs     ", string1);
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "   /NeMu4@l2eOpB3p2fD; vs  vs     ", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("   /NeMu4@l2eOpB3p2fD; vs  vs     ", charSequence0);
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.substring("/NeMu4@l2eOpB3p2fD; vs  vs ", 0);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/NeMu4@l2eOpB3p2fD; vs  vs ", string2);
      assertNotNull(string2);
      
      Vector<Object> vector0 = new Stack<Object>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("/NeMu4@l2eOpB3p2fD; vs  vs "));
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) "|IJfQtn5~l");
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[|IJfQtn5~l]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      assertTrue(vector0.contains("|IJfQtn5~l"));
      assertFalse(vector0.contains("/NeMu4@l2eOpB3p2fD; vs  vs "));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode1);
      
      boolean boolean1 = vector0.add((Object) locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[|IJfQtn5~l, REJECT_EXTENDED_RANGES]", vector0.toString());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains("|IJfQtn5~l"));
      assertFalse(vector0.contains("/NeMu4@l2eOpB3p2fD; vs  vs "));
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("#6}&PuSBOHn0d2%+x<I", (-204), 36);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("#6}&PuSBOHn0d2%+x<I", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1959);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertNotNull(arrayDeque1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      
      String string1 = StringUtils.join(list0, 'q', 0, 0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(string1);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(stream0);
      
      String string2 = StringUtils.repeat("", 4);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("", '^');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceFirst("&CayH=B89CvThresh>Gd must n_7 be negative", "wtl!p.gaxM ", "UdmL6Bqa.34v#E");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("&CayH=B89CvThresh>Gd must n_7 be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("Illegal range. Equal from and to will produce an empty range.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("illegal range. equal from and to will produce an empty range.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("&CayH=B89CvThresh>Gd must n_7 be negative");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("&cAYh=b89cVtHRESH>gD MUST N_7 BE NEGATIVE", string6);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)13;
      String string7 = StringUtils.join(byteArray0, 'W', 37, 4);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)13}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Arguments cannot both be null", "y:w");
      assertEquals("Arguments cannot both be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("y:w");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("Arguments cannot both be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.strip("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.center(" L", 5);
      assertEquals("  L  ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 151, "t%XNG~![2Hj^-Xp");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 5);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("t%XNG~![2Hj^-Xp", "set", 5);
      assertFalse(string2.equals((Object)string0));
      assertEquals("t%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xpsett%XNG~![2Hj^-Xp", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "|x)|L", 151);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("t%XNG~![2Hj^-Xp");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("t%XNG~![2Hj^-Xp", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("nYyCfx3uqdyJ", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      long[] longArray0 = new long[2];
      String string0 = StringUtils.join(longArray0, 'j');
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("0j0", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("0j0", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceAll("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("R6uh&eGD}", string2);
      assertNotNull(string2);
      
      int int0 = Integer.MIN_VALUE;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", Integer.MIN_VALUE);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#Lu@z\"~gPsan>X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rightPad("", (-1764), "#Lu@z\"~gPsan>X");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", (-1764));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(", Length: 0", "FT2_>_9A3Z&w", (-1), (-1692));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.mid("A", 445, 11);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.truncate("The Array must not be null", 2308);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", 445, "]XG4}C\"L30M");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M]XG4}C\"L30M", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXAborting to protect against StackOverflowError - output of one loop is the input of anotherRJqaGL#LqXRJqaGL#LqX");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.substringBefore("RepeatFailedTestExtension", "P2!:&ovV^*!J%>");
      assertEquals("RepeatFailedTestExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("RepeatFailedTestExtension", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("RepeatFailedTestExtension", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("RepeatFailedTestExtension");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P2!:&ovV^*!J%>";
      charSequenceArray0[1] = (CharSequence) "RepeatFailedTestExtension";
      charSequenceArray0[2] = (CharSequence) "RepeatFailedTestExtension";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("dd3`F@C1={O");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.defaultString("Ht7)9U3:a<yoW", "mxq3T#u(-,cb");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ht7)9U3:a<yoW", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "dd3`F@C1={O", (char[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((char[]) null, '\"', 1, 10);
      assertNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("\n", (String) null, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("...", "The character ", "Object varargs must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getDigits("RepeatFailedTestExtension");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.compareIgnoreCase("F|-TXWsyn", "The String must not be empty");
      assertEquals((-14), int0);
      
      String string7 = StringUtils.rightPad("vEUvijj0#!91a", (-14), "mxq3T#u(-,cb");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("vEUvijj0#!91a", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.chomp("dd3`F@C1={O");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("dd3`F@C1={O", string8);
      assertNotNull(string8);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "Object varargs must not be null", (CharSequence) "dd3`F@C1={O");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("I", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, ' ');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int[] intArray0 = new int[4];
      char[] charArray0 = new char[1];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rotate(" ", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.remove("4xLKIZu7kENm:g", 'N');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4xLKIZu7kEm:g", string2);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "4xLKIZu7kEm:g";
      charSequenceArray0[1] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      String string2 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("Wa3>%WB#ruO");
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) 12;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)101;
      String string3 = StringUtils.join(byteArray0, '0');
      assertArrayEquals(new byte[] {(byte) (-4), (byte)4, (byte)97, (byte)53, (byte)101}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-4040970530101", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "Fyy<o:", (int) (byte)97, 0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.rotate("Wa3>%WB#ruO", (byte)97);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("3>%WB#ruOWa", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAny(".h +", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      String string1 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'D');
      assertEquals(0, int0);
      
      String string2 = StringUtils.trimToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compare("_<~k=Nr", "");
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9d/'A'S%m /");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "_<~k=Nr", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("-j1|f_2 _", ">-hY?");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(">-hY?-j1|f_2 _>-hY?", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "(|", (CharSequence) "Y,xIE&H/UJ");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("(|");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string4 = StringUtils.overlay("i/6T*f9g0", "", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("i/6T*f9g0", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(|", ">-hY?-j1|f_2 _>-hY?", 8);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) ">-hY?-j1|f_2 _>-hY?", (CharSequence) "");
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int2);
      
      boolean boolean6 = StringUtils.isNoneBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "*_2>%I", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      long[] longArray1 = new long[6];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1677L);
      longArray1[1] = 0L;
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = (-1L);
      String string0 = StringUtils.join(longArray1, 'y', 31, 31);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1677L), 0L, (-1L), 0L, 0L, (-1L)}, longArray1);
      assertEquals(6, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("^^AjF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^^AjF", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("Failed to get parent directory from provider", 'q');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qFailed to get parent directory from providerq", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("W}cDG{cKuo>o,3%Y7&", 15, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y7&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.toRootUpperCase("W}cDG{cKuo>o,3%Y7&");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("W}CDG{CKUO>O,3%Y7&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Y7&", '\\');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\\Y7&\\", string4);
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, '(');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) 101;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) '\\';
      floatArray0[4] = (float) 15;
      floatArray0[5] = 701.9673F;
      String string6 = StringUtils.join(floatArray0, 'v');
      assertArrayEquals(new float[] {40.0F, 101.0F, 101.0F, 92.0F, 15.0F, 701.9673F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("40.0v101.0v101.0v92.0v15.0v701.9673", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase("h");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("h", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat("|IJfQtn5~l|IJfQtn5~l", 15);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l|IJfQtn5~l", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "Q3!Y^_%Y=qUk4^7A");
      assertEquals(4, int0);
      
      String string1 = StringUtils.defaultString("Loca=zHust not benull", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Loca=zHust not benull");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[1] = (CharSequence) "Q3!Y^_%Y=qUk4^7A";
      charSequenceArray0[2] = (CharSequence) "Loca=zHust not benull";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("$", "$");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("\r", 475);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("8J8Z+5Td:|eIl_C;+o").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("8J8Z+5Td:|eIl_C;+o", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substring("KsR/b", (-1127));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("KsR/b", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("|IJfQtn5~l|IJfQtn5~l", "KsR/b", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("|IJfQtn5~l|IJfQtn5~l", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("7d}W", "BXna!J;%}+", "b>>fS|7*VL<?+;$GF");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("7d}W", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getDigits((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.chomp("wm|INhbjtkvrN)o'");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("wm|INhbjtkvrN)o'", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.replaceIgnoreCase("Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 32);
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ul]0PeY|Bt,*B";
      stringArray0[1] = "io";
      stringArray0[2] = "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]";
      stringArray0[3] = null;
      stringArray0[4] = "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]";
      stringArray0[5] = "io";
      stringArray0[6] = "Ul]0PeY|Bt,*B";
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("6DLST xs:++T", "");
      assertFalse(string3.equals((Object)string1));
      assertEquals("6DLST xs:++T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("6DLST xs:++T");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "=8G";
      stringArray0[3] = null;
      stringArray0[4] = "";
      String string4 = StringUtils.replaceEach("=8G", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=8G", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-692);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)390;
      shortArray0[4] = (short)0;
      String string5 = StringUtils.leftPad(string0, (int) (short) (-692));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeStart("Don't clear/set the same property more than once.", "<P T.[");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Don't clear/set the same property more than once.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("~9*Q ", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'H');
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("~9*Q +~9*Q ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd((String) null, "~)!cp@KCbpdf]");
      assertNull(string5);
      
      String string6 = StringUtils.left("", (-4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("Don't cl", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("Don't cl", string7);
      assertNotNull(string7);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "~9*Q +~9*Q ");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      
      String string8 = StringUtils.getDigits("");
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.upperCase("{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("{}", (-380), '');
      assertTrue(string1.equals((Object)string0));
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("{}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("{}");
      assertTrue(boolean0);
      
      String string2 = StringUtils.joinWith("{}", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{{}}", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = new String[21];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "B/M|Id${OtG+Q_^";
      stringArray1[1] = "B/M|Id${OtG+Q_^";
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(21, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("B/M|Id${OtG+Q_^");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.split("{}", "P6PsYOV[3a");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("", (String) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("7 $a4\"~s>p", (-1290), 'o');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("7 $a4\"~s>p", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1290);
      doubleArray0[1] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, 'o', 8192, 8192);
      assertArrayEquals(new double[] {(-1290.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.valueOf((char[]) null);
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ")tx{4)qHp^", 2419, (-1290));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string6 = StringUtils.joinWith("Cannot store ", objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string7 = StringUtils.abbreviate((String) null, "Cannot store ", 13, 13);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = "cD;g";
      int int0 = StringUtils.compareIgnoreCase((String) null, "cD;g", false);
      assertEquals(1, int0);
      
      String string1 = StringUtils.center("Z[OrgW3>3 L+'q", 109, '@');
      assertFalse(string1.equals((Object)string0));
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("cD;g", "cD;g", (CharSequence[]) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("cD;g", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("cD;g", "9{/dVk66", 43);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9{/dVk66");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("maxWith cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripAccents("oWJ7)oSy?z9L`@U6");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("oWJ7)oSy?z9L`@U6", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", Integer.MIN_VALUE);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.rightPad("^Y~G)_", 18, "k^8{0z*gb6?~l4x_*mt");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("^Y~G)_k^8{0z*gb6?~", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("maxWith cannot be negative", "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = "dekAv\"[\\Yt'XQ/}%";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", "dekAv\"[Yt'XQ/}%", "oWJ7)oSy?z9L`@U6");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // dekAv\"[Yt'XQ/}%
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst(",rK ", "{o9wEyANd'e");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {o9wEyANd'e
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = "W}cDG{cKuo>o,3%Y7&";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("W}cDG{cKuo>o,3%Y7&", "W}cDG{cKuo>o,3%Y7&");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // W}cDG{cKuo>o,3%Y7&
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("|IJfQtn5~l", "oWJ7)oSy?z9L`@U6", "|IJfQtn5~l");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|IJfQtn5~l", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertFalse(treeSet0.contains(string1));
      assertFalse(navigableSet0.contains(string1));
      assertNotNull(navigableSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, '\\');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertFalse(treeSet0.contains(string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.defaultString("{xs", "{xs");
      assertEquals("{xs", string0);
      assertNotNull(string0);
      
      int int0 = 2079;
      String string1 = StringUtils.overlay("0C%VAyV", "2s^@aV-S", 52, 2079);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0C%VAyV2s^@aV-S", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{xs";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{xs", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("MxGt1", "2s^@aV-S");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("MxGt1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("{xs");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("{xs", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("{xs", "MxGt1", "{xs");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("{xs", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize("MxGt1");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("MxGt1", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = 'e';
      charArray0[2] = 'b';
      String string7 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {':', 'e', 'b'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals(":eb", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.equalsAny("{xs", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("{xs");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "{xs");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.firstNonEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("{xs", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isNotEmpty("{xs");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase("{xs", "{xs");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'R', (-623), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -623
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String string0 = StringUtils.replace("em", "=", "=", 49);
      assertEquals("em", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width is %d", "org.junitpioneer.jupiter.DefaultLocaleExtension", "Zbm$");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("UdmL6Bqa.34v#E", '&');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UdmL6Bqa.34v#E", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width is %d", "UdmL6Bqa.34v#E");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "=";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[5] = (CharSequence) "em";
      String string3 = StringUtils.upperCase("Zbm$");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ZBM$", string3);
      assertNotNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "ZBM$";
      charSequenceArray0[7] = (CharSequence) "UdmL6Bqa.34v#E";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("-TyxM!|Y");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-TyxM!|Y", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'D');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("`tZ=Woffset cannot be negative");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("`tZ=Woffset cannot be negative", string4);
      assertNotNull(string4);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      String string5 = StringUtils.reverse("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("egnaRtaolF.smarap.retipuj.reenoiptinuj.gro", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-TyxM!|Y";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertEquals("-TyxM!|Y", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removePattern(" ", "RpdFG-");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals(" ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("[_@q6GR/9XlMZ-zgd", 'a');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("[_@q6GR/9XlMZ-zgd", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "-TyxM!|Y", (CharSequence) "org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "%");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = ";gk";
      try { 
        StringUtils.getBytes(";gk", ";gk");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("io");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("io", "io");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\n", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '%';
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '%');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string3 = StringUtils.substringAfterLast("\r", "\r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Threshold must not be negative", 415);
      assertNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Y,xIE&H/UJ", 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("[0m>0-bj#\\.%9] $Mjb", "BB}@#1", "~<3):)u58eF-?4?JK", (-1644));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0m>0-bj#\\.%9] $Mjb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(", '", "BB}@#1");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1576;
      shortArray0[1] = (short)2843;
      shortArray0[2] = (short)2843;
      shortArray0[3] = (short)321;
      shortArray0[4] = (short) (-725);
      shortArray0[5] = (short) (-1471);
      shortArray0[6] = (short) (-725);
      shortArray0[7] = (short)53;
      String string3 = StringUtils.join(shortArray0, 'f', (int) (short)321, (-1049));
      assertArrayEquals(new short[] {(short)1576, (short)2843, (short)2843, (short)321, (short) (-725), (short) (-1471), (short) (-725), (short)53}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "Wa3>%WB#ruO");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1471);
      intArray0[1] = (int) (short) (-725);
      intArray0[2] = (int) (short)2843;
      intArray0[3] = (int) (short)2843;
      intArray0[4] = (int) 'f';
      String string4 = StringUtils.join(intArray0, 'f');
      assertArrayEquals(new int[] {(-1471), (-725), 2843, 2843, 102}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-1471f-725f2843f2843f102", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.overlay("jHdWPrH/ChN4Y", "jHdWPrH/ChN4Y", 57, 57);
      assertEquals("jHdWPrH/ChN4YjHdWPrH/ChN4Y", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("jHdWPrH/ChN4YjHdWPrH/ChN4Y", "!;'!Qze}56f\"0 O");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("!;'!Qze}56f\"0 O");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("jHdWPrH/ChN4YjHdWPrH/ChN4Y");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "jHdWPrH/ChN4YjHdWPrH/ChN4Y";
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = StringUtils.stripToNull("jHdWPrH/ChN4YjHdWPrH/ChN4Y");
      assertTrue(string1.equals((Object)string0));
      assertEquals("jHdWPrH/ChN4YjHdWPrH/ChN4Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("Wy8lJt-;#qgr", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Wy8lJt-;#qgr", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("jHdWPrH/ChN4YjHdWPrH/ChN4Y", ">/;");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">/;", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chop("\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'm');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("R6uh&eGD}");
      assertEquals(9, int0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.mid("R6uh&eGD}", 1, 'm');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6uh&eGD}", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("6uh&eGD}", "6uh&eGD}");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("6uh&eGD}");
      assertFalse(boolean0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string4 = StringUtils.join((List<?>) stack0, "", 9, 9);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertFalse(stack0.isEmpty());
      assertEquals("[IGNORE_EXTENDED_RANGES]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      String string5 = StringUtils.substringAfterLast("7`\"7)m\"`9|/UK\n$$zI", "6uh&eGD}");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "#Lu@z\"~gPsan>X";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("X+?8< /479cV1:p,&Z5");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("X+?8< /479cV1:p,&Z5", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.repeat("X+?8< /479cV1:p,&Z5", 1);
      assertEquals("X+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '7');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Zbm$", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("", 1804);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeIgnoreCase("", "\"");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '{');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.ordinalIndexOf("", "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.wrap("", "");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Zbm$");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
      
      String string7 = StringUtils.stripEnd("junit-pioneer", "a!&5");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("junit-pioneer", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      String string8 = StringUtils.left("", (-1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "Q3!Y^_%Y=qUk4^7A");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Zbm$");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 9);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "maxWith cannot be negative");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'b');
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("bAborting to protect against StackOverflowError - output of one loop is the input of anotherb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("c97)R=aFDHo", (-2207), 'u');
      assertFalse(string1.equals((Object)string0));
      assertEquals("c97)R=aFDHo", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("...", "(}8 2Pw");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center((String) null, (-68), '\\');
      assertNull(string3);
      
      String string4 = StringUtils.join((double[]) null, 'T', 107, 2371);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("c97)R=aFDHo");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("C97)r=AfdhO", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("X+?8< /479cV1:p,&Z5", 1706);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("X+?8< /479cV1:p,&Z5", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "c97)R=aFDHo";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string7 = StringUtils.stripStart("(}8 2Pw", (String) null);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("(}8 2Pw", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(" vs ", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'p');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length(" vs ");
      assertEquals(4, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "6g", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.mid("?}@'q2P59qR6ay5", 90, 90);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string4 = StringUtils.appendIfMissing("kXS\"\"nTL", "/NeMu4@l2eOpB3p2fD;", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("kXS\"\"nTL/NeMu4@l2eOpB3p2fD;", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("kXS\"\"nTL/NeMu4@l2eOpB3p2fD;", "?}@'q2P59qR6ay5");
      assertEquals(0.4, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty(" vs ");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'p';
      longArray0[2] = (long) 'p';
      longArray0[4] = (-40L);
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "Failed to create default temp directory");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Charset.forName("szo_q pEHq");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // szo_q pEHq
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(" vs ", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'f');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length(" vs ");
      assertEquals(4, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "6g", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.mid("?}@'q2P59qR6ay5", 90, 90);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string4 = StringUtils.appendIfMissing("kXS\"\"nTL", "/NeMu4@l2eOpB3p2fD;", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("kXS\"\"nTL/NeMu4@l2eOpB3p2fD;", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("kXS\"\"nTL/NeMu4@l2eOpB3p2fD;", "?}@'q2P59qR6ay5");
      assertEquals(0.4, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty(" vs ");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'f';
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) '';
      longArray0[4] = (-40L);
      longArray0[5] = (long) (-1);
      String string5 = StringUtils.join(longArray0, 'v');
      assertArrayEquals(new long[] {0L, 102L, 102L, 127L, (-40L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("0v102v102v127v-40v-1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'C';
      charArray0[2] = 'p';
      charArray0[3] = 'f';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Comparator should not be null.", charArray0);
      assertArrayEquals(new char[] {'f', 'C', 'p', 'f', '', '', 'f', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      char char0 = 'H';
      String string2 = StringUtils.center(">ywuF?:eaL0V%6g", (-696), "lhF/V832,T");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">ywuF?:eaL0V%6g", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "lhF/V832,T", (CharSequence) "lhF/V832,T");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("R6uh&eGD}");
      assertFalse(boolean0);
      
      String string3 = "Failed to create custom temp directory";
      String string4 = StringUtils.repeat(">ywuF?:eaL0V%6g", "Failed to create custom temp directory", (-696));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase((String) null, "/VZg`4p$cm-{R");
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Failed to create custom temp directory", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'g');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, 29, 0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "a[NF!g=z!beW\"E", (-1133));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("daHuI");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripAccents("");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 36);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 1, "daHuI");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("0C%VAyV", "quc~ZeaZ`*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("0C%VAyV", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      boolean boolean3 = arrayList0.add((Object) "quc~ZeaZ`*");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("quc~ZeaZ`*"));
      assertFalse(arrayList0.contains(""));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(arrayList0.contains("quc~ZeaZ`*"));
      assertFalse(arrayList0.contains(""));
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.substringBetween((String) null, "DefaultTimeZone");
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOf((CharSequence) "DefaultTimeZone", (CharSequence) null, 997);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf("\r", "DefaultTimeZone", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("G", 1, '\u0010');
      assertFalse(string1.equals((Object)string0));
      assertEquals("G", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) "G");
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripStart("G", "m");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("G", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], (CharSequence) "m");
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBeforeLast("G", "`hJ_7y`|'");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("G", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      String string4 = StringUtils.join(byteArray0, '\u0010');
      assertArrayEquals(new byte[] {(byte)54, (byte)16, (byte)82, (byte)16, (byte)16}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("54\u001016\u001082\u001016\u001016", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "org.junitpioneer.jupiter.DefaultLocaleExtension", (-1), (-273));
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, 's', 195, 195);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 53, 't');
      assertEquals("4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      assertFalse(string1.equals((Object)string0));
      assertEquals("&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("4l'o<>");
      assertEquals(6, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.replaceChars("&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&", string2);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string3 = StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "4l'o<>", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4l'o<>org.junitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceChars((String) null, "\"_#zYEQg]K+&/d+*Gl", ":a");
      assertNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string6 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.defaultIfBlank((String) null, "&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals("&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null, 53);
      assertNull(stringArray1);
      
      String string8 = StringUtils.join((int[]) null, '0', 120, 98);
      assertNull(string8);
      
      boolean boolean2 = StringUtils.isBlank("&4l'o<>ttttttttttttttttttttttttttttttttttttttttttttttt&");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("/%Xy.yVBsZbMxbP5");
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "Q3!Y^_%Y=qUk4^7A");
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Q3!Y^_%Y=qUk4^7A", 13);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("Loca=zHust not benull", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Loca=zHust not benull", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string1 = StringUtils.truncate("Strings must not be null", 1355, 1328);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("|x)|L", "z1ofu4Ni[");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean4 = StringUtils.containsWhitespace("k@:t?K/}}");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string2 = StringUtils.toRootLowerCase(" vs ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", 538);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1355;
      intArray0[1] = 1328;
      intArray0[2] = 0;
      intArray0[3] = 538;
      intArray0[4] = (-1);
      intArray0[5] = 538;
      intArray0[6] = 4597;
      intArray0[7] = 1328;
      String string3 = StringUtils.join(intArray0, 'n');
      assertArrayEquals(new int[] {1355, 1328, 0, 538, (-1), 538, 4597, 1328}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("1355n1328n0n538n-1n538n4597n1328", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "k@:t?K/}}";
      charSequenceArray0[1] = (CharSequence) "";
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = 1065L;
      longArray0[8] = (-785L);
      String string0 = StringUtils.join(longArray0, 'L');
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1934L), 0L, (-1L), 0L, 1065L, (-785L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("0L0L-1L-1934L0L-1L0L1065L-785", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("s|E@[", "s|E@[");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("fyuV\":lJ0C%VAyV+!/", (String) null, "s|E@[");
      assertNull(stringArray0);
      
      String string2 = StringUtils.appendIfMissing("Threshold must not be negative", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.appendIfMissing((String) null, (CharSequence) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 7, 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("ALgwB4hwxn$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("", 1062, 4);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, '{');
      assertNull(string2);
      
      String string3 = StringUtils.remove("Illegal range. Equal from and to will produce an empty range.", '{');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("Illegal range. Equal from and to will produce an empty range.", supplier0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.uncapitalize("");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("Illegal range. Equal from and to will produce an empty range.", "p{InCombiningDiacriticalMarks}+", false);
      assertEquals((-7), int0);
      
      String string7 = StringUtils.join((Object[]) stringArray0, "IG~Dg^9");
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("ALgwB4hwxn$", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultIfEmpty("UdmL6Bqa.34v#E", "_.i7gu/");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertEquals("UdmL6Bqa.34v#E", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.ReportEntryExtension", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.rightPad("0C%VAyV", 13, 'W');
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertEquals("0C%VAyVWWWWW", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.compareIgnoreCase("blank_blank_blank_2014", "2*nC", false);
      assertFalse(int1 == int0);
      assertEquals(48, int1);
      
      String string10 = StringUtils.unwrap("", '.');
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '?');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-762.91422);
      doubleArray0[2] = 0.7;
      String string0 = StringUtils.replacePattern("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 13);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.params.RangeSourceProvider", 3, ',');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceProvider", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEnd("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", "org.junitpioneer.jupiter.params.RangeSourceProvider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.params.RangeSourceProvider", "y[nl]e+u#~~#yX{(BW");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'm');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'E', (-164), (int) 'E');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.overlay("_<P T.[Don'tGclear/szt the same property more than once.", "_<P T.[Don'tGclear/szt the same property more than once.", 3535, (-288));
      assertEquals("_<P T.[Don'tGclear/szt the same property more than once.", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("_<P T.[Don'tGclear/szt the same property more than once.", "xRp", "_<P T.[Don'tGclear/szt the same property more than once.");
      assertNull(stringArray0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("J\"A_QqTghG1s5z", "J\"A_QqTghG1s5z");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes(" vs ", charset0);
      assertArrayEquals(new byte[] {(byte)32, (byte)118, (byte)115, (byte)32}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.overlay("", "9RkB.s<lm@oZh'SpGz", 4, (-276));
      assertEquals("9RkB.s<lm@oZh'SpGz", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("9RkB.s<lm@oZh'SpGz", "9RkB.s<lm@oZh'SpGz", "9RkB.s<lm@oZh'SpGz");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "XpKq&uv0", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "XpKq&uv0", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "XpKq&uv0", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "XpKq&uv0", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1), (-2488));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("!iJ}", (-3880), (-3880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("p{InCombiningDiacritialMarks}+\n", "p{InCombiningDiacritialMarks}+\n", "p{InCombiningDiacritialMarks}+\n");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacritialMarks}+
         // 
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      String string0 = StringUtils.removeIgnoreCase("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "");
      assertEquals("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny(".H9%", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.leftPad("maxWith cannot be negative", 55, '{');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      String string0 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("9'wv``)*\"Ql0QC", "9'wv``)*\"Ql0QC");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Thresh>Gd must n_7 be negative";
      stringArray0[1] = "U";
      stringArray0[2] = "9'wv``)*\"Ql0QC";
      stringArray0[3] = "";
      stringArray0[4] = "9'wv``)*\"Ql0QC";
      stringArray0[5] = "tYj";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.leftPad("{#", 171, '{');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{#", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "tYj", "tYj");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isBlank("U");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{#";
      charSequenceArray0[1] = (CharSequence) "Thresh>Gd must n_7 be negative";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "U";
      charSequenceArray0[5] = (CharSequence) "9'wv``)*\"Ql0QC";
      String string3 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", "9'wv``)*\"Ql0QC", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("\"0<2[%):h,1:", "\"0<2[%):h,1:", "\"0<2[%):h,1:");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11
         // \"0<2[%):h,1:
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.removeFirst("3xvmENBU5ML", "3xvmENBU5ML");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "cD;g", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.center("Z[OrgW3>3 L+'q", 109, '@');
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("cD;g", "cD;g", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cD;g", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("cD;g", "9{/dVk66", 43);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9{/dVk66");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("maxWith cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("oWJ7)oSy?z9L`@U6");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("oWJ7)oSy?z9L`@U6", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", Integer.MIN_VALUE);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.rightPad("^Y~G)_", 18, "k^8{0z*gb6?~l4x_*mt");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("^Y~G)_k^8{0z*gb6?~", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("'Oew!`ax%bGVvd!;}'", "'Oew!`ax%bGVvd!;}'");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", "dekAv\"[Yt'XQ/}%", "oWJ7)oSy?z9L`@U6");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // dekAv\"[Yt'XQ/}%
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "");
      assertNull(stringArray1);
      
      int int1 = StringUtils.compare("Hak(HzI0-?5", "");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace(" vs ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.toRootLowerCase("1ct#`fFBlMRqU");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1ct#`ffblmrqu", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.removeFirst("@D", "@D");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", (-1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 102, 5737);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.remove((Object) "");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(5737));
      assertNotNull(priorityQueue0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(5737));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals(0, priorityQueue0.size());
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(priorityQueue0.contains(5737));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("", "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", 127);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_rGpu");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "_rGpu", 122, 122);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((Object[]) null, "maxWith cannot be negative", 116, (int) (byte)1);
      assertNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)768;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (-696);
      String string1 = StringUtils.join(shortArray0, '@');
      assertArrayEquals(new short[] {(short)768, (short)2, (short)1, (short) (-696)}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern(")\"\r/f/9Swj?V1F", "nVg!dE%%u'", "nVg!dE%%u'");
      assertEquals(")\"\r/f/9Swj?V1F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("vqlp>-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vqlp>-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("vqlp>-", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vqlp>-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("vqlp>-", 2501, "Strings muXt not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "", 867);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(867, int1);
      
      String string5 = StringUtils.swapCase("vqlp>-");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("VQLP>-", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Strings muXt not be null", (CharSequence) "vqlp>-");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2501, "@");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nVg!dE%%u'");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.abbreviate((String) null, (String) null, 867, 285);
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("VQLP>-");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.upperCase("nVg!dE%%u'");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals("NVG!DE%%U'", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("VQLP>-", 102, "Minimum abbreviation width with offset is %d");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum VQLP>-", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.join((Object[]) stringArray1, "Strings muXt not be null", 2501, 867);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("Z[OrgW3>3 L+'q", 98, ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");
      assertTrue(boolean0);
      
      String string2 = StringUtils.joinWith("", stringArray0);
      assertEquals(15, stringArray0.length);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Array and element cannot both be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, '@', 1855, (-2021));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Arrayandelementcannotbothbenull", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(15, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.chomp("", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Z[OrgW3>3 L+'q");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.rightPad("*fNnx", 2419);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("*fNnx");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*fNnx");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = ')';
      charArray0[2] = 'b';
      charArray0[3] = '\'';
      charArray0[4] = 'L';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "*fNnx", charArray0);
      assertArrayEquals(new char[] {'.', ')', 'b', '\'', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replaceAll("pCXOZ*+;X^0Hm n{>g", "', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pCXOZ*+;X^0Hm n{>g", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("*fNnx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale locale0 = Locale.forLanguageTag("*fNnx");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = StringUtils.upperCase("", locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("m");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '+');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '+');
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("m+m+m+m+m+m+++", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("Z[OrgW3>3 L+'q", "m");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Z[OrgW3>3 L+'q", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[5], "m+m+m+m+m+m+++");
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("j>S>M#[", 4365, 'h');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[4]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 39);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", (-1), 'B');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("k@:t?K/}}", 0, 39);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("k@:t?K/}}", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-755));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "k@:t?K/}}", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.wrapIfMissing("UdmL6Bqa.34v#E", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtilsUdmL6Bqa.34v#Eorg.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace(", Length: 0");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(",Length:0", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("', is neither of type Map.Entry nor an Array", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tZ=W", 548, "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", "offset cannot be negative");
      assertEquals(0.68, double0, 0.01);
      
      String string1 = StringUtils.removeStartIgnoreCase("`tZ=W", "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`tZ=W", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "offset cannot be negative";
      objectArray0[1] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      objectArray0[2] = (Object) "`tZ=W";
      objectArray0[3] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      objectArray0[4] = (Object) "offset cannot be negative";
      String string2 = StringUtils.join(objectArray0, 'w');
      assertEquals(5, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("-TyxM!|Y", 548, 't');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt-TyxM!|Ytttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((double[]) null, '5', (-1), 59);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("offset cannot be negative");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("OFFSET CANNOT BE NEGATIVE", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, 1);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      charSequenceArray0[2] = (CharSequence) string2;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      charSequenceArray0[4] = (CharSequence) "OFFSET CANNOT BE NEGATIVE";
      charSequenceArray0[5] = (CharSequence) "offset cannot be negative";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "bio", "bio");
      assertEquals(0, int0);
      
      String string0 = StringUtils.left((String) null, 49);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("\n", '|');
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare((String) null, "Y,xIE&H/UJ", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.defaultString("hi-'NpGR.tAXa7iW", "]XG4}C\"L30M]XG4}C\"L30M");
      assertEquals("hi-'NpGR.tAXa7iW", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.remaining());
      assertEquals("%{", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.join((Object[]) null, '{');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      String string0 = StringUtils.rotate(";", 27);
      assertEquals(";", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(";", ";", 53);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints(";");
      assertArrayEquals(new int[] {59}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ";", (CharSequence) "{}");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, '2');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOf((CharSequence) "", 53, 0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("W<K|YIC+) eRm", 'M');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W<K|YIC+) eRm", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 66);
      assertNull(string4);
      
      int int4 = StringUtils.compare(";", (String) null, false);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("|IJfQtn5~l", "|IJfQtn5~l");
      assertEquals("|IJfQtn5~l", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "|IJfQtn5~l", (CharSequence) "|IJfQtn5~l");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("|IJfQtn5~l", "oWJ7)oSy?z9L`@U6", "|IJfQtn5~l");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|IJfQtn5~l", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "|IJfQtn5~l", false);
      assertFalse(int1 == int0);
      assertEquals((-92), int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("|IJfQtn5~l"));
      assertNotNull(treeSet0);
      
      NavigableSet<String> navigableSet0 = treeSet0.descendingSet();
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertFalse(treeSet0.contains("|IJfQtn5~l"));
      assertFalse(navigableSet0.contains("|IJfQtn5~l"));
      assertNotNull(navigableSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains("|IJfQtn5~l"));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, '\\');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertFalse(treeSet0.contains("|IJfQtn5~l"));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      String[] stringArray0 = StringUtils.split(" vs ", " vs ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" vs ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(":Cw6<c");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripToEmpty("US-5A'BaKN6f^'$28");
      assertFalse(string1.equals((Object)string0));
      assertEquals("US-5A'BaKN6f^'$28", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", (CharSequence) "US-5A'BaKN6f^'$28", 108);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad("m", 892, "m");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string2);
      assertNotNull(string2);
      
      StringUtils.join((Object[]) stringArray0, "m", Integer.MIN_VALUE, 21);
      StringUtils.isMixedCase("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");
      StringUtils.isMixedCase(":Cw6<c");
      StringUtils.getDigits(" vs ");
      StringUtils.startsWithAny("", stringArray0);
      StringUtils.uncapitalize("i");
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      String string1 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("m", "dI", Integer.MIN_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("m");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("dI");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("m");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "m", charSequenceArray0[0], Integer.MIN_VALUE);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("dI", (-4010), "m");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dI", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "The character must not be null", 56, 56);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isMixedCase("m");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("The character must not be null");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string5 = StringUtils.getDigits("The character must not be null");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("~Jxl>xMMCa&z1bN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("W}cDG{cKuo>o,3%Y7&", 15, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y7&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("W}cDG{cKuo>o,3%Y7&", "W}cDG{cKuo>o,3%Y7&");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("W}cDG{cKuo>o,3%Y7&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Y7&", 'x');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("xY7&x", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", (-2560), 'u');
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("pD,JvzW%dJs`i'Z~-", "\">d$PRV.~G\"f");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("pD,JvzW%dJs`i'Z~-", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", 15, '5');
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((double[]) null, 'u', 32, 101);
      assertNull(string8);
      
      String string9 = StringUtils.swapCase("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertEquals("                                           oa\"{Y|hHD}]_.xJ                                           ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.left("Y7&", 26);
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals("Y7&", string10);
      assertNotNull(string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      charSequenceArray0[1] = (CharSequence) "Y7&";
      charSequenceArray0[2] = (CharSequence) "W}cDG{cKuo>o,3%Y7&";
      charSequenceArray0[3] = (CharSequence) "xY7&x";
      charSequenceArray0[4] = (CharSequence) "\">d$PRV.~G\"f";
      charSequenceArray0[5] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      charSequenceArray0[6] = (CharSequence) "W}cDG{cKuo>o,3%Y7&";
      charSequenceArray0[7] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.center("Wa3>%WB#ruO", 1, 'F');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Wa3>%WB#ruO");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Wa3>%WB#ruO");
      assertTrue(boolean0);
      
      String string2 = StringUtils.joinWith("C29#<,9ra*wV<K%}qO9", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WC29#<,9ra*wV<K%}qO9aC29#<,9ra*wV<K%}qO93C29#<,9ra*wV<K%}qO9>C29#<,9ra*wV<K%}qO9%C29#<,9ra*wV<K%}qO9WBC29#<,9ra*wV<K%}qO9#C29#<,9ra*wV<K%}qO9ruC29#<,9ra*wV<K%}qO9O", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("]XG4}C\"L30M");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "Wa3>%WB#ruO");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("_v(tJT@XOeIl", 12, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_v(tJT@XOeIl", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("_v(tJT@XOeIl");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Wa3>%WB#ruO");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.substringsBetween("Wa3>%WB#ruO", "Wa3>%WB#ruO", "");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("maxWith cannot be negative", "\r", 1, 3);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ma\r", string1);
      assertNotNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("maxWith cannot be negative"));
      assertNotNull(stack0);
      
      boolean boolean0 = StringUtils.isBlank("ma\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("\r", 1);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "maxWith cannot be negative");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.removeEnd("ma\r", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ma", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "XpKq&uv0", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "XpKq&uv0", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "XpKq&uv0", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "XpKq&uv0", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.strip((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.joinWith("\r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string5.equals((Object)string0));
      assertEquals("XpKq&uv0", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern((String) null, "Hg+", "Hg+");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.repeat("|x)|L", "k@:t?K/}}", 108);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.replaceIgnoreCase("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "nvk6D@", "Object varargs must not be null", (-1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("rahIRbQ[+2{}*>fOmw", "y^A1Yo/!", false);
      assertFalse(int1 == int0);
      assertEquals((-7), int1);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isBlank("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceFirst("G=lx", "m", "m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G=lx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("\r", (-1289), "/aU");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("G=lx", "oWJ7)oSy?z9L`@U6");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("G=lx", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.defaultString("B#($Fo9~6I>ty", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("B#($Fo9~6I>ty", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("b^r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("b^r", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "B#($Fo9~6I>ty", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U%KV!ME", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";", ";");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAny(";", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "o", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("java.lang.Object@1225552c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "cD;g", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.center("Z[OrgW3>3 L+'q", 109, '@');
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(35, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(35, stringArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("A", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("A");
      assertTrue(boolean0);
      
      String string1 = StringUtils.joinWith("R", stringArray0);
      assertEquals(35, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("ARbortingR RtoR RprotectR RagainstR RSRtackRORverflowRERrrorR R-R RoutputR RofR RoneR RloopR RisR RtheR RinputR RofR Ranother", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("R");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = '@';
      String string2 = StringUtils.join(charArray0, 'm', 2, 2);
      assertArrayEquals(new char[] {'@', '@', '@'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(35, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "R", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(35, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Zbom$", (CharSequence) "Zbom$", (-781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      String string0 = StringUtils.replace("_+d^A", "_+d^A", "_+d^A");
      assertEquals("_+d^A", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("-6H`94CD*T:f[;N", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-6H`94CD*T:f[;N", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)82;
      String string2 = StringUtils.join(byteArray0, '(');
      assertArrayEquals(new byte[] {(byte)82, (byte)107, (byte) (-22), (byte)107, (byte)82, (byte)107, (byte)16, (byte)16, (byte)82}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("82(107(-22(107(82(107(16(16(82", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("82(107(-22(107(82(107(16(16(82");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("82(107(-22(107(82(107(16(16(82", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "82(107(-22(107(82(107(16(16(82", (CharSequence) "82(107(-22(107(82(107(16(16(82", (int) (byte) (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) " vs ", 108);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip(" vs ", "p{InCombiningDiacriticalMarks}+");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("strings must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("strings must not be null", "u", (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.left("8", 76);
      assertEquals("8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set", "@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set");
      assertEquals("@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set", 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used wthlanguage tag i", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set", (CharSequence) "@DefaultLocale can only be used wthlanguage tag if languge, country, and variant are not set");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-762.91422);
      doubleArray0[2] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {0.7, (-762.91422), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("0.7X-762.91422X0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("0.7X-762.91422X0.0", 4, "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.7X-762.91422X0.0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0.7X-762.91422X0.0", "Zbm$");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("0.7X-762.91422X0.0", 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.7X", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("f[l!;pDDd", "0.7X-762.91422X0.0", 4);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultIfEmpty("aK7@>f[", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("aK7@>f[", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("aK7@>f[", "0.7X-762.91422X0.0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("0.7X-762.91422X0.0aK7@>f[", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("h6s;C8]?h{G72t", "sV", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("sVh6s;C8]?h{G72t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("sVh6s;C8]?h{G72t", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      boolean boolean0 = StringUtils.endsWithAny("Strings must not be null", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i-UhaE*4(7aj+a>H";
      stringArray0[1] = "[ALE7~@('EgiBqB";
      stringArray0[2] = "i-UhaE*4(7aj+a>H";
      stringArray0[3] = "\n";
      stringArray0[4] = "-6H`94CD*T:f[;N";
      stringArray0[5] = "-6H`94CD*T:f[;N";
      stringArray0[6] = "[ALE7~@('EgiBqB";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.wrapIfMissing("Array and elemenQ annot both be null", '_');
      assertEquals("_Array and elemenQ annot both be null_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_Array and elemenQ annot both be null_", "-6H`94CD*T:f[;N");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank("-6H`94CD*T:f[;N");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.joinWith("o@OU=h", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("i-UhaE*4(7aj+a>Ho@OU=h[ALE7~@('EgiBqBo@OU=hi-UhaE*4(7aj+a>Ho@OU=ho@OU=h-6H`94CD*T:f[;No@OU=h-6H`94CD*T:f[;No@OU=h[ALE7~@('EgiBqB", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(">", 118);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("-6H`94CD*T:f[;N");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-6H`94CD*T:f[;N", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("...", "o@OU=h", "\n");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" vs ").when(supplier0).get();
      String string0 = StringUtils.getIfBlank("\r", supplier0);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("aH\"BVl&}*:yWwRB4", "{vLUYXk@GaX!3)lt:", 1211);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aH\"BVl&}*:yWwRB4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("zO((gf5op");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ZO((GF5OP", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("{vLUYXk@GaX!3)lt:");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":tl)3!XaG@kXYULv{", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "zO((gf5op", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "9", (CharSequence) "9", 324);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "9", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 9);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 108);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip((String) null, "*p{IHCombiningDiacriticalMarks}+");
      assertNull(string1);
      
      Locale locale0 = Locale.forLanguageTag("Strings must not be null");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("Strings must not be null", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "m");
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.truncate("m", 2, 2026);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("m", 25, 32);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("=9yK", "', is neither of type Map.Entry nor an Array", "`tZ=W");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("{`G9:-xB S", 324, 324);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "{`G9:-xB S", 324);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[3] = (-1934L);
      longArray0[4] = 0L;
      String string0 = StringUtils.removeIgnoreCase(".H9%", ".H9%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" VS ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("wj\":^W$qB)Tl<]]", "1ct#`fFBlMRqU");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring("", 32, 32);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "a[NF!g=z!beW\"E<P T.[Don't clear/set the same property more than once.", "1ct#`fFBlMRqU");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, ";^ihPH|$");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[2] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = StringUtils.join(objectArray0, '#', (-3190), (-3190));
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 108, '#');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils#########################################################################", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.ArrayUtils#########################################################################", "io", "Ul]0PeY|Bt,*B", 108);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils#########################################################################", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("org.apache.commons.lang3.ArrayUtils");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("slitUyarrA.3gnal.snommoc.ehcapa.gro", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "io";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.ArrayUtils#########################################################################";
      charSequenceArray0[4] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[5] = (CharSequence) "io";
      charSequenceArray0[6] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.ArrayUtils#########################################################################";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils#########################################################################";
      stringArray0[1] = "B/M|Id${OtG+Q_^";
      stringArray0[2] = "io";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = 'B';
      charArray0[5] = '#';
      charArray0[6] = '#';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[5], charArray0);
      assertArrayEquals(new char[] {'#', '#', '#', '#', 'B', '#', '#'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Z(IL7(--T~D?sD;", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z(IL7(--T~D?sD;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-982.6142F);
      floatArray0[2] = 1033.6F;
      String string0 = StringUtils.join(floatArray0, '9');
      assertArrayEquals(new float[] {0.0F, (-982.6142F), 1033.6F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("0.09-982.614291033.6", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("0.09-982.614291033.6");
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Zbm$");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZBM$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Don't cl");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Don't cl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removePattern("org.apache.commons.lang3.CharUtils", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.CharUtils", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha("ZBM$");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", "Strings must not be null");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "0.09-982.614291033.6", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("org.apache.commons.lang3.CharUtils"));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.addAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.capitalize("Don't clear/set the same property more than once.");
      assertEquals("Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.apache.comons.lang3.CharS-quenc8Utils");
      assertEquals("Org.apache.comons.lang3.CharS-quenc8Utils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "4", (CharSequence) "4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 102, 5737);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "fw]`");
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("fw]`", 102);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fw]`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      assertEquals(32, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringBetween("h}x]VH&Cn/KFNnX/", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("%HJ5BdXJVK)a");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("_<P T.[Don't clear/set the same property more than once.");
      assertEquals("_<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("V", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("V", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "V", (CharSequence) "wC");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("[R.#");
      assertEquals("[R.#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string0 = StringUtils.upperCase("", locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Wa3>%WB#ruO", "Wa3>%WB#ruO");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.truncate("...", 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("Strings must not be null", "Wa3>%WB#ruO");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'f';
      charArray0[2] = 'U';
      charArray0[3] = '-';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", charArray0);
      assertArrayEquals(new char[] {'U', 'f', 'U', '-', 'U', 'U', 'U'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\n";
      stringArray0[1] = "Hg874WHW:EM+[~Yg";
      stringArray0[2] = "TA+k 1(xK|[-r@~jD";
      stringArray0[3] = "junit-pioneer";
      String string3 = StringUtils.replaceEach("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Hg874WHW:EM+[~Yg");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Laun<chDime");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Laun<chDime", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'm');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("Com-arat;r should not be null.", (String) null, true);
      assertEquals(1, int0);
      
      String string3 = StringUtils.mid("x}6NP(", 1, 16);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("x}6NP(", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("x}6NP(", "x}6NP(");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("x}6NP(");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("W2wBBQ1EP{ t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^,8? )'%;mZouv$Q{b", "The String must not be empty", Integer.MIN_VALUE);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Wa3>%WB#ruO");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("Q3!Y^_%Y=qUk4^7A");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q3!Y^_%Y=qUk4^7A", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String must not be empty", charSequenceArray0[2], 14);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("z'LTm.Ao}fY<", 14, " vs ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z'LTm.Ao}fY< v", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("The String must not be empty", "z'LTm.Ao}fY<");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("The String must not be empty", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("ioioioio", "Failed to get parent directory from provider");
      assertEquals("Failed to get parent directory from providerioioioioFailed to get parent directory from provider", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.rightPad("O`Ocv-i$m", 32, 'g');
      assertEquals("O`Ocv-i$mggggggggggggggggggggggg", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "O`Ocv-i$m";
      charSequenceArray0[1] = (CharSequence) "O`Ocv-i$m";
      charSequenceArray0[2] = (CharSequence) "O`Ocv-i$mggggggggggggggggggggggg";
      charSequenceArray0[3] = (CharSequence) "O`Ocv-i$mggggggggggggggggggggggg";
      charSequenceArray0[4] = (CharSequence) "O`Ocv-i$mggggggggggggggggggggggg";
      charSequenceArray0[5] = (CharSequence) "O`Ocv-i$m";
      String string1 = StringUtils.appendIfMissing("O`Ocv-i$m", "O`Ocv-i$m", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("O`Ocv-i$m", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "O`Ocv-i$m", (-1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "O`Ocv-i$m", 1315);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.rightPad("9EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ0qqMJ0", (-1), "O`Ocv-i$m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ0qqMJ0", string2);
      assertNotNull(string2);
      
      try { 
        StringUtils.getBytes("9EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ09EZ[d0}!MqqMJ0qqMJ0", "_<P T.[Don't clear/set the same property more than once.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Br,");
      assertEquals("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Br,", "Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertEquals(101, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.left("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-3548));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-3548));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 2, 'C');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("}xjk", "}xjk");
      assertEquals("}xjk", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.substring("YCRYRCx3/>Byr]Wx", (-2583), (-2583));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "m>0-bj#\\.%9] $Mjb");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("m>0-bj#\\.%9] $Mjb");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("m>0-bj#\\.%9] $Mjb", "m>0-bj#\\.%9] $Mjb", "9[{[CTf+rE(");
      assertEquals("9[{[CTf+rE(TC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", (-16));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("m>0-bj#\\.%9] $Mjb", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'Z');
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", 0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, 1414, 'Z');
      assertNull(string5);
      
      String string6 = StringUtils.substring("2%UF%?e1", (-755), (-755));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.LF;
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("\n", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "9[{[CTf++E(TC";
      charSequenceArray0[4] = (CharSequence) "nk%d??'aiK_^zTxU[";
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1414);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[1], "\n");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string8 = StringUtils.wrapIfMissing("[0", "m>0-bj#\\.%9] $Mjb");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("m>0-bj#\\.%9] $Mjb[0m>0-bj#\\.%9] $Mjb", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.deleteWhitespace("junit");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertEquals("junit", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.defaultIfBlank((String) null, "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("8J8Z+5Td:|eIl_C;+o").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substring("KsR/b", (-1127));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("KsR/b", string3);
      assertNotNull(string3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      assertTrue(vector0.contains(object0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean1 = vector0.add((Object) locale_FilteringMode0);
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      assertTrue(vector0.contains(object0));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.TempDirectory", "Ul]0PeY|Bt,*B", "io", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("yrotceriDpmeT.retipuj.reenoiptinuj.gro", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.TempDirectory";
      stringArray0[1] = "org.junitpioneer.jupiter.TempDirectory";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("D `+,", "n5Ma");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("D `+,", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("org.junitpioneer.jupiter.TempDirectory", 3, 3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(".ju", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = StringUtils.join(objectArray0, '#', (-3190), (-3190));
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 108, '#');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils#########################################################################", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.ArrayUtils#########################################################################", "io", "Ul]0PeY|Bt,*B", 108);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils#########################################################################", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("org.apache.commons.lang3.ArrayUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("slitUyarrA.3gnal.snommoc.ehcapa.gro", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "io";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.ArrayUtils#########################################################################";
      charSequenceArray0[4] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[5] = (CharSequence) "io";
      charSequenceArray0[6] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.ArrayUtils#########################################################################";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils#########################################################################";
      stringArray0[1] = "B/M|Id${OtG+Q_^";
      stringArray0[2] = "io";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "S0/:%Q,O)}Q}6zn", 64);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("S0/:%Q,O)}Q}6zn", "S0/:%Q,O)}Q}6zn", 64);
      assertEquals("S0/:%Q,O)}Q}6zn", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '2');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "_");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare(" ", "ExceptionWasThrown", false);
      assertFalse(int1 == int0);
      assertEquals((-37), int1);
      
      String string2 = StringUtils.swapCase("_+d^A");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_+D^a", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "_+D^a", (CharSequence) "_");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string3 = StringUtils.wrapIfMissing("ExceptionWasThrown", 'Z');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ZExceptionWasThrownZ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("...", '\\');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\...\\", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("i");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("i", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.repeat("w@t3:9%D`ehyj9K(bYK", (-37));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad(" ", (-37), 'q');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals(" ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("");
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      String string0 = StringUtils.swapCase("_+d^A");
      assertEquals("_+D^a", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "_+D^a", (CharSequence) "_+D^a");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("-6H`94CD*T:f[;N", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-6H`94CD*T:f[;N", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)82;
      String string2 = StringUtils.join(byteArray0, '(');
      assertArrayEquals(new byte[] {(byte)82, (byte)54, (byte) (-25), (byte)54, (byte)82, (byte)54, (byte)16, (byte)16, (byte)82}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("82(54(-25(54(82(54(16(16(82", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "<P T.[Don't clear/set the same property more than once.", (CharSequence) "<P T.[Don't clear/set the same property more than once.");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      intArray0[1] = 108;
      intArray0[2] = 108;
      intArray0[3] = 108;
      intArray0[4] = 108;
      String string1 = StringUtils.join(intArray0, 'l');
      assertArrayEquals(new int[] {108, 108, 108, 108, 108}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("108l108l108l108l108", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "108l108l108l108l108";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      String string2 = StringUtils.deleteWhitespace("108l108l108l108l108");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("108l108l108l108l108", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "108l108l108l108l108";
      charSequenceArray0[4] = (CharSequence) " vs ";
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("6xIHEI'8$9?Nv/|-o", 19, (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" 6xIHEI'8$9?Nv/|-o ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid((String) null, 62, 62);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("A", "A", "A");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "A", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "m", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      String[] stringArray0 = StringUtils.substringsBetween("org.apache.commons.lang3.ArrayUtils", "TA+k 1(xK|[-r@~jD", "Gf+");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "7;e*UnwtE&>Z", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("6DLST xs:++T", "");
      assertFalse(string3.equals((Object)string1));
      assertEquals("6DLST xs:++T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("6DLST xs:++T");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "=8G";
      stringArray0[3] = null;
      stringArray0[4] = "";
      String string4 = StringUtils.replaceEach("=8G", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=8G", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-692);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short)5;
      String string5 = StringUtils.deleteWhitespace((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.stripToNull("g@-FR9YG5+U");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("g@-FR9YG5+U", string6);
      assertNotNull(string6);
      
      int[] intArray0 = StringUtils.toCodePoints("g@-FR9YG5+U");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("cEMnO_xMB&_&@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.abbreviate("", (int) (short)108);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Iterable<?>) list0, 'G');
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("8F')XrK3n[$q?9lr~m;", "8F')XrK3n[$q?9lr~m;", "G +i*i#;X@Xok8:7");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "o82D >-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("gP~nb?vj8o]", 'L');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LgP~nb?vj8o]L", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("3b");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringAfterLast("uJ|kKp$A{oZ0?<", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("LgP~nb?vj8o]L", "", 941);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'L';
      charArray0[5] = 'L';
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "java.lang.Object@619fbabb3b\n", (CharSequence) "uJ|kKp$A{oZ0?<");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.join((long[]) null, 'L');
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("Locale must not be null", "Locale must not be null");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.startsWithAny("uJ|kKp$A{oZ0?<", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.equalsAnyIgnoreCase("LgP~nb?vj8o]L", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'L');
      assertEquals(1, stringArray0.length);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("LgP~nb?vj8o]L", string6);
      assertNotNull(string6);
      
      boolean boolean6 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'L', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String string0 = StringUtils.substringAfter("W?}oBAOM7lN4", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.DefaultTimeZoneExtension", (String) null, ".yxIU`f6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, 57);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("io");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("io", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'-', 'U'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The Array must not be null", (String) null, (String) null, (-3420));
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "BB}@#1");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2843;
      shortArray0[1] = (short) (-725);
      String string3 = StringUtils.join(shortArray0, '/', (int) (short)321, (int) (short) (-725));
      assertArrayEquals(new short[] {(short)2843, (short) (-725)}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "]XG4}C\"L30M", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      objectArray0[0] = (Object) 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) "7;e*UnwtE&>Z", charArray0);
      assertArrayEquals(new char[] {'U', '-', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "7;e*UnwtE&>Z";
      charSequenceArray0[1] = (CharSequence) "]XG4}C\"L30M";
      String string3 = StringUtils.replaceIgnoreCase("Strings must not be null", "Zbm$", "BB}@#1", 4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      charSequenceArray0[3] = (CharSequence) "7;e*UnwtE&>Z";
      String string4 = StringUtils.substringAfter("]XG4}C\"L30M", "junit-pioneer");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Zbm$";
      charSequenceArray0[6] = (CharSequence) "Zbm$";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("junit-pioneer", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-119);
      shortArray0[1] = (short) (-725);
      shortArray0[2] = (short)321;
      shortArray0[3] = (short)2843;
      shortArray0[4] = (short)53;
      shortArray0[5] = (short) (-1471);
      shortArray0[6] = (short)1576;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '-', 28, (int) (short)1576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("#Nie>;k9?%!e$/(8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#Nie>;k9?%!e$/(8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "7;e*UnwtE&>Z", (CharSequence) "#Nie>;k9?%!e$/(8", (-757));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("junit-pioneer", (-757), "junit-pioneer");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("junit-pioneer", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("a[NF!g=z!beW\"E", "<P T.[Don't clear/set the same property more than once.");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("a[NF!g=z!beW\"E", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Zbom$", "");
      assertEquals("Zbom$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.rightPad("dtQ8gOELL6LT$W/>Um|", 84, '*');
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dtQ8gOELL6LT$W/>Um|", (CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("dtQ8gOELL6LT$W/>Um|", '*', '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      String string2 = StringUtils.wrapIfMissing("dtQ8gOELL6LT$W/>Um|*****************************************************************", '\u0000');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("=8]Nea@b`\"[", 'e');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("q.NyL:nA2E ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("q.NyL:nA2E ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=Q8]/D.2", '9');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", '@');
      assertEquals("@Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("io", '@');
      assertEquals("@io@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("@io@", '@');
      assertTrue(string1.equals((Object)string0));
      assertEquals("@io@", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      boolean boolean0 = StringUtils.endsWithAny("Strings must not be null", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "i-UhaE*4(7aj+a>H";
      stringArray0[1] = "[ALE7~@('EgiBqB";
      stringArray0[2] = "-6H`94CD*T:f[;N";
      stringArray0[3] = "\n";
      stringArray0[4] = "-6H`94CD*T:f[;N";
      stringArray0[5] = "-6H`94CD*T:f[;N";
      stringArray0[6] = "[ALE7~@('EgiBqB";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.wrapIfMissing("Array and element cannot both be null", '_');
      assertEquals("_Array and element cannot both be null_", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "_Array and element cannot both be null_", "-6H`94CD*T:f[;N");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank("-6H`94CD*T:f[;N");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.joinWith("o@OU=h", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("i-UhaE*4(7aj+a>Ho@OU=h[ALE7~@('EgiBqBo@OU=h-6H`94CD*T:f[;No@OU=ho@OU=h-6H`94CD*T:f[;No@OU=h-6H`94CD*T:f[;No@OU=h[ALE7~@('EgiBqB", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(">", 118);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannotv#e negive", 'H');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~9*Q +~9*Q ", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("~9*Q +~9*Q ", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 12 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Index: ");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(";8H", " qi");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha("Index: ");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "L^9i\";.G)MH";
      stringArray1[1] = "";
      stringArray1[2] = "The character must not be null";
      stringArray1[3] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(";8H", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeIgnoreCase("~9*Q ", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~9*Q ", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'H');
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.wrap("+", "~9*Q ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~9*Q +~9*Q ", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("~9*Q +~9*Q ", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#})lwEq,2T$xhwD", (CharSequence) "#})lwEq,2T$xhwD");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "m>0-bj#\\.%9] $Mjb");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("m>0-bj#\\.%9] $Mjb");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("m>0-bj#\\.%9] $Mjb", "m>0-bj#\\.%9] $Mjb", "9[{[CTf+rE(");
      assertEquals("9[{[CTf+rE(TC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", (-18));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("m>0-bj#\\.%9] $Mjb", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'Z');
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", 0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "9[{[CTf+rE(";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string5 = StringUtils.join(objectArray0, 'Z');
      assertEquals(6, objectArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ZZ9[{[CTf+rE(ZZZ", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'S';
      charArray0[2] = 'Z';
      charArray0[3] = '_';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      charArray0[8] = 'Z';
      int int1 = StringUtils.indexOfAny((CharSequence) "ZZ9[{[CTf+rE(ZZZ", charArray0);
      assertArrayEquals(new char[] {'Z', 'S', 'Z', '_', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "9[{[CTf+rE(", "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, '~');
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add(" vs ");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains(" vs "));
      
      boolean boolean1 = treeSet0.add("tU{!:.X}k&[FuF^U");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains(" vs "));
      
      Stream<String> stream0 = treeSet0.stream();
      assertTrue(treeSet0.contains(" vs "));
      assertNotNull(stream0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertTrue(treeSet0.contains(" vs "));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "tU{!:.X}k&[FuF^U");
      assertEquals("tU{!:.X}k&[FuF^UtU{!:.X}k&[FuF^U vs ", string0);
      assertFalse(treeSet0.contains(string0));
      assertTrue(treeSet0.contains(" vs "));
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", 'h');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("`tZ=W");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("`tZ=W"));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("`tZ=W", string0);
      assertFalse(arrayList0.contains("Illegal range. There's no way to get from %s to %s with a step of %s."));
      assertTrue(arrayList0.contains(string0));
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNumeric("`tZ=W");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("-TyxM!|Y");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-TyxM!|Y", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "-TyxM!|Y", '^');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'D');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "`tZ=Woffset cannot be negative", 1387, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.stripToNull("`tZ=Woffset cannot be negative");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("`tZ=Woffset cannot be negative", string4);
      assertNotNull(string4);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("-TyxM!|Y");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      
      SortedSet<String> sortedSet0 = treeSet0.tailSet("[_@q6GR/9XlMZ-zgd");
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertFalse(sortedSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(sortedSet0);
      
      boolean boolean1 = treeSet0.add("J@'m+LIN");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      
      Stream<String> stream0 = treeSet0.stream();
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(stream0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "[_@q6GR/9XlMZ-zgd");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("J@'m+LIN[_@q6GR/9XlMZ-zgd-TyxM!|Y", string5);
      assertTrue(treeSet0.contains("-TyxM!|Y"));
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(string5);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'D';
      longArray0[1] = (long) 1387;
      longArray0[2] = (long) 1387;
      longArray0[3] = (long) '^';
      longArray0[4] = (-2006L);
      longArray0[5] = 1147L;
      longArray0[6] = (long) '^';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'D', 108, 1387);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "DefaultLocale", (CharSequence) "DefaultLocale", 1294);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m";
      String string0 = StringUtils.difference("m", "m");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("m", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("'SK=nE4T~DWRqA~sn", "'SK=nE4T~DWRqA~sn");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "m", (CharSequence) "", 160);
      assertEquals(1, int0);
      
      String string2 = StringUtils.removeEnd("'SK=nE4T~DWRqA~sn", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'SK=nE4T~DWRqA~sn", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("'SK=nE4T~DWRqA~sn", stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.substringAfter("_<P T.[Don'tGclear/szt the same property more than once.eaq`)mKtneC@", "_<P T.[Don'tGclear/szt the same property more than once.eaq`)mKtneC@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = "7{Nod3tOw.FX_k";
      String string2 = "@HB9),?";
      String string3 = StringUtils.center("7{Nod3tOw.FX_k", 8192, "@HB9),?");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "@HB9),?", (CharSequence) string3, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m";
      stringArray0[1] = "ExpectedException";
      stringArray0[2] = "ExpectedException";
      stringArray0[3] = "m";
      stringArray0[6] = "m";
      stringArray0[5] = "m";
      stringArray0[6] = "m";
      String string0 = StringUtils.removeEnd("ExpectedException", "m");
      assertEquals("ExpectedException", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("m", "m", 1);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = (-1);
      intArray0[8] = 0;
      String string1 = StringUtils.join(intArray0, '(', 85, 0);
      assertArrayEquals(new int[] {0, 1, 0, 1, 0, 1, 1, (-1), 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "m");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.appendIfMissing("\r", "\r", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r", 3);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.removeEnd("[5ff!", "[5ff!");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r", 1875);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean0 = StringUtils.equalsAny("[5ff!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripToEmpty("");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, ".( o9F?MdOyw_-", 4, 4);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\r", "\r", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("sV", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.substringBetween("&[)Ko4.I}<.3r]70", "&[)Ko4.I}<.3r]70");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, "Locale must not be null", (int) (byte)1, (-2054));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.upperCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("G\"nalx3}XRg:{.", '>');
      assertFalse(string3.equals((Object)string2));
      assertEquals(">G\"nalx3}XRg:{.>", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("Locale must not be null", 11, (-2054));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("&[)Ko4.I}<.3r]70", ":JVyu:3HuNv");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("&[)Ko4.I}<.3r]70", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsAny("&[)Ko4.I}<.3r]70", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)1;
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\"', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, (int) (byte) (-41), (int) (byte) (-41));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Don't cl");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'i');
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid((String) null, (byte) (-41), 11);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equalsAny("Don't cl", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.wrapIfMissing("0XArb:9xSE:PEsXJs", '\u0000');
      assertEquals("0XArb:9xSE:PEsXJs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("US-5A'BaKN6f^'$28 vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" sv 82$'^f6NKaB'A5-SU", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0XArb:9xSE:PEsXJs");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0xaRB:9Xse:peSxjS", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(" sv 82$'^\f6NKaB'A5-SU", " sv 82$'^\f6NKaB'A5-SU");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid((String) null, 2247, 2247);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", ", "EAn'J>/z8!u5*)~(}|");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.normalizeSpace((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1959);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertNotNull(arrayDeque1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(list0);
      
      String string1 = StringUtils.join(list0, 'q', 0, 0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertFalse(list0.contains(""));
      assertNotNull(string1);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(stream0);
      
      String string2 = StringUtils.repeat("", 4);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("", '^');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("<P T.[", 1959);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.unwrap("org.junitpioneer.jupiter.params.IntRange", 'o');
      assertEquals("org.junitpioneer.jupiter.params.IntRange", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("b}A");
      assertFalse(string1.equals((Object)string0));
      assertEquals("b}", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "b}", 515, (-2102));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "b}A";
      String string2 = StringUtils.leftPad((String) null, 17, "b}A");
      assertNull(string2);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.params.IntRange";
      charSequenceArray0[3] = (CharSequence) "b}A";
      charSequenceArray0[4] = (CharSequence) "b}A";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.params.IntRange";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.params.IntRange";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.rightPad("*fNnx", 2419);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("*fNnx");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*fNnx");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = ')';
      charArray0[2] = 'b';
      charArray0[3] = '\'';
      charArray0[4] = 'L';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "*fNnx", charArray0);
      assertArrayEquals(new char[] {'.', ')', 'b', '\'', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replaceAll("pCXOZ*+;X^0Hm n{>g", "', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pCXOZ*+;X^0Hm n{>g", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("*fNnx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = null;
      String string3 = StringUtils.center("pCXOZ*+;X^0Hm n{>g", 3, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("pCXOZ*+;X^0Hm n{>g", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("pCXOZ*+;X^0Hm n{>g", ')');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("pCXOZ*+;X^0Hm n{>g", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("pCXOZ*+;X^0Hm n{>g", "*fNnx", "Z[OrgW3>3 L+'q");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *fNnx
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.unwrap("RepeatFailedTetExtension", 'O');
      assertEquals("RepeatFailedTetExtension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("gP~nb?vj8o]", 'L');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LgP~nb?vj8o]L", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("3b");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringAfterLast("uJ|kKp$A{oZ0?<", "\n");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("CL7!@)+&|.x", 941, 941);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring(",K8KNUq{3R?", 941, 9);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith("<6lVL&q&&!C24YITdo", objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate(",K8KNUq{3R?", 7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals(",K8K...", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("&uv0", (-3903), "");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("&uv0", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String string0 = StringUtils.center("<otstF)Mo*", 13, "<otstF)Mo*");
      assertEquals("<<otstF)Mo*<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("fhdo])");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("8J8Z+5Td:|eIl_C;+o").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("8J8Z+5Td:|eIl_C;+o", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substring("KsR/b", (-1127));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("KsR/b", string3);
      assertNotNull(string3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("fhdo])"));
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = vector0.add(object0);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean2 = vector0.add((Object) locale_FilteringMode0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      
      String string4 = StringUtils.join((List<?>) vector0, "fhdo])", Integer.MAX_VALUE, 376);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains("8J8Z+5Td:|eIl_C;+o"));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("8J8Z+5Td:|eIl_C;+o", (-1127), "The String must not be empty");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("$Q QC=CMwN7NN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.repeat('m', (int) 'm');
      assertEquals("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("ExpectedEceptionxpectedException", (-606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center(" vs ", 7, '');
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" vs ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.joinWith(" vs ", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("  vs vs vs  ", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("  vs vs vs  ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(" vs ", " vs ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("", 0, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace(" vs ");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.substringsBetween(" vs ", " vs ", " ");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("W%;@gu\"xZ(!fL4?adJ2", "UZ.DQP<cjvkF-WVx'", "UZ.DQP<cjvkF-WVx'");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("G +i*i#;X@Xok8:7");
      assertEquals("G+i*i#;X@Xok8:7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "G +i*i#;X@Xok8:7", 1914);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.repeat(">QYkb6=hXgsTQ28", ">QYkb6=hXgsTQ28", (-382));
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", ">QYkb6=hXgsTQ28");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.removePattern("\n", "]XG4}C\"L30M");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "junit-pioneer", (char[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("\n", "]XG4}C\"L30M", 32, 2201);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Zbm$");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.upperCase("");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("/ $_B@#m76*`u;_/&,", '?');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("?/ $_B@#m76*`u;_/&,?", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'c');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string3 = StringUtils.overlay("-", "Threshold must not be negative", 5, 5);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-Threshold must not be negative", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int2);
      
      boolean boolean6 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)99;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)97, (byte) (-122), (byte) (-47), (byte)99}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\uFFFDa\uFFFD\uFFFDc", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.wrap("i0'M#~5", (String) null);
      assertEquals("i0'M#~5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("i0'M#~5");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("i0'M#~5", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("i0'M#~5", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "i0'M#~5");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad((String) null, (-1), 't');
      assertNull(string2);
      
      String string3 = StringUtils.replaceChars("i0'M#~5", "i0'M#~5", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("\n", "#)@");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "i0'M#~5", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.trimToNull("#)@");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("#)@", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "g");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "Don't clear/set the same property more than once.", (-1), (-2754));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("Strings must not be null", "", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Strings must not be null", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.params.IntRange");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'c');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string3 = StringUtils.overlay("-", "Threshold must not be negative", 5, 5);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-Threshold must not be negative", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int2);
      
      boolean boolean6 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      
      String string4 = StringUtils.getDigits("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.chomp((String) null, "");
      assertNull(string2);
      
      int int0 = 1959;
      String string3 = "blank_blank_blank_2014";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("blank_blank_blank_2014", "$uLq", 1959);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = "=";
      String string5 = StringUtils.center("=", 1959, (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("blank_blank_blank_2014"));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains("blank_blank_blank_2014"));
      assertNotNull(arrayDeque1);
      
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "]XG4}C\"L30M", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      objectArray0[0] = (Object) 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) "7;e*UnwtE&>Z", charArray0);
      assertArrayEquals(new char[] {'U', '-', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, int0);
      
      String string3 = StringUtils.defaultString("", "...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("ER\"z>W=kUg", 2201, ';');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      assertEquals((-8), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.getDigits("<5MD=O8wb@@'bvQ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("58", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "<5MD=O8wb@@'bvQ", (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripAccents("maxWith cannot be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.substringsBetween("iyMeiNl\"l&NLWz(]", "", "");
      assertNull(stringArray2);
      
      String string5 = StringUtils.stripStart("", "");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "xvJe;tm>';");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.prependIfMissing("Can only resolve parameter of type ", "", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("Can only resolve parameter of type ", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.stripStart("XpKq&uv0", "XpKq&uv0");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "Failed to delete temp directory ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, (-628), ':');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((double[]) null, 'u', 14, (-274));
      assertNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("HH", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "XpKq&uv0", 0, (-628));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.joinWith("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("XpKq&uv0", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("%'tGeI", "%'tGeI");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "%'tGeI", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "m>0-bj#\\.%9] $Mjb");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("m>0-bj#\\.%9] $Mjb");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("m>0-bj#\\.%9] $Mjb", "m>0-bj#\\.%9] $Mjb", "9[{[CTf+rE(");
      assertEquals("9[{[CTf+rE(TC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", (-16));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("m>0-bj#\\.%9] $Mjb", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'Z');
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", 0);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "9[{[CTf+rE(";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string5 = StringUtils.join(objectArray0, '\"');
      assertEquals(6, objectArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'S';
      charArray0[2] = '\"';
      charArray0[3] = '_';
      charArray0[4] = '\"';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = '\"';
      charArray0[8] = 'Z';
      int int1 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@372dbcad\"\"9[{[CTf+rE(\"\"\"", charArray0);
      assertArrayEquals(new char[] {'\"', 'S', '\"', '_', '\"', 'Z', 'Z', '\"', 'Z'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "9[{[CTf+rE(", "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.remove("Br,Br,@DefaultLocale can only be used with language tag if language, country, and variant are not set", 'L');
      assertEquals("Br,Br,@Defaultocale can only be used with language tag if language, country, and variant are not set", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string0);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("s /sqdXYt'N;(Pw~)_"));
      assertNotNull(treeSet0);
      
      TreeSet<String> treeSet1 = new TreeSet<String>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertNotNull(treeSet1);
      
      boolean boolean0 = treeSet1.add("U.*S}*rx5FS");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean0);
      assertFalse(treeSet1.contains("s /sqdXYt'N;(Pw~)_"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      
      SortedSet<String> sortedSet0 = treeSet1.tailSet("wk=[6w");
      assertNotSame(treeSet1, treeSet0);
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("wk=[6w"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertFalse(sortedSet0.contains("wk=[6w"));
      assertNotNull(sortedSet0);
      
      boolean boolean1 = treeSet1.add("");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(treeSet1.contains("wk=[6w"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      
      Stream<String> stream0 = treeSet1.stream();
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("wk=[6w"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(stream0);
      
      Iterator<String> iterator0 = treeSet1.descendingIterator();
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains("wk=[6w"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "maxWith cannot be negative");
      assertNotSame(treeSet1, treeSet0);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("U.*S}*rx5FSmaxWith cannot be negative", string1);
      assertFalse(treeSet1.contains("wk=[6w"));
      assertTrue(treeSet1.contains("U.*S}*rx5FS"));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("U.*S}*rx5FSmaxWith cannot be negative", "XpKq&uv0s /sqdXYt'N;(Pw~)_");
      assertEquals(0.21, double0, 0.01);
      
      String string2 = StringUtils.toRootLowerCase("|N[]qBS");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|n[]qbs", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "J@'m+LIN", (CharSequence) "|N[]qBS", 64);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad("|N[]qBS", 18, "J@'m+LIN");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("J@'m+LINJ@'|N[]qBS", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'N';
      charArray0[7] = '7';
      charArray0[8] = '7';
      String string4 = StringUtils.join(charArray0, '7', (-1), (-1543));
      assertArrayEquals(new char[] {'+', '+', '7', '7', '7', '7', 'N', '7', '7'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      String string2 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("Wa3>%WB#ruO");
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      floatArray0[5] = (float) (short)8;
      int int1 = StringUtils.compareIgnoreCase("BJ}X]9[+|u&Ip", "BJ}X]9[+|u&Ip", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.mid("BJ}X]9[+|u&Ip", 12, 16);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("BJ}X]9[+|u&Ip", charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0.39, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("p");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {'0', '0', '0'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      intArray0[1] = 108;
      intArray0[2] = 108;
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny(" ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes("(ah0Dz&/", (Charset) null);
      assertArrayEquals(new byte[] {(byte)40, (byte)97, (byte)104, (byte)48, (byte)68, (byte)122, (byte)38, (byte)47}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean1 = StringUtils.isBlank(" ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.reverse("o0fB[I M7z_(k,&K|+");
      assertEquals("+|K&,k(_z7M I[Bf0o", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("+|K&,k(_z7M I[Bf0o", "2>Sx)4:DFLmCK|](");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // 2>Sx)4:DFLmCK|](
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = "yDr,\"*gYsa6}l{t#c";
      String string1 = StringUtils.stripStart("yDr,\"*gYsa6}l{t#c", "Z[OrgW3>3 L+'q");
      assertTrue(string1.equals((Object)string0));
      assertEquals("yDr,\"*gYsa6}l{t#c", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Z[OrgW3>3 L+'q"));
      assertNotNull(linkedList0);
      
      String string3 = "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }";
      boolean boolean0 = linkedList0.add((Object) "Z[OrgW3>3 L+'q");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      assertTrue(linkedList0.contains("Z[OrgW3>3 L+'q"));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      assertTrue(linkedList0.contains("Z[OrgW3>3 L+'q"));
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 45
         // Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }
         //                                              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.removeAll("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      String string0 = StringUtils.leftPad(")tx{4)qHp^", 0, '!');
      assertEquals(")tx{4)qHp^", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripEnd("The Array must not be null", ")tx{4)qHp^");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, 'l');
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string0);
      assertFalse(hashSet0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.center("c-wYpS)7+(7vMDs_{", 434, "Strings must not be null");
      assertEquals("Strings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must notc-wYpS)7+(7vMDs_{Strings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not be nullStrings must not", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("c-wYpS)7+(7vMDs_{");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("c-wYpS)7+(7vMDs_{", "]W7tfh18 ^ljS9$~@5[", 53);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("]W7tfh18 ^ljS9$~@5[", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("3b", objectArray0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("gP~nb?vj8o]", 'L');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LgP~nb?vj8o]L", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("<P T.[");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<P T.[", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "LgP~nb?vj8o]L", 108);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "3b", 1105);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("3b"));
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("3b"));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 'L');
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertFalse(arrayDeque0.contains("3b"));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], ", Length: ");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.truncate("m|7", 2, 2026);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "org.junitpioneer.jupiter.TempDirectory");
      assertEquals((-38), int0);
      
      boolean boolean3 = StringUtils.containsWhitespace("7");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[6], charSequenceArray0[5], 1674);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+\n", "p{InCombiningDiacriticalMarks}+\n", "0`{?_Nd4Qj!G)XbXa(td,%");
      assertEquals("0`{?_Nd4Q?Q?)XQXa(QdQaXX(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.containsIgnoreCase("fQ2", "fQ2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      String string1 = StringUtils.prependIfMissingIgnoreCase("m", "m", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("m", "daHuI", Integer.MIN_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("m");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("daHuI");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("m");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "m", charSequenceArray0[0], Integer.MIN_VALUE);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.rightPad("z'LTm.Ao}fY<", 1610, "org.apache.commons.lang3.StringUtils");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("[SHgc}\"T9A;oJ0-fieo", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[SHgc}\"T9A;oJ0-fieo", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("z'LTm.Ao}fY<"));
      assertNotNull(arrayList0);
      
      boolean boolean2 = arrayList0.add((Object) string3);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(arrayList0.contains("z'LTm.Ao}fY<"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains("z'LTm.Ao}fY<"));
      assertNotNull(listIterator0);
      
      String string5 = StringUtils.join((Iterator<?>) listIterator0, "ZMCYVgS`Yv");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(arrayList0.contains("z'LTm.Ao}fY<"));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = StringUtils.join((Iterator<?>) null, 'g');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("", "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.chomp("maxWith cannot be negative", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.repeat("^", 1592);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst(")?%Ef-kcK`*)^#Do", "dq3]W!3");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(")?%Ef-kcK`*)^#Do", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("c97)R=aFDHo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern(")\"\r/f/9Swj?V1F", "nVg!dE%%u'", "nVg!dE%%u'");
      assertEquals(")\"\r/f/9Swj?V1F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("vqlp>-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vqlp>-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("vqlp>-", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vqlp>-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("vqlp>-", 2501, "Strings muXt not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "", 867);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(867, int1);
      
      String string5 = StringUtils.swapCase("vqlp>-");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("VQLP>-", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Strings muXt not be null", (CharSequence) "vqlp>-");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2501, "@");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nVg!dE%%u'");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.abbreviate((String) null, (String) null, 867, 285);
      assertNull(string7);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, ")\"\r/f/9Swj?V1F");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 867;
      intArray0[3] = 867;
      intArray0[4] = 867;
      intArray0[5] = 867;
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("A5j{nPhX,f7A,`morg.junitpioneer.jupiter.params.IntRange", "o82D >-");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("~Jxl>xMMCa&z1bN", "~Jxl>xMMCa&z1bN");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.substringAfterLast("ExceptionWasThrown101000-30101040101053", "9~>//+-%/`+\"%SsYr");
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String string3 = StringUtils.appendIfMissing(" eK!f\"DC\rj&R)f", (CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertEquals(" eK!f\"DC\rj&R)f", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, " eK!f\"DC\rj&R)f");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "\n");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Zbm$", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Zbm$", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("", 1804);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '2';
      charArray0[2] = '+';
      charArray0[3] = '-';
      charArray0[4] = '}';
      charArray0[5] = 'U';
      charArray0[6] = 'm';
      int int1 = StringUtils.indexOfAny((CharSequence) "junit-pioneer", charArray0);
      assertArrayEquals(new char[] {'|', '2', '+', '-', '}', 'U', 'm'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceChars("", 'U', '2');
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.removeEnd("PAM6ncv:xv", "sVy(J");
      assertEquals("PAM6ncv:xv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("nit", "nit", (-917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tZ=W", 548, "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", "offset cannot be negative");
      assertEquals(0.68, double0, 0.01);
      
      String string1 = StringUtils.removeStartIgnoreCase("`tZ=W", "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`tZ=W", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "offset cannot be negative";
      objectArray0[1] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      objectArray0[2] = (Object) "`tZ=W";
      objectArray0[3] = (Object) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W";
      objectArray0[4] = (Object) "offset cannot be negative";
      String string2 = StringUtils.join(objectArray0, 'w');
      assertEquals(5, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("`tZ=W", "offset cannot be negative");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`tZ=W", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("offset cannot be negative", supplier0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, (String) null, (-1));
      assertNull(string6);
      
      String string7 = StringUtils.join(objectArray0, '3', 1090, (-1));
      assertEquals(5, objectArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", 548);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "`tZ=W", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty("maxWith cannot be negative", (Supplier<String>) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("-ZgX", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.replaceChars("sV", "9X", "sV");
      assertEquals("sV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.center("]XG4}C\"L30M", 2201, "Strings must not be null");
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars(string0, "Zbm$", "junit-pioneer");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P\"6(UBUjV8ak+,=", (CharSequence) "P\"6(UBUjV8ak+,=", 33);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Zbm$", "]XG4}C\"L30M", 33);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 102, 5737);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate(" vs ", "", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("N^ibwh+!d`y)$R>{E&]");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.upperCase("");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("/ $_B@#m76*`u;_/&,", '?');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?/ $_B@#m76*`u;_/&,?", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String string0 = "Wa3>\\%WB#ruO";
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.mid("Wa3>%WB#ruO", (-1118), (-1118));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("6rZwaXxTE&]om2");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6rZwaXxTE&]om2", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("^&zP", "wj\":^W$qB)Tl<]]", "6rZwaXxTE&]om2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 8
         // wj\":^W$qB)Tl<]]
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.mid("cY.$' GyZWlB(:Dd)", 0, (-2147483639));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      char char0 = '!';
      String string0 = StringUtils.remove("offset cannot be negative", '!');
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      String string1 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "offset cannot be negative", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("offset cannot be negative", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(")tx{4)qHp^", 0, '!');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")tx{4)qHp^", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) '!';
      int int0 = 18;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'H', 0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      int int0 = 98;
      String string0 = StringUtils.right("", 98);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = 1959;
      String string1 = "RepeatFailedTestExtension";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("RepeatFailedTestExtension", (String) null, (-935));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.center("", 98, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                                                                  ", string2);
      assertNotNull(string2);
      
      String string3 = "OR#;";
      String string4 = StringUtils.removeEnd((String) null, "OR#;");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string3));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = new ArrayDeque<String>();
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque1.contains(string3));
      assertNotNull(arrayDeque1);
      
      ArrayDeque<String> arrayDeque2 = arrayDeque1.clone();
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(arrayDeque1, arrayDeque2);
      assertNotSame(arrayDeque2, arrayDeque0);
      assertNotSame(arrayDeque2, arrayDeque1);
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque2.isEmpty());
      assertEquals(0, arrayDeque2.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque0));
      assertFalse(arrayDeque2.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.contains(string3));
      assertFalse(arrayDeque2.contains(string3));
      assertNotNull(arrayDeque2);
      
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      longArray0[4] = 0L;
      longArray0[5] = (-1L);
      longArray0[6] = 0L;
      longArray0[7] = 1065L;
      longArray0[8] = (-785L);
      String string0 = StringUtils.join(longArray0, 'L');
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-1934L), 0L, (-1L), 0L, 1065L, (-785L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("0L0L-1L-1934L0L-1L0L1065L-785", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("]s9|%@[", "]s9|%@[");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[1] = 0L;
      longArray0[1] = 0L;
      String string0 = "";
      String string1 = "c(h";
      String string2 = "Z[OrgW3>3 L+'q";
      String string3 = StringUtils.substringBetween("c(h", "Z[OrgW3>3 L+'q", "|})f\"}F%@:8*u");
      assertNull(string3);
      
      String string4 = null;
      String string5 = StringUtils.removeEnd((String) null, "|})f\"}F%@:8*u");
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "c(h", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("c(h", "|})f\"}F%@:8*u", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("|})f\"}F%@:8*u", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.IntRange", ";<5", ";<5");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = "yDr,\"*gYsa6}l{t#c";
      String string1 = StringUtils.stripStart("yDr,\"*gYsa6}l{t#c", "Z[OrgW3>3 L+'q");
      assertTrue(string1.equals((Object)string0));
      assertEquals("yDr,\"*gYsa6}l{t#c", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Z[OrgW3>3 L+'q"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "Z[OrgW3>3 L+'q");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("Z[OrgW3>3 L+'q"));
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("Z[OrgW3>3 L+'q"));
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      
      Object object0 = linkedList0.pollFirst();
      assertEquals(1, linkedList0.size());
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertEquals("Z[OrgW3>3 L+'q", object0);
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean2 = linkedList0.offerLast(object1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(object1));
      assertFalse(linkedList0.contains("yDr,\"*gYsa6}l{t#c"));
      
      boolean boolean3 = linkedList0.add((Object) "yDr,\"*gYsa6}l{t#c");
      assertEquals(3, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(object1));
      assertFalse(linkedList0.contains("Z[OrgW3>3 L+'q"));
      
      String string3 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2590;
      doubleArray0[1] = (double) 'H';
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 'H';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'H', (-1), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      String string2 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("Wa3>%WB#ruO");
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "8?Dy6{", 12);
      assertNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("]r5X: &yV1-Fxo77g9", "Wa3>%WB#ruO", true);
      assertFalse(int1 == int0);
      assertEquals((-26), int1);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Zbom$");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.ReportEntryExtension", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+| bgyj", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.replaceIgnoreCase("Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", "Ul]0PeY|Bt,*B", 32);
      assertEquals("Ul]0PeY|Bt,*B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ul]0PeY|Bt,*B";
      stringArray0[1] = "io";
      stringArray0[2] = "Ul]0PeY|Bt,*B";
      String string2 = StringUtils.replace((String) null, "org.apache.commons.lang3.StringUtils", "Ul]0PeY|Bt,*B", 20);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.stripToNull("Ul]0PeY|Bt,*B");
      assertTrue(string4.equals((Object)string0));
      assertEquals("Ul]0PeY|Bt,*B", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.stripToNull("<cl)R~aFDHo");
      assertEquals("<cl)R~aFDHo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.stripEnd("g9?'p5%9", "g9?'p5%9");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, ' ');
      assertEquals(7, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("      ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("      ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("g9?'p5%9", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g9?'p5%9", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,eM7r\"", 'e');
      assertEquals("M7r\"e,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Index: ");
      assertEquals("Index:", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.substring("Index:", (-2312));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Index:", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "Index:";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("fhdo])");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("8J8Z+5Td:|eIl_C;+o").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.substring("KsR/b", (-1127));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("KsR/b", string3);
      assertNotNull(string3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = vector0.add(object0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains(object0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean2 = vector0.add((Object) locale_FilteringMode0);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains(object0));
      
      String string4 = StringUtils.join((List<?>) vector0, "fhdo])", Integer.MAX_VALUE, 376);
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains(object0));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, 'N', 1436, 1436);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'o', 1263, 1263);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 759, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" ", "9:Cw6<c");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 13, "%}[dF");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("[_@q6GR/9XlMZ-zgd");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[_@q6GR/9XlMZ-zgd", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("~<3):)u58eF-?4?JK", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative", 15);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("~<3):)u58eF-?4?JK", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int0);
      
      String string4 = StringUtils.mid((String) null, (-1644), 0);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("[_@q6GR/9XlMZ-zgd");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string5 = StringUtils.trimToEmpty("`tZ=Woffset cannot be negative");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("`tZ=Woffset cannot be negative", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("", (-1), "k@:t?K/}}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.repeat("|x)|L", "k@:t?K/}}", 108);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, 13);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.strip("k@:t?K/}}", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("k@:t?K/}}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("8!!vJ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("8!!vJ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = new int[1];
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, "*pejonb=Q;C%EX=i~5}", "");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip("");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars(" vs Illegal range. Equal from and to will produce an empty range.", (String) null, "Strings must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" vs Illegal range. Equal from and to will produce an empty range.", string4);
      assertNotNull(string4);
      
      int[] intArray1 = StringUtils.toCodePoints("*pejonb=Q;C%EX=i~5}");
      assertNotSame(intArray1, intArray0);
      assertEquals(19, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String string5 = StringUtils.repeat(" vs Illegal range. Equal from and to will produce an empty range.", (String) null, 0);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "4h`");
      assertTrue(boolean0);
      
      String string6 = StringUtils.normalizeSpace("H[4^KA.eST}vU");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("H[4^KA.eST}vU", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.removeStart("..0Y", "', is neither of type Map.Entry nor an Array");
      assertEquals("..0Y", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "..0Y");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.stripToNull("offset cannot be ");
      assertEquals("offset cannot be", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "Expected exception %s was not thrown.");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Expected exception %s was not thrown.", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 45, "tU{!:.X}k&[FuF^U");
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat((String) null, "", (-1842));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("m");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "org.apache.commons.lang3.StringUtils", 18);
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 18;
      floatArray0[1] = (float) 18;
      String string2 = StringUtils.join(floatArray0, 'i');
      assertArrayEquals(new float[] {18.0F, 18.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("18.0i18.0", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[3], "org.apache.commons.lang3.StringUtils");
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("org.junitpioneer.jupiter.TempDirectory$CloseablePath", charSequenceArray0[2], (CharSequence[]) null);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePathm", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.getDigits("Br,");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.firstNonBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNull(string2);
      
      String string3 = StringUtils.difference(" ", " ");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern(")\"\r/f/9Swj?V1F", "nVg!dE%%u'", "nVg!dE%%u'");
      assertEquals(")\"\r/f/9Swj?V1F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("vqlp>-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vqlp>-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("vqlp>-", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vqlp>-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("vqlp>-", 2501, "Strings must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "", 867);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(867, int1);
      
      String string5 = StringUtils.swapCase("vqlp>-");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("VQLP>-", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "vqlp>-");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2501, "@");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nVg!dE%%u'");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.abbreviate((String) null, (String) null, 867, 285);
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("VQLP>-");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.upperCase(" vs ");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals(" VS ", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("VQLP>-", 102, "Minimum abbreviation width with offset is %d");
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum VQLP>-", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.right("", (-935));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = 1959;
      String string3 = "blank_blank_blank_2014";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("blank_blank_blank_2014", "$uLq", 1959);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = "=";
      String string5 = StringUtils.center("=", 1959, "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("="));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains("="));
      assertFalse(arrayDeque1.contains("="));
      assertNotNull(arrayDeque1);
      
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 1592, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "XpKq&uv0", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "XpKq&uv0", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "XpKq&uv0", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.replaceIgnoreCase("", "~DOqLi&\"sIKe", "", 0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.compareIgnoreCase("NY%o", "~DOqLi&\"sIKe", true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-16), int2);
      
      String string5 = StringUtils.strip((String) null, "gh|0DS/:?=OY.");
      assertNull(string5);
      
      int int3 = StringUtils.compareIgnoreCase(")V", "XpKq&uv0", true);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-79), int3);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty(", '", ", '");
      assertEquals(", '", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n\"Zr7&.MISc%Sa", "07/v[/7$E/^-9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "m", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) ", Length: ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.truncate("", 2026, 575);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("m|7", "");
      assertEquals(3, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.toRootLowerCase("6{Bjwyz#4|B:4*mQ)");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6{bjwyz#4|b:4*mq)", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "6{Bjwyz#4|B:4*mQ)", (CharSequence) "6{Bjwyz#4|B:4*mQ)", 97);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.substring("DefaultTimeZone", (-3593), 23);
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "DefaultTimeZone", (CharSequence) "DefaultTimeZone");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ";", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "offset cannot be negative");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("R6uh&eGD}", "#Lu@z\"~gPsan>X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("R6uh&eGD}", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#Lu@z\"~gPsan>X", "#Lu@z\"~gPsan>X", Integer.MIN_VALUE);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("#Lu@z\"~gPsan>X");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripAccents("org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.ReportEntryExtension", (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-1));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("QSlwN.L\"KO<", (-229), ", ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("QSlwN.L\"KO<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("/ $_B@#m76*`u;_/&,", "/ $_B@#m76*`u;_/&,");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.removeEnd(", Length: 0", ", Length: 0");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('N', 1105);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.repeat("ioioioioFailed to get parent directory from provider", (-1665));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.repeat("junit-pioneers:s8$-fum*\"N/o\"b8JT1um*\"N/o\"b8JT1", 71);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.leftPad("4nBB+n|&'1)n", 666);
      assertEqualsnBB+n|&'1)n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequencenBB+n|&'1)n", (CharSequence) "4nBB+n|&'1)n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", '(');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("m");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "org.apache.commons.lang3.StringUtils", 18);
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("m", ";CLay*%Ww|ZW", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("wqZ1cRUjl?v^", "m", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("wqZ1cRUjl?v^", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("junit-pioneers:s8$-f");
      assertEquals("junit-pioneers:s8$-f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int[] intArray0 = new int[5];
      intArray0[0] = 108;
      intArray0[1] = 108;
      intArray0[2] = 108;
      intArray0[3] = 108;
      intArray0[4] = 108;
      String string1 = StringUtils.join(intArray0, 'l');
      assertArrayEquals(new int[] {108, 108, 108, 108, 108}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("108l108l108l108l108", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "108l108l108l108l108";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      String string2 = StringUtils.deleteWhitespace("108l108l108l108l108");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("108l108l108l108l108", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "108l108l108l108l108";
      charSequenceArray0[4] = (CharSequence) " vs ";
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean0);
      
      String string3 = StringUtils.reverse("', is neither of type Map.Entry nor an Array");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("yarrA na ron yrtnE.paM epyt fo rehtien si ,'", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "TfHOSc:{b@Z", 39);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("", "TfHOSc:{b@Z");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("TfHOSc:{b@Z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("tfHOSc:{b@Z", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern(")\"\r/f/9Swj?V1F", "nVg!dE%%u'", "nVg!dE%%u'");
      assertEquals(")\"\r/f/9Swj?V1F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("vqlp>-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vqlp>-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("vqlp>-", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vqlp>-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("vqlp>-", 2501, "Strings must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.swapCase("vqlp>-");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("VQLP>-", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "vqlp>-");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2501, "@");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.difference("F.??XE5fj~ FPAHMK", "S0/:%Q,O-}Q}6zn");
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("S0/:%Q,O-}Q}6zn");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "S0/:%Q,O-}Q}6zn";
      String string1 = StringUtils.strip("S0/:%Q,O-}Q}6zn", "S0/:%Q,O-}Q}6zn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.leftPad("{vLUYXk@GaX!3)lt:", 10, '8');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{vLUYXk@GaX!3)lt:", string2);
      assertNotNull(string2);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(hashSet0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(arrayDeque0);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(hashSet0.contains(""));
      assertFalse(arrayDeque0.contains(""));
      assertNotNull(stream0);
      
      String string3 = StringUtils.repeat("S0/:%Q,O-}Q}6zn", 4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6zn", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("S0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6znS0/:%Q,O-}Q}6zn", "S0/:%Q,O-}Q}6zn", "$.thSwb! 'n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and varia,t are not set", (String) null);
      assertEquals(29, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("S0/:%Q,O-}Q}6zn", "9", (String) null);
      assertEquals("S0/:%Q,O-}Q}6zn", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join(floatArray0, '>', 777, (-930));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Locale must not be null", "aV^#h", 32);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '>', 0, 777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "m>0-bj#\\.%9] $Mjb");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("m>0-bj#\\.%9] $Mjb");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("m>0-bj#\\.%9] $Mjb", "m>0-bj#\\.%9] $Mjb", "9[{[CTf+rE(");
      assertEquals("9[{[CTf+rE(TC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", 5);
      assertFalse(string2.equals((Object)string1));
      assertEquals("m>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjb", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("m>0-bj#\\.%9] $Mjb", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'Z');
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("m>0-bj#\\.%9] $Mjb", 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "9[{[CTf+rE(";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "m>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjb";
      objectArray0[5] = (Object) "";
      String string5 = StringUtils.join(objectArray0, '\"');
      assertEquals(6, objectArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      charArray0[1] = 'S';
      charArray0[2] = '\"';
      charArray0[3] = '_';
      charArray0[4] = '\"';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = '\"';
      charArray0[8] = 'Z';
      int int1 = StringUtils.indexOfAny((CharSequence) "java.lang.Object@5cefb384\"\"9[{[CTf+rE(\"\"m>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjbm>0-bj#\\.%9] $Mjb\"", charArray0);
      assertArrayEquals(new char[] {'\"', 'S', '\"', '_', '\"', 'Z', 'Z', '\"', 'Z'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(25, int1);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" vs ").when(supplier0).get();
      String string0 = StringUtils.getIfBlank("\r", supplier0);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) " vs ";
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("aH\"BVl&}*:yWwRB4", "{vLUYXk@GaX!3)lt:", 1211);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aH\"BVl&}*:yWwRB4", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("zO((gf5op");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZO((GF5OP", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse("{vLUYXk@GaX!3)lt:");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(":tl)3!XaG@kXYULv{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("ZO((GF5OP");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("PO5FG((OZ", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.defaultString("zO((gf5op", "Threshold must not be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("zO((gf5op", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#W}Qgu*!", "The String must not be empty");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'c');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.abbreviate("TfHOSc:{b@Z", "", 0, 0);
      assertEquals("TfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "TfHOSc:{b@Z";
      String string1 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((short[]) null, 'a');
      assertNull(string2);
      
      int int0 = StringUtils.length("TfHOSc:{b@Z");
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 12;
      floatArray0[4] = (float) 12;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', 12, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("UP");
      assertEquals("uP", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "ro";
      String string1 = StringUtils.appendIfMissingIgnoreCase("ro", "uP", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ro", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("ro");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.uncapitalize("Locale must not be null");
      assertEquals("locale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "z", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be nullz", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.substringBefore("RepeatFailedTestExtension", "P2!:&ovV^*!J%>");
      assertEquals("RepeatFailedTestExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("RepeatFailedTestExtension", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("RepeatFailedTestExtension", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("RepeatFailedTestExtension");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P2!:&ovV^*!J%>";
      charSequenceArray0[1] = (CharSequence) "RepeatFailedTestExtension";
      charSequenceArray0[2] = (CharSequence) "RepeatFailedTestExtension";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("dd3`F@C1={O");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.defaultString("Ht7)9U3:a<yoW", "mxq3T#u(-,cb");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ht7)9U3:a<yoW", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "dd3`F@C1={O", (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((char[]) null, '\"', 1, 10);
      assertNull(string3);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 'u';
      String string4 = StringUtils.join(floatArray0, 'u');
      assertArrayEquals(new float[] {10.0F, 117.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("10.0u117.0", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("Ht7)9U3:a<yoW", "RepeatFailedTestExtension");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("RepeatFailedTestExtension", "Ht7)9U3:a<yoW", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("RepeatFailedTestExtension", string5);
      assertNotNull(string5);
      
      boolean boolean5 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("ibMs)", "org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExtension", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("ibMs)org.junitpioneer.jupiter.SystemPropertyExtensionorg.junitpioneer.jupiter.SystemPropertyExtension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (-762.91422);
      doubleArray0[2] = 0.0;
      String string0 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {0.7, (-762.91422), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("0.7X-762.91422X0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("0.7X-762.91422X0.0", 4, "Strings must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.7X-762.91422X0.0", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0.7X-762.91422X0.0", "Zbm$");
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("0.7X-762.91422X0.0", 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.7X", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("f[l!;pDDd", "0.7X-762.91422X0.0", 4);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("0.7X", "f[l!;pDDd", "");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0.7X", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string5 = StringUtils.difference("0.7X-762.91422X0.0", "Strings must not be null");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll(".cwHRo[&6p4D/U|IJfQtn5~l|IJfQtn5~l", ".cwHRo[&6p4D/U|IJfQtn5~l|IJfQtn5~l", ".cwHRo[&6p4D/U|IJfQtn5~l|IJfQtn5~l");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 33
         // .cwHRo[&6p4D/U|IJfQtn5~l|IJfQtn5~l
         //                                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.mid("`\"L}3E(BnHhdelo-", 15, 10);
      assertEquals("-", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "o-", "Jv/A<dGJ|Xbo<h(");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Jv/A<dGJ|Xbo<h(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length("Jv/A<dGJ|Xbo<h(");
      assertEquals(15, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("o-", "`\"L}3E(BnHhdelo-");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "XpKq&uv0", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "XpKq&uv0", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, "XpKq&uv0", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = null;
      String string3 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.chomp("");
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals(19, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      String string5 = StringUtils.mid("Array and element cannot both be null", (-1), 32);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Array and element cannot both be", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      assertEquals("Wa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("Wa3>%WB#ruO", (-1118), 13);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wa3>%WB#ruO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("6rZwaXxTE&]om2");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6rZwaXxTE&]om2", string2);
      assertNotNull(string2);
      
      String string3 = ")|";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("^&zP", "wj\":^W$qB)Tl<]]", "6rZwaXxTE&]om2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 8
         // wj\":^W$qB)Tl<]]
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("o", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "o", (CharSequence) "<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.");
      assertEquals(1, int0);
      
      String string1 = StringUtils.mid("yMQpk458M;Q`_^%h[", 1, 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<P T.[Don't clear/set the same property more than once.o<P T.[Don't clear/set the same property more than once.", "<P T.[Don't clear/set the same property more than once.");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("o");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("o", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertEquals("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", (CharSequence) "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceFirst("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "", "Backup");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Backup@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("~WfSSq)oX", (-1), 35);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~WfSSq)oX", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~WfSSq)oX", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.center("", 24, "Backup@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Backup@DefauBackup@Defau", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("T'O?`u|kHty*r9`Y_").when(supplier0).get();
      String string0 = StringUtils.getIfBlank("\r", supplier0);
      assertEquals("T'O?`u|kHty*r9`Y_", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[1] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[2] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[3] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[6] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[7] = (CharSequence) "T'O?`u|kHty*r9`Y_";
      charSequenceArray0[8] = (CharSequence) "\r";
      String string1 = StringUtils.prependIfMissingIgnoreCase("\r", "T'O?`u|kHty*r9`Y_", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      String string2 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8, (short)8, (short)8, (short)8}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8080808", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length(charSequenceArray0[1]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(17, int0);
      
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[6]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "j$j'SSm6k$] :YNF";
      String string0 = StringUtils.prependIfMissingIgnoreCase("j$j'SSm6k$] :YNF", "=U", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("j$j'SSm6k$] :YNF", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("fhdo])");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "8J8Z+5Td:|eIl_C;+o", "fhdo])");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.remove("org.apache.commons.lang3.ArrayUtils", "8J8Z+5Td:|eIl_C;+o");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[1] = (CharSequence) "8J8Z+5Td:|eIl_C;+o";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric("fhdo])");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "", 586);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.center("]XG4}C\"L30M", 2201, "Strings must not be null");
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P\"6(UBUjV8ak+,=", (CharSequence) "P\"6(UBUjV8ak+,=", 33);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Zbm$", "]XG4}C\"L30M", 33);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(";", ";", 125);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.unwrap("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", '!');
      assertEquals("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", (CharSequence) "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", 123);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", "]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", 123);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", '!');
      assertTrue(string1.equals((Object)string0));
      assertEquals("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern(")\"\r/f/9Swj?V1F", "nVg!dE%%u'", "nVg!dE%%u'");
      assertEquals(")\"\r/f/9Swj?V1F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("vqlp>-");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vqlp>-", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("vqlp>-", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("vqlp>-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("vqlp>-", 2501, "Strings must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string3, (CharSequence) "", 867);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(867, int1);
      
      String string5 = StringUtils.swapCase("vqlp>-");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("VQLP>-", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "vqlp>-");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2501, "@");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("nVg!dE%%u'");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.wrap("/ $_B@#m76*`u;_/&,", "Failed to get parent directory from provider");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Failed to get parent directory from provider/ $_B@#m76*`u;_/&,Failed to get parent directory from provider", string7);
      assertNotNull(string7);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("vqlp>-", "', is neither of type Map.Entry nor an Array", 867);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.unwrap("5w=vEZI[fF", "G +i*i#;X@Xok8:7");
      assertEquals("5w=vEZI[fF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "H", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.replacePattern("q><&04,^Q9rj&{H", "nVg!dE%%u'", "Tp=lrRN`'M");
      assertEquals("q><&04,^Q9rj&{H", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("q><&04,^Q9rj&{H");
      assertTrue(string1.equals((Object)string0));
      assertEquals("q><&04,^Q9rj&{H", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Tp=lrRN`'M", "eG>ZBZjnds");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Tp=lrRN`'M", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Strings must not be null", 2501, "Tp=lrRN`'M");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("nVg!dE%%u'", 867);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("nVg!dE%%ustring5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "nVg!dE%%uharSequence) "nVg!dE%%u
      assertEquals((-1), int0);
      
      String string6 = StringUtils.swapCase("nVg!dE%%u'");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("NvG!De%%U'", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.leftPad("<Qp>#^vBEl/&dOI32L", 8192, "The String must not be empty");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(hashSet0.contains(""));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("6DLST xs:++T", "");
      assertFalse(string3.equals((Object)string1));
      assertEquals("6DLST xs:++T", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric("6DLST xs:++T");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "=8G";
      stringArray0[3] = null;
      stringArray0[4] = "";
      String string4 = StringUtils.replaceEach("=8G", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=8G", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-692);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)390;
      shortArray0[4] = (short)0;
      String string5 = StringUtils.center("", 2, "=8G");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("==", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '4', (-1), 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = "\n";
      char char0 = ':';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)523;
      shortArray0[1] = (short)523;
      shortArray0[2] = (short)523;
      shortArray0[3] = (short)523;
      String string1 = StringUtils.join(shortArray0, '');
      assertArrayEquals(new short[] {(short)523, (short)523, (short)523, (short)523}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("523523523523", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)523;
      longArray0[1] = (long) (short)523;
      longArray0[3] = (long) (short)523;
      String string2 = StringUtils.join(longArray0, '#');
      assertArrayEquals(new long[] {523L, 523L, 0L, 523L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("523#523#0#523#0", string2);
      assertNotNull(string2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)523;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ':', (int) (short)523, 2141);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 523
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 1494);
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'e';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[4] = 'E';
      String[] stringArray0 = StringUtils.split((String) null, "mL%/8,n?Gr", 1494);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", (String) null, "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Br,", "|yJU\"9%^");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("m");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("mBmBmBmBmBmBBB", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'b';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], charArray0);
      assertArrayEquals(new char[] {'S', 'b'}, charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "kz", "kz");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "]XG4}C\"L30M", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '-';
      objectArray0[0] = (Object) 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) "7;e*UnwtE&>Z", charArray0);
      assertArrayEquals(new char[] {'U', '-', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.difference("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("a}a(5x>QVzI[K&", 't');
      assertFalse(string1.equals((Object)string0));
      assertEquals("a}a(5x>QVzI[K&", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "n", (CharSequence) "n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.trimToNull("9");
      assertEquals("9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`tZ=Woffset cannot be negative", "`tZ=Woffset cannot be negative", 108);
      assertEquals("`tZ=Woffset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("-TyxM!|Y", "[_@q6GR/9XlMZ-zgd", "`tZ=Woffset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-TyxM!|Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("-TyxM!|Y");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-TyxM!|Y", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("`tZ=Woffset cannot be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("`tZ=Woffset cannot be negative", string3);
      assertNotNull(string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("`tZ=Woffset cannot be negative"));
      assertNotNull(treeSet0);
      
      String string4 = StringUtils.reverse("org.junitpioneer.jupiter.params.FloatRange");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("egnaRtaolF.smarap.retipuj.reenoiptinuj.gro", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-TyxM!|Y";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("-TyxM!|Y", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern(" ", "RpdFG-");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "`tZ=Woffset cannot be negative", (CharSequence[]) null);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath`tZ=Woffset cannot be negative", string7);
      assertNotNull(string7);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("org.junitpioneer.jupiter.params.FloatRange", "org.junitpioneer.jupiter.params.FloatRange", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals(124, int0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tZ=W", 548, "offset cannot be negative");
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W", "offset cannot be negative");
      assertEquals(0.68, double0, 0.01);
      
      String string1 = StringUtils.removeStartIgnoreCase("`tZ=W", "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`tZ=W", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertEquals((-1), int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string1));
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((Iterable<?>) arrayList0, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(arrayList0.contains(string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("Illegal range. There's no way to get from %s to %s with a step of %s.", "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be n`tZ=W");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[5];
      int int1 = StringUtils.indexOfAny((CharSequence) "`tZ=W", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.rightPad((String) null, 5, '(');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isBlank("Search and Replace array lengths don't match: org.junitpioneer.jupiter.ReportEntryExtension<P T.[Don't clear/set the same property more than once._");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("3.#Vw", "3.#Vw", locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)523;
      String string0 = StringUtils.join(shortArray0, ':');
      assertArrayEquals(new short[] {(short)523}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("523", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)523;
      longArray0[1] = (-450L);
      longArray0[2] = (long) ':';
      longArray0[3] = (long) ':';
      longArray0[4] = (long) (short)523;
      longArray0[5] = (long) (short)523;
      longArray0[6] = (long) (short)523;
      longArray0[7] = (long) (short)523;
      longArray0[8] = (long) (short)523;
      String string1 = StringUtils.join(longArray0, '#');
      assertArrayEquals(new long[] {523L, (-450L), 58L, 58L, 523L, 523L, 523L, 523L, 523L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("523#-450#58#58#523#523#523#523#523", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, ':', (int) (short)523, (int) (short)523);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNotNull(linkedList1);
      
      Locale locale1 = Locale.lookup(linkedList0, linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(locale0));
      assertNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("", "523", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStart("523", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("523", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((float[]) null, '?', (int) (short)523, (-3910));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], "*_2>%I");
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("*_2>%I", 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "org.apache.commons.lang3.StringUtils", "");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.center("]XG4}C\"L30M", 2201, "Strings must not be null");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("7;e*UnwtE&>Z");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;e*UnwtE&>Z", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", "", 18);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, ".R~B3iMnuHfUM5[", "7;e*UnwtE&>Z");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      String string0 = "c97)R=aFDHo";
      String string1 = StringUtils.overlay("c97)R=aFDHo", "X+?8< /479cV1:p,&Z5", 2371, 2371);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c97)R=aFDHoX+?8< /479cV1:p,&Z5", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2306;
      shortArray0[2] = (short)3109;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-2253);
      shortArray0[6] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '0', (int) (short)0, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.upperCase("{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "{}", 108);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("The character ", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("{}");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("{}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("Strings must not be null", 35);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String string0 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("rur<P T.[Don't clear/et e same propesty ore than cero");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'e');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("J", "");
      assertEquals(1, int0);
      
      String string2 = StringUtils.replacePattern((String) null, "!S;ZsJ[v", "");
      assertNull(string2);
      
      String string3 = StringUtils.difference((String) null, "");
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("J");
      assertArrayEquals(new int[] {74}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.replace("", "", "", (int) 'e');
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removePattern((String) null, "* 7Ps@v?@.4");
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string6 = StringUtils.center("", 1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      String string7 = StringUtils.join(floatArray0, 'e');
      assertArrayEquals(new float[] {101.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("101.0", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) null, 'h');
      assertNull(string8);
      
      String string9 = StringUtils.remove("J", "-,slkhtC4D35<VZA#L");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertEquals("J", string9);
      assertNotNull(string9);
      
      boolean boolean3 = StringUtils.endsWithAny("J", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string10 = StringUtils.center("ocl'^Z1", 4365, 'e');
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Vector<Locale.FilteringMode> vector0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "org.junitpioneer.jupiter.SystemPropertyExtension", (-1), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("kz");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.abbreviate("TfHOSc:{b@Z", "", 0, 0);
      assertEquals("TfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "TfHOSc:{b@Z";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("TfHOSc:{b@Z", "TfHOSc:{b@Z", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("TfHOSc:{b@Z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("TfHOSc:{b@Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TFHOSC:{B@Z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverse(",pKNS]voXv]}j");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("j}]vXov]SNKp,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("TFHOSC:{B@Z");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Z@B{:CSOHFT", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.defaultString("TfHOSc:{b@Z", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("TfHOSc:{b@Z", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("TfHOSc:{b@Z", " vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      String string2 = StringUtils.join(shortArray0, '0');
      assertArrayEquals(new short[] {(short)8}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("Wa3>%WB#ruO");
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      floatArray0[5] = (float) (short)8;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', 0, 1267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '3';
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("s /sqdXYt'N;(Pw~)_", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.upperCase("-6H`94CD*T:f[;N");
      assertFalse(string1.equals((Object)string0));
      assertEquals("-6H`94CD*T:F[;N", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("BPQhRJ+E3S%w", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.compare("z^", "");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      int[] intArray0 = new int[3];
      String string0 = StringUtils.replace("0XArb:9xSE:PEsXJs", "0XArb:9xSE:PEsXJs", "0XArb:9xSE:PEsXJs", 0);
      assertEquals("0XArb:9xSE:PEsXJs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("0XArb:9xSE:PEsXJs", "0XArb:9xSE:PEsXJs");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.swapCase(",u_}=D");
      assertEquals(",U_}=d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '{';
      String string0 = StringUtils.replacePattern("q><&04,^Q9rj&{H", "nVg!dE%%u'", "Tp=lrRN`'M");
      assertEquals("q><&04,^Q9rj&{H", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("nVg!dE%%u'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NVG!DE%%U'", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("nVg!dE%%u'");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("nVg!dE%%u'", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "nVg!dE%%u'", (CharSequence) "nVg!dE%%u'", 832);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad("Don't cl", (-1), "NVG!DE%%U'");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Don't cl", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd((String) null, "nVg!dE%%u'");
      assertNull(string5);
      
      String string6 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "q><&04,^Q9rj&{H", (-1), 1932);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.forLanguageTag("org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string7 = StringUtils.upperCase("$2?bc\"L*A^'DgK", locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("$2?BC\"L*A^'DGK", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("fhdo])");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "8J8Z+5Td:|eIl_C;+o", "fhdo])");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("8J8Z+5Td:|eIl_C;+o", (-1300));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("8J8Z+5Td:|eIl_C;+o", string2);
      assertNotNull(string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.join((List<?>) arrayList0, '2', (-1), (-1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("P\"6(UBUjV8ak+,=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("P\"6(UBUjV8ak+,=", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "P\"6(UBUjV8ak+,=", charSequenceArray0[5], 8192);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf("P\"6(UBUjV8ak+,=", "\r", (-303));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertArrayEquals(new char[] {'%', '{'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '%');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToEmpty("Y,xIE&H/UJ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y,xIE&H/UJ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertFalse(int1 == int0);
      assertEquals((-49), int1);
      
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("i/6T*f9g0");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      int int2 = 5;
      String string3 = StringUtils.substringAfterLast("\r", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Y,xIE&H/UJ", 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.center("TfHOSc:{b@Z", 0, '!');
      assertEquals("TfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "TfHOSc:{b@Z", (CharSequence) "");
      assertEquals(11, int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.upperCase("...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("", "");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("", "-~S4ee]}sP(D~KPwb", "Pcm(1;G1RxJW");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string6 = StringUtils.lowerCase("Z[OrgW3>3 L+'q", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("z[orgw3>3 l+'q", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("uVdE");
      assertEquals("uVdE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "", 50);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("org.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripAccents("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "", (-2570));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4469;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'd', (-18), (int) (short)4469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = object0;
      String string2 = StringUtils.join(objectArray0, '$', 53, (-1214));
      assertEquals(3, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 53, '.');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".....................................................", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("Z[OrgW3>3 L+'q", "", "D%jD]'", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Z[OrgW3>3 L+'q", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("D%jD]'");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("']Dj%D", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.right("io", (-3190));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string7 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("|", (String) null, "|");
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Zbm$", "junit-pioneer");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("junit-pioneer", 2201);
      assertFalse(string1.equals((Object)string0));
      assertEquals("junit-pioneer", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("#Nie>;k9?%!e$/(8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#Nie>;k9?%!e$/(8", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "7;e*UnwtE&>Z", (CharSequence) "#Nie>;k9?%!e$/(8", 2201);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "junit-pioneer";
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, "#Nie>;k9?%!e$/(8", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Zbm$");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("\n\"Zr7&.MISc%Sa", "\n\"Zr7&.MISc%Sa", (CharSequence[]) null);
      assertEquals("\n\"Zr7&.MISc%Sa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '>', 20, 20);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "9cp\"QDC.)SOypF\"";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("9cp\"QDC.)SOypF\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("sV", "sV");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 51, 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String string0 = StringUtils.remove("t\n", "");
      assertEquals("t\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join((char[]) null, 'j', (-1), 22);
      assertNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'A', 'A');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", 3173, 3173);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, (int) 'c');
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5737;
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String string3 = StringUtils.substringBetween("]s9|%@[0L0L-1L-1934L0L-1L0L1065L-785", (String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.substringBetween("A*", "org.junitpioneer.jupiter.RepeatFailedTestExtension", "A*");
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals(50, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.substringBetween("WZfFL7n]3iD)H{4s", "org.junitpioneer.jupiter.RepeatFailedTestExtension", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 42);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.substringBetween("xU#9=If'pIcQ?(", "xU#9=If'pIcQ?(");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("m", "m");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1934L);
      longArray0[4] = 0L;
      String string0 = StringUtils.removeIgnoreCase(".H9%", ".H9%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("i-UhaE*4(7aj+a>H", ".H9%");
      assertFalse(string1.equals((Object)string0));
      assertEquals("i-UhaE*4(7aj+a>H", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank("i-UhaE*4(7aj+a>H");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("c7)R=aFDHo", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("io", 'p');
      assertEquals("piop", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("piop");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('p', 109);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "io");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.toRootLowerCase("io");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("io", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("piop", 'p');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("io", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String[] stringArray0 = new String[7];
      boolean boolean0 = StringUtils.endsWithAny("org.apache.commons.lang3.CharSequenceUtils", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("<", "|})f\"}F%@:8*u", (String) null);
      assertNull(string1);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "XpKq&uv0";
      stringArray1[1] = null;
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("c(h", "Z[OrgW3>3 L+'q");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("c(h", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithAny(".H9%", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.leftPad((String) null, 1286, 'V');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'd');
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'p', 'T');
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 936, (-344));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.remove("org.junitpioneer.jupiter.TempDirectory", (String) null);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("org.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'W');
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, 'W');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.StringUtils");
      assertEquals(36, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("(|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare((String) null, "Y,xIE&H/UJ", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.defaultString((String) null, "]XG4}C\"L30M]XG4}C\"L30M");
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, '{');
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("^*vT{OJgV?R");
      assertFalse(string2.equals((Object)string0));
      assertEquals("^*vT{OJgV?R", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^*vT{OJgV?R", (CharSequence) "^*vT{OJgV?R");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = "=";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=", (CharSequence) "=", 98);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ']', 0, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("Z[OrgW3>3 L+'q", 98, ']');
      assertFalse(string1.equals((Object)string0));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", (int) ']');
      assertEquals(93, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(93, stringArray0.length);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("]]]]]]", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]Z[OrgW3>3 L+'q]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]");
      assertTrue(boolean0);
      
      String string2 = StringUtils.joinWith("", stringArray0);
      assertEquals(93, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)charSequence0));
      assertEquals("]]]]]]", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Array and element cannot both be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, '@', 1855, (-2021));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string1));
      assertNotNull(vector0);
      
      String string4 = StringUtils.join((List<?>) vector0, ']', 893, 44);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertFalse(vector0.contains(string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.substringAfter("nit", "nit");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.substringAfter("fhdo])", "fhdo])");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("fhdo])", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fhdo])", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("KsR/b", "KsR/b");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("fhdo])");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      char char0 = '2';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '2', (-2145), 2682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2145
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      boolean boolean0 = StringUtils.endsWithAny("Strings must not be null", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A", "Strings must not be null", (CharSequence[]) null);
      assertEquals("Strings must not be null', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.leftPad("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (-1), 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "[0m>0-bj#\\.%9] $Mjb");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isBlank("o@OU=h");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("ftnw%.|)9", "@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ftnw%.|)9@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", stringArray1, stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1959);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertNotNull(arrayDeque1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String string1 = StringUtils.join(list0, 'q', 0, 0);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(string1);
      
      Stream<String> stream0 = arrayDeque0.stream();
      assertNotSame(arrayDeque0, arrayDeque1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(stream0);
      
      String string2 = StringUtils.repeat("", 4);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.wrap("", '`');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", (-1486));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("YS}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("YS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Br,", (String) null, "Br,");
      assertEquals("Br,", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Br,");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.swapCase("%:F`LBCSK");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%:f`lbcsk", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "%:f`lbcsk", (CharSequence) "\n", 50);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rotate("%:F`LBCSK", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%:F`LBCSK", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.wrap("\n\"Zr7&.MISc%Sa", '\u001F');
      assertEquals("\u001F\n\"Zr7&.MISc%Sa\u001F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n\"r7O.MISc%SQ", "\n\"r7O.MISc%SQ", "\n\"r7O.MISc%SQ");
      assertEquals("\n\"r7O.MISc%SQ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("tH'b@Fwn.u*Uo0[$1", "Thrsholdmust not b negative");
      assertEquals("tH'b@Fwn.u*Uo0[$1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 3456.252032983027;
      String string0 = StringUtils.join(doubleArray0, '=');
      assertEquals(17, doubleArray0.length);
      assertEquals("3456.252032983027=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 83);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 28);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-5);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'U', (-1390), 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1390
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Failed to create custom temp directory");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.substringBefore("N_W.>)^8@", "N#XI");
      assertEquals("N_W.>)^8@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m";
      stringArray0[1] = "wk=[6w";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("wk=[6w", stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("m", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("wk=[6w", "wk=[6w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("m");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.defaultString("wk=[6w", "wk=[6w");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("wk=[6w", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "Y&b", "m");
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("m");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("maxWith cannot be negative", (-1063));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("\n", "-ZgX");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertNotNull(arrayDeque0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertNotNull(list0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(arrayDeque0.contains("Minimum abbreviation width is %d"));
      assertFalse(list0.contains("Minimum abbreviation width is %d"));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string1);
      assertFalse(arrayDeque0.contains(string1));
      assertFalse(list0.contains(string1));
      assertFalse(hashSet0.contains("Minimum abbreviation width is %d"));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("6DLST xs:++T", "");
      assertFalse(string3.equals((Object)string1));
      assertEquals("6DLST xs:++T", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (-1289), "6DLST xs:++T");
      assertNull(string4);
      
      String string5 = StringUtils.removeStart((String) null, "/aU");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.rightPad((String) null, 101, 'S');
      assertNull(string6);
      
      String string7 = StringUtils.substring((String) null, (-607));
      assertNull(string7);
      
      Vector<Object> vector1 = new Vector<Object>();
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertFalse(vector1.contains("Minimum abbreviation width is %d"));
      assertNotNull(vector1);
      
      String string8 = StringUtils.join((List<?>) vector1, "", 29, 29);
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertEquals("[]", vector1.toString());
      assertEquals(10, vector1.capacity());
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertFalse(vector1.contains('S'));
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      stringArray0[4] = null;
      String string9 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("org", "org");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("DefaultLocale", "y{c`Jk#(4;DKY");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("y{c`Jk#(4;DKY");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'c';
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) 1711;
      longArray0[3] = 249L;
      longArray0[4] = (long) 0;
      longArray0[5] = (-4245L);
      longArray0[6] = (long) 'c';
      longArray0[7] = (long) 1711;
      String string1 = StringUtils.join(longArray0, 'A', 1711, 76);
      assertArrayEquals(new long[] {0L, 99L, 1711L, 249L, 0L, (-4245L), 99L, 1711L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("^p*T3I@y\u0007/g", "", false);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      int int0 = StringUtils.compare("vqlp>-", "vqlp>-");
      assertEquals(0, int0);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'q';
      charArray0[2] = 'N';
      charArray0[3] = 'B';
      charArray0[4] = 'P';
      charArray0[5] = 'S';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "vqlp>-", charArray0);
      assertArrayEquals(new char[] {'Q', 'q', 'N', 'B', 'P', 'S'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.rotate("", 828);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, '+');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.substringBefore("RepeatFailedTestExtension", "P2!:&ovV^*!J%>");
      assertEquals("RepeatFailedTestExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("RepeatFailedTestExtension", "dd3`F@C1={O");
      assertTrue(string1.equals((Object)string0));
      assertEquals("RepeatFailedTestExtension", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("RepeatFailedTestExtension");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P2!:&ovV^*!J%>";
      charSequenceArray0[1] = (CharSequence) "RepeatFailedTestExtension";
      charSequenceArray0[2] = (CharSequence) "RepeatFailedTestExtension";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("dd3`F@C1={O");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.defaultString("Ht7)9U3:a<yoW", "mxq3T#u(-,cb");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Ht7)9U3:a<yoW", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "dd3`F@C1={O", (char[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1031L;
      longArray0[1] = 0L;
      longArray0[2] = 249L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-4245L);
      longArray0[6] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '^', 1711, 2289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1711
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      String string0 = StringUtils.join(longArray0, 'j');
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("0j0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, 'f');
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'Z');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", (-1489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("W}cDG{cKuo>o,3%Y7&", 15, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y7&", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("OA\"{y|Hhd}]_.Xj", 101);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfBlank("W}cDG{cKuo>o,3%Y7&", "W}cDG{cKuo>o,3%Y7&");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W}cDG{cKuo>o,3%Y7&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Y7&", 'x');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("xY7&x", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", (-2560), 'u');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("pD,JvzW%dJs`i'Z~-", "\">d$PRV.~G\"f");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("pD,JvzW%dJs`i'Z~-", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("                                           OA\"{y|Hhd}]_.Xj                                           ", 15, '5');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("                                           OA\"{y|Hhd}]_.Xj                                           ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((double[]) null, 'u', 32, 101);
      assertNull(string8);
      
      String string9 = StringUtils.swapCase("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertEquals("                                           oa\"{Y|hHD}]_.xJ                                           ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.left("Y7&", 26);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertEquals("Y7&", string10);
      assertNotNull(string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "pD,JvzW%dJs`i'Z~-";
      charSequenceArray0[1] = (CharSequence) "Y7&";
      charSequenceArray0[2] = (CharSequence) "W}cDG{cKuo>o,3%Y7&";
      charSequenceArray0[3] = (CharSequence) "xY7&x";
      charSequenceArray0[4] = (CharSequence) "\">d$PRV.~G\"f";
      String string11 = StringUtils.substring((String) null, 2, 101);
      assertNull(string11);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "Y7&");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isBlank("W}cDG{cKuo>o,3%Y7&");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsWhitespace("                                           OA\"{y|Hhd}]_.Xj                                           ");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string12 = StringUtils.join((double[]) null, '5');
      assertNull(string12);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", (Supplier<CharSequence>) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\n", 16);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1482.64476109348);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1421.0796287066573;
      String string2 = StringUtils.join(doubleArray0, 'T');
      assertArrayEquals(new double[] {(-1482.64476109348), 1.0, 1421.0796287066573}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("-1482.64476109348T1.0T1421.0796287066573", string2);
      assertNotNull(string2);
      
      int int0 = (-1427);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@&@]XnKPx+z^K", (-1427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "L[PIg8lASa`*1ke>dp");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "L[PIg8lASa`*1ke>dp");
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("", 160, 160);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.reverse((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.reverse("");
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "L[PIg8lASa`*1ke>dp";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("O5=2`l6y", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.replaceIgnoreCase("Don't cl", "fvKU,y){d`JuW/L)=-", (String) null);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Don't cl", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Object varargs must not be null", "");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isNumericSpace("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripAccents("m");
      assertTrue(string1.equals((Object)string0));
      assertEquals("m", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '+');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '+');
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("m+m+m+m+m+m+++", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("Z[OrgW3>3 L+'q", "m");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Z[OrgW3>3 L+'q", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.center("j>S>M#[", 4365, 'h');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[4]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.stripStart("...", "...");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("...", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.replacePattern("wmD\u0007xcp/ZiOj", "wmD\u0007xcp/ZiOj", "wmD\u0007xcp/ZiOj");
      assertEquals("wmD\u0007xcp/ZiOj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.abbreviateMiddle("org.junitpioneer.jupiter.params.ByteRange", "org.junitpioneer.jupiter.params.ByteRange", (-1));
      assertEquals("org.junitpioneer.jupiter.params.ByteRange", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.params.ByteRange", "org.junitpioneer.jupiter.params.ByteRange");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("5|*,&@5bu!NA~c'Z", "", 55);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.abbreviate("TfHOSc:{b@Z", "", 0, 0);
      assertEquals("TfHOSc:{b@Z", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "TfHOSc:{b@Z";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("TfHOSc:{b@Z", "TfHOSc:{b@Z", 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("TfHOSc:{b@Z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("TfHOSc:{b@Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TFHOSC:{B@Z", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("", "!w4&'");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.params.FloatRange", (String) null, 75, 75);
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(",[8)Cy^?V.`[1@", ",[8)Cy^?V.`[1@", 69);
      assertEquals(",[8)Cy^?V.`[1@", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.defaultString("{xs", "{xs");
      assertEquals("{xs", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{xs", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "@a", "@a");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.truncate("0C%VAyV", 2, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "{xs");
      assertEquals((-3), int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(", Length: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: ", (CharSequence) "{xs", (-3213));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+\n", "p{InCombiningDiacriticalMarks}+\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+\n", (CharSequence) "", (-2742));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~", (CharSequence) "~");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.join(intArray0, 'c', 5737, 0);
      assertArrayEquals(new int[] {102}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 5737;
      String string2 = StringUtils.uncapitalize("6r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6r", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[14];
      objectArray0[0] = (Object) "6r";
      String string3 = StringUtils.joinWith("6r", objectArray0);
      assertEquals(14, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("6r6r6r6r6r6r6r6r6r6r6r6r6r6r", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("...", "G=lx");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat(" ", "6r", (-4552));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("/C&#BR5Z}vNe}");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("/C&#BR5Z}vNe}", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/C&#BR5Z}vNe}", (CharSequence) "6r");
      assertEquals(13, int0);
      
      String string7 = StringUtils.center("=[B+", 4);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("=[B+", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceChars("6r", '=', 'x');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("6r", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.join(longArray0, '*');
      assertArrayEquals(new long[] {5737L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertEquals("5737*0", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.compareIgnoreCase(" in an array of ", "itwbc&", false);
      assertEquals((-73), int0);
      
      String string0 = StringUtils.mid("BJ}X]9[+|u&Ip", (-14), 639);
      assertEquals("BJ}X]9[+|u&Ip", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("BJ}X]9[+|u&Ip", charSequenceArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.removeEnd("CQ@,t{r<", "CQ@,t{r<");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, (-950), "CQ@,t{r<");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("Jp)vR");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.stripStart("<", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertEquals("<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.center("The String must not be empty String must not be empty", 4, "The String must not be empty String must not be empty");
      assertEquals("The String must not be empty String must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.RepeatFailedTestExtension", "org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'N', 'N');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("0K", "0K");
      assertEquals("0K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "]XG4}C\"L30M", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("]XG4}C\"L30M", 2044, "{jjvUe{+w!s= #&6Q4)");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("Q3!Y^_%Y=qUk4^7A", "', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q3!Y^_%Y=qUk4^7A", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("oWJ7)oSy?z9L`@U6");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("]XG4}C\"L30M", 2044, 'm');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("~S7Q2If", 50);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains('m'));
      assertNotNull(vector0);
      
      String string5 = StringUtils.join((List<?>) vector0, "]XG4}C\"L30M", 2201, 1853);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertFalse(vector0.contains('m'));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("nit");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '2');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("W}cDG{cKuo>o,3%Y7&", '\\');
      assertEquals("\\W}cDG{cKuo>o,3%Y7&\\", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("W}cDG{cKuo>o,3%Y7&");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("W}cDG{cKuo>o,3%Y7&", 15, 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y7&", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "W}cDG{cKuo>o,3%Y7&";
      String string2 = StringUtils.join(objectArray0, '\\');
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("W}cDG{cKuo>o,3%Y7&", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll("2lwPRJ`_!yw180V!", "cDW2p-nKI6O}ZM;Pa", "\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("2lwPRJ`_!yw180V!", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = 'g';
      charArray0[5] = 's';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      int int0 = StringUtils.indexOfAny((CharSequence) "cDW2p-nKI6O}ZM;Pa", charArray0);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', 'g', 's', '\\', '\\'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.wrap("", 'T');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "W}cDG{cKuo>o,3%Y7&", "L>G0Awd7");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.remove("", 's');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("W}cDG{cKuo>o,3%Y7&", '>');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      String string0 = StringUtils.remove("Don't clear/set the same property more than once.", 'v');
      assertEquals("Don't clear/set the same property more than once.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.remove("offset cannot be negative", '!');
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      String string1 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "offset cannot be negative", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("offset cannot be negative", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad(")tx{4)qHp^", 0, '!');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")tx{4)qHp^", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) '!';
      String string4 = StringUtils.join(doubleArray0, 'H', 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 33.0, 33.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[1] = '!';
      charArray0[2] = '=';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '!', '=', '!', '!', '!'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\u0000!=!!!", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\u0000!=!!!", 0, Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "D3>l!=TOw@3@1Fv";
      objectArray0[1] = (Object) charSequenceArray0[4];
      objectArray0[2] = (Object) charSequenceArray0[2];
      objectArray0[3] = (Object) charSequenceArray0[3];
      objectArray0[4] = (Object) charSequenceArray0[2];
      objectArray0[5] = (Object) '!';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 0.0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[8] = object1;
      String string6 = StringUtils.joinWith("D3>l!=TOw@3@1Fv", objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      String string0 = StringUtils.join(doubleArray0, '.');
      assertEquals(17, doubleArray0.length);
      assertEquals("0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      char char0 = 'k';
      String string0 = StringUtils.remove("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'k');
      assertEquals("Aborting to protect against StacOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("Aborting to protect against StacOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ABORTING TO PROTECT AGAINST STACOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = null;
      int int0 = StringUtils.lastIndexOfAny("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap("maxWith cannot be negative", "ABORTING TO PROTECT AGAINST STACOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (CharSequence) "ABORTING TO PROTECT AGAINST STACOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("maxWith cannot be negative"));
      assertNotNull(linkedList0);
      
      char char1 = '^';
      int int2 = 62;
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains("maxWith cannot be negative"));
      assertNotNull(linkedList1);
      
      boolean boolean1 = linkedList0.removeLastOccurrence("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(linkedList0.contains("maxWith cannot be negative"));
      
      boolean boolean2 = linkedList0.add((Object) null);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(linkedList0.contains("maxWith cannot be negative"));
      
      // Undeclared exception!
      try { 
        linkedList0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("#", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'h');
      assertEquals("org.apace.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("]^", "]^");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("...", (String) null);
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String string0 = StringUtils.leftPad(", Length: 0", (-393), ')');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "E2bdYyU~ 9pgUp,t\"N", 49, 56);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      String string0 = StringUtils.overlay("c97)R=aFDHo", "Wa3>%WB#ruO", 2371, 2371);
      assertEquals("c97)R=aFDHoWa3>%WB#ruO", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("_<P T.[Don't clear/set the same property more than once.", "iBm=-Rlaf", false);
      assertEquals((-10), int0);
      
      String string1 = StringUtils.mid("c97)R=aFDHo", (short)3109, (short)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Wa3>%WB#ruO", "Wa3>%WB#ruO");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.isEmpty("c97)R=aFDHoWa3>%WB#ruO");
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((List<?>) null, '5', 32, (int) (short)3109);
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("$D=>VGh", "Extension context \"");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("$D=>VGh", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "c97)R=aFDHo";
      String string5 = StringUtils.replaceChars("", "@VS,", "\n9EZ[d0}!M9EZ[d0}!M");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "_<P T.[Don't clear/set the same property more than once.";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) " ";
      charSequenceArray0[7] = (CharSequence) "\n";
      charSequenceArray0[8] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = StringUtils.getBytes("_<P T.[Don't clear/set the same property more than once.", (Charset) null);
      assertEquals(57, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      boolean boolean0 = StringUtils.isBlank("m");
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("wj\":^W$qB)Tl<]]", "G=lx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("wj\":^W$qB)Tl<]]", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("m");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("m", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("wj\":^W$qB)Tl<]]", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.rightPad("y_Zp>}>sCah", 17, 'q');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("y_Zp>}>sCahqqqqqq", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isBlank("G=lx");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '[', 1848, 2410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2410
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, 'F', 321, 321);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("", string0);
      assertFalse(stack0.contains(string0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'P', 13, (int) 'P');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 80
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.difference("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set@DefaultLocale can only be used withlanguage tag if language, country, and variant are not set", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.params.RangeSourceProvider", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-712);
      intArray0[1] = (-1567);
      intArray0[2] = (-1716);
      int int0 = 122;
      intArray0[3] = 122;
      intArray0[4] = 0;
      intArray0[5] = (-1218);
      int int1 = 108;
      String string0 = StringUtils.join(intArray0, '>', 108, (-3016));
      assertArrayEquals(new int[] {(-712), (-1567), (-1716), 122, 0, (-1218)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("org.junitpioneer.jupiter.params.RangeSourceProvider", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceProvider", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars((String) null, "org.junitpioneer.jupiter.params.RangeSourceProvider", "");
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertNotNull(linkedList0);
      
      char char0 = 'a';
      int int2 = 108;
      boolean boolean0 = linkedList0.add((Object) "");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(""));
      
      String string3 = StringUtils.join((List<?>) linkedList0, 'a', 108, 0);
      assertEquals(1, linkedList0.size());
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(""));
      assertNotNull(string3);
      
      String string4 = ".'";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.stripAccents(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.difference(", '", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.removeEnd("#\n#\n", "#\n#\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("#\n#\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "#\n#\n", (CharSequence) "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.TempDirectory");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], ", Length: ");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.truncate("m|7", 2, 2026);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "org.junitpioneer.jupiter.TempDirectory");
      assertEquals((-38), int0);
      
      boolean boolean3 = StringUtils.containsWhitespace("7");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = StringUtils.toRootLowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 2026, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.remove("uVdE", "uVdE");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "uVdE");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.removeStart("}9W\"gn.:Dp?Y!.L/>@\"", "<otstF)Mo*");
      assertEquals("}9W\"gn.:Dp?Y!.L/>@\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "m", (CharSequence) "m");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      String string0 = StringUtils.removeStart("9EZ[d0}!M", "9EZ[d0}!M");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'8', 'P', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.center("org.junitpioneer.jupiter.params.RangeSourceProvider", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceProvider", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.defaultIfBlank("@DefaultLocale can only be used with language tag if anguage, country, and variant are not ", "&CRIIBUmi3{)wfl;0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("@DefaultLocale can only be used with language tag if anguage, country, and variant are not ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("s8\"", '@');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("@s8\"@", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("&CRIIBUmi3{)wfl;0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("&CRIIBUmi3{)wfl;0", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">Um|", '>');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToEmpty("9EZ[d0}!M");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("9EZ[d0}!M", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "XpKq&uo0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(17, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("E<", "|})f\"}F%@:8*u", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Z[OrgW3>3 L+'q", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z[OrgW3>3 L+'q", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Z[OrgW3>3 L+'q", "set");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid((String) null, (-1), (-1));
      assertNull(string3);
      
      String string4 = StringUtils.difference("3`Wm", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("3`Wm", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.rightPad("dtQ8gOELL6LT$W/>Um|", 84, '*');
      assertEquals("dtQ8gOELL6LT$W/>Um|*****************************************************************", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dtQ8gOELL6LT$W/>Um|", (CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceChars("dtQ8gOELL6LT$W/>Um|", '*', '*');
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = '*';
      String string2 = StringUtils.wrapIfMissing("XArb:9xSE:PEsXJs", '*');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*XArb:9xSE:PEsXJs*", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "dtQ8gOELL6LT$W/>Um|*****************************************************************", "XArb:9xSE:PEsXJs");
      assertEquals(6, int0);
      
      String string3 = StringUtils.abbreviate("dtQ8gOELL6LT$W/>Um|", (int) '*');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dtQ8gOELL6LT$W/>Um|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("dtQ8gOELL6LT$W/>Um|", "dtQ8gOELL6LT$W/>Um|");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("*XArb:9xSE:PEsXJs*");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String string0 = StringUtils.difference("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 't');
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      assertFalse(string1.equals((Object)string0));
      assertEquals("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.length("4l'o<>");
      assertEquals(6, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.replaceChars("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", string2);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string3 = StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "4l'o<>", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("4l'o<>org.junitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("4L'O<>TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "4l'o<>org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "4L'O<>TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT");
      assertFalse(int1 == int0);
      assertEquals(59, int1);
      
      String string6 = StringUtils.stripEnd("\"_#zYEQg]K+&/d+*Gl", "The type must not be null");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\"_#zYEQg]K+&/d+*G", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string7 = StringUtils.left("The type must not be null", 0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "4l'o<>", "The type must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = StringUtils.compareIgnoreCase("4L'O<>TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "4l'o<>", false);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(58, int3);
      
      String string8 = StringUtils.getDigits("The type must not be null");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String string0 = StringUtils.removeStart("n", "n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Gn{)EQ+DS> E;Q}n+", (String) null);
      assertEquals("Gn{)EQ+DS> E;Q}n+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Gn{)EQ+DS> E;Q}n+", (CharSequence) "Gn{)EQ+DS> E;Q}n+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      String string0 = StringUtils.strip("W s]\\zuWC", "W s]\\zuWC");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("#\n", "#\n", (-1007));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String string0 = StringUtils.left("qGRy>avo", (-1923));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.difference("M", "G\"=d[:B.]");
      assertEquals("G\"=d[:B.]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'm');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertEquals("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Strings must not be null", "...", "h$da{,?i+Hz&QlCZBGC", (-1644));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("J", "=63 E 8", true);
      assertEquals(45, int0);
      
      String string2 = StringUtils.mid("~<3):)u58eF-?4?JK", 10, 100);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F-?4?JK", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "...");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      String string0 = StringUtils.join((long[]) null, 'f');
      assertNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, 'f', 32, (-1189));
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 409, 'f');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)0;
      char char0 = '.';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '.', (-2302), (int) (byte)96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2302
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.center("@w)hk\"0jucr.A!6W!X", 1424, "@w)hk\"0jucr.A!6W!X");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.center("]XG4}C\"L30M", 2201, "\n");
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars(string0, "Zbm$", "junit-pioneer");
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P\"6(UBUjV8ak+,=", (CharSequence) "P\"6(UBUjV8ak+,=", 33);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Zbm$", "\n", 2201);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String string0 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) (short)108, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("AbortingAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.swapCase("Extension context \"");
      assertEquals("eXTENSION CONTEXT \"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "/s2SfyvWP41d'-OfusVV=[SECdz");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("/s2SfyvWP41d'-OfusVV=[SECdz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.center("qGRy>avo", 24, "qGRy>avo");
      assertEquals("qGRy>avoqGRy>avoqGRy>avo", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.prependIfMissingIgnoreCase("9cp\"QDC.)SOypF\"", "s /sqDdXYt'N;(Pw~)_", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("s /sqDdXYt'N;(Pw~)_9cp\"QDC.)SOypF\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tZ=W", 94, "`tZ=W");
      assertEquals("`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=W`tZ=`tZ=W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "L[PIg8lASa`*1ke>dp");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "L[PIg8lASa`*1ke>dp");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("", 160, 160);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.replaceAll("^&zP", "", ")|");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(")|^)|&)|z)|P)|", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(")|^)|&)|z)|P)|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("^&zP", 160, "offset cannot be negative");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoff^&zPoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoff", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.mid("K", 121, 121);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = Locale.lookupTag(arrayList0, priorityQueue0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertNull(string0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string1 = StringUtils.lowerCase("!GefzOs?]X9f&DOaw9,", locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("!gefzos?]x9f&doaw9,", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("!gefzos?]x9f&doaw9,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";", ";");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(";", ";");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Br,", "Br,");
      assertEquals(0, int0);
      
      String string0 = StringUtils.center("Br,", 0, "Br,");
      assertEquals("Br,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Failed to delete temp directory ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.comons.ang3.Char-quenc8Utils");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.swapCase("m");
      assertEquals("M", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("m"));
      assertNotNull(stack0);
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains("m"));
      assertNotNull(listIterator0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", (String) null);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 102;
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('t', 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tttttttttttttttttttttttttttt", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("tttttttttttttttttttttttttttt");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Tttttttttttttttttttttttttttt", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "Illegal range. Equal from and to will produce an empty range.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.stripAccents("&T82=M'^H");
      assertEquals("&T82=M'^H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#L@\"~gPsan>X", "#L@\"~gPsan>X", 34);
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chop("#L@\"~gPsan>X");
      assertEquals("#L@\"~gPsan>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.jupiter.params.IntRange", "org.junitpioneer.jupiter.params.IntRange");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.IntRange", (CharSequence) "org.junitpioneer.jupiter.params.IntRange", (-1283));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.junitpioneer.jupiter.params.IntRange", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("sV", stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "pM?,d}";
      String string0 = StringUtils.joinWith("pM?,d}", objectArray0);
      assertEquals(1, objectArray0.length);
      assertEquals("pM?,d}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = "3xv";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\"6di/", "3xv", (-3343));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3343), (-3343));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = '3';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "3xv", charArray0);
      assertArrayEquals(new char[] {'o', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.forName("\"6di/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"6di/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      String string0 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("p{InCombiningDiacriticalMarks}+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = "9\\'wv``)*\"Ql0QC";
      String string2 = StringUtils.substringBefore("9'wv``)*\"Ql0QC", "9'wv``)*\"Ql0QC");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string3 = "$jq";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("org.junitpioneer.jupiter.RepeatFailedTestExtension", "m>0-bj#\\.%9] $Mjb[0", "$jq");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // m>0-bj#\\.%9] $Mjb[0
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String string0 = "*fNnx";
      String string1 = StringUtils.rightPad("*fNnx", 2419);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("*fNnx");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*fNnx");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = ')';
      charArray0[2] = 'b';
      charArray0[3] = '\'';
      charArray0[4] = 'L';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "*fNnx", charArray0);
      assertArrayEquals(new char[] {'.', ')', 'b', '\'', 'L'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('b'));
      assertNotNull(arrayList0);
      
      String string2 = "$c";
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("$c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.$c
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      char char0 = '';
      String string1 = StringUtils.strip(" vs ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      int int0 = 1;
      String string2 = StringUtils.center("/NeMu4@l2eOpB3p2fD;", 1, "p/U,b7}~V87W@5n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/NeMu4@l2eOpB3p2fD;", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "/NeMu4@l2eOpB3p2fD;", (CharSequence) "p/U,b7}~V87W@5n");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("vs");
      assertTrue(boolean0);
      
      String string3 = StringUtils.repeat((String) null, "/NeMu4@l2eOpB3p2fD;", 1);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "p/U,b7}~V87W@5n", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "-6H`94CD*T:f[;N", (String) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isBlank("o@OU=h");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.joinWith("-6H`94CD*T:f[;N", stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("F/}@O#B:5hN3(S8rSV", 2495);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F/}@O#B:5hN3(S8rSV", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      String string0 = StringUtils.substring("{}", 28, 127);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, "G=lx\n");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("G=lx\n", "{}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeEndIgnoreCase("{}", "{}");
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 122);
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat('a', (-3857));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("XpKq&uv0s /sqdXYt'N;(Pw~)_", "Failed to delete temp directory ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, (-628), ':');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((double[]) null, 'u', 14, (-274));
      assertNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'H', 'H'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("HH", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "XpKq&uv0", 0, (-628));
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.joinWith("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("XpKq&uv0", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.startsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      StringUtils.stripAccents("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      String string0 = "dtQ8gOELL6LT$W/>Um|dtQ8gOELL6LT$W/>Um|Minimum abbreviation width is %d";
      StringUtils.unwrap("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "dtQ8gOELL6LT$W/>Um|dtQ8gOELL6LT$W/>Um|Minimum abbreviation width is %d");
      StringUtils.isBlank("dtQ8gOELL6LT$W/>Um|dtQ8gOELL6LT$W/>Um|Minimum abbreviation width is %d");
      StringUtils.isBlank("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.leftPad("/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", 65536, '^');
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      StringUtils.isNumericSpace((CharSequence) null);
      String string1 = StringUtils.unwrap("", (String) null);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 50);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripAccents("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 50);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      StringUtils.upperCase("{}");
      StringUtils.remove("{}", "{}");
      String[] stringArray0 = StringUtils.splitByCharacterType("{}");
      StringUtils.isAsciiPrintable("{}");
      StringUtils.joinWith("", stringArray0);
      StringUtils.splitPreserveAllTokens("");
      StringUtils.equalsIgnoreCase("{}", "{}");
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2297);
      shortArray0[1] = (short)105;
      shortArray0[2] = (short) (-1880);
      shortArray0[3] = (short)105;
      shortArray0[4] = (short) (-2297);
      shortArray0[5] = (short)105;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'S', 160, 2820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 160
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      StringUtils.remove("offset cannot be negative", '!');
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "offset cannot be negative", charSequenceArray0);
      StringUtils.removeEndIgnoreCase("offset cannot be negative", (String) null);
      StringUtils.leftPad(")tx{4)qHp^", 0, '!');
      StringUtils.isNoneEmpty(charSequenceArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '!';
      doubleArray0[3] = (double) '!';
      String string0 = StringUtils.join(doubleArray0, 'H', 0, 0);
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '=';
      charArray0[3] = '!';
      charArray0[4] = '!';
      charArray0[5] = '!';
      StringUtils.valueOf(charArray0);
      StringUtils.lastIndexOf((CharSequence) "!!=!!!", 0, Integer.MIN_VALUE);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "D3>l!=TOw@3@1Fv";
      objectArray0[1] = (Object) charSequenceArray0[4];
      objectArray0[2] = (Object) charSequenceArray0[2];
      objectArray0[3] = (Object) charSequenceArray0[3];
      objectArray0[4] = (Object) charSequenceArray0[2];
      objectArray0[5] = (Object) '!';
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) 0.0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      String string1 = StringUtils.joinWith("D3>l!=TOw@3@1Fv", objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      StringUtils.stripAccents("");
      StringUtils.difference("", "");
      StringUtils.compare("<5MD=O8wb@@'bvQ", "Don't clear/set the same property more than once.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      StringUtils.stripAll(stringArray0, "temp.dir");
      StringUtils.removeStart("Don't clear/set the same property more than once.", "<P T.[");
      StringUtils.removeIgnoreCase("~9*Q ", "");
      StringUtils.splitPreserveAllTokens("maxWith cannot be negative", 'H');
      StringUtils.ordinalIndexOf("~9*Q ", "", (-4));
      StringUtils.wrap("+", "~9*Q ");
      StringUtils.getLevenshteinDistance((CharSequence) "~9*Q +~9*Q ", (CharSequence) "");
      StringUtils.stripEnd((String) null, "~)!cp@KCbpdf]");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Don't clear/set the same property more than once.");
      StringUtils.left("", (-4));
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("k\"9K", "k\"9K");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = "Failed to create default temp directory";
      String string1 = StringUtils.leftPad("Failed to create default temp directory", 2086, 'd');
      StringUtils.removeIgnoreCase(string1, "Failed to create default temp directory");
      // Undeclared exception!
      try { 
        StringUtils.unwrap("Failed to create default temp directory", "Failed to create default temp directory");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("2/{h8~7$h\"p49DUr-", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "G=lx\n", "=OI?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      String string0 = null;
      StringUtils.removeEndIgnoreCase("XpKq&uv0s /sqdXYt'N;(Pw~)_", "Failed to delete temp directory ");
      int int0 = (-628);
      StringUtils.containsOnly((CharSequence) "Zbm$", "Z[OrgW3>3 L+'q");
      // Undeclared exception!
      try { 
        StringUtils.truncate("o=G=G", (-628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("9_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      StringUtils.join((Iterator<?>) null, "m>0-bj#\\.%9] $Mjb");
      StringUtils.containsWhitespace("m>0-bj#\\.%9] $Mjb");
      StringUtils.replaceChars("m>0-bj#\\.%9] $Mjb", "m>0-bj#\\.%9] $Mjb", "9[{[CTf+rE(");
      StringUtils.repeat("m>0-bj#\\.%9] $Mjb", (-16));
      StringUtils.containsIgnoreCase("m>0-bj#\\.%9] $Mjb", (CharSequence) null);
      StringUtils.join((Iterator<?>) null, 'Z');
      StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      StringUtils.contains((CharSequence) null, (-1));
      StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", "RJqaGL#LqX", 4);
      StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-16));
      StringUtils.indexOf((CharSequence) null, 2);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      arrayDeque1.add(locale_FilteringMode0);
      arrayDeque1.descendingIterator();
      StringUtils.join((Iterator<?>) null, 'Z');
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils.joinWith("", stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      long[] longArray0 = new long[9];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";", ";");
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", 'p');
      assertEquals("pSearch and Replace array lengths don't match: p", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumeric(";");
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.ordinalIndexOf(";", ";", 1242);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.swapCase("m");
      assertEquals("M", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("m");
      String[] stringArray0 = StringUtils.split("m", "m");
      boolean boolean1 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("cc", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.capitalize("(-n9b%Wrf@|J");
      assertEquals("(-n9b%Wrf@|J", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "(-n9b%Wrf@|J", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.capitalize("Extension context \"");
      assertEquals("Extension context \"", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Extension context \"", "Extension context \"");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Extension context \"", (String) null);
      assertEquals((-1), int0);
      
      StringUtils.equals((CharSequence) null, (CharSequence) null);
      String string1 = StringUtils.replace("c7B0CB.o2T7", "^nvRPj'", "Search and Replace array lengths don't match: ");
      assertEquals("c7B0CB.o2T7", string1);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("B3g6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      int int0 = StringUtils.compare("ZboF$", "ZboF$");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("]s,u.+");
      assertEquals("]s,u.+", string0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("Br,");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("", "Br,");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String string0 = StringUtils.wrap("l1 JybHm!GRth@L=Q'Z", "l1 JybHm!GRth@L=Q'Z");
      assertEquals("l1 JybHm!GRth@L=Q'Zl1 JybHm!GRth@L=Q'Zl1 JybHm!GRth@L=Q'Z", string0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(0, int0);
      
      String string0 = StringUtils.capitalize("org.apache.commons.lang3.StringUtils");
      assertEquals("Org.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "Minimum abbreviation width is %d");
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", (String) null);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replace("Search and Replace array lengths don't match: ", "[0m>0-bj#\\.%9] $Mjb", (String) null);
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match: ", string1);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      StringUtils.overlay("c97)R=aFDHo", "c97)R=aFDHo", 2371, 2371);
      String[] stringArray0 = StringUtils.substringsBetween("c97)R=aFDHoc97)R=aFDHo", "c97)R=aFDHoc97)R=aFDHo", "c97)R=aFDHo");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+| bgyj", "p{InCombiningDiacriticalMarks}+| bgyj");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Don't cl", "y{c`Jk#(4;DKY");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("y{c`Jk#(4;DKY");
      StringUtils.join((char[]) null, 'y', (-181), (-181));
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-181);
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) '!';
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'u';
      floatArray0[5] = (float) '!';
      String string1 = StringUtils.join(floatArray0, '?');
      assertNotNull(string1);
      assertEquals("-181.0?77.0?33.0?0.0?117.0?33.0", string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("offset cannot be negative", "Don't cl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("RO", "RO");
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("RO");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.reverse("RO");
      assertEquals("OR", string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "OR", (char[]) null);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", (String) null, (-2423), (-1));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", '(');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.trim("\n");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'I');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,", "/ $_B@#m76*`u;_/&,/ $_B@#m76*`u;_/&,");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 1959);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("&?3Jamd", "", 1959);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.isAllUpperCase("wC");
      assertFalse(boolean0);
      
      StringUtils.isNumericSpace("");
      String string1 = StringUtils.stripAccents("org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("dq3]W!3", "wC");
      assertEquals("dq3]W!3", string2);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      StringUtils.toRootLowerCase("m");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      StringUtils.isBlank("m");
      StringUtils.defaultIfBlank("wj\":^W$qB)Tl<]]", "G=lx");
      StringUtils.containsOnly((CharSequence) "/aU", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.truncate("G=lx", (-1289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      StringUtils.join(charArray0, '{', 415, 415);
      StringUtils.countMatches((CharSequence) "", 'c');
      StringUtils.trimToEmpty("Y,xIE&H/UJ");
      StringUtils.compare("(|", "Y,xIE&H/UJ");
      StringUtils.isNumeric("(|");
      StringUtils.splitPreserveAllTokens("\r");
      StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      StringUtils.isAlphanumericSpace("i/6T*f9g0");
      int int0 = 5;
      StringUtils.overlay("-", "Threshold must not be negative", 5, 5);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Y,xIE&H/UJ", 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("", (-1), "");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String string0 = " vs ";
      StringUtils.chomp(" vs ");
      int int0 = 84;
      StringUtils.lastIndexOf((CharSequence) " vs ", 84);
      // Undeclared exception!
      try { 
        Charset.forName(" vs ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  vs 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringUtils.join(stringArray0);
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("The String must not be empty", "IEnh5T}Z=A", Integer.MIN_VALUE);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      StringUtils.isAllUpperCase("");
      StringUtils.isNumericSpace("");
      String string1 = StringUtils.stripAccents("NTH");
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-1));
      assertEquals(0, int1);
      
      String string2 = StringUtils.rightPad("", Integer.MIN_VALUE, "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripEnd("NTH", "t2M");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3433));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 't');
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      StringUtils.wrap("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      StringUtils.length("4l'o<>");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.replaceChars("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      charSequenceArray0[0] = (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "4l'o<>", charSequenceArray0);
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      StringUtils.replaceChars((String) null, "\"_#zYEQg]K+&/d+*Gl", ":a");
      StringUtils.toCodePoints((CharSequence) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.defaultIfBlank((String) null, "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&");
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "4l'o<>org.junitpioneer.vintage.TimeoutExtension", "Q3!Y^_%Y=qUk4^7A");
      assertEquals(0, int0);
      
      StringUtils.contains((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", 13);
      String string5 = StringUtils.defaultString("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 19);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      Object object0 = new Object();
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      StringUtils.equalsIgnoreCase("", "");
      String string1 = StringUtils.trim("=NH");
      String string2 = StringUtils.wrap("A($8^fJkL", 'L');
      assertEquals("LA($8^fJkLL", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("LA($8^fJkLL");
      String string3 = StringUtils.substringAfterLast("LA($8^fJkLL", "LA($8^fJkLL");
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "]XG4}C\"L30M]XG4}C\"L30M", 941);
      assertNull(stringArray0);
      
      StringUtils.equals((CharSequence) null, (CharSequence) "A($8^fJkL");
      StringUtils.indexOfDifference(charSequenceArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "";
      stringArray1[1] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray1[2] = "2!COW(X";
      StringUtils.getCommonPrefix(stringArray1);
      String string4 = StringUtils.removePattern("}5G", "hS:c5gDoW6M|");
      assertEquals("}5G", string4);
      
      String string5 = StringUtils.unwrap("=NH", 'L');
      assertTrue(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split("", "");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.isNotBlank("");
      String string1 = "k@:t?K/}}";
      StringUtils.rightPad("", (-1), "k@:t?K/}}");
      StringUtils.contains((CharSequence) "", (-1));
      StringUtils.lastIndexOf((CharSequence) "", (-1));
      // Undeclared exception!
      try { 
        Charset.forName("k@:t?K/}}");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // k@:t?K/}}
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("VlMNCtxp6LSW!");
      assertEquals("vlMNCtxp6LSW!", string0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String string0 = StringUtils.stripEnd("zi/P", "n");
      assertEquals("zi/P", string0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "l(Y", 122);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      int[] intArray0 = new int[3];
      String string0 = StringUtils.join(intArray0, 'L');
      assertEquals("0L0L0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "|", (CharSequence) "|");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      String string0 = StringUtils.join(intArray0, '1');
      assertNotNull(string0);
      assertEquals("32101010", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "32101010", (CharSequence) "32101010");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'u');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      StringUtils.lowerCase((String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'O');
      assertNotNull(string0);
      assertEquals("1O-41O1O127O122O93O1O0", string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.lowerCase("#\n");
      assertEquals("#\n", string0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = StringUtils.join(byteArray0, 'U');
      assertEquals("0U0U0U0U0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Rb^rxs#A[x?h");
      assertEquals("rb^rxs#a[x?h", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)93;
      String string1 = StringUtils.join(byteArray0, 'O');
      assertEquals("14O54O127O1O122O-41O3O0O93", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String string0 = StringUtils.truncate("Hk:~y+Q", 127);
      assertNotNull(string0);
      assertEquals("Hk:~y+Q", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Hk:~y+Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.truncate("blank_blank_blank_2014", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("_rGpu", "_rGpu", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("MwuPSWF@F7vqe*e`6");
      assertEquals("MwuPSWF@F7vqe*e`6", string0);
      
      String string1 = StringUtils.rotate("MwuPSWF@F7vqe*e`6", (-903));
      assertNotNull(string1);
      assertEquals("PSWF@F7vqe*e`6Mwu", string1);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(":Cw6<c");
      assertFalse(boolean0);
      
      StringUtils.isMixedCase("m");
      StringUtils.isMixedCase("m");
      String string0 = StringUtils.getDigits("9X");
      assertEquals("9", string0);
      
      String string1 = StringUtils.wrapIfMissing(":Cw6<c", "9");
      assertEquals("9:Cw6<c9", string1);
      
      StringUtils.indexOf((CharSequence) "9", (CharSequence) "9");
      String[] stringArray0 = StringUtils.substringsBetween("9:Cw6<c9", "9", "9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String string0 = StringUtils.replaceAll("!wU,", "!wU,", "!wU,");
      assertEquals("!wU,", string0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("kz", "kz", "kz");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      StringUtils.replaceAll("", "", "");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      StringUtils.containsNone(charSequenceArray0[0], "*_2>%I");
      StringUtils.truncate("", 0, 0);
      StringUtils.substring("*_2>%I", 0, 0);
      String[] stringArray0 = StringUtils.substringsBetween("", "org.apache.commons.lang3.StringUtils", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.truncate("", 13, 13);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ' ', 0, 314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfBlank("\r", supplier0);
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "\r";
      StringUtils.prependIfMissingIgnoreCase("\r", (CharSequence) null, charSequenceArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      StringUtils.join(shortArray0, '0');
      StringUtils.length(charSequenceArray0[1]);
      int int0 = 0;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', 0, (int) (short)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "L[PIg8lASa`*1ke>dp");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "L[PIg8lASa`*1ke>dp";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) null;
      String string1 = StringUtils.substringAfterLast("L[PIg8lASa`*1ke>dp", (String) null);
      assertEquals("", string1);
      
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase(" vs ", "L[PIg8lASa`*1ke>dp", charSequenceArray0);
      assertEquals(" vs ", string2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short) (-220);
      shortArray0[5] = (short)8;
      shortArray0[6] = (short)8;
      String string3 = StringUtils.join(shortArray0, '0');
      assertEquals("80808080-2200808", string3);
      
      StringUtils.length(charSequenceArray0[5]);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-220);
      StringUtils.join(floatArray0, '0', 127, (-1));
      String[] stringArray0 = StringUtils.split("<P T.[", " vs ", (int) (short)8);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      StringUtils.substringAfter("fhdo])", "fhdo])");
      StringUtils.removeStart("fhdo])", "");
      StringUtils.replaceOnce("", "^2h,s", "Q3!Y^_%Y=qUk4^7A");
      StringUtils.compare("{&pT-.f\"@)U(", " ", false);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.descendingSet();
      treeSet0.descendingIterator();
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ListIterator<Locale.FilteringMode> listIterator0 = arrayList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, '\\');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A";
      stringArray0[4] = " ";
      stringArray0[5] = "";
      stringArray0[6] = "oWJ7)oSy?z9L`@U6";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.isAsciiPrintable("', is neither of type Map.Entry nor an ArrayQ3!Y^_%Y=qUk4^7A");
      String string0 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqDdXYt'N;(Pw~)_", "s /sqDdXYt'N;(Pw~)_", stringArray0);
      assertEquals("s /sqDdXYt'N;(Pw~)_", string0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.lowerCase("@De");
      assertEquals("@de", string0);
      
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "@de", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsWhitespace("@de");
      boolean boolean1 = StringUtils.isAlphaSpace("@de");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      float[] floatArray0 = new float[12];
      String string1 = StringUtils.join(floatArray0, '\u0012');
      assertNotNull(string1);
      assertEquals("0.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0\u00120.0", string1);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("ni%Ce )l]P_RWp7?", "ni%Ce )l]P_RWp7?");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("Wa3>%WB#ruO", supplier0);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[1] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[2] = (CharSequence) "Wa3>%WB#ruO";
      charSequenceArray0[3] = (CharSequence) "Wa3>%WB#ruO";
      StringUtils.prependIfMissingIgnoreCase("Wa3>%WB#ruO", "Wa3>%WB#ruO", charSequenceArray0);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      StringUtils.join(shortArray0, '0');
      StringUtils.length("Wa3>%WB#ruO");
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)8;
      floatArray0[1] = (float) '0';
      floatArray0[2] = (float) 12;
      floatArray0[3] = (float) '0';
      floatArray0[4] = (float) '0';
      floatArray0[5] = (float) (short)8;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', 0, 1267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'i', 321, 378);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 321
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("c97)R=aFDHo", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'x';
      StringUtils.join(charArray0, 'm');
      StringUtils.replaceChars("8mPmTmTmx", '4', 'T');
      int int0 = StringUtils.indexOf((CharSequence) "8mPmTmTmx", 936, (-344));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.join(charArray0, '');
      assertNotNull(string0);
      assertEquals("\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String string0 = StringUtils.trimToNull("^.-0 ]H}+Z&");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Br,", (CharSequence) "^.-0 ]H}+Z&");
      String string1 = StringUtils.unwrap("^.-0 ]H}+Z&", "o;yd$G4u71+)<{}{");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isBlank("^.-0 ]H}+Z&");
      assertFalse(boolean1);
      
      String string2 = StringUtils.substringAfterLast("^.-0 ]H}+Z&", " ");
      assertEquals("]H}+Z&", string2);
      
      int int0 = StringUtils.ordinalIndexOf(" ", " ", (-3812));
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isMixedCase("o;yd$G4u71+)<{}{");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("}xjk", "}xjk");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      StringUtils.substringAfterLast("DefaultLocale", "y{c`Jk#(4;DKY");
      StringUtils.isNumeric("y{c`Jk#(4;DKY");
      char[] charArray0 = new char[2];
      char char0 = 'm';
      charArray0[0] = 'm';
      char char1 = 'c';
      charArray0[1] = 'c';
      char char2 = 'M';
      int int0 = 10;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'M', 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Kq&v0";
      String string0 = StringUtils.reverse("Kq&v0");
      assertEquals("0v&qK", string0);
      
      int int0 = StringUtils.lastIndexOfAny("0v&qK", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ">vFo\"uTJX:RY/";
      int int0 = StringUtils.lastIndexOfAny(">vFo\"uTJX:RY/", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.prependIfMissingIgnoreCase("Kq0", "Kq0", charSequenceArray0);
      assertEquals("Kq0", string0);
      
      int int0 = StringUtils.lastIndexOfAny("Kq0", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("search and replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("G=lx\n", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertNotNull(string0);
      assertEquals("m", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "m";
      charSequenceArray0[5] = (CharSequence) "m";
      charSequenceArray0[6] = (CharSequence) "m";
      charSequenceArray0[7] = (CharSequence) "m";
      charSequenceArray0[8] = (CharSequence) "m";
      int int0 = StringUtils.lastIndexOfAny("m", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("!gQk=l@ &:KH>ml& !gQk=l@ &:KH>ml& ");
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(30, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.substring("S0/:%Q,O-}Q}6zn", 1038);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "S0/:%Q,O-}Q}6zn");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Strings must not be null", (String) null);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" $R ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "b9cjG", (CharSequence) "b9cjG");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.rotate("0XArb:9xSE:PEsXJs", 32);
      assertEquals("b:9xSE:PEsXJs0XAr", string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String string0 = StringUtils.substringBefore(":k9S.NrSMv51g`0Ns", ":k9S.NrSMv51g`0Ns");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.LF;
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.substring("5ziPkuG", 0);
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5ziPkuG";
      String string1 = StringUtils.substringBefore("5ziPkuG", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "5ziPkuG";
      charSequenceArray0[2] = (CharSequence) "5ziPkuG";
      charSequenceArray0[3] = (CharSequence) "5ziPkuG";
      charSequenceArray0[4] = (CharSequence) "5ziPkuG";
      String string2 = StringUtils.replaceIgnoreCase("temp.dir", "5ziPkuG", "5ziPkuG", (-402));
      assertEquals("temp.dir", string2);
      
      charSequenceArray0[5] = (CharSequence) "temp.dir";
      charSequenceArray0[6] = (CharSequence) "5ziPkuG";
      charSequenceArray0[7] = (CharSequence) "5ziPkuG";
      charSequenceArray0[8] = (CharSequence) "5ziPkuG";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[3] = "Comparator should not be null.";
      stringArray0[1] = "";
      stringArray0[2] = "\"1Iw;EM^ yRjl/B";
      stringArray0[3] = "";
      StringUtils.replaceEach("\"1Iw;EM^ yRjl/B", stringArray0, stringArray0);
      String string1 = StringUtils.replaceAll("\"1Iw;EM^ yRjl/B", "", "");
      assertEquals("\"1Iw;EM^ yRjl/B", string1);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "CJ}FWB;IjH+S";
      stringArray0[2] = "CJ}FWB;IjH+S";
      stringArray0[1] = "CJ}FWB;IjH+S";
      stringArray0[4] = "CJ}FWB;IjH+S";
      String string0 = StringUtils.replaceEach("CJ}FWB;IjH+S", stringArray0, stringArray0);
      assertEquals("CJ}FWB;IjH+S", string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = "9s>RMX1P2f\\IThe Array must not be null";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9s>RMX1P2fIThe Array must not be null");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.appendIfMissing("9s>RMX1P2fIThe Array must not be null", "9s>RMX1P2fIThe Array must not be null", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9s>RMX1P2fIThe Array must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "offset cannot be negative");
      StringUtils.replaceEach("offset cannot be negative", stringArray0, stringArray0);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "...";
      stringArray0[5] = null;
      stringArray0[6] = "$uLq";
      stringArray0[7] = null;
      stringArray0[8] = null;
      StringUtils.replaceEach("$uLq", stringArray0, stringArray0);
      String string1 = StringUtils.center(string0, (int) (byte) (-41), "$uLq");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "The Array must not be null";
      charSequenceArray0[1] = (CharSequence) "The Array must not be null";
      charSequenceArray0[2] = (CharSequence) "The Array must not be null";
      charSequenceArray0[3] = (CharSequence) "The Array must not be null";
      charSequenceArray0[4] = (CharSequence) "The Array must not be null";
      charSequenceArray0[5] = (CharSequence) "The Array must not be null";
      charSequenceArray0[6] = (CharSequence) "The Array must not be null";
      charSequenceArray0[7] = (CharSequence) "The Array must not be null";
      charSequenceArray0[8] = (CharSequence) "The Array must not be null";
      StringUtils.appendIfMissing("The Array must not be null", "The Array must not be null", charSequenceArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "Search and Replace array lengths don't match: ";
      stringArray0[2] = "The Array must not be null";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "The Array must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.stripStart(";", ";");
      String string1 = StringUtils.stripEnd(";", "");
      assertEquals(";", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'O';
      charArray0[2] = 'm';
      charArray0[4] = 'm';
      String string0 = StringUtils.rotate("9", 1024);
      assertNotNull(string0);
      assertEquals("9", string0);
      
      boolean boolean0 = StringUtils.isNumeric("9");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "9", (CharSequence) "9");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = StringUtils.replaceAll("", "", "");
      assertEquals("", string0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) arrayDeque0);
      HashSet<Object> hashSet0 = new HashSet<Object>(arrayDeque0);
      StringUtils.join((Iterable<?>) list0, "/NeMu4@l2eOpB3p2fD; vs  vs ");
      StringUtils.substringAfter("fyuV\":lJ", (String) null);
      String string1 = StringUtils.stripEnd("\n", "\r");
      assertEquals("\n", string1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "H?zX^fI'2@#zH";
      StringUtils.replaceEach("\n", stringArray0, stringArray0);
      String string2 = StringUtils.center("Ri0.Cso", (-1040), "o=");
      assertEquals("Ri0.Cso", string2);
      
      String string3 = StringUtils.appendIfMissing("Failed to create custom temp directory", "\n", stringArray0);
      assertEquals("Failed to create custom temp directory", string3);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9s>RMX1P2fIThe Array must not be null");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9s>RMX1P2fIThe Array must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      String string0 = StringUtils.stripEnd("z", "z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("i2", "i2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String string0 = StringUtils.rightPad("4l'o<>", 64, 't');
      assertEquals("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      String string1 = StringUtils.wrap("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      StringUtils.length("4l'o<>");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.replaceChars("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      assertTrue(string2.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      String string3 = StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "4l'o<>", charSequenceArray0);
      assertEquals("4l'o<>org.junitpioneer.vintage.TimeoutExtension", string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      StringUtils.replaceChars((String) null, "\"_#zYEQg]K+&/d+*Gl", ":a");
      String string5 = StringUtils.swapCase("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      assertEquals("4L'O<>TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "4l'o<>org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "4L'O<>TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT");
      assertEquals(59, int0);
      
      String string6 = StringUtils.stripEnd("\"_#zYEQg]K+&/d+*Gl", "The type must not be null");
      assertEquals("\"_#zYEQg]K+&/d+*G", string6);
      
      StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&");
      StringUtils.left("The type must not be null", (-1));
      boolean boolean1 = StringUtils.containsNone((CharSequence) "4l'o<>", "The type must not be null");
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("yi/&V(H$tkY.+O", "4l'o<>", true);
      assertEquals(69, int1);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric(";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.LF;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "\n");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '{';
      String string0 = StringUtils.join(charArray0, '{', 415, 415);
      assertNotNull(string0);
      
      StringUtils.countMatches((CharSequence) "", 'c');
      StringUtils.trimToEmpty("Y,xIE&H/UJ");
      int int0 = StringUtils.compare("(|", "Y,xIE&H/UJ");
      assertEquals((-49), int0);
      
      StringUtils.isNumeric((CharSequence) null);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      StringUtils.containsAny((CharSequence) "\r", (CharSequence) "");
      String string1 = StringUtils.wrap("Threshold must not be negative", "i/6T*f9g0");
      assertEquals("i/6T*f9g0Threshold must not be negativei/6T*f9g0", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Threshold must not be negative", "(|");
      StringUtils.equals((CharSequence) "", (CharSequence) "Threshold must not be negative");
      StringUtils.isAlphanumericSpace("i/6T*f9g0");
      String string2 = StringUtils.overlay("-", "Threshold must not be negative", 5, 5);
      assertEquals("-Threshold must not be negative", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "i/6T*f9g0", (-49));
      boolean boolean1 = StringUtils.equals((CharSequence) "Y,xIE&H/UJ", (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      
      StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.defaultIfEmpty("yJ0IKNu", "zQos\"TfhU;A");
      assertEquals("yJ0IKNu", string3);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("n");
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("n", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("z");
      assertNotNull(string0);
      assertEquals("z", string0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\n";
      String string0 = StringUtils.replaceOnce("\n", "\n", "\n");
      assertEquals("\n", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2306;
      shortArray0[1] = (short)0;
      StringUtils.join(shortArray0, '0', 3001, 117);
      long[] longArray0 = new long[22];
      longArray0[0] = (long) 2201;
      longArray0[1] = 0L;
      longArray0[2] = (long) (short)3124;
      longArray0[3] = (long) (short)0;
      String string1 = StringUtils.join(longArray0, '7');
      assertNotNull(string1);
      assertEquals("2201707312470707070707070707070707070707070707070", string1);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = StringUtils.join((Iterable<?>) linkedList0, "^3k'\"K;h[9m");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      StringUtils.reverse((String) null);
      StringUtils.length((CharSequence) null);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayDeque0);
      HashSet<Object> hashSet0 = new HashSet<Object>(list0);
      StringUtils.join((Iterable<?>) hashSet0, "");
      StringUtils.substringAfter((String) null, (String) null);
      StringUtils.stripEnd("6DLST xs:++T", "");
      StringUtils.isNumeric("6DLST xs:++T");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "=8G";
      stringArray0[3] = null;
      stringArray0[4] = "";
      StringUtils.replaceEach("=8G", stringArray0, stringArray0);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-692);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)390;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1880);
      shortArray0[6] = (short)105;
      shortArray0[7] = (short) (-2297);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '\"', (-1449), 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1449
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, (String) null, (String) null);
      assertNull(string0);
      
      StringUtils.reverse((String) null);
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      short[] shortArray0 = new short[12];
      String string0 = StringUtils.join(shortArray0, '6');
      assertEquals("06060606060606060606060", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, '\'');
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, '1');
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)723;
      shortArray0[1] = (short) (-938);
      shortArray0[2] = (short)1627;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, '1');
      assertNotNull(string0);
      assertEquals("7231-9381162710", string0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 84);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      StringUtils.repeat((String) null, 1494);
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'e';
      charArray0[2] = 'w';
      charArray0[3] = 'v';
      charArray0[4] = 'E';
      charArray0[5] = '^';
      charArray0[6] = 'U';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.CR;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "F", (CharSequence) "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      StringUtils.unwrap((String) null, 'e');
      StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.removePattern((String) null, (String) null);
      StringUtils.compareIgnoreCase("J", "");
      StringUtils.replacePattern((String) null, "!S;ZsJ[v", "");
      StringUtils.difference((String) null, "");
      StringUtils.toCodePoints("J");
      StringUtils.strip("?q?;FGr|2!I)DIV|tqq", "!S;ZsJ[v");
      StringUtils.containsNone((CharSequence) null, "?q?;FGr|2!I)DIV|tqq");
      StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      StringUtils.removePattern((String) null, "* 7Ps@v?@.4");
      StringUtils.stripAll((String[]) null);
      StringUtils.center("", 1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'e';
      StringUtils.join(floatArray0, 'e');
      StringUtils.join((Object[]) null, 'h');
      String string0 = StringUtils.remove("J", "-,slkhtC4D35<VZA#L");
      StringUtils.endsWithAny("J", (CharSequence[]) null);
      String string1 = StringUtils.center("ocl'^Z1", 4365, 'e');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(" ", " ", " ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      String string0 = StringUtils.remove("c97)R=aFDHoc97)R=aFDHo", "p{InCombiningDiacriticalMarks}+");
      assertEquals("c97)R=aFDHoc97)R=aFDHo", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("_", "<P T.[Don't clear/set the same property more than once.");
      assertEquals("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "_", (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnce("", "<P T.[Don't clear/set the same property more than once.", "");
      assertEquals("", string1);
      
      int int1 = StringUtils.compare("<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.", "ExceptionWasThrown", false);
      assertEquals(58, int1);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      String string2 = StringUtils.trimToNull("]XG4}C\"L30M]XG4}C\"L30M");
      assertEquals("]XG4}C\"L30M]XG4}C\"L30M", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "ExpectedException";
      charSequenceArray0[2] = (CharSequence) "ExceptionWasThrown";
      charSequenceArray0[3] = (CharSequence) "_";
      charSequenceArray0[4] = (CharSequence) "<P T.[Don't clear/set the same property more than once._<P T.[Don't clear/set the same property more than once.";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.EMPTY;
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "<P T.[Don't clear/set the same property more than once.", (CharSequence) "ExceptionWasThrown", (-766));
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9s>RMX1P2fIThe Array must not be null");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("9");
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "XpKq&uv0";
      String string0 = StringUtils.prependIfMissingIgnoreCase("s /sqdXYt'N;(Pw~)_", "XpKq&uv0", stringArray0);
      assertEquals("XpKq&uv0s /sqdXYt'N;(Pw~)_", string0);
      
      int int0 = StringUtils.lastIndexOfAny("XpKq&uv0s /sqdXYt'N;(Pw~)_", stringArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("XpKq&uv0s /sqdXYt'N;(Pw~)_", 0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", "offset cannot be negative");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      String string0 = StringUtils.reverse(",pKNS]voXv]}j");
      assertEquals("j}]vXov]SNKp,", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "#})lwEq,2T$qxhwD";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Br,");
      assertEquals("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", string0);
      
      StringUtils.join((Object[]) null, 'L', (-611), 1954);
      String string1 = StringUtils.removeAll("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "r>E%Apt*H&4>J");
      assertEquals("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", string1);
      
      StringUtils.getBytes("Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (Charset) null);
      String string2 = StringUtils.overlay("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 1954, (-611));
      String[] stringArray0 = StringUtils.splitByWholeSeparator("offset cannot be negative", "y[nl]e+u#~~#yX{(BW");
      assertEquals(1, stringArray0.length);
      
      StringUtils.indexOfAny((CharSequence) "Br,@DefaultLocale can only be used with language tag if language, country, and variant are not setBr,", (char[]) null);
      String[] stringArray1 = StringUtils.split("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", 'L');
      assertNotNull(stringArray1);
      
      StringUtils.isNumeric("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      String string3 = StringUtils.joinWith("7dx", stringArray1);
      assertEquals("oWJ7)oSy?z97dx`@U6wj\":^W$qB)Tl<]]", string3);
      assertEquals(2, stringArray1.length);
      
      byte[] byteArray0 = StringUtils.getBytes("offset cannot be negative", (Charset) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 244.3722;
      doubleArray0[1] = (double) 1954;
      doubleArray0[2] = (double) (-611);
      doubleArray0[3] = (double) 1954;
      String string4 = StringUtils.join(doubleArray0, '!');
      assertEquals("244.3722!1954.0!-611.0!1954.0", string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
      
      String string5 = StringUtils.remove("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "Z[OrgW3>3 L+'q");
      assertTrue(string5.equals((Object)string2));
      
      StringUtils.substringAfterLast("oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6wj\":^W$qB)Tl<]]");
      String string6 = StringUtils.join(byteArray0, 'u', 1954, (-611));
      assertNotNull(string6);
      assertEquals(25, byteArray0.length);
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      StringUtils.reverseDelimited("", 'O');
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "XpKq&uv0";
      StringUtils.getCommonPrefix(stringArray0);
      String string0 = null;
      StringUtils.substringBetween("", "XpKq&uv0", (String) null);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "XpKq&uv0", (CharSequence) null);
      StringUtils.ordinalIndexOf((CharSequence) null, "XpKq&uv0", (-1));
      String string1 = null;
      StringUtils.abbreviate((String) null, (-1));
      StringUtils.chomp("");
      StringUtils.stripAll(stringArray0, (String) null);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, ']', (-1), 2861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      StringUtils.join(floatArray0, '>', 777, (-930));
      StringUtils.indexOfAny((CharSequence) "Loca=zHust not benull", "Q3!Y^_%Y=qUk4^7A");
      StringUtils.rightPad((String) null, 777, 'q');
      StringUtils.substring(",A+eNc{#e~#`oN", 102);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      vector0.trimToSize();
      vector0.add((Object) locale_FilteringMode0);
      String string0 = StringUtils.join((List<?>) vector0, "EPo,t&*P;R", (-1042), (-2524));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.center("L", 48, "L");
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      String string0 = StringUtils.right("g0$9*8xBeX~xKR", (-375));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      StringUtils.compareIgnoreCase((String) null, "cD;g", false);
      String string0 = StringUtils.strip("cD;g");
      assertEquals("cD;g", string0);
      
      StringUtils.center("\n", 1, "p/U,b7}~V87W@5n");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "cD;g");
      boolean boolean0 = StringUtils.isAlphanumeric("cD;g");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("", 76);
      assertEquals("                                                                            ", string1);
      
      StringUtils.replaceChars((String) null, 'd', 'D');
      boolean boolean1 = StringUtils.isBlank("cD;g");
      assertTrue(boolean1 == boolean0);
      
      StringUtils.defaultIfBlank("W6;Br.Z]h", "\n");
      StringUtils.rightPad((String) null, (-2239), "\r");
      StringUtils.removeStart("", "");
      StringUtils.isAlpha((CharSequence) null);
      String string2 = StringUtils.rightPad("\n", 0, 'q');
      assertNotNull(string2);
      
      StringUtils.substring((String) null, 3);
      Vector<Object> vector0 = new Vector<Object>();
      String string3 = StringUtils.join((List<?>) vector0, "", 8, 1);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(";^ihPH|$", '+');
      assertNotNull(string0);
      assertEquals(";^ihPH|$", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringUtils.getCommonPrefix(stringArray0);
      String string0 = StringUtils.removeIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("9'wv``)*\"Ql0QC", "tYj");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray1[1] = "U";
      stringArray1[2] = "9'wv``)*\"Ql0QC";
      stringArray1[3] = ".H9%";
      stringArray1[4] = null;
      stringArray1[5] = "Threshold must not be negative";
      stringArray1[6] = "Threshold must not be negative";
      stringArray1[7] = null;
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      String string2 = StringUtils.leftPad("9'wv``)*\"Ql0QC", 3, '{');
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray2);
      assertEquals(9, stringArray2.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0);
      String string0 = "";
      StringUtils.right("", (-935));
      String string1 = "Q";
      StringUtils.splitByWholeSeparatorPreserveAllTokens("Q", "", 1959);
      StringUtils.center("", (-3925), "");
      StringUtils.isAlphaSpace("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.clone();
      // Undeclared exception!
      try { 
        linkedList0.forEach((Consumer<? super Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.RegExUtils", 13);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("ExpectedExceptionm", "ExpectedExceptionm", "ExpectedExceptionm");
      assertEquals("ExpectedExceptionm", string0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String string0 = StringUtils.reverse("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotNull(string0);
      assertEquals("noisnetxEelacoLtluafeD.retipuj.reenoiptinuj.gro", string0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      StringUtils.join(objectArray0, '#', (-3190), (-3190));
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 108, '#');
      String string1 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.ArrayUtils#########################################################################", "io", "Ul]0PeY|Bt,*B", 108);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.reverse("org.apache.commons.lang3.ArrayUtils");
      assertEquals("slitUyarrA.3gnal.snommoc.ehcapa.gro", string2);
      
      String string3 = StringUtils.right("slitUyarrA.3gnal.snommoc.ehcapa.gro", 0);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[2] = (CharSequence) "io";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.ArrayUtils#########################################################################";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "io";
      charSequenceArray0[6] = (CharSequence) "slitUyarrA.3gnal.snommoc.ehcapa.gro";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "B/M|Id${OtG+Q_^";
      stringArray0[2] = "io";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String string0 = StringUtils.center(" L", 5);
      String string1 = StringUtils.removeEndIgnoreCase("y:w", " L");
      assertEquals("y:w", string1);
      
      String string2 = StringUtils.toRootUpperCase("  L  ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" L");
      String[] stringArray0 = StringUtils.split(" L");
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsAny("  L  ", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", "Locale must not be null");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("M.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = 'P';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'x';
      String string0 = StringUtils.join(charArray0, 'm');
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("8mPmTmTmx", '4', 'T');
      assertEquals("8mPmTmTmx", string1);
      assertNotNull(string1);
      
      StringUtils.join((float[]) null, 'T', 46, 883);
      String[] stringArray0 = StringUtils.split("8mPmTmTmx", "8mPmTmTmx", 46);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("8mPmTmTmx", (CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      StringUtils.rightPad("4l'o<>", 64, 't');
      StringUtils.isNotBlank("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt");
      StringUtils.wrap("4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", '&');
      int int0 = StringUtils.length("4l'o<>");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.replaceChars("&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", (String) null, "\"_#zYEQg]K+&/d+*Gl");
      charSequenceArray0[0] = (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "4l'o<>", charSequenceArray0);
      StringUtils.strip((String) null);
      StringUtils.replaceChars((String) null, "\"_#zYEQg]K+&/d+*Gl", ":a");
      StringUtils.toCodePoints((CharSequence) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&";
      StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      StringUtils.wrap("Tyfm^y:^D.\"*!", '@');
      StringUtils.uncapitalize(":a");
      int int1 = StringUtils.lastIndexOf((CharSequence) "4l'o<>org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "&4l'o<>tttttttttttttttttttttttttttttttttttttttttttttttttttttttttt&", 620);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      StringUtils.joinWith("3b", objectArray0);
      boolean boolean0 = StringUtils.equalsIgnoreCase("3b", "\n");
      String string0 = StringUtils.trim("\n");
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\n");
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.defaultIfBlank("", "\n");
      assertEquals("\n", string1);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.appendIfMissing("\r", "\r", stringArray0);
      StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      StringUtils.stripAll(stringArray1);
      StringUtils.substringBetween("\"~5,_hORO._", "\"~5,_hORO._");
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) null);
      assertEquals((-1), int1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      StringUtils.join((Iterable<?>) arrayList0, '2');
      StringUtils.indexOf((CharSequence) "\r", (-1), (-1));
      StringUtils.trimToNull("\r");
      String string0 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertNotNull(string0);
      assertEquals("inimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.rightPad(". The following paths could not be deleted (see suppressed exceptions for details): ", (-1));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string1);
      
      int int2 = StringUtils.compare("Strings must not be null", "`CRKFeo:o!", false);
      assertEquals((-13), int2);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "#9.jXP_nVx");
      assertEquals("#9.jXP_nVx", string2);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.center(" is not in the range '0' - '9'", (-1334));
      int[] intArray0 = StringUtils.toCodePoints(" is not in the range '0' - '9'");
      assertEquals(30, intArray0.length);
      
      String string1 = StringUtils.chomp(" is not in the range '0' - '9'");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("-U$mIw'rFB%2f");
      StringUtils.indexOfIgnoreCase((CharSequence) "-U$mIw'rFB%2f", (CharSequence) "-U$mIw'rFB%2f");
      StringUtils.startsWith("-U$mIw'rFB%2f", "-U$mIw'rFB%2f");
      StringUtils.defaultIfBlank((CharSequence) "-U$mIw'rFB%2f", (CharSequence) "-U$mIw'rFB%2f");
      StringUtils.getLevenshteinDistance((CharSequence) "-U$mIw'rFB%2f", (CharSequence) "-U$mIw'rFB%2f");
      StringUtils.isEmpty("-U$mIw'rFB%2f");
      StringUtils.upperCase((String) null);
      StringUtils.replaceChars("-U$mIw'rFB%2f", "EM.=Cph<Jr{~E/L=", (String) null);
      StringUtils.capitalize((String) null);
      StringUtils.equalsIgnoreCase((CharSequence) null, "-U$mIw'FB%2f");
      StringUtils.replaceEachRepeatedly("-U$mIw'FB%2f", (String[]) null, (String[]) null);
      String string1 = StringUtils.unwrap("EM.=Cph<Jr{~E/L=", "Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("FHF%ebE&;}ZV&Y5M", "");
      assertEquals("FHF%ebE&;}ZV&Y5M", string1);
      
      String string2 = StringUtils.stripAccents("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-6H`94CD*T:f[;N", 'D');
      StringUtils.substringAfter((String) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      String string3 = StringUtils.trimToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string3);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String string0 = StringUtils.substring("5ziPkuG", 0);
      assertEquals("5ziPkuG", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5ziPkuG";
      charSequenceArray0[1] = (CharSequence) "5ziPkuG";
      charSequenceArray0[2] = (CharSequence) "5ziPkuG";
      charSequenceArray0[3] = (CharSequence) "5ziPkuG";
      charSequenceArray0[4] = (CharSequence) "5ziPkuG";
      String string1 = StringUtils.replaceIgnoreCase("temp.dir", "5ziPkuG", "5ziPkuG", 0);
      assertEquals("temp.dir", string1);
      
      charSequenceArray0[5] = (CharSequence) "temp.dir";
      charSequenceArray0[6] = (CharSequence) "5ziPkuG";
      charSequenceArray0[7] = (CharSequence) "5ziPkuG";
      charSequenceArray0[8] = (CharSequence) "5ziPkuG";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      StringUtils.chomp(" vs ");
      Locale locale0 = Locale.FRENCH;
      StringUtils.lowerCase((String) null, locale0);
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      StringUtils.stripAccents("\r");
      String[] stringArray0 = StringUtils.split("\r", "Z[OrgW3>3 L+'q", 93);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("", " vs ", "\r");
      String string1 = StringUtils.replaceIgnoreCase("7d}W", "BXna!J;%}+", "BXna!J;%}+");
      assertEquals("7d}W", string1);
      
      String string2 = StringUtils.getDigits("lM)>wGIMCV");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 14, 86);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`tysi)`Y}<", "`tysi)`Y}<");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      int int0 = StringUtils.indexOf((CharSequence) ";", (CharSequence) ";");
      int int1 = StringUtils.lastIndexOf((CharSequence) ";", (CharSequence) ";");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.replaceOnce(".E5N#qVjHSfVV~&r", ".E5N#qVjHSfVV~&r", ".E5N#qVjHSfVV~&r");
      assertEquals(".E5N#qVjHSfVV~&r", string0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.leftPad("`tCUZ=W", 94, "`tCUZ=W");
      assertEquals("`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tCUZ=W`tC`tCUZ=W", string0);
      
      String string1 = StringUtils.center("`tCUZ=W", 94);
      assertEquals("                                           `tCUZ=W                                            ", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("`tCUZ=W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\r", "\r");
      String string1 = StringUtils.substring("IQI%L;|G9k", 37);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 37;
      intArray0[1] = 37;
      intArray0[2] = 37;
      String string2 = StringUtils.join(intArray0, '$');
      assertNotNull(string2);
      assertEquals("37$37$37", string2);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.chomp("'-OfusVV=[SECdz", "'-OfusVV=[SECdz");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.upperCase("org.junitpioneer.jupiter.RepeatFailedTestExtension");
      assertNotNull(string0);
      assertEquals("ORG.JUNITPIONEER.JUPITER.REPEATFAILEDTESTEXTENSION", string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '\u0012');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.upperCase("{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("{}", (-380), '');
      String[] stringArray0 = StringUtils.splitByCharacterType("{}");
      boolean boolean0 = StringUtils.isAsciiPrintable("{}");
      String string2 = StringUtils.joinWith("{}", stringArray0);
      assertEquals("{{}}", string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("{}", "{}");
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("{}", 0, (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.replace("#\n#\n", "#\n#\n", "#\n#\n");
      assertEquals("#\n#\n", string0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("~Jxl>xMMCa&z1bN", "~Jxl>xMMCa&z1bN");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-176), 800);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0);
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      String string0 = StringUtils.join(stringArray0);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp("maxWith cannot be negative", (String) null);
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) null);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      String string0 = StringUtils.chomp("#\n");
      assertEquals("#", string0);
      
      Locale locale0 = Locale.ITALIAN;
      String string1 = StringUtils.lowerCase("set", locale0);
      assertNotNull(string1);
      assertEquals("set", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "set", (CharSequence) "set", 1253);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ExceptionWasThrown", "ExceptionWasThrown", (-876), (-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      String string0 = StringUtils.stripStart("c97)R=doaFDHo", "\"");
      assertEquals("c97)R=doaFDHo", string0);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "_5yuu^jqU");
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'v';
      charArray0[2] = '=';
      charArray0[3] = 'M';
      charArray0[4] = 'O';
      charArray0[5] = 'd';
      charArray0[6] = '-';
      charArray0[7] = 'g';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_5yuu^jqU";
      stringArray0[3] = "";
      stringArray0[4] = "_5yuu^jqU";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "m[&");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("m");
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      StringUtils.indexOf((CharSequence) "m", 108);
      String string1 = StringUtils.strip("m", "m");
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("m");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'g');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      String string1 = StringUtils.abbreviate("", 0, 0);
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.center("", 0, '!');
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.join(stringArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("", "");
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.upperCase("-6H`94CD*T:f[;N");
      assertEquals("-6H`94CD*T:F[;N", string5);
      
      String string6 = StringUtils.substringBeforeLast("", "");
      assertTrue(string6.equals((Object)string1));
      
      String string7 = StringUtils.replace("", "Failed to create default temp directory", "-~S4ee]}sP(D~KPwb");
      assertTrue(string7.equals((Object)string4));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string8 = StringUtils.lowerCase("", locale0);
      assertTrue(string8.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("BPQhRJ+E3S%w", "");
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\n";
      objectArray0[1] = (Object) "\n";
      String string0 = StringUtils.joinWith("\n", objectArray0);
      assertEquals("\n\n\n", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\n\n\n", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, "cD;g", false);
      assertEquals(1, int0);
      
      String string0 = StringUtils.center("Z[OrgW3>3 L+'q", 109, '@');
      assertNotNull(string0);
      assertEquals("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Z[OrgW3>3 L+'q@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      StringUtils.isAsciiPrintable("A");
      String string1 = StringUtils.joinWith("R", stringArray0);
      assertEquals("ARbortingR RtoR RprotectR RagainstR RSRtackRORverflowRERrrorR R-R RoutputR RofR RoneR RloopR RisR RtheR RinputR RofR Ranother", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("R");
      assertEquals(1, stringArray1.length);
      
      StringUtils.equalsIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ARbortingR RtoR RprotectR RagainstR RSRtackRORverflowRERrrorR R-R RoutputR RofR RoneR RloopR RisR RtheR RinputR RofR Ranother");
      StringUtils.center((String) null, 0, "The String must not be empty");
      boolean boolean0 = StringUtils.isAlphanumericSpace("Z[OrgW3>3 L+'q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      StringUtils.toRootLowerCase("m");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "m";
      charSequenceArray0[2] = (CharSequence) "m";
      StringUtils.isBlank("m");
      StringUtils.defaultIfBlank("wj\":^W$qB)Tl<]]", "G=lx");
      StringUtils.rightPad("\r", (-1289), "/aU");
      StringUtils.removeStart("wj\":^W$qB)Tl<]]", "oWJ7)oSy?z9L`@U6");
      StringUtils.isAlpha(charSequenceArray0[1]);
      StringUtils.rightPad("y_Zp>}>sCah", 17, 'q');
      StringUtils.substring((String) null, 29);
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "EPo,t&*P;R", Integer.MAX_VALUE, (-138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-138)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commonQ.lang3.Stringtils", 101, 101);
      assertEquals("org.apache.commonQ.lang3.Stringtils", string0);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(", ");
      assertEquals(", ", string0);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      String string0 = StringUtils.defaultString("@<BSGpht8/[B4XT}");
      assertEquals("@<BSGpht8/[B4XT}", string0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string0);
      assertEquals("AD", string0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      String string0 = StringUtils.join((List<?>) stack0, "org.junitpioneer.jupiter.SystemPropertyExtension", 4, 4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      String string0 = StringUtils.chomp(" vs ");
      assertEquals(" vs ", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " vs ", "/#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("(1RWI$][R'a\"7", 7);
      assertEquals("(1RWI$", string1);
      
      String string2 = StringUtils.stripAccents("/#");
      assertEquals("/#", string2);
      
      StringUtils.substringsBetween("7;e*UnwtE&>Z", "yQ(`S%", " vs ");
      String string3 = StringUtils.stripStart(" vs ", "");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      String string0 = StringUtils.stripStart("7yBb&jWn", "7yBb&jWn");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      String string0 = "Z[OrgW3>3 L+'q";
      StringUtils.stripStart("yDr,\"*gYsa6}l{t#c", "Z[OrgW3>3 L+'q");
      String[] stringArray0 = new String[0];
      StringUtils.firstNonEmpty(stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Z[OrgW3>3 L+'q");
      linkedList0.add((Object) null);
      linkedList0.pollFirst();
      Object object0 = new Object();
      linkedList0.offerLast(object0);
      linkedList0.add((Object) "yDr,\"*gYsa6}l{t#c");
      StringUtils.join((List<?>) linkedList0, "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", 2590, 2590);
      String string1 = "mR";
      StringUtils.joinWith("mR", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "Z[OrgW3>3 L+'q", 2590, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }
}
