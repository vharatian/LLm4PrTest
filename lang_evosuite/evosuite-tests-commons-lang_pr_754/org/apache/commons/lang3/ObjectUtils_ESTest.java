/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:39:51 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.lang.reflect.Array;
import java.text.Collator;
import java.time.temporal.ChronoUnit;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[2];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = ObjectUtils.median(locale_FilteringModeArray0);
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2034.5407, (double)524, 335.7901431, (double)524, (double)524).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<HashMap<Object, Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super HashMap<Object, Integer>>) toDoubleFunction0);
      HashMap<Object, Integer>[] hashMapArray0 = (HashMap<Object, Integer>[]) Array.newInstance(HashMap.class, 8);
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      hashMapArray0[0] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[1] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[2] = hashMapArray0[0];
      hashMapArray0[3] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[4] = hashMapArray0[1];
      hashMapArray0[5] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[6] = (HashMap<Object, Integer>) linkedHashMap0;
      hashMapArray0[7] = (HashMap<Object, Integer>) linkedHashMap0;
      HashMap<Object, Integer> hashMap0 = ObjectUtils.median(comparator0, hashMapArray0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = ObjectUtils.defaultIfNull((Integer) null, integer0);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(10);
      Integer integer1 = ObjectUtils.defaultIfNull(integer0, (Integer) null);
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = Integer.getInteger("B}7m1nD}+X", 7);
      Comparable<Integer> comparable0 = ObjectUtils.cloneIfPossible((Comparable<Integer>) integer0);
      assertEquals(7, comparable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(1427);
      Integer integer0 = new Integer(1427);
      ObjectUtils.identityToString(stringBuffer0, (Object) integer0);
      assertEquals(19, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("iv$D");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ObjectUtils.identityToString((Appendable) mockPrintStream0, (Object) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashMap0;
      objectArray0[1] = (Object) biFunction0;
      objectArray0[3] = (Object) hashMap0;
      objectArray0[4] = (Object) hashMap0;
      HashMap hashMap1 = (HashMap)ObjectUtils.mode(objectArray0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Supplier<Object>[] supplierArray0 = (Supplier<Object>[]) Array.newInstance(Supplier.class, 10);
      int int0 = ObjectUtils.hashCodeMulti(supplierArray0);
      assertEquals((-1796951359), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer((-128));
      Integer integer1 = new Integer(0);
      int int0 = ObjectUtils.compare(integer1, integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer integer0 = new Integer(3028);
      Integer integer1 = new Integer(0);
      int int0 = ObjectUtils.compare(integer1, integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-585));
      assertEquals((short) (-585), short0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = ObjectUtils.CONST(123L);
      assertEquals(123L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-2264L));
      assertEquals((-2264L), long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = ObjectUtils.CONST(2147483645);
      assertEquals(2147483645, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-665));
      assertEquals((-665), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (byte) (-8));
      assertEquals((-8.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = ObjectUtils.CONST(1.5);
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-1415.5));
      assertEquals((-1415.5), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char char0 = ObjectUtils.CONST('4');
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      char char0 = ObjectUtils.CONST('E');
      assertEquals('E', char0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)31);
      assertEquals((byte)31, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-6));
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) hashMap0;
      Integer integer0 = new Integer(393);
      hashMap0.put(integer0, objectArray0[0]);
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectUtils0;
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.ObjectUtils cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer((-78));
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(16);
      hashMap0.put(hashMap0, integer0);
      // Undeclared exception!
      try { 
        ObjectUtils.cloneIfPossible((Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception cloning Cloneable type java.util.HashMap
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("FnU)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      ObjectUtils.hashCode((Object) objectUtils0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Integer>[] hashMapArray0 = (HashMap<Integer, Integer>[]) Array.newInstance(HashMap.class, 2);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMapArray0[0] = hashMap0;
      HashMap<Integer, Integer> hashMap1 = ObjectUtils.firstNonNull(hashMapArray0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.firstNonNull((HashMap<Integer, Integer>[]) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<ChronoUnit, ChronoUnit> hashMap0 = new HashMap<ChronoUnit, ChronoUnit>();
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableInt mutableInt0 = new MutableInt((-1053));
      Integer integer0 = mutableInt0.getValue();
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      boolean boolean0 = ObjectUtils.equals((Object) arrayDeque0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = new Integer(0);
      int int0 = ObjectUtils.compare(integer1, integer0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer((-1140));
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(2612);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = ObjectUtils.compare((Integer) null, (Integer) null, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-2839));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.clone((HashMap<Integer, Integer>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer((-2839));
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ObjectUtils.toString((Object) integer0, supplier0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(2599);
      String string0 = ObjectUtils.toString((Object) integer0, "VnUS");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) biFunction0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) linkedHashMap0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectUtils.mode((ChronoUnit[]) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      Integer integer0 = new Integer(320);
      linkedHashMap0.put(integer0, integer0);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(127);
      boolean boolean0 = ObjectUtils.isEmpty(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add(arrayDeque0);
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty("FnU)");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = ObjectUtils.identityToString(objectArray0[3]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      String string0 = ObjectUtils.identityToString((Object) objectUtils0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Object object0 = ObjectUtils.getIfNull((Object) null, supplier0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      Comparable<Object>[] comparableArray1 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      comparableArray1[1] = comparable0;
      comparableArray0[0] = comparableArray1[1];
      Supplier<Comparable<Object>> supplier0 = (Supplier<Comparable<Object>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = ObjectUtils.getIfNull(comparableArray0[0], supplier0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = ObjectUtils.getIfNull((HashMap<Object, Object>) null, (Supplier<HashMap<Object, Object>>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Supplier<Integer>[] supplierArray0 = (Supplier<Integer>[]) Array.newInstance(Supplier.class, 7);
      Supplier<Integer> supplier0 = (Supplier<Integer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      Integer integer0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.getFirstNonNull((Supplier<Comparable<Object>>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, Integer>[] hashMapArray0 = (HashMap<Integer, Integer>[]) Array.newInstance(HashMap.class, 4);
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.firstNonNull(hashMapArray0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object1, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = ObjectUtils.equals((Object) arrayDeque0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.notEqual(object0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedHashMap<Object, Integer> linkedHashMap0 = new LinkedHashMap<Object, Integer>();
      Object object0 = ObjectUtils.defaultIfNull((Object) linkedHashMap0, (Object) linkedHashMap0);
      Integer integer0 = new Integer(3037);
      linkedHashMap0.put(object0, integer0);
      // Undeclared exception!
      try { 
        ObjectUtils.clone((HashMap<Object, Integer>) linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Exception cloning Cloneable type java.util.LinkedHashMap
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Comparable<Comparable> comparable0 = ObjectUtils.defaultIfNull((Comparable<Comparable>) null, (Comparable<Comparable>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [2147483645]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-1796951359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-1796951359]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(2085);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [2085]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-132));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-132]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ChronoUnit[] chronoUnitArray0 = new ChronoUnit[2];
      ChronoUnit chronoUnit0 = ChronoUnit.FOREVER;
      chronoUnitArray0[0] = chronoUnit0;
      ChronoUnit chronoUnit1 = ChronoUnit.MICROS;
      chronoUnitArray0[1] = chronoUnit1;
      ChronoUnit chronoUnit2 = ObjectUtils.max(chronoUnitArray0);
      assertEquals(ChronoUnit.FOREVER, chronoUnit2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      comparableArray0[0] = comparable0;
      Comparable<Object> comparable1 = ObjectUtils.min(comparableArray0);
      assertSame(comparable1, comparable0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap hashMap1 = (HashMap)ObjectUtils.cloneIfPossible((Object) hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedHashMap<Integer, Integer> linkedHashMap0 = new LinkedHashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = ObjectUtils.clone((HashMap<Integer, Integer>) linkedHashMap0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = ObjectUtils.cloneIfPossible((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      boolean boolean0 = ObjectUtils.anyNull(comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 3);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      comparableArray0[0] = comparable0;
      comparableArray0[1] = comparable0;
      comparableArray0[2] = comparable0;
      boolean boolean0 = ObjectUtils.allNotNull(comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      boolean boolean0 = ObjectUtils.allNotNull(comparableArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) hashMap0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) 127);
      assertEquals(127.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectUtils0;
      int int0 = ObjectUtils.hashCodeMulti(objectArray0);
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer(55);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString(stringBuffer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)1373);
      assertEquals((short)1373, short0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char char0 = ObjectUtils.CONST('{');
      assertEquals('{', char0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) pipedWriter0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("}\"n%.q:");
      MutableInt mutableInt0 = new MutableInt(0);
      Integer integer0 = mutableInt0.getValue();
      ObjectUtils.identityToString(stringBuilder0, (Object) integer0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = ObjectUtils.compare((Comparable<Object>) null, (Comparable<Object>) null);
      assertEquals(0, int0);
  }
}
