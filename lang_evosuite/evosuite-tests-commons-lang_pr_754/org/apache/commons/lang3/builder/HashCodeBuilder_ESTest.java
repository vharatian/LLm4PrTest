/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:48:05 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(917, 917);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0.0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(917);
      short[] shortArray0 = new short[1];
      hashCodeBuilder2.append(shortArray0);
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals((-1574452630), (int)hashCodeBuilder1.build());
      assertEquals((-1574452630), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      String[] stringArray0 = new String[6];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, stringArray0);
      //  // Unstable assertion: assertEquals(634, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "OeNaPQ-Mkk;-NEXP;", stringArray0);
      assertEquals((-400920157), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      assertEquals(17, (int)hashCodeBuilder0.build());
      
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "The style must not be null", false);
      assertEquals((-1083472544), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1611));
      Class<Integer> class0 = Integer.class;
      int int0 = HashCodeBuilder.reflectionHashCode(637, (-3303), integer0, false, (Class<? super Integer>) class0, (String[]) null);
      assertEquals((-2104007), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      int int0 = HashCodeBuilder.reflectionHashCode(301, 17, (Object) integer0, true);
      assertEquals(5121, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-1929), (-1929), object0, false);
      assertEquals((-1929), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode(37, 37, object0);
      assertEquals(37, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((char[]) null);
      hashCodeBuilder1.append(true);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      hashCodeBuilder2.append(booleanArray0);
      assertEquals(0, (int)hashCodeBuilder1.build());
      assertEquals(0, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[16];
      hashCodeBuilder0.append(booleanArray0);
      assertEquals((-722892607), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte) (-18));
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) (short) (-18);
      objectArray0[2] = (Object) (short) (-18);
      hashCodeBuilder0.append(objectArray0);
      //  // Unstable assertion: assertEquals((-582139972), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3024L);
      int[] intArray0 = new int[7];
      intArray0[2] = (-4808);
      hashCodeBuilder1.append(intArray0);
      hashCodeBuilder1.append((long[]) null);
      assertEquals((-1195871171), (int)hashCodeBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1268.16F));
      int[] intArray0 = new int[5];
      hashCodeBuilder2.append(intArray0);
      assertEquals((-841156550), hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1.0F;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      hashCodeBuilder1.append(floatArray0);
      assertEquals((-723113983), (int)hashCodeBuilder0.build());
      assertEquals((-723113983), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append((char[]) null);
      double[] doubleArray0 = new double[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      hashCodeBuilder2.append(doubleArray0);
      assertEquals(0, (int)hashCodeBuilder0.build());
      assertEquals(0, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)6068;
      doubleArray0[2] = (double) (short)6068;
      hashCodeBuilder0.append(doubleArray0);
      assertEquals((-1735553023), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(917, 917);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0.0);
      hashCodeBuilder1.appendSuper(917);
      byte[] byteArray0 = new byte[5];
      hashCodeBuilder0.append(byteArray0);
      assertEquals((-1086485174), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1268.16F));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte) (-34));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(0.0);
      hashCodeBuilder3.append(false);
      assertEquals((-1154533133), (int)hashCodeBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short) (-1678));
      assertEquals((-1049), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 5369.6202;
      doubleArray0[5] = (-1.0);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0);
      hashCodeBuilder1.append((-159L));
      assertEquals((-1584029760), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(301, 1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1202));
      hashCodeBuilder1.append(1);
      assertEquals((-900), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-1767.0125F));
      hashCodeBuilder1.append('Y');
      hashCodeBuilder0.append('l');
      assertEquals((-1053216148), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.append((byte) (-112));
      assertEquals((-111), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((int) 8, (-2789), (Object) null, false, (Class<? super Object>) class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(44, 988, linkedHashSet0, true, (Class<? super LinkedHashSet<Integer>>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(924, 924, object0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-2612), (-2612), (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(2, 2, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectArray0;
      // Undeclared exception!
      try { 
        hashCodeBuilder0.append(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(1817, 1465);
      char[] charArray0 = new char[9];
      hashCodeBuilder0.append(charArray0);
      assertEquals((-237912367), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      hashCodeBuilder1.append((short)6);
      Integer integer0 = new Integer((short)6);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((Object) integer0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)6068;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(doubleArray0);
      Object object0 = new Object();
      hashCodeBuilder3.append(object0);
      assertEquals((-1594748167), hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(12);
      assertEquals(641, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = hashCodeBuilder0.toHashCode();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(3084.7243963872);
      assertEquals((-1531098050), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[1];
      hashCodeBuilder0.append(longArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((char[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(39, 96);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(34, 96);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1613));
      Class<Integer> class0 = Integer.class;
      int int0 = HashCodeBuilder.reflectionHashCode(17, 17, integer0, false, (Class<? super Integer>) class0, (String[]) null);
      //  // Unstable assertion: assertEquals(294, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, (Collection<String>) linkedHashSet0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = Integer.getInteger("org.junitpioneer.jupiter.params.DoubleRange", 459);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      int int0 = HashCodeBuilder.reflectionHashCode(459, 459, integer0, true, (Class<? super Integer>) class0, stringArray0);
      assertEquals(210685, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-2260), (-314), (Object) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, false);
      assertEquals(23426, int0);
      assertEquals(17, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[9];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0);
      hashCodeBuilder1.append((-1955.044F));
      assertEquals(1184344625, hashCodeBuilder0.toHashCode());
      assertEquals(1184344625, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = new Object();
      int int0 = HashCodeBuilder.reflectionHashCode((-1613), 1, object0);
      assertEquals((-1613), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      hashCodeBuilder0.hashCode();
      assertEquals((-1), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode((Object) " o1uq5'Xa?aBGQ9uK", (Collection<String>) linkedHashSet0);
      //  // Unstable assertion: assertEquals((-1275660274), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }
}
