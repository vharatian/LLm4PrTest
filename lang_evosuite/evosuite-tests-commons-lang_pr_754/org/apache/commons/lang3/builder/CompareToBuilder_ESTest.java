/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:42:14 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class CompareToBuilder_ESTest extends CompareToBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[5];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-2323));
      boolean[] booleanArray0 = new boolean[3];
      compareToBuilder1.append(booleanArray0, booleanArray0);
      assertEquals((-2323), compareToBuilder0.toComparison());
      assertEquals((-2323), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)71;
      float[] floatArray1 = new float[8];
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-583), (-438));
      float[] floatArray0 = new float[2];
      compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1490.601396;
      double[] doubleArray1 = new double[2];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, object0);
      double[] doubleArray0 = new double[4];
      compareToBuilder1.append(doubleArray0, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      compareToBuilder0.append((Object) null, object0);
      byte[] byteArray0 = new byte[2];
      compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[8];
      int int0 = CompareToBuilder.reflectionCompare((Object) "4Yp%#99+qgv:1tb;~eL", (Object) "Rj!*i$.&yUYi7?UIpCS", true, (Class<?>) class0, stringArray0);
      assertEquals((-30), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[8];
      compareToBuilder0.append(shortArray0, shortArray1);
      char[] charArray0 = new char[4];
      compareToBuilder0.append(charArray0, charArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2471);
      short[] shortArray1 = new short[4];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals((-2471), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[4];
      compareToBuilder0.append(doubleArray0, (double[]) null);
      compareToBuilder0.append((short[]) null, (short[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (byte) (-84);
      int[] intArray1 = new int[8];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-1549L));
      int[] intArray0 = new int[5];
      compareToBuilder1.append(intArray0, intArray0);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 3668;
      long[] longArray1 = new long[7];
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-2323));
      compareToBuilder0.append((long[]) null, (long[]) null);
      assertEquals((-2323), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[7];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append(objectArray0, objectArray1, comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-2323));
      compareToBuilder0.append(false, true);
      assertEquals((-2323), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(3081L, 48L);
      compareToBuilder1.append((double) (short)1958, (double) 48L);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)93;
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      compareToBuilder1.append((short)3, (short) (byte)93);
      assertEquals((-93), compareToBuilder0.toComparison());
      assertEquals((-93), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-2323));
      compareToBuilder0.append((-2323), (-1));
      assertEquals((-2323), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(0.0, (-2703.5549));
      compareToBuilder0.append((long) (short)0, (long) (short)0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-2323));
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder1.append(object0, object0, comparator0);
      assertEquals((-2323), (int)compareToBuilder0.build());
      assertEquals((-2323), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('v', 'C');
      int int0 = compareToBuilder1.toComparison();
      assertEquals(51, (int)compareToBuilder0.build());
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1L), 0L);
      int int0 = compareToBuilder1.toComparison();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[3];
      int int0 = CompareToBuilder.reflectionCompare((Object) "Rj!*i$.&yUYi7?UIpCS", (Object) "PpPWxo{~ov>D=b8@BQ", stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer((short)2312);
      Integer integer1 = new Integer((-1379));
      String[] stringArray0 = new String[0];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer1, (Object) integer0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(4);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer1, (Object) integer0, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = new Object();
      int int0 = CompareToBuilder.reflectionCompare(object0, object0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      Integer integer0 = new Integer(1059);
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) intArray0[1]);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "'EXBd", (Object) "9\"HA+Z;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)6, (short)4);
      Integer integer0 = compareToBuilder1.build();
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-583), (-438));
      Integer integer0 = compareToBuilder1.build();
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0, (-1667.566516061862));
      compareToBuilder1.append(4101.6F, 4101.6F);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0, (-2703.5549));
      compareToBuilder1.appendSuper(0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(')', 'Y');
      compareToBuilder1.append('W', 'Y');
      assertEquals((-48), (int)compareToBuilder0.build());
      assertEquals((-48), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append(3081L, 48L);
      compareToBuilder0.append((byte) (-86), (byte)40);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare(object0, (Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "FmZ)Lby K*20X.", true, (Class<?>) class0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, object0, (Collection<String>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) linkedList0, object0, (Collection<String>) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) compareToBuilder0;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) compareToBuilder0;
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) false;
      // Undeclared exception!
      try { 
        compareToBuilder0.append(objectArray0, objectArray1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.builder.CompareToBuilder cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compareToBuilder0.append((Object) "n9I|93dz<{WX#GZc", object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      char[] charArray1 = new char[9];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(48, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[9];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[19];
      char[] charArray1 = new char[0];
      compareToBuilder0.append(charArray0, charArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object[]) null, objectArray0, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[4];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0, comparator0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) null, object0);
      Object[] objectArray0 = new Object[5];
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder1.append(objectArray0, objectArray0, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append(false, true);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-979.63117826344), (-979.63117826344));
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((byte) (-95), (byte) (-95));
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append('\'', '\'');
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(3487, 3487);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        compareToBuilder0.append(object0, (Object) compareToBuilder0, (Comparator<?>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) compareToBuilder0, (Object) null, (Comparator<?>) comparator0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder0.append((Object) null, object0, comparator0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object object0 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(object0, object0, comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String[] stringArray0 = new String[3];
      int int0 = CompareToBuilder.reflectionCompare((Object) "m2Dh7;c&4W", (Object) "3[5101gC\"T^M", false, (Class<?>) class0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "W", object0, true, (Class<?>) class0, (String[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-105));
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[8];
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer0, false, (Class<?>) class0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) class0, (String[]) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int int0 = compareToBuilder0.toComparison();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = new boolean[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = new boolean[4];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = new boolean[4];
      compareToBuilder0.append(booleanArray0, booleanArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      boolean[] booleanArray0 = new boolean[0];
      compareToBuilder0.append(booleanArray0, (boolean[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[5];
      compareToBuilder0.append((boolean[]) null, booleanArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(5263);
      boolean[] booleanArray0 = new boolean[4];
      compareToBuilder0.append(booleanArray0, booleanArray0);
      assertEquals(5263, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 2662.275F;
      compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[2];
      compareToBuilder0.append(floatArray1, floatArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[1];
      compareToBuilder0.append((float[]) null, floatArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      float[] floatArray0 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      float[] floatArray0 = new float[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, (float[]) null);
      compareToBuilder1.append(floatArray0, floatArray0);
      assertEquals(1, compareToBuilder0.toComparison());
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[2];
      compareToBuilder0.append(doubleArray1, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      compareToBuilder0.append(doubleArray1, doubleArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[0];
      compareToBuilder0.append((double[]) null, doubleArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(1276);
      compareToBuilder1.append((double[]) null, (double[]) null);
      assertEquals(1276, compareToBuilder0.toComparison());
      assertEquals(1276, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray1, byteArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[1];
      compareToBuilder0.append(byteArray1, byteArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      compareToBuilder0.append(byteArray1, byteArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      byte[] byteArray0 = new byte[0];
      compareToBuilder0.append(byteArray0, (byte[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[1];
      compareToBuilder0.append((byte[]) null, byteArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[0];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray0);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(1465);
      compareToBuilder1.append((byte[]) null, (byte[]) null);
      assertEquals(1465, (int)compareToBuilder0.build());
      assertEquals(1465, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) "Dw", (Object) ",w", (Collection<String>) linkedList0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      char[] charArray0 = new char[0];
      compareToBuilder0.append(charArray0, (char[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[8];
      compareToBuilder0.append((char[]) null, charArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((char[]) null, (char[]) null);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[2];
      compareToBuilder0.append(floatArray1, floatArray0);
      compareToBuilder0.append((char[]) null, (char[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2791;
      short[] shortArray1 = new short[2];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(2791, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[0];
      compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray1);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[4];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append(shortArray0, (short[]) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short[]) null, (short[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-7230.5);
      double[] doubleArray1 = new double[5];
      compareToBuilder0.append(doubleArray0, doubleArray1);
      short[] shortArray0 = new short[4];
      compareToBuilder0.append(shortArray0, shortArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[3];
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.append((short[]) null, shortArray0);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2367;
      int[] intArray1 = new int[2];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[3];
      compareToBuilder0.append(intArray0, intArray1);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      int[] intArray0 = new int[0];
      compareToBuilder0.append(intArray0, (int[]) null);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[1];
      compareToBuilder0.append((int[]) null, intArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((int[]) null, (int[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[4];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray1, intArray0);
      compareToBuilder1.append(intArray1, intArray1);
      assertEquals((-1), (int)compareToBuilder0.build());
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[2];
      longArray1[0] = 2395L;
      compareToBuilder0.append(longArray0, longArray1);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[10];
      compareToBuilder0.append(longArray1, longArray0);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(longArray1, longArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[18];
      long[] longArray1 = new long[1];
      compareToBuilder0.append(longArray1, longArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((long[]) null, (long[]) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      long[] longArray0 = new long[1];
      compareToBuilder0.append(longArray0, (long[]) null);
      compareToBuilder0.append((long[]) null, longArray0);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      long[] longArray0 = new long[0];
      compareToBuilder0.append((long[]) null, longArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = new Object[3];
      objectArray1[1] = (Object) compareToBuilder0;
      compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertEquals((-1), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[3];
      compareToBuilder0.append(objectArray1, objectArray0, (Comparator<?>) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[3];
      compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      Object[] objectArray0 = new Object[0];
      compareToBuilder0.append(objectArray0, (Object[]) null, (Comparator<?>) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[0];
      compareToBuilder0.append((Object[]) null, objectArray0);
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[2];
      compareToBuilder0.appendSuper(59);
      compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(59, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      compareToBuilder0.append(true, false);
      assertEquals(1, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(false, false);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, (int)compareToBuilder0.build());
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray1, floatArray0);
      compareToBuilder1.append(false, false);
      assertEquals(1, (int)compareToBuilder0.build());
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[7];
      compareToBuilder0.append(charArray0, charArray1);
      compareToBuilder0.append((float) (byte)52, (-1.0F));
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0.0F, 0.0F);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-19));
      compareToBuilder0.append((double) (-19), (double) (-19));
      assertEquals((-19), compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(doubleArray0, doubleArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      compareToBuilder0.append(booleanArray0, booleanArray1);
      compareToBuilder0.append((byte) (-20), (byte) (-20));
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper(1128);
      compareToBuilder0.append(')', ')');
      assertEquals(1128, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(446);
      compareToBuilder1.append((short)3587, (short)3587);
      assertEquals(446, compareToBuilder0.toComparison());
      assertEquals(446, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((short)1, (short)1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(24);
      compareToBuilder1.append(24, 24);
      assertEquals(24, compareToBuilder0.toComparison());
      assertEquals(24, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      int[] intArray0 = new int[2];
      int[] intArray1 = new int[2];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(intArray0, intArray1);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper((-481));
      compareToBuilder1.append((long) (-481), 3832L);
      assertEquals((-481), compareToBuilder0.toComparison());
      assertEquals((-481), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) compareToBuilder0, (Object) "org.junitpioneer.jupiter.params.IntRange", (Comparator<?>) comparator0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      assertEquals(0, compareToBuilder0.toComparison());
      
      compareToBuilder0.append((Object) compareToBuilder0, (Object) null);
      assertEquals(1, compareToBuilder0.toComparison());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = new Object[1];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);
      assertEquals(0, compareToBuilder1.toComparison());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byte[] byteArray1 = new byte[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(byteArray0, byteArray1);
      Integer integer0 = new Integer((-1836));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      compareToBuilder1.append((Object) integer0, (Object) integer0, (Comparator<?>) comparator0);
      assertEquals(93, compareToBuilder0.toComparison());
      assertEquals(93, (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      compareToBuilder0.appendSuper((-1));
      compareToBuilder0.appendSuper((-1));
      assertEquals((-1), (int)compareToBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = new Integer((-15));
      Integer integer1 = new Integer((-15));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) integer0, (Object) integer1, (Collection<String>) linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[1];
      int int0 = CompareToBuilder.reflectionCompare((Object) "_", (Object) "[", true, (Class<?>) class0, stringArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) "", object0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      int int0 = CompareToBuilder.reflectionCompare(object0, object0, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompareToBuilder.reflectionCompare((Object) null, (Object) "I8<pf2s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Object[] objectArray0 = new Object[3];
      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0);
      assertEquals(0, (int)compareToBuilder1.build());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "S", (Collection<String>) linkedList0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CompareToBuilder compareToBuilder0 = new CompareToBuilder();
      Integer integer0 = compareToBuilder0.build();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = CompareToBuilder.reflectionCompare((Object) "", (Object) "&\u0007u)X^sV}8Z4", true);
      assertEquals((-1), int0);
  }
}
