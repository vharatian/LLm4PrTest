/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 05:44:34 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.Map;
import org.apache.commons.lang3.builder.Diff;
import org.apache.commons.lang3.builder.DiffBuilder;
import org.apache.commons.lang3.builder.DiffResult;
import org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle;
import org.apache.commons.lang3.builder.RecursiveToStringStyle;
import org.apache.commons.lang3.builder.StandardToStringStyle;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class DiffBuilder_ESTest extends DiffBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-2213));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer(1631);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0);
      int[] intArray0 = new int[8];
      diffBuilder0.append("]Mq", (int[]) null, intArray0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("]Mq", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(115);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("'$fx!Hr", (short)0, (short) (-656));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-1562));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer((-2194));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (long) (-2194), (long) (-1562));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1555));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer((-440));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (-440), (-1555));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object1, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("8#g/j/]g}b", 66.83217F, 326.0F);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-167));
      Integer integer1 = new Integer(464);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("WxiZ )aa$", (double) (-167), (double) 464);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object1, toStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("I@xr^y-Pp%3-/$~}f`", '$', '1');
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(116);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(">V*", (byte) (-115), (byte)14);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(2605);
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0, true);
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, booleanArray0, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(35);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      short[] shortArray0 = new short[3];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, shortArray0, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      Integer integer0 = new Integer(578);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (Object[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-995989157));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      long[] longArray0 = new long[1];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, longArray0, longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1379));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(530);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (float[]) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(110);
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (char[]) null, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, byteArray0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(48);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(8);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (short)530, (short)530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(60);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append("offset cannot be negative", (DiffResult<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Diff result cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1392));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, object0, (Object) multilineRecursiveToStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-361));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 1811L, 1811L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-361));
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (-361), (-361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(34);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (float) 34, (float) 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1555));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (double) (-1555), (double) (-1555));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, 'm', 'm');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      // Undeclared exception!
      try { 
        diffBuilder0.append((String) null, (byte)13, (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Field name cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Object> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Object>((Object) null, (Object) null, toStringStyle0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.JSON_STYLE;
      DiffBuilder<Integer> diffBuilder0 = null;
      try {
        diffBuilder0 = new DiffBuilder<Integer>((Integer) null, (Integer) null, toStringStyle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // lhs cannot be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(73);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("~f=Zpk4P", (Object) "~f=Zpk4P", (Object) integer0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(2447);
      Integer integer1 = new Integer(414);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = new Object[6];
      diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$2", objectArray0, objectArray1);
      diffResult0.toString((ToStringStyle) multilineRecursiveToStringStyle0);
      assertEquals(1, diffResult0.getNumberOfDiffs());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-661));
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("5QFD&:R8rQ)s!:2)", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, true);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$4", diffResult0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Integer integer1 = new Integer((-677));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      Object[] objectArray0 = new Object[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("ExceptionWasThrown", objectArray0, objectArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer((-1164));
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      Integer integer1 = new Integer((-1164));
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("<ZTI(XNq5i!Yo^E5juq", (Object) integer0, (Object) integer1);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      Integer integer1 = new Integer((-137));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("The validated array is empty", (Object) null, (Object) ",CDfl!EYX");
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Integer> diff1 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff1, recursiveToStringStyle0);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", (Object) recursiveToStringStyle0, (Object) recursiveToStringStyle0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, true);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("!ODDWIq-&|jZ#9", (Object) "!ODDWIq-&|jZ#9", object0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer((-656));
      Integer integer1 = new Integer(64);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("lhs cannot be null", (short[]) null, (short[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (short[]) null, (short[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      Integer integer1 = new Integer((-137));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (short) (-677), (short) (-677));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Integer integer0 = new Integer((byte)0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("rhs cannot be null", (short) (byte)0, (short) (byte)0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, object0, toStringStyle0, false);
      long[] longArray0 = new long[5];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("rB3'v0dM]-", longArray0, longArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0);
      long[] longArray0 = new long[2];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$13", longArray0, longArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Integer> diff1 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff1, recursiveToStringStyle0);
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("StdIo_Std_In", (-1L), (-1L));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-395));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("M!iO)Q9z56=", (long) (-395), (-395L));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      int[] intArray0 = new int[6];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E-Sy07NzwH,eDs+", intArray0, intArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(375);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append(">", (int[]) null, (int[]) null);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-656));
      Integer integer1 = new Integer(64);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("aAArjm~Dc4jlE%", (-656), (-656));
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (int) (byte)66, 8);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Integer> diff1 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff1, recursiveToStringStyle0);
      float[] floatArray0 = new float[7];
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", floatArray0, floatArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(8);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      float[] floatArray0 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("d9ITYC.", floatArray0, floatArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E-Sy07NzwH,eDs+", 0.0F, (float) 0L);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer(4677);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("&vmWg", 0.0F, 0.0F);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Integer> diff1 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff1, recursiveToStringStyle0);
      double[] doubleArray0 = new double[0];
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, true);
      double[] doubleArray0 = new double[0];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("8S,-E&t3tb<,6wSpm", doubleArray0, doubleArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder", 0.0, 0.0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, true);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("!ODDWIq-&|jZ#9", (-1.0), (-397.7547546));
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Object object0 = new Object();
      Object object1 = new Object();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object1, toStringStyle0);
      char[] charArray0 = new char[1];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("#$|SE:k?n]:}G#c/#", charArray0, charArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer((-395));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, true);
      char[] charArray0 = new char[2];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("rL", charArray0, charArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, multilineRecursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = new DiffBuilder<Object>(integer0, diffBuilder0, multilineRecursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder2 = diffBuilder1.append("", 'U', 'U');
      assertSame(diffBuilder1, diffBuilder2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer(375);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("p<9hA061h&>]$J", 'N', 'O');
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      byte[] byteArray0 = new byte[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("m,Dxm[R}(+vw-", byteArray0, byteArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      Integer integer0 = new Integer((byte)0);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, recursiveToStringStyle0);
      byte[] byteArray0 = new byte[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$6", byteArray0, byteArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(29);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer((-2672));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("-\"bn|hrG*=", (byte)85, (byte)85);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Object object0 = new Object();
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, recursiveToStringStyle0);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", (byte)0, (byte)66);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Diff<Integer> diff0 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      Diff<Integer> diff1 = (Diff<Integer>) mock(Diff.class, new ViolatedAssumptionAnswer());
      RecursiveToStringStyle recursiveToStringStyle0 = new RecursiveToStringStyle();
      DiffBuilder<Diff<Integer>> diffBuilder0 = new DiffBuilder<Diff<Integer>>(diff0, diff1, recursiveToStringStyle0);
      boolean[] booleanArray0 = new boolean[6];
      DiffBuilder<Diff<Integer>> diffBuilder1 = diffBuilder0.append(".", booleanArray0, booleanArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(375);
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(integer0, integer0, (ToStringStyle) null);
      boolean[] booleanArray0 = new boolean[5];
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("", booleanArray0, booleanArray0);
      assertSame(diffBuilder0, diffBuilder1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("m,Dxm[R}(+vw-", false, false);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
      DiffBuilder<Object> diffBuilder0 = new DiffBuilder<Object>(object0, object0, toStringStyle0, true);
      DiffBuilder<Object> diffBuilder1 = diffBuilder0.append("8S,-E&t3tb<,6wSpm", true, true);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Integer integer0 = new Integer(8);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer(8);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer(80);
      Integer integer1 = new Integer(591);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("org.apache.commons.lang3.builder.DiffBuilder$11", intArray0, intArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("K(*", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Integer integer0 = new Integer((-656));
      Integer integer1 = new Integer(64);
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("`Ut>VE7`Mc@p..\"TI", (double) 64, (double) (-656));
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("HN4G=e~sXfF&iQ5+:~", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Integer integer0 = new Integer(2418);
      Integer integer1 = new Integer((-113));
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", (int) 'U', 2418);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("org.junitpioneer.jupiter.EnvironmentVariableExtension", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer0 = new Integer((-1000501559));
      Integer integer1 = new Integer(1050);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("'A,mq+TV", charArray0, charArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("K@&f^!", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer((-1453));
      Integer integer1 = new Integer(1837);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      float[] floatArray0 = new float[3];
      float[] floatArray1 = new float[0];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("pDox=Ny/", floatArray0, floatArray1);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      diffBuilder0.append("E-Sy07NzwH,eDs+", 0.0F, (float) (-590L));
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("50R!(", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(3428);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      Integer integer1 = new Integer(2356);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        diffBuilder1.append("f!2AVi23Q~I2miv", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Integer integer0 = new Integer((-684));
      Integer integer1 = new Integer(1691);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, multilineRecursiveToStringStyle0);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[3];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("$1`*S", shortArray0, shortArray1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("$1`*S", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("E-Sy07NzwH,eDs+", (short)0, (short)1035);
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("50R!(", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Integer integer0 = new Integer((-1514));
      Integer integer1 = new Integer((-2325));
      ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer1, integer0, toStringStyle0);
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[1];
      diffBuilder0.append("%", longArray0, longArray1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("I#ApM~3", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ToStringStyle toStringStyle0 = ToStringStyle.NO_CLASS_NAME_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append(";noqBBpQhcO97>", (-590L), (-2061L));
      DiffResult<Integer> diffResult0 = diffBuilder1.build();
      // Undeclared exception!
      try { 
        diffBuilder1.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      Integer integer1 = new Integer((-677));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, toStringStyle0);
      diffBuilder0.append("ExceptionWasThrown", (byte)0, (byte) (-82));
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      // Undeclared exception!
      try { 
        diffBuilder0.append("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(29);
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer();
      Integer integer1 = new Integer((-2672));
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer1, multilineRecursiveToStringStyle0);
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = new boolean[4];
      diffBuilder0.append("-\"bn|hrG*=", booleanArray0, booleanArray1);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      stringBuffer0.append((Object) diffResult0);
      assertEquals(171, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer(34);
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, (ToStringStyle) null, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      diffBuilder0.append("", 'p', '4');
      // Undeclared exception!
      try { 
        diffBuilder0.append("", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MultilineRecursiveToStringStyle multilineRecursiveToStringStyle0 = new MultilineRecursiveToStringStyle();
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.builder.DiffBuilder$6");
      Map<Object, Object> map0 = ToStringStyle.getRegistry();
      multilineRecursiveToStringStyle0.appendDetail(stringBuffer0, "^u>?", map0);
      assertEquals(50, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Integer integer0 = new Integer(4097);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0, false);
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[7];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("className must not be null.", byteArray0, byteArray1);
      assertSame(diffBuilder1, diffBuilder0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Integer integer0 = new Integer(116);
      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, standardToStringStyle0, false);
      DiffResult<Integer> diffResult0 = diffBuilder0.build();
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("", false, true);
      // Undeclared exception!
      try { 
        diffBuilder1.append("kA*,F", diffResult0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Integer integer0 = new Integer(4141);
      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
      DiffBuilder<Integer> diffBuilder0 = new DiffBuilder<Integer>(integer0, integer0, toStringStyle0);
      Object[] objectArray0 = new Object[9];
      DiffBuilder<Integer> diffBuilder1 = diffBuilder0.append("ExceptionWasThrown", objectArray0, objectArray0);
      assertSame(diffBuilder1, diffBuilder0);
  }
}
