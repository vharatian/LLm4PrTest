/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:53:09 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Map;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.mutable.MutableInt;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray1, 867, 65, 867);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(doubleArray0, 2, 2, 1);
      assertArrayEquals(new double[] {(-102.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)2);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)2, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)4776);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)4776, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 56;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 10;
      intArray0[4] = 113;
      intArray0[5] = (-617);
      intArray0[6] = 2146825412;
      ArrayUtils.shift(intArray0, 2, 160, 1);
      assertArrayEquals(new int[] {56, 1, 2146825412, 2, 10, 113, (-617)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      Byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.nullToEmpty((Byte[]) null, (Class<Byte[]>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'v';
      charArray0[2] = 'i';
      charArray0[3] = 'u';
      charArray0[4] = '^';
      charArray0[5] = '%';
      charArray0[6] = 'Z';
      charArray0[7] = 'j';
      charArray0[8] = 'p';
      ArrayUtils.shift(charArray0, 0, 0, (-94));
      assertArrayEquals(new char[] {'R', 'v', 'i', 'u', '^', '%', 'Z', 'j', 'p'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Long long0 = new Long(2849L);
      assertEquals(2849L, (long)long0);
      assertNotNull(long0);
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Short[] shortArray0 = ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY;
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray1, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = ')';
      charArray0[2] = '\\';
      charArray0[3] = 'W';
      char[] charArray1 = ArrayUtils.insert((int) (byte)1, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', ')', '\\', 'W'}, charArray0);
      assertArrayEquals(new char[] {'|', '|', ')', '\\', 'W', ')', '\\', 'W'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-103.267691);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2219.38359435133;
      doubleArray0[4] = 15.0;
      doubleArray0[5] = (-2.0);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 15.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-103.267691), (-1.0), 2219.38359435133, 15.0, (-2.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {15.0, 0.0, (-103.267691), (-1.0), 2219.38359435133, 15.0, (-2.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-2146366388), 0, 1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4541.168F);
      ArrayUtils.swap(floatArray0, 1, (-3511), (-743));
      assertArrayEquals(new float[] {(-4541.168F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, 790L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 3260);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.insert(1, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)56, (byte) (-110), (byte)0, (byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)56, (byte)56, (byte) (-110), (byte)0, (byte)1, (byte) (-110), (byte)0, (byte)1}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      Integer integer0 = new Integer((-3756));
      assertEquals((-3756), (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-3756);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (float) (-3756);
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NaN;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, 2);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {Float.NaN, (-3756.0F), Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-3756.0F), Float.NaN, Float.NaN}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.swap((float[]) null, 2, 2, 2);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)454;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)69;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)69;
      intArray0[1] = (int) (short)454;
      intArray0[2] = (int) (short)69;
      intArray0[3] = (-3756);
      intArray0[4] = (-3756);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 454, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 10, 10);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(10, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-847), (-847), (-847));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)99;
      ArrayUtils.shift(byteArray0, (-63), (-63), (-1563));
      assertArrayEquals(new byte[] {(byte)84, (byte)99}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)84;
      shortArray0[1] = (short) (byte)84;
      shortArray0[2] = (short) (-288);
      shortArray0[3] = (short) (byte)99;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)99);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)84, (short)84, (short) (-288), (short)99}, shortArray0);
      assertArrayEquals(new short[] {(short)99, (short)84, (short)84, (short) (-288), (short)99}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'p';
      charArray0[2] = 'V';
      charArray0[3] = '5';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'p', 'V', '5'}, charArray1);
      assertArrayEquals(new char[] {'', 'p', 'V', '5'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)84;
      byteArray1[1] = (Byte) (byte)99;
      byteArray1[2] = (Byte) (byte)99;
      byteArray1[3] = (Byte) (byte)99;
      byteArray1[4] = (Byte) (byte)84;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)84);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)84, (byte)99, (byte)99, (byte)99, (byte)84}, byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1313));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1313)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)5;
      ArrayUtils.swap(byteArray0, 3, 3, 1315);
      assertArrayEquals(new byte[] {(byte)72, (byte)99, (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (byte)99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1195.0F);
      floatArray0[1] = (-259.8411F);
      floatArray0[2] = 384.132F;
      int int0 = ArrayUtils.indexOf(floatArray0, Float.NaN, (-2146100538));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1195.0F), (-259.8411F), 384.132F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 1174);
      assertNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (float) 1174, 102);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(440, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 440, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '5';
      charArray1[1] = '5';
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'5', '5'}, charArray1);
      assertArrayEquals(new char[] {'5', '5'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(2, charArray1.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      short[] shortArray0 = new short[2];
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)18688, 2);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Double double0 = new Double(252.6114296097147);
      assertEquals(252.6114296097147, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 252.6114296097147;
      doubleArray1[1] = 252.6114296097147;
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 252.6114296097147, 2, 3076.0);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {252.6114296097147, 252.6114296097147}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-116);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-33), (byte) (-116), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-33), (byte) (-116), (byte)0, (byte)51, (byte) (-33), (byte) (-116), (byte)0}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[1];
      Byte byte0 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, 2407, 1);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(1, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1788.402F;
      floatArray0[1] = (float) 9L;
      floatArray0[2] = 1788.402F;
      floatArray0[3] = (-1186.0F);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.402F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1788.402F, 9.0F, 1788.402F, (-1186.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 57);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(4, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1788.402F, 9.0F, 1788.402F, (-1186.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1788.402F, 9.0F, 1788.402F, (-1186.0F), 1788.402F, 9.0F, 1788.402F, (-1186.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1788.402F;
      doubleArray0[1] = (double) (-1186.0F);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 9.0F;
      doubleArray0[5] = (double) 1788.402F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 57, 0.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1788.4019775390625, (-1186.0), 3.0, 4.0, 9.0, 1788.4019775390625}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)6, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf((boolean) boolean0);
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.TRUE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean3));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) null, (-352));
      assertEquals((-1), int0);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[27];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, 0);
      assertNotNull(bitSet0);
      assertEquals(27, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[9];
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) byte0, (int) (byte)67);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      // Undeclared exception!
      ArrayUtils.subarray(byteArray0, Integer.MAX_VALUE, (-1119));
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)937);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3260;
      doubleArray0[1] = (double) (short)937;
      doubleArray0[2] = (double) (short)937;
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = (double) (short)937;
      ArrayUtils.shift(doubleArray0, (-1), 5, (-200));
      assertArrayEquals(new double[] {3260.0, (-1.0), 937.0, 0.0, 937.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = (-200);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1993), 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {5, (-200)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 85.0;
      doubleArray0[1] = (-3212.724365234375);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 85.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {85.0, (-3212.724365234375)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)7;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-1), (byte) (-19), (byte) (-1), (byte)7}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-1), (byte) (-19), (byte)7}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)7;
      objectArray0[1] = (Object) 85.0;
      objectArray0[2] = (Object) (-3212.724365234375);
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '7', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (int) (short) (-3956), (int) (short)0, 55);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)4;
      Byte byte1 = Byte.valueOf((byte)4);
      assertEquals((byte)4, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)4, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 4, (int) 4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'S';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'V');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'V', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurrences(charArray1, 'S');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'V', 'S'}, charArray0);
      assertArrayEquals(new char[] {'S'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)2;
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(19, booleanArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (short)2, 9, (int) (byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)2;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (byte)0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)2}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) short0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      Byte byte0 = new Byte((byte) (-27));
      assertEquals((byte) (-27), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte)97;
      byteArray1[4] = (Byte) (byte)0;
      Byte byte1 = new Byte((byte) (-26));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-26), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray1[5] = byte1;
      byteArray1[6] = (Byte) (byte)97;
      Byte byte2 = new Byte((byte) (-52));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-52), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray1[7] = byte2;
      Byte[] byteArray2 = ArrayUtils.remove(byteArray1, (int) 2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(7, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '~';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '~'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '~'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '~', '\u0000', '~'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 64);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-258);
      shortArray0[1] = (short)13;
      shortArray0[2] = (short) (-950);
      shortArray0[3] = (short)23;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)13);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-258), (short)13, (short) (-950), (short)23}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) null, (-3944));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Long[] longArray0 = new Long[9];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(61L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(61L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(1364L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(1364L, (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(1993L);
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals(1993L, (long)long3);
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = Long.getLong("aW$nMf,'0x(@_", 88L);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long3));
      assertEquals(88L, (long)long4);
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-655L));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long3));
      assertEquals((-655L), (long)long5);
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long(1L);
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long5));
      assertFalse(long6.equals((Object)long1));
      assertFalse(long6.equals((Object)long3));
      assertEquals(1L, (long)long6);
      assertNotNull(long6);
      
      longArray0[6] = long6;
      Long long7 = new Long((-1549L));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long2));
      assertEquals((-1549L), (long)long7);
      assertNotNull(long7);
      
      longArray0[7] = long7;
      Long long8 = new Long(1111L);
      assertFalse(long8.equals((Object)long7));
      assertFalse(long8.equals((Object)long4));
      assertFalse(long8.equals((Object)long2));
      assertFalse(long8.equals((Object)long3));
      assertFalse(long8.equals((Object)long0));
      assertFalse(long8.equals((Object)long5));
      assertFalse(long8.equals((Object)long1));
      assertFalse(long8.equals((Object)long6));
      assertEquals(1111L, (long)long8);
      assertNotNull(long8);
      
      longArray0[8] = long8;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1056L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 61L, 1364L, 1993L, 88L, (-655L), 1L, (-1549L), 1111L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      short[] shortArray0 = new short[2];
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(19, booleanArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (short)0, 9, (int) (byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)0, 2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)60);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.insert(0, byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)60}, byteArray1);
      assertArrayEquals(new byte[] {(byte)60}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean("Parameter of type %s must reference an Enum type");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("Parameter of type %s must reference an Enum type");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("Parameter of type %s must reference an Enum type");
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((boolean) boolean1);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf("");
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf("");
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean2));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean((boolean) boolean4);
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean4));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean1));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      assertTrue(boolean8.equals((Object)boolean3));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean7));
      assertTrue(boolean8.equals((Object)boolean1));
      assertFalse(boolean8);
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'm';
      charArray0[2] = 'R';
      charArray0[3] = 'd';
      charArray0[4] = 'M';
      charArray0[5] = '{';
      charArray0[6] = 'z';
      charArray0[7] = 't';
      ArrayUtils.shift(charArray0, 6, 6, 19);
      assertArrayEquals(new char[] {'q', 'm', 'R', 'd', 'M', '{', 'z', 't'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'W';
      charArray0[2] = '.';
      ArrayUtils.shift(charArray0, 1, 1, (-1119));
      assertArrayEquals(new char[] {'|', 'W', '.'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)937;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)937);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3260;
      doubleArray0[1] = (double) (short)937;
      doubleArray0[2] = (double) (short)937;
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = (double) (short)937;
      ArrayUtils.shift(doubleArray0, (-1), 5, (-200));
      assertArrayEquals(new double[] {3260.0, (-1.0), 937.0, 0.0, 937.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)937;
      longArray0[1] = (long) 3260;
      longArray0[2] = (long) 3260;
      longArray0[3] = (long) (-200);
      longArray0[4] = (-673L);
      long[] longArray1 = ArrayUtils.insert(5, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {937L, 3260L, 3260L, (-200L), (-673L), 937L, 3260L, 3260L, (-200L), (-673L)}, longArray1);
      assertArrayEquals(new long[] {937L, 3260L, 3260L, (-200L), (-673L)}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = (-1);
      intArray0[2] = 3260;
      intArray0[3] = 3260;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3260, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)937);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)937;
      doubleArray0[1] = (double) (short)937;
      doubleArray0[2] = (double) (short)937;
      doubleArray0[1] = (double) (-1);
      doubleArray0[4] = (double) (short)937;
      ArrayUtils.shift(doubleArray0, (-1), 5, (-224));
      assertArrayEquals(new double[] {937.0, 937.0, (-1.0), 937.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)0, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = 'w';
      charArray0[2] = 'u';
      charArray0[3] = 'T';
      charArray0[4] = 'O';
      charArray0[5] = ',';
      charArray0[6] = '_';
      charArray0[7] = '~';
      ArrayUtils.shift(charArray0, (-4170));
      assertArrayEquals(new char[] {'u', 'T', 'O', ',', '_', '~', '^', 'w'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 46.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 46.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 2, 2, 2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 3);
      Byte byte0 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte1 = new Byte((byte)75);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)75, (byte)byte1);
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      Byte byte2 = new Byte((byte)75);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)75, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)75);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)75, (byte)byte3);
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte3);
      assertTrue(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, (-703), abstractMap_SimpleImmutableEntry4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -703, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      char[] charArray0 = new char[20];
      Byte byte0 = new Byte((byte) (-125));
      assertEquals((byte) (-125), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertEquals(20, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertEquals(20, charArray0.length);
      assertEquals(20, characterArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-125);
      doubleArray0[1] = (double) (byte) (-125);
      doubleArray0[2] = (double) (byte) (-125);
      doubleArray0[3] = (double) (byte) (-125);
      doubleArray0[4] = (double) (byte) (-125);
      doubleArray0[5] = (double) (byte) (-125);
      doubleArray0[6] = (double) (byte) (-125);
      doubleArray0[7] = (double) (byte) (-125);
      doubleArray0[8] = (double) (byte) (-125);
      ArrayUtils.swap(doubleArray0, (-219), (int) (byte) (-125), (-982));
      assertArrayEquals(new double[] {(-125.0), (-125.0), (-125.0), (-125.0), (-125.0), (-125.0), (-125.0), (-125.0), (-125.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4341;
      intArray0[1] = (-1579);
      intArray0[2] = 1608;
      intArray0[3] = (-1805);
      intArray0[4] = (-753);
      intArray0[5] = Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {4341, (-1579), 1608, (-1805), (-753), Integer.MAX_VALUE}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4341, (-1579), 1608, (-1805), (-753), Integer.MAX_VALUE}, intArray0);
      assertArrayEquals(new int[] {4341, (-1579), 1608, (-1805), (-753), Integer.MAX_VALUE}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      ArrayUtils.reverse((float[]) null, 1924, 53);
      Random.setNextRandom(98);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-2146763148), 75);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146763148, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 374;
      intArray0[2] = 12;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 12);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {3, 374, 12}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      long[] longArray0 = new long[12];
      longArray0[0] = (long) 374;
      longArray0[1] = (long) 12;
      ArrayUtils.shift(longArray0, 1851);
      assertEquals(12, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {3, 374, 12}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(12, longArray0.length);
      assertEquals(13, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3, 374, 12}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '0';
      charArray0[2] = 'k';
      charArray0[3] = '6';
      charArray0[4] = 'k';
      ArrayUtils.shift(charArray0, 3, 12, 374);
      assertArrayEquals(new char[] {'Y', '0', 'k', '6', 'k'}, charArray0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, 12, 3, 3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)107);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)60;
      ArrayUtils.shift(byteArray0, (int) (byte) (-127), (-1), 764);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-127), (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte) (-127);
      longArray0[2] = (long) 764;
      longArray0[3] = (-2314L);
      longArray0[4] = (long) 898;
      longArray0[5] = (long) (byte)60;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), (-127L), 764L, (-2314L), 898L, 60L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-127), 9, 764);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-127), (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 764;
      intArray0[1] = (int) (byte) (-127);
      intArray0[2] = 764;
      intArray0[3] = 9;
      intArray0[4] = (int) (byte)60;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (byte)60);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {764, (-127), 764, 9, 60}, intArray0);
      assertArrayEquals(new int[] {60, 764, (-127), 764, 9, 60}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.add(charArray0, 'Y');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'Y'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'Y';
      doubleArray0[1] = (double) 'Y';
      doubleArray0[2] = (double) 'Y';
      doubleArray0[3] = (double) 'Y';
      doubleArray0[4] = (double) 'Y';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 89.0, 1057.0);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {89.0, 89.0, 89.0, 89.0, 89.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift(charArray0, 160, 4, 4);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1529.5082130239));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1529.5082130239), 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1529.5082130239);
      doubleArray2[1] = (-1529.5082130239);
      doubleArray2[2] = (-1529.5082130239);
      doubleArray2[3] = (-1529.5082130239);
      doubleArray2[4] = (-1529.5082130239);
      doubleArray2[5] = (-1529.5082130239);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1529.5082130239), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1529.5082130239), (-1529.5082130239), (-1529.5082130239), (-1529.5082130239), (-1529.5082130239), (-1529.5082130239)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.402F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1788.402F;
      Boolean[] booleanArray1 = new Boolean[6];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) false;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) false;
      booleanArray1[5] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      ArrayUtils.shift((Object[]) booleanArray1, (-806), 0, (-2341));
      assertEquals(6, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ',');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = null;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object object1 = ArrayUtils.removeAll(object0, bitSet0);
      assertNull(object1);
      assertEquals(1, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, 51);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = "e!FN#/L!:z0*)W\"{&f";
      try { 
        Byte.decode("e!FN#/L!:z0*)W\"{&f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e!FN#/L!:z0*)W\"{&f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 898;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)97;
      Short short0 = new Short((byte)97);
      assertEquals((short)97, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 292;
      float[] floatArray0 = new float[5];
      floatArray0[2] = 1897.0F;
      floatArray0[1] = (float) 292;
      floatArray0[2] = (float) 292;
      floatArray0[3] = (float) 2;
      floatArray0[4] = 0.0F;
      ArrayUtils.shift(floatArray0, 2, 13, (-2881));
      assertArrayEquals(new float[] {0.0F, 292.0F, 2.0F, 0.0F, 292.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 292, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'c';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2881), 2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'n', 'c'}, charArray0);
      assertArrayEquals(new char[] {'n', 'c'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      ArrayUtils.shift(intArray0, (-1), 100, 100);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 3055;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), 127, (-2470.6));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 3055.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertNotNull(objectArray0);
      assertEquals(3, booleanArray0.length);
      assertEquals(3, objectArray0.length);
      assertSame(booleanArray0, objectArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 127, (-1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 3055.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'K');
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-497);
      shortArray0[1] = (short)9;
      shortArray0[2] = (short)1688;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)9, (-439));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-497), (short)9, (short)1688}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[3];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2757.85);
      doubleArray0[1] = (double) (-200);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (-2110.2016);
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = (double) (-200);
      ArrayUtils.shift(doubleArray0, 2, 79, (-200));
      assertArrayEquals(new double[] {(-2757.85), (-200.0), 5.0, (-2110.2016), 5.0, (-200.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '\'');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 3545L;
      longArray0[1] = 0L;
      longArray0[2] = 4371L;
      longArray0[3] = 2147483647L;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {3545L, 0L, 4371L, 2147483647L}, longArray0);
      assertEquals(4, longArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)1, (short)3093);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)3093, (short)1, (short)1}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int[] intArray0 = new int[4];
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      ArrayUtils.hashCode(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte[] byteArray0 = new Byte[7];
      String string0 = "java.lang.Byte";
      try { 
        Byte.decode("java.lang.Byte");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-73), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object[] objectArray1 = new Object[5];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0.0;
      objectArray1[1] = (Object) "[H4:E(q";
      objectArray1[2] = (Object) 0.0;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) "[H4:E(q";
      Object object1 = ArrayUtils.get(objectArray1, 0, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(5, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      
      objectArray0[1] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "[H4:E(q");
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotSame(objectArray0, objectArray1);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 100);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Byte byte1 = new Byte((byte)78);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)78, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-32));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-32), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)78);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)78, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertTrue(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true, false, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (short) (-1);
      ArrayUtils.shift(byteArray0, (int) (short) (-1), (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (-1L);
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (short) (-1));
      assertEquals((-1), int0);
      assertEquals(2, objectArray0.length);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (-4826.0);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1L);
      ArrayUtils.shift(doubleArray0, (int) (short) (-1), 83, (-1));
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-4826.0), (-1.0), (-1.0), 0.0, 0.0, 0.0, 120.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-956.0F);
      floatArray0[3] = (float) 120;
      floatArray0[4] = (-766.77563F);
      floatArray0[5] = (float) (byte) (-40);
      floatArray0[6] = (float) 120;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (int) (byte) (-40), (-766.77563F));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -40, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((float) (byte)51);
      assertEquals(51.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1.0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1968.8288490194375);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1968.8289F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float1;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {51.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = 'E';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'u';
      charArray1[1] = 'C';
      charArray1[2] = '\\';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u', 'C', '\\'}, charArray1);
      assertArrayEquals(new char[] {'A', '\\', '\\', 'E'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)102;
      byteArray2[2] = (byte)20;
      byteArray2[3] = (byte)20;
      byteArray2[4] = (byte)51;
      byteArray2[5] = (byte)51;
      byteArray2[6] = (byte)20;
      byteArray2[7] = (byte)20;
      byteArray2[8] = (byte)20;
      byte[] byteArray3 = ArrayUtils.removeElement(byteArray2, (byte) (-18));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)51, (byte)102, (byte)20, (byte)20, (byte)51, (byte)51, (byte)20, (byte)20, (byte)20}, byteArray2);
      assertArrayEquals(new byte[] {(byte)51, (byte)102, (byte)20, (byte)20, (byte)51, (byte)51, (byte)20, (byte)20, (byte)20}, byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) (-2345L);
      floatArray0[2] = (float) (-2345L);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (-2345L);
      ArrayUtils.shift(floatArray0, 928, (-642), (-642));
      assertArrayEquals(new float[] {1.0F, (-2345.0F), (-2345.0F), (-1.0F), (-2345.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)97;
      shortArray0[1] = (short)77;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new short[] {(short)97, (short)77}, shortArray0);
      assertArrayEquals(new short[] {(short)77}, shortArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[2] = (-418.79553F);
      floatArray0[3] = (-418.79553F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[1] = 'g';
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = (int) '\u0000';
      intArray0[4] = (int) 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 12);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {11, 0, 0, 0, 103}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.shift(charArray0, (-2145482264));
      assertArrayEquals(new char[] {'\u0000', 'g'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Long[] longArray0 = new Long[2];
      Long long0 = new Long(103);
      assertEquals(103L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long(0);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2145482264);
      doubleArray0[1] = (double) (long)longArray0[0];
      doubleArray0[2] = (double) 850L;
      doubleArray0[3] = (double) 11;
      ArrayUtils.shift(doubleArray0, 0, 120, 11);
      assertArrayEquals(new double[] {103.0, 850.0, 11.0, (-2.145482264E9)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (-766.77563F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {850.0F, (-1486.3279F), (-418.79553F), (-418.79553F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-766.77563F), 850.0F, (-1486.3279F), (-418.79553F), (-418.79553F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) (short)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[2] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (-2144983810), (Byte) byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-7673.379F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)9, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Short[] shortArray0 = new Short[5];
      Short short0 = new Short((byte)9);
      assertEquals((short)9, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte)9);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)9, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)1);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = Short.valueOf((short) (-879));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-879), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((byte)9);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertEquals((short)9, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)1, (short) (-879), (short)9}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-32438));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)9, (short)9, (short)1, (short) (-879), (short)9}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Long long0 = new Long(373L);
      assertEquals(373L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift((Object[]) shortArray0, 0, (int) shortArray0[0], (int) (short) (-32438));
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1274);
      intArray2[1] = 3407;
      intArray2[2] = 2653;
      intArray2[3] = 836;
      intArray2[4] = 25;
      boolean boolean0 = ArrayUtils.isSameLength(intArray1, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-1274), 3407, 2653, 836, 25}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(5, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2653;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 3407;
      doubleArray0[3] = (double) 25;
      doubleArray0[4] = (double) 3407;
      doubleArray0[5] = (double) 836;
      doubleArray0[6] = (double) 3407;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2653.0, 25.0, 3407.0, 25.0, 3407.0, 836.0, 3407.0}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)161;
      shortArray0[1] = (short) (-795);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)161, 3452);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)161, (short) (-795)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[7];
      int int0 = Integer.MAX_VALUE;
      try { 
        Byte.valueOf("java.lang.Object", Integer.MAX_VALUE);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1072);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = ArrayUtils.removeElements(shortArray1, shortArray2);
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {(short)1072}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short)1072}, shortArray3);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertEquals(1, shortArray3.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (int) (short)1072, (-709L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1072, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-13.411427969694547);
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)21);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      
      Byte[] byteArray3 = ArrayUtils.insert((-880), byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)21;
      longArray0[1] = (-5L);
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (-3113L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {21L, (-5L)}, longArray0);
      assertArrayEquals(new long[] {21L, (-5L), (-3113L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)21;
      floatArray0[1] = (float) (-3113L);
      floatArray0[2] = (float) (-5L);
      floatArray0[3] = (float) (byte)21;
      floatArray0[4] = (float) (-5L);
      floatArray0[5] = (float) (-5L);
      floatArray0[6] = (float) (-3113L);
      floatArray0[7] = (-426.5401F);
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {21.0F, (-3113.0F), (-5.0F), 21.0F, (-5.0F), (-5.0F), (-3113.0F), (-426.5401F)}, floatArray0, 0.01F);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 4);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(4, classArray0.length);
      assertEquals(4, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      Short short0 = new Short((short)256);
      assertEquals((short)256, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[5];
      short short1 = (short)49;
      Short short2 = new Short((short)49);
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)49, (short)short2);
      assertNotNull(short2);
      
      shortArray0[0] = short2;
      short short3 = (short)0;
      Short short4 = new Short((short)0);
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short)0, (short)short4);
      assertNotNull(short4);
      
      shortArray0[1] = short4;
      shortArray0[2] = short0;
      shortArray0[3] = short0;
      shortArray0[4] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)49, (short)0, (short)256, (short)256, (short)256}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, short3);
      assertFalse(short3 == short1);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)49, (short)0, (short)256, (short)256, (short)256}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      Long long0 = new Long(102L);
      assertEquals(102L, (long)long0);
      assertNotNull(long0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) short4;
      objectArray0[1] = (Object) short3;
      objectArray0[2] = (Object) short1;
      ArrayUtils.shift(objectArray0, (int) (short)1, (int) (short)1, 1183);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '[';
      charArray0[2] = '-';
      charArray0[3] = 'm';
      charArray0[5] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '[';
      doubleArray0[3] = (double) 'q';
      doubleArray0[4] = (double) 'm';
      doubleArray0[5] = (double) 4;
      Byte byte0 = new Byte((byte)13);
      assertEquals((byte)13, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 4);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 75);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 13);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(13, classArray0.length);
      assertEquals(13, classArray1.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 321;
      intArray1[1] = 75;
      intArray1[2] = 75;
      intArray1[3] = 75;
      ArrayUtils.reverse(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {75, 75, 75, 321}, intArray1);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 321;
      doubleArray2[1] = (double) 321;
      doubleArray2[2] = (double) 75;
      doubleArray2[3] = (double) 75;
      double[] doubleArray3 = ArrayUtils.addAll(doubleArray2, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {321.0, 321.0, 75.0, 75.0, 321.0, 321.0, 75.0, 75.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {321.0, 321.0, 75.0, 75.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray3.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      
      ArrayUtils.reverse((char[]) null, 75, (-2772));
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)937);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3260;
      doubleArray0[1] = (double) (short)937;
      doubleArray0[2] = (double) (short)937;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short)937;
      ArrayUtils.shift(doubleArray0, (-1), 5, (-200));
      assertArrayEquals(new double[] {3260.0, 937.0, 937.0, (-1.0), 937.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(5);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1354);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1354, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1354, (int)integer2);
      assertNotNull(integer2);
      assertEquals(7, integerArray0.length);
      
      integerArray0[2] = integer2;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) integerArray0[1], 722);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertEquals(7, integerArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((Object[]) integerArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {3260.0, 937.0, 937.0, (-1.0), 937.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3260.0, 937.0, 937.0, (-1.0), 937.0}, doubleArray1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '[';
      charArray0[2] = '-';
      charArray0[3] = 'm';
      charArray0[5] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '[';
      doubleArray0[3] = (double) 'q';
      doubleArray0[4] = (double) 'm';
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 'q';
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {45.0, 45.0, 91.0, 113.0, 109.0, 4.0, 113.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)51, (byte) (-1), (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)51, (byte) (-1), (byte) (-1), (byte)0, (byte) (-1), (byte)51, (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-1.0));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)86;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)28, 3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)86, (byte)21, (byte)86}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)31;
      Byte byte1 = new Byte((byte)31);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)31, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)31}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1080L;
      floatArray0[2] = (float) (byte)31;
      floatArray0[3] = (float) byte0;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {0.0F, 1080.0F, 31.0F, 31.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1080.0F, 31.0F, 31.0F}, floatArray0, 0.01F);
      assertEquals(0, intArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)99;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)2;
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)120, (byte)99, (byte)63, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)99, (byte)63, (byte)2}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (int) (short)2, (int) (short)2, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = '&';
      charArray0[2] = 'Q';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Q');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {')', '&', 'Q'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 220);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[4] = 220;
      intArray0[5] = 1941;
      intArray0[7] = 220;
      ArrayUtils.shift(intArray0, (-1), 220, (-1));
      assertArrayEquals(new int[] {220, 220, 0, 220, 1941, 0, 220, 220}, intArray0);
      assertEquals(8, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 3055, (double) 1941);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 220;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {220, 220, 0, 220, 1941, 0, 220, 220}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift((boolean[]) null, 474, 59, 220);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, (boolean[]) null);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 220);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 220, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Double double0 = new Double(252.6114296097147);
      assertEquals(252.6114296097147, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray0, (Object) null, 0);
      assertEquals((-1), int0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)118;
      Byte byte1 = new Byte((byte)118);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-64);
      byteArray2[1] = (byte) (-64);
      byteArray2[2] = byte0;
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-64));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte)118}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte) (-64), (byte)118}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Byte byte2 = ArrayUtils.get(byteArray0, 1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNull(byte2);
      assertEquals(1, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, (Object) null, (int) (byte)118);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = new boolean[8];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[6] = true;
      booleanArray1[7] = false;
      ArrayUtils.shift((Object[]) byteArray1, 1, (int) (byte) (-64), (int) (byte) (-64));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)118;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte)44);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)118}, byteArray1);
      assertArrayEquals(new byte[] {(byte)44, (byte)118}, byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Byte byte1 = new Byte((byte)97);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte)118);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)118, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray3 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte1));
      assertNotNull(byteArray3);
      assertEquals(1, byteArray3.length);
      
      byte[] byteArray4 = ArrayUtils.toPrimitive(byteArray3);
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)97}, byteArray4);
      assertEquals(1, byteArray3.length);
      assertEquals(1, byteArray4.length);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray2));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertSame(booleanArray0, booleanArray2);
      assertSame(booleanArray2, booleanArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)97;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {97L, 97L}, longArray1);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      Short[] shortArray0 = new Short[3];
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) byte0, 2);
      assertEquals((-1), int0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)118;
      Byte byte1 = new Byte((byte)118);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[12];
      byteArray2[0] = (byte) (-64);
      byteArray2[1] = (byte) (-64);
      byteArray2[2] = byte0;
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-64));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(12, byteArray2.length);
      assertEquals(13, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Byte byte2 = new Byte((byte)118);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte)62);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)62, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray4 = ArrayUtils.addFirst(byteArray0, byte3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray4.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      
      byte[] byteArray5 = ArrayUtils.toPrimitive(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)118}, byteArray5);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray5.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte) (-64);
      floatArray0[1] = (float) (byte) (-64);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (byte) (-64);
      floatArray0[4] = (float) (byte)62;
      floatArray0[5] = (float) (byte)118;
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-64.0F), 118.0F, (-64.0F), 62.0F, 118.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-64.0F), (-64.0F), 118.0F, (-64.0F), 62.0F, 118.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-64);
      longArray0[1] = (long) byte0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-64);
      intArray0[1] = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Short short0 = new Short((byte) (-102));
      assertEquals((short) (-102), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-102));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-102), (short)short1);
      assertNotNull(short1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-13);
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-13));
      assertNull(byteArray1);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Random.setNextRandom((byte) (-43));
      byte[] byteArray2 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert((-2108), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, (int) 23, Integer.MAX_VALUE);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-156);
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) Integer.MAX_VALUE;
      longArray0[3] = (long) (-156);
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1230L), (-156));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-156L), 2147483647L, 2147483647L, (-156L), 4L, 4L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (int) (byte)76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (short)0, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short)0);
      assertEquals((-1), int0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (short)0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-30), (-156));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-58);
      Byte byte1 = new Byte((byte) (-58));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-58), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-58), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-58));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-58), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-58));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte) (-58), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertEquals((byte) (-58), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = 181L;
      longArray0[4] = (long) (-1);
      longArray0[5] = (-742L);
      longArray0[6] = (long) (-30);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) byte0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-58L), (-58L), 181L, (-1L), (-742L), (-30L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      double[] doubleArray0 = new double[4];
      ArrayUtils.swap(charArray0, 3, 3, 3);
      assertEquals(11, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '>';
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) '>';
      longArray0[4] = (long) 'h';
      longArray0[5] = (-23L);
      longArray0[6] = (long) 'h';
      longArray0[7] = (long) 3;
      longArray0[8] = (long) 'h';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {62L, 0L, 104L, 62L, 104L, (-23L), 104L, 3L, 104L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)15;
      Byte byte1 = new Byte((byte)15);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)15, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'L';
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {76L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte)15);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)15}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Byte byte2 = new Byte((byte)62);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)62, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray4 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray4.length);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      
      byte[] byteArray5 = ArrayUtils.add(byteArray3, (byte)1);
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)15}, byteArray3);
      assertArrayEquals(new byte[] {(byte)15, (byte)1}, byteArray5);
      assertEquals(0, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertEquals(2, byteArray5.length);
      assertNotSame(byteArray2, byteArray5);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray5);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 76L, (int) byte0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {76L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, (int) (byte)1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-418.79553F);
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Long[] longArray1 = new Long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      Long long0 = new Long(180L);
      assertEquals(180L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = new Long((-79L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-79L), (long)long1);
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((long) longArray1[0]);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(long2.equals((Object)long1));
      assertTrue(long2.equals((Object)long0));
      assertEquals(180L, (long)long2);
      assertNotNull(long2);
      assertEquals(4, longArray1.length);
      
      longArray1[2] = long2;
      Long long3 = new Long(3699L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(3699L, (long)long3);
      assertNotNull(long3);
      
      longArray1[3] = long3;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {180L, (-79L), 180L, 3699L}, longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2289);
      shortArray0[1] = (short)108;
      shortArray0[2] = (short) (-2642);
      shortArray0[3] = (short)2687;
      shortArray0[4] = (short) (-2);
      shortArray0[5] = (short) (-1);
      ArrayUtils.swap(shortArray0, 2, (-1471), (-1));
      assertArrayEquals(new short[] {(short) (-2289), (short)108, (short) (-2642), (short)2687, (short) (-2), (short) (-1)}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[2] = (short)180;
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1518.67F;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1518.67F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'v';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'q', 'v'}, charArray0);
      assertArrayEquals(new char[] {'q', 'v', 'q', 'v'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-77));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-77), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.shift((Object[]) byteArray0, (-3193), 3, 0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-77));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-77), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.insert((int) (byte)2, byteArray2, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3641;
      shortArray0[1] = (short)3641;
      shortArray0[2] = (short)2420;
      shortArray0[3] = (short)3641;
      ArrayUtils.shift(shortArray0, (-712), (int) (short)2420, (-712));
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2, (int) (short)2420);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2856), 5564, 4);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '8');
      assertNull(charArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.0F);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)32);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)32, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte)32;
      byteArray1[1] = byte1;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = byte0;
      byteArray1[5] = (Byte) (byte)32;
      byteArray1[6] = (Byte) (byte)0;
      byteArray1[7] = byte1;
      byteArray1[8] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) 0, (int) 0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-41));
      assertNull(byteArray0);
      
      Byte[] byteArray1 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 943;
      intArray0[1] = 943;
      intArray0[2] = 943;
      intArray0[3] = 801;
      intArray0[4] = 943;
      intArray0[5] = 943;
      intArray0[6] = 943;
      intArray0[7] = 943;
      intArray0[8] = 943;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {943, 943, 943, 801, 943, 943, 943, 943, 943}, intArray0);
      assertArrayEquals(new int[] {943, 943, 943, 801, 943, 943, 943, 943, 943}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1620;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = 0;
      boolean boolean0 = ArrayUtils.contains(intArray0, 1620);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 1620, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add((byte[]) null, 0, (byte)0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Integer integer0 = new Integer(23221);
      assertEquals(23221, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(316);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(316, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer2;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {316, Integer.MAX_VALUE, 316, 316, 316, Integer.MAX_VALUE}, intArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(6, intArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-893);
      longArray0[1] = (long) 'c';
      longArray0[2] = (long) (int)integerArray0[0];
      longArray0[3] = (long) (int)integerArray0[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) integerArray0[2], Integer.MAX_VALUE);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-893L), 99L, 316L, 316L}, longArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(4, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.shift((Object[]) integerArray0, (-2144835701), Integer.MAX_VALUE, (-2299));
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-78));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte) (-78), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      byte byte0 = (byte) (-71);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      boolean[] booleanArray0 = new boolean[0];
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1738));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Byte byte1 = new Byte((byte) (-71));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-71));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte2);
      assertNotNull(byte2);
      
      byte byte3 = (byte)8;
      Byte byte4 = new Byte((byte)8);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)8, (byte)byte4);
      assertNotNull(byte4);
      
      byte byte5 = (byte) (-1);
      Byte byte6 = new Byte((byte) (-1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte5));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte7 = new Byte((byte)8);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)8, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[0] = byte7;
      byteArray0[1] = byte1;
      byteArray0[2] = byte6;
      byteArray0[3] = byte6;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte2;
      byteArray0[7] = byte2;
      byteArray0[8] = byte2;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte2.equals((Object)byte7));
      assertFalse(byte2.equals((Object)byte6));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte5));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray1 = ArrayUtils.insert((-1532), booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = 1L;
      longArray0[5] = (long) byte3;
      longArray0[6] = (long) byte0;
      longArray0[7] = (-709L);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte5;
      intArray0[1] = (int) (byte)8;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (long) (byte)14;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-760L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 14L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 14L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-96), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2895), 1203);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      byte byte0 = (byte) (-102);
      byte byte1 = (byte)114;
      Byte byte2 = new Byte((byte)114);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)114);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte3);
      assertNotNull(byte3);
      
      byte byte4 = (byte)56;
      Byte byte5 = new Byte((byte)56);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)56, (byte)byte5);
      assertNotNull(byte5);
      
      byte byte6 = (byte)23;
      Byte byte7 = new Byte((byte)23);
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)23, (byte)byte7);
      assertNotNull(byte7);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int) 114, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) byte0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)0, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-23));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (byte) (-1), (-502));
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) byte1;
      objectArray0[7] = (Object) byte1;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-502);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-502);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = 544.48309899516;
      doubleArray0[6] = 1166.66;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (byte) (-23);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-502.0), (-1.0), (-502.0), (-1.0), (-1.0), 544.48309899516, 1166.66, (-1.0), (-23.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 75);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom(75);
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 0.0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-709);
      shortArray0[2] = (short)1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-2414), (short)9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2414, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)220);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = (-37);
      Integer integer0 = new Integer((-37));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-37));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-37), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-37));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-37), (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", int0);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-37), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals((-37), (int)integer4);
      assertNotNull(integer4);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (float) 2;
      ArrayUtils.shift(floatArray0, int0, (int) (short)220, int0);
      assertArrayEquals(new float[] {(-37.0F), (-37.0F), (-37.0F), (-37.0F), 2.0F, (-37.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      byte byte0 = (byte) (-23);
      Byte byte1 = new Byte((byte) (-23));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-23), (byte)byte1);
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) byte1;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte1;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) byte1;
      objectArray0[7] = (Object) byte1;
      objectArray0[8] = (Object) byte1;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-2895));
      assertEquals(0, int0);
      assertEquals(9, objectArray0.length);
      
      Byte byte2 = new Byte((byte)27);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      int int1 = (-127);
      String string0 = "";
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 4696.6, (-4010.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-432.871617211742);
      doubleArray1[1] = (-4010.0);
      doubleArray1[2] = (double) 18;
      doubleArray1[3] = 4696.6;
      doubleArray1[4] = (double) 18;
      doubleArray1[5] = (double) 18;
      doubleArray1[6] = (-432.871617211742);
      doubleArray1[7] = (-432.871617211742);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-432.871617211742), (-4010.0), 18.0, 4696.6, 18.0, 18.0, (-432.871617211742), (-432.871617211742)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray0, 18.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)2, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)97;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)97;
      byteArray1[5] = (Byte) (byte)97;
      byteArray1[6] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.insert((int) byteArray1[6], byteArray0, (byte[]) null);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.insert(1181, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short)2952);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2147483648L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((int) (short)2952, (byte[]) null, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)3407;
      shortArray1[1] = (short)3407;
      shortArray1[2] = (short)4;
      shortArray1[3] = (short)4;
      shortArray1[4] = (short)4;
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)0;
      shortArray1[7] = (short)4;
      shortArray1[8] = (short)4;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, (int) (short)3407);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3407, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)937);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3260;
      doubleArray0[1] = (double) (short)937;
      doubleArray0[2] = (double) (short)937;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short)937;
      ArrayUtils.shift(doubleArray0, (-1), 5, (-200));
      assertArrayEquals(new double[] {3260.0, 937.0, 937.0, (-1.0), 937.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(5);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1354);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1354, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[1]);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1354, (int)integer2);
      assertNotNull(integer2);
      assertEquals(6, integerArray0.length);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(5);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(5, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int int1 = 47;
      Integer integer4 = new Integer(47);
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(47, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(2);
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {5, 1354, 1354, 5, 47, 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'S';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'S', 'c', 'c', 'c'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) int1;
      longArray0[1] = (long) (int)integerArray0[2];
      longArray0[2] = (long) (short)937;
      longArray0[3] = (long) (int)integerArray0[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-3125L), (-893));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {47L, 1354L, 937L, 1354L}, longArray0);
      assertEquals(4, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-77));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3641;
      shortArray0[1] = (short)3641;
      shortArray0[3] = (short)3641;
      ArrayUtils.shift(shortArray0, (-712), (int) (short)0, (-712));
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)0, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2, (int) (short)2420);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short)3641;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short)3641, 3.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3641.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 3.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 3.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(14, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 3.0;
      objectArray0[1] = (Object) 3.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[1]);
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 556.271917198004;
      doubleArray0[1] = (double) (-487);
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {556.271917198004, (-487.0), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      ArrayUtils.swap(floatArray0, 1080, 0, 1080);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ArrayUtils.shift(byteArray0, (int) (byte)103, (int) (byte)103, 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)103;
      byteArray0[2] = (byte)103;
      float[] floatArray0 = new float[18];
      floatArray0[0] = (float) 389;
      floatArray0[1] = (float) (byte)103;
      floatArray0[2] = (float) (byte)103;
      floatArray0[3] = (float) (byte)103;
      floatArray0[4] = (float) (byte)103;
      floatArray0[5] = (float) (byte)13;
      floatArray0[6] = (float) (byte)103;
      floatArray0[7] = (float) (byte)103;
      floatArray0[8] = (float) (byte)103;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-511.83F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(19, floatArray1.length);
      assertEquals(18, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Float float0 = new Float(103.0F);
      assertEquals(103.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals((byte)103, object0);
      assertNotNull(object0);
      assertEquals(2, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object0, (-176));
      assertNotNull(bitSet0);
      assertEquals(2, objectArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      ArrayUtils.shift((Object[]) floatArray0, (-701), (-701), (-701));
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) mockRandom0;
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      objectArray0[3] = (Object) mockRandom0;
      ArrayUtils.shift(objectArray0, (-3332), (-3332), 703);
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3332);
      intArray0[1] = 17;
      intArray0[2] = (-3332);
      intArray0[3] = 703;
      intArray0[4] = 420;
      intArray0[5] = 17;
      intArray0[6] = 17;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(17, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 661.3F;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) (short) (-199);
      ArrayUtils.shift(floatArray0, 1, 4, (int) (short) (-199));
      assertArrayEquals(new float[] {661.3F, (-199.0F), 4.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = (-4934.939529185434);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2973.2746275599998);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 100.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-1.0);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 2738.85037500237);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.1, (-4934.939529185434), 1.0, 0.0, (-2973.2746275599998), 0.0, 100.0, 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2144983810);
      intArray0[1] = (-2144983810);
      intArray0[2] = (int) '';
      ArrayUtils.swap(intArray0, (-2144983810), 1429, (-2144983810));
      assertArrayEquals(new int[] {(-2144983810), (-2144983810), 127}, intArray0);
      assertEquals(3, intArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2144983810);
      objectArray0[1] = (Object) 127;
      objectArray0[2] = (Object) (-2144983810);
      objectArray0[3] = (Object) (-2144983810);
      objectArray0[4] = (Object) (-2144983810);
      objectArray0[5] = (Object) 127;
      objectArray0[6] = (Object) (-2144983810);
      objectArray0[7] = (Object) (-2144983810);
      objectArray0[8] = (Object) 127;
      ArrayUtils.reverse(objectArray0, 0, 5602);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'Z';
      charArray0[2] = '';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1210), 'q');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1210, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      int[] intArray0 = new int[17];
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)61;
      byteArray0[0] = (byte)61;
      int[] intArray1 = ArrayUtils.insert(Integer.MAX_VALUE, intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(17, intArray0.length);
      assertEquals(17, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, (-2895));
      assertNull(floatArray0);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)61;
      byteArray1[1] = (Byte) (byte)61;
      byteArray1[2] = (Byte) (byte)61;
      byteArray1[3] = (Byte) (byte)61;
      byteArray1[4] = (Byte) (byte)61;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 788);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 4);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 4;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3, floatArray0, floatArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-199);
      intArray0[1] = (int) (short) (-199);
      intArray0[2] = (int) (short) (-199);
      intArray0[3] = (int) (short) (-199);
      ArrayUtils.shift(intArray0, 1793, 2116360696, (-1013));
      assertArrayEquals(new int[] {(-199), (-199), (-199), (-199)}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 0.0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)86;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)86, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)21, (byte)86, (byte)21, (byte)86}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-199), (-199), (-199), (-199)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 0, (-199));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-199), (-199), (-199), (-199)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift((double[]) null, 0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '^';
      charArray0[2] = 'i';
      charArray0[3] = 'v';
      charArray0[4] = '/';
      charArray0[5] = '?';
      charArray0[6] = ' ';
      charArray0[7] = '9';
      charArray0[8] = 'e';
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'h', '^', 'i', 'v', '/', '?', ' ', '9', 'e'}, charArray0);
      assertArrayEquals(new int[] {(-199), (-199), (-199), (-199)}, intArray0);
      assertArrayEquals(new char[] {'h', '^', 'i', 'v', '/', '?', ' ', '9', 'e'}, charArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, charArray0.length);
      assertEquals(4, intArray0.length);
      assertEquals(9, charArray1.length);
      assertEquals(0, intArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      Integer integer0 = new Integer(115);
      assertEquals(115, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((double[]) null, (int) (short)0, (-1085), 7);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {115, 115}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)85);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)85, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-111));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-111), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)85);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)85, (byte)85, (byte) (-111)}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 2595L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {2595L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1085));
      assertEquals((-1), int0);
      
      ArrayUtils.shift((Object[]) byteArray0, (-4413), 117, 182);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 2052, (int) (short)3641, (int) (short)3641);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2267), (-2267));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'G';
      intArray0[1] = (-2267);
      intArray0[2] = (int) 'G';
      intArray0[3] = (-94);
      intArray0[4] = (-2267);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 3981, (-4871), (-94));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray2 = ArrayUtils.insert(1700, charArray1, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[1] = 'a';
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)32;
      byteArray1[1] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte) (-121));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      Byte[] byteArray4 = ArrayUtils.insert((int) byte0, byteArray1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray4.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte byte0 = (byte)46;
      Byte byte1 = Byte.valueOf((byte)46);
      assertEquals((byte)46, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, byte1);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Double[] doubleArray0 = new Double[3];
      try { 
        Double.valueOf("tK9 9eQ5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1613.13);
      doubleArray0[1] = (double) (byte)34;
      doubleArray0[2] = 251.028435;
      doubleArray0[3] = 458.448126;
      doubleArray0[4] = 1.0;
      doubleArray0[8] = 1.0;
      doubleArray0[6] = (double) (byte)34;
      doubleArray0[7] = 251.028435;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (byte)34, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[8];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)90;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = (int) (byte)90;
      intArray1[3] = (int) (byte)0;
      int[] intArray2 = ArrayUtils.removeAll(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {90, 0, 90, 0}, intArray1);
      assertArrayEquals(new int[] {90, 0, 90, 0}, intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 90;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 90;
      doubleArray0[4] = (double) 90;
      doubleArray0[5] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 1);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {0.0, 90.0, 0.0, 90.0, 90.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, Integer.MIN_VALUE, (int) (short)0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray1.length);
      assertEquals(7, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-32L);
      int int0 = ArrayUtils.indexOf(objectArray0, object0);
      assertEquals(0, int0);
      assertEquals(2, objectArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "EeW");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, Double.NaN, (-1054));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '`', (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, false}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      byte byte0 = (byte)124;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)124;
      longArray0[1] = (long) (byte)13;
      longArray0[2] = (long) (byte)13;
      longArray0[3] = (long) (byte)13;
      longArray0[4] = (long) (byte)124;
      longArray0[5] = (long) (byte)13;
      longArray0[6] = (long) (byte)13;
      boolean boolean0 = ArrayUtils.contains(longArray0, 13L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {124L, 13L, 13L, 13L, 124L, 13L, 13L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {13L, 13L, 13L, 124L, 13L, 13L, 124L}, longArray0);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray0);
      assertSame(charArray2, charArray1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte1 = new Byte((byte)124);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)124, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)124);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)124, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 57, (int) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) 867L);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'N');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-7));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-76);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)44, (int) (byte) (-114));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-114), (byte) (-85), (byte) (-76)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-76);
      doubleArray0[1] = (double) (byte)44;
      doubleArray0[2] = (double) (byte) (-85);
      doubleArray0[3] = (double) (byte)44;
      doubleArray0[4] = (double) (byte) (-76);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 44.0, (int) (byte) (-114), (-1854.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-76.0), 44.0, (-85.0), 44.0, (-76.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte) (-76);
      doubleArray1[1] = (double) (byte) (-114);
      doubleArray1[2] = (double) (byte)44;
      doubleArray1[3] = (double) (byte) (-85);
      doubleArray1[4] = (double) (byte)44;
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (byte) (-114));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-76.0), (-114.0), 44.0, (-85.0), 44.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-114);
      longArray0[1] = 0L;
      longArray0[2] = (long) (byte) (-114);
      longArray0[3] = (long) (byte) (-114);
      longArray0[4] = (long) (-1);
      longArray0[5] = 1L;
      longArray0[6] = (long) (byte)44;
      ArrayUtils.swap(longArray0, (int) (byte) (-76), (int) (byte) (-114), (int) (byte) (-85));
      assertArrayEquals(new long[] {(-114L), 0L, (-114L), (-114L), (-1L), 1L, 44L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shift(byteArray0, (int) (byte)0, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = ArrayUtils.get(objectArray0, 2);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      assertEquals(4, objectArray0.length);
      assertSame(object3, object2);
      assertNotSame(object3, object0);
      assertNotSame(object3, object1);
      
      objectArray0[3] = object3;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, object2, (-3));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(bitSet0);
      assertEquals(4, objectArray0.length);
      assertSame(object2, object3);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2, 3}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 48, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = (-1516.0);
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[7] = (double) (short) (-1516);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift(doubleArray0, (-1031));
      assertArrayEquals(new double[] {(-1516.0), 64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)20, (byte) (-1), (byte)20, (byte)1, (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)20, (byte) (-1), (byte)20, (byte)1}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)64;
      floatArray0[1] = (float) (byte)20;
      floatArray0[2] = (-1560.486F);
      floatArray0[3] = (float) (byte)20;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {64.0F, 20.0F, (-1560.486F), 20.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {64.0F, 20.0F, (-1560.486F), 20.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short) (-733));
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 93;
      doubleArray0[1] = (double) 93;
      doubleArray0[2] = (double) 93;
      doubleArray0[3] = (double) 93;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1152.0, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {93.0, 93.0, 93.0, 93.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 93.0, 1783.8);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {93.0, 93.0, 93.0, 93.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {93.0, 93.0, 93.0, 93.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      ArrayUtils.swap(charArray0, (-1), 1, 1592);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray0[3] = (double) 1;
      doubleArray1[2] = (-126.0);
      doubleArray1[3] = 100.0;
      doubleArray1[4] = (double) 93;
      doubleArray1[5] = (double) 93;
      doubleArray1[6] = (double) (-1);
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-126.0), 100.0, 93.0, 93.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(14, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      int int2 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1666);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(1666, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3525);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int2));
      assertEquals(3525, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int2);
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1666);
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(1666, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-712));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals((-712), (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 1666, 3525, 0, 1666, (-712)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      short[] shortArray0 = new short[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 3.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte byte0 = (byte) (-29);
      byte byte1 = (byte) (-55);
      Byte byte2 = new Byte((byte) (-55));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-55), (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte2;
      Byte byte3 = new Byte((byte) (-29));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-29), (byte)byte3);
      assertNotNull(byte3);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 7, byte3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-2145482264), (-2145482264), (-2145482264));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2420;
      shortArray0[1] = (short)3641;
      shortArray0[2] = (short)3641;
      shortArray0[3] = (short)3641;
      shortArray0[4] = (short)2420;
      shortArray0[5] = (short)3641;
      shortArray0[6] = (short)2420;
      shortArray0[8] = (short)2420;
      ArrayUtils.shift(shortArray0, 2060, (int) (short)2420, (int) (short)2420);
      assertArrayEquals(new short[] {(short)2420, (short)3641, (short)3641, (short)3641, (short)2420, (short)3641, (short)2420, (short)0, (short)2420}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (int) (short)2420, (-199));
      assertEquals((-1), int0);
      
      ArrayUtils.shift(floatArray0, 3641, 460, (-199));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.add(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(15, int0);
      assertEquals(16, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-156));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-156L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)127);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)127, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)10);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(21, floatArray1.length);
      assertEquals(21, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)127, object0);
      assertNotNull(object0);
      
      ArrayUtils.shift(booleanArray0, 11, 15, 1);
      assertEquals(16, booleanArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-156);
      shortArray0[1] = (short) (byte)10;
      shortArray0[2] = (short) (-156);
      shortArray0[3] = (short) (-156);
      shortArray0[4] = (short) (-156);
      shortArray0[5] = (short) (-846);
      shortArray0[6] = (short) (byte)10;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-156), (short)10, (short) (-156), (short) (-156), (short) (-156), (short) (-846), (short)10}, shortArray0);
      assertArrayEquals(new short[] {(short) (-156), (short)10, (short) (-156), (short) (-156), (short) (-156), (short) (-846), (short)10}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte3 = Byte.valueOf((byte)10);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)10, (byte)byte3);
      assertNotNull(byte3);
      
      Object object1 = ArrayUtils.get(objectArray0, 1, (Object) byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)byte0));
      assertTrue(object1.equals((Object)byte2));
      assertFalse(object1.equals((Object)byte1));
      assertEquals((byte)10, object1);
      assertNotNull(object1);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = object1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-80));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-80), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)10);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'c';
      floatArray0[1] = (float) (byte) (-80);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-1256);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (byte)10;
      floatArray0[6] = 371.994F;
      floatArray0[7] = 1.0F;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {99.0F, (-80.0F), 0.0F, (-1256.0F), (-1.0F), 10.0F, 371.994F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {99.0F, (-80.0F), 0.0F, (-1256.0F), (-1.0F), 10.0F, 371.994F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertFalse(object0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte2));
      assertTrue(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertEquals((byte)10, object0);
      assertNotNull(object0);
      
      ArrayUtils.shift(booleanArray0, (int) (short)0, (int) (byte)127, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte byte0 = (byte) (-111);
      Byte byte1 = new Byte((byte) (-111));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-111), (byte)byte1);
      assertNotNull(byte1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      ArrayUtils.shift(charArray0, (-1805), 812, (-194));
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte2 = new Byte((byte) (-111));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-111), (byte)byte2);
      assertNotNull(byte2);
      
      int int0 = 98;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(98, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 98, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(145);
      assertEquals(145, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(145, (int)integer1);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(145);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(145, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(145, (int)integer3);
      assertNotNull(integer3);
      assertEquals(4, integerArray0.length);
      
      integerArray0[3] = integer3;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1632));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {145, 145, 145, 145}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 145;
      doubleArray0[1] = (double) (int)integerArray0[2];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-186.5098883028), (int) integerArray0[2]);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {145.0, 145.0}, doubleArray0, 0.01);
      assertEquals(4, integerArray0.length);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'g';
      charArray0[2] = ':';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z', 'g', ':'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5857L;
      doubleArray0[1] = (double) 5857L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 114.0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1, (byte)35, (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)1, (byte)35, (byte)1}, byteArray0);
      assertEquals(3, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1425.31495768));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1425.31495768), 5857.0, 5857.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-38L), 0L, 1080L}, longArray0);
      assertEquals(3, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      ArrayUtils.swap(charArray0, (int) (short)0, (-201), (-259));
      assertArrayEquals(new char[] {'K', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-38L), 0L, 1080L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-38);
      doubleArray0[2] = (double) (-259);
      doubleArray0[3] = (double) 'C';
      doubleArray0[4] = (double) 1080;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (-201);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-38.0), (-259.0), 67.0, 1080.0, 0.0, (-201.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(14, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[1] = byte0;
      byte byte1 = (byte)27;
      Byte byte2 = new Byte((byte)27);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)27, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte(byte1);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)27, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int)  (-1), (-106));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 1, (-1723));
      assertNull(byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = 2249L;
      longArray0[2] = (long) (-156);
      longArray0[3] = (long) (byte) (-79);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-697L), 2052);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {118L, 2249L, (-156L), (-79L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (int) (byte) (-79));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -79, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte)4;
      Byte byte1 = Byte.valueOf((byte)4);
      assertEquals((byte)4, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)4, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 4, (int) 4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (long) 898;
      longArray0[1] = (long) 2;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1182L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 2L, 898L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {2L, 898L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      assertSame(charArray1, charArray0);
      
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)97);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2675), (-414));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      byte byte0 = (byte)113;
      Byte byte1 = new Byte((byte)113);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)113, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1996), (int) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'S');
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '>');
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)0, (short)2, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray1 = new Byte[7];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)97;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)97;
      byteArray1[5] = (Byte) (byte)97;
      byteArray1[6] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (int) byte0, 2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 850L, 106);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Float float0 = new Float((-1.0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-63.984798556));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-63.9848F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) float1;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) float2;
      objectArray0[3] = (Object) float1;
      objectArray0[4] = (Object) float2;
      ArrayUtils.shift(objectArray0, 2750);
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = (-637);
      intArray0[2] = 2;
      intArray0[3] = (-637);
      intArray0[4] = 2;
      intArray0[5] = 2368;
      intArray0[6] = 2750;
      intArray0[7] = (-1);
      intArray0[8] = 2;
      ArrayUtils.shift(intArray0, 2);
      assertArrayEquals(new int[] {(-1), 2, Integer.MAX_VALUE, (-637), 2, (-637), 2, 2368, 2750}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      Double double0 = new Double(997.7972573723422);
      assertEquals(997.7972573723422, (double)double0, 0.01);
      assertNotNull(double0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'W';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'+', 'W'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '+';
      intArray0[1] = (int) '+';
      intArray0[2] = (int) '+';
      intArray0[3] = (int) 'W';
      intArray0[4] = (int) 'W';
      intArray0[5] = (int) 'W';
      intArray0[6] = (int) 'W';
      intArray0[7] = (int) '+';
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'W';
      intArray1[1] = (int) 'W';
      intArray1[2] = (int) '+';
      intArray1[3] = 1442;
      intArray1[4] = (int) '+';
      intArray1[5] = (int) 'W';
      intArray1[6] = (int) '+';
      intArray1[7] = (int) 'W';
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {43, 43, 43, 87, 87, 87, 87, 43}, intArray0);
      assertArrayEquals(new int[] {43}, intArray2);
      assertArrayEquals(new int[] {87, 87, 43, 1442, 43, 87, 43, 87}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(1, intArray2.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)116;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)78);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-19), (byte) (-74), (byte)78, (byte) (-128), (byte)116}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-19), (byte) (-74), (byte) (-128), (byte)116}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 989;
      intArray0[1] = 989;
      intArray0[2] = 989;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 989;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {989, 989, 989}, intArray0);
      assertArrayEquals(new int[] {989}, intArray1);
      assertArrayEquals(new int[] {989, 989}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3641;
      shortArray0[1] = (short)3641;
      shortArray0[2] = (short)2420;
      shortArray0[3] = (short)3641;
      ArrayUtils.shift(shortArray0, (-712), (int) (short)2420, (-712));
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 2, (int) (short)2420);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-2856), 5564, 4);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      floatArray0[4] = (-885.0F);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)919;
      shortArray0[1] = (short)919;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)330);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)919, (short)919}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)919, (short)919}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)919;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (short)330;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-885.0F);
      doubleArray0[5] = (double) (short)919;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)919);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertArrayEquals(new double[] {919.0, (-1.0), 330.0, (-1.0), (-885.0), 919.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 706.46155F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[16];
      intArray0[1] = 0;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(16, intArray0.length);
      
      ArrayUtils.swap((byte[]) null, 2278, 76, 0);
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(181);
      assertEquals(181, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-409));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-409), (int)integer1);
      assertNotNull(integer1);
      
      ArrayUtils.shift(floatArray0, 0, 2278, 59);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      MockRandom mockRandom0 = new MockRandom(2147483647L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2147483647L;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, 65);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Character[] characterArray0 = new Character[6];
      characterArray0[0] = (Character) 'U';
      characterArray0[1] = (Character) 'U';
      characterArray0[2] = (Character) 'h';
      characterArray0[3] = (Character) 'h';
      Character character0 = new Character((char) characterArray0[0]);
      assertEquals('U', (char)character0);
      assertNotNull(character0);
      assertEquals(6, characterArray0.length);
      
      characterArray0[4] = character0;
      Character character1 = new Character('n');
      assertFalse(character1.equals((Object)character0));
      assertEquals('n', (char)character1);
      assertNotNull(character1);
      
      characterArray0[5] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'U', 'U', 'h', 'h', 'U', 'n'}, charArray1);
      assertEquals(6, charArray1.length);
      assertEquals(6, characterArray0.length);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 2147483647L, (-419.8622));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2145232616;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 26);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2145232616L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2981);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('=');
      assertEquals('=', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('0');
      assertFalse(character1.equals((Object)character0));
      assertEquals('0', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'=', '0'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((double[]) null, (-1890.6921), (double) (short) (-1256));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, characterArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((byte)11);
      assertEquals((short)11, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      String string0 = "";
      try { 
        Short.valueOf("", 1071);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1071 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      Character[] characterArray0 = new Character[5];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-26);
      ArrayUtils.shift(byteArray0, 2, (int) (byte) (-26), 508);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-26), (byte) (-26), (byte) (-26)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-26));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-26), (byte) (-26), (byte) (-26)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 387L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      long[] longArray0 = new long[11];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-620);
      shortArray0[2] = (short)99;
      shortArray0[3] = (short) (-20822);
      shortArray0[4] = (short)749;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-20822), (int) (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-620), (short)99, (short) (-20822), (short)749}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-26);
      floatArray0[1] = (-1649.8264F);
      floatArray0[2] = (-1649.8264F);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {(-1649.8264F), (-1649.8264F), (-26.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1649.8264F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1649.8264F), (-1649.8264F), (-26.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.swap(booleanArray0, (-55), (int) (byte) (-26), (-4871));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 36;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 'j';
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 0L);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 36;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) 'j';
      floatArray0[4] = (float) 36;
      floatArray0[5] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 36, 6);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {36.0F, 0.0F, 0.0F, 106.0F, 36.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 0.0F);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 36.0, 0.0, 106.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {36.0, 0.0, 106.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 706.46155F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 706.46155F;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 0, 14, (-2828.2));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 706.4615478515625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      
      int[] intArray2 = ArrayUtils.addAll(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      char char0 = 'L';
      Character character0 = Character.valueOf('L');
      assertEquals('L', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[7];
      characterArray0[0] = character0;
      Character character1 = new Character('r');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      characterArray0[6] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'L', 'r', 'L', 'L', 'L', 'L', 'L'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      int[] intArray3 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[2] = (short)180;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 335.7;
      doubleArray0[1] = (double) (short)4096;
      doubleArray0[2] = (double) (short) (-199);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (short)180;
      doubleArray0[5] = (double) (short) (-199);
      doubleArray0[6] = (double) (short)180;
      doubleArray0[7] = (double) (short)4096;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3936, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {335.7, 4096.0, (-199.0), 0.0, 180.0, (-199.0), 180.0, 4096.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(byteArray2, (int) (short)180, (int) (short)180, 1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      Double double0 = new Double(997.7972573723422);
      assertEquals(997.7972573723422, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-637);
      doubleArray0[1] = 997.7972573723422;
      doubleArray0[2] = (double) (-637);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-637.0), (int) (byte) (-117));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-637.0), 997.7972573723422, (-637.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Float float0 = new Float(997.7972573723422);
      assertEquals(997.79724F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-4762.71551692802));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-4762.7153F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-2826.30445));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2826.3044F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      ArrayUtils.shift((Object[]) null, 0);
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((int[]) null, 49);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.0);
      doubleArray0[3] = (-4301.0);
      doubleArray0[3] = (-1807.29);
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)1;
      Byte byte2 = new Byte((byte)1);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)1);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)1, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte4 = new Byte((byte)1);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)1, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[0] = byte4;
      byteArray0[1] = byte2;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) byte1, (Byte) byte1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-207.0), 0.0, 0.0, (-1807.29), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)41;
      floatArray0[2] = (float) 41;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {41.0F, 0.0F, 41.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = ')';
      charArray0[2] = 'N';
      charArray0[3] = 'A';
      charArray0[4] = 'f';
      charArray0[5] = 'M';
      charArray0[6] = '}';
      char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'5', ')', 'N', 'A', 'f', 'M', '}'}, charArray1);
      assertArrayEquals(new char[] {'5', ')', 'N', 'A', 'f', 'M', '}'}, charArray0);
      assertEquals(7, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-38);
      ArrayUtils.swap(intArray1, 1080, 9);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-38)}, intArray1);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)49, (byte)49, (byte)49}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) (byte)13;
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'J';
      charArray0[4] = 'O';
      charArray0[5] = '!';
      charArray0[6] = 'H';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'!', 'e', 'e', 'J', 'O', '!', 'H'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      ArrayUtils.swap(longArray0, (int) (short)0, (int) (short)0, 1);
      assertArrayEquals(new long[] {1080L, (-38L), (-38L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      try { 
        Short.valueOf("", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.indexOf((double[]) null, 3621.0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3621.0;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3621.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3621.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)86, 879);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '~';
      charArray0[2] = 'a';
      charArray0[3] = '{';
      charArray0[4] = '{';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'{', '~', 'a', '{', '{', 'k', 'k'}, charArray0);
      assertEquals(7, charArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) '~';
      objectArray0[2] = (Object) 'k';
      objectArray0[3] = (Object) 'k';
      objectArray0[4] = (Object) 0.0;
      objectArray0[5] = (Object) '{';
      objectArray0[6] = (Object) 'k';
      objectArray0[7] = (Object) 'k';
      ArrayUtils.reverse(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2593;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 2593.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 2593.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 251.72594537221;
      doubleArray0[1] = 2499.85533;
      doubleArray0[2] = 2499.85533;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 2499.85533;
      doubleArray0[5] = (double) 0.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1106.1), (-2146502164), 1144.50457294);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {251.72594537221, 2499.85533, 2499.85533, 0.0, 2499.85533, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)99;
      Byte byte1 = new Byte((byte)99);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)99, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)99}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(byteArray1, (int) (byte)99, 89, (int) byte0);
      assertArrayEquals(new byte[] {(byte)99}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 2499.85533;
      doubleArray1[1] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 403.0;
      doubleArray0[2] = (double) 1788.0F;
      doubleArray0[3] = 403.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2499.85533, 0, 251.72594537221);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 403.0, 1788.0, 403.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap((byte[]) null, (-1), 88, 3260);
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 1788.0;
      doubleArray1[2] = (Double) 1788.0;
      doubleArray1[3] = (Double) 403.0;
      doubleArray1[4] = (Double) 0.0;
      doubleArray1[5] = (Double) 403.0;
      doubleArray1[6] = (Double) 1788.0;
      doubleArray1[7] = (Double) 403.0;
      doubleArray1[8] = (Double) 0.0;
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertSame(doubleArray2, doubleArray1);
      assertSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[1];
      intArray0[0] = (-2546);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-2546));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2546)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[13];
      floatArray0[0] = (float) (byte) (-17);
      floatArray0[1] = (-1649.8264F);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(13, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-17));
      assertEquals((byte) (-17), (byte)byte0);
      assertNotNull(byte0);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (-1406), (int) (byte)0, 10);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)29);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)96;
      ArrayUtils.shift(byteArray0, (-235), (int) (byte)123, 4051);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-40);
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte)123);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)17;
      objectArray1[1] = (Object) true;
      objectArray1[2] = (Object) byte0;
      objectArray1[3] = (Object) (byte)123;
      objectArray1[5] = (Object) byte0;
      objectArray1[6] = (Object) (byte)123;
      ArrayUtils.shift(objectArray1, (int) (byte)17, 4051, (-665));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte byte0 = (byte)78;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)78;
      byteArray0[1] = (Byte) (byte)78;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 102);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) (byte)78;
      longArray0[2] = (long) 102;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      ArrayUtils.shift(longArray0, 102);
      assertArrayEquals(new long[] {78L, 78L, 102L, 78L, 78L, 78L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
      assertEquals(17, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 78L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {78L, 78L, 78L, 102L, 78L, 78L, 78L}, longArray1);
      assertArrayEquals(new long[] {78L, 78L, 102L, 78L, 78L, 78L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)78;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)78;
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)7, (byte)78, (byte)78, (byte)78}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      boolean boolean2 = ArrayUtils.isNotEmpty(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2249L;
      longArray0[2] = (-4L);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(2249L);
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1649.8264F);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {(-1649.8264F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2249L;
      floatArray1[1] = (float) (-4L);
      int int0 = ArrayUtils.indexOf(floatArray1, (-1649.8264F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2249.0F, (-4.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 468, (-1), (-1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 3260);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, 3260, 3260, (-1604));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      Float float0 = new Float((-2503.53F));
      assertEquals((-2503.53F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2400.014479793603, 4);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object0 = null;
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      MockRandom mockRandom0 = new MockRandom((-637L));
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LongStream longStream0 = mockRandom1.longs(2722L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom0.setSeed(903L);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      IntStream intStream0 = mockRandom0.ints();
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotNull(intStream0);
      assertNotSame(mockRandom0, mockRandom1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-4038L);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertArrayEquals(new float[] {(-4038.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotSame(mockRandom0, mockRandom1);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-4038.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-779), (-1738), 14);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'g';
      charArray0[2] = 't';
      charArray0[3] = 'G';
      charArray0[4] = '(';
      charArray0[5] = 't';
      charArray0[6] = 'n';
      charArray0[7] = 'O';
      charArray0[8] = 'f';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'O');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {':', 'g', 't', 'G', '(', 't', 'n', 'O', 'f'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ArrayUtils.shift(byteArray0, 1, (int) (byte) (-103), 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-103)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte) (-103);
      longArray0[2] = (long) (byte) (-103);
      longArray0[3] = (long) (byte) (-103);
      ArrayUtils.swap(longArray0, 1176, 1685);
      assertArrayEquals(new long[] {1L, (-103L), (-103L), (-103L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short short0 = new Short((short)45);
      assertEquals((short)45, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-103));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-103), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (byte) (-103));
      assertTrue(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-103), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-136));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-136), (short)short3);
      assertNotNull(short3);
      
      MockRandom mockRandom0 = new MockRandom(5L);
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-3385.5593F));
      assertEquals((-3385.5593F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 1L);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-103L));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-103.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (short)45);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(45.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-3385.5593F), 1.0F, (-103.0F), 45.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (short) (-136), 307, (int) (byte) (-103));
      assertArrayEquals(new long[] {(-103L), 1L, (-103L), (-103L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'P';
      charArray0[2] = 'Z';
      charArray0[3] = 'I';
      charArray0[4] = '+';
      charArray0[5] = 'x';
      charArray0[6] = '%';
      ArrayUtils.reverse(charArray0, (int) (byte) (-103), 389);
      assertArrayEquals(new char[] {'%', 'x', '+', 'I', 'Z', 'P', 'O'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) integer0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short)3064);
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '*');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '4'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-885.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (-885.0F);
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(4, int0);
      assertEquals(5, objectArray0.length);
      
      ArrayUtils.swap(floatArray0, (int) (short)2, (-365), 98);
      assertEquals(20, floatArray0.length);
      
      ArrayUtils.swap(objectArray0, (-517), (-517), 1072);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1072;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1072L}, longArray0);
      assertArrayEquals(new long[] {1072L, 1072L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-365);
      doubleArray0[2] = (double) (-365);
      doubleArray0[3] = (double) (-365);
      doubleArray0[4] = (double) 98;
      doubleArray0[5] = (double) (-885.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 4, (double) 1072L);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-365.0), (-365.0), (-365.0), 98.0, (-885.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-365), (-2499));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {1072L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray0, longArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 3367L;
      longArray0[2] = 2249L;
      longArray0[3] = (-1739L);
      longArray0[4] = 4306L;
      longArray0[5] = 1689L;
      longArray0[6] = 1046L;
      longArray0[7] = (-6L);
      longArray0[8] = 2138L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 3367L, 2249L, (-1739L), 4306L, 1689L, 1046L, (-6L), 2138L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 3367L, 2249L, (-1739L), 4306L, 1689L, 1046L, (-6L), 2138L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Random.setNextRandom(2);
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 5084L;
      longArray2[1] = 2138L;
      longArray2[2] = (-6L);
      longArray2[3] = (-1L);
      long[] longArray3 = ArrayUtils.removeElements(longArray0, longArray2);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-1L), 3367L, 2249L, (-1739L), 4306L, 1689L, 1046L, (-6L), 2138L}, longArray0);
      assertArrayEquals(new long[] {3367L, 2249L, (-1739L), 4306L, 1689L, 1046L}, longArray3);
      assertArrayEquals(new long[] {5084L, 2138L, (-6L), (-1L)}, longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(6, longArray3.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      long[] longArray4 = ArrayUtils.addFirst(longArray2, (-1739L));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray2.equals((Object)longArray3));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {(-1739L), 5084L, 2138L, (-6L), (-1L)}, longArray4);
      assertArrayEquals(new long[] {5084L, 2138L, (-6L), (-1L)}, longArray2);
      assertEquals(5, longArray4.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray2);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray4);
      assertNotSame(longArray2, longArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '1';
      charArray0[2] = 'R';
      charArray0[3] = 'H';
      charArray0[4] = 'R';
      charArray0[5] = '0';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'H');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', '1', 'R', 'H', 'R', '0'}, charArray0);
      assertArrayEquals(new char[] {'M', '1', 'R', 'R', '0'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      long[] longArray0 = new long[7];
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[1] = 48L;
      longArray1[2] = 48L;
      long[] longArray2 = ArrayUtils.removeElements(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 48L, 48L}, longArray1);
      assertArrayEquals(new long[] {48L, 48L}, longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = (-760);
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2, (-760)}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.swap(intArray0, 2, (-760));
      assertArrayEquals(new int[] {2, (-760)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2082;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-760);
      floatArray0[3] = (-885.0F);
      floatArray0[4] = (-885.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1341.113F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2082.0F, (-1.0F), (-760.0F), (-885.0F), (-885.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2082.0F, (-1.0F), (-760.0F), (-885.0F), (-885.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'F');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray1);
      assertArrayEquals(new char[] {'4', '4', '4'}, charArray0);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2094), (-760));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      long[] longArray0 = new long[18];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-782);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-782);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (int) (byte)32, 1385.401);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {(-782.0), 0.0, 0.0, (-782.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertEquals(2, byteArray2.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (byte)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-102));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short) (-102)}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.402F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1788.402F;
      doubleArray0[2] = (double) 0;
      doubleArray0[5] = (double) 1788.402F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 403.0, 0, (double) 1788.402F);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 1788.4019775390625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[16];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(16, intArray0.length);
      
      ArrayUtils.swap((byte[]) null, 2278, 76, 0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '';
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)101;
      floatArray0[1] = (float) '';
      floatArray0[2] = (-1.0F);
      floatArray0[4] = (float) '';
      floatArray0[5] = (float) (byte)101;
      floatArray0[6] = (float) 2143101028;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1730), (-2035));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {101.0F, 127.0F, (-1.0F), 0.0F, 127.0F, 101.0F, 2.14310106E9F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2143101028;
      longArray0[1] = 4300L;
      longArray0[2] = (long) 26;
      longArray0[3] = (-1429L);
      longArray0[4] = (long) (-491);
      ArrayUtils.shift(longArray0, (-1), 1708, 93);
      assertArrayEquals(new long[] {26L, (-1429L), (-491L), 2143101028L, 4300L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {101.0F, 127.0F, (-1.0F), 0.0F, 127.0F, 101.0F, 2.14310106E9F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-136));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 0L;
      ArrayUtils.swap(floatArray0, 1, 0, 0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object[] objectArray0 = new Object[1];
      ArrayUtils.swap(objectArray0, 0, (-517), 1072);
      assertEquals(1, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0L, (double) 0L);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, 1681.456655191493, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 774;
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)53, (byte)41, (byte) (-58), (byte) (-120), (byte)39, (byte)67, (byte)56, (byte)2, (byte)0}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {114L, 114L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new long[] {114L, 114L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)32, (int) (byte)0, (-19));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray0[3] = true;
      booleanArray2[5] = (Boolean) true;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) true;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      ArrayUtils.swap(longArray0, (int) (byte)0, (-782), (int) (byte)32);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short[] shortArray0 = new Short[9];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray1, (short) (byte)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray1.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '=');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)115);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Object object1 = ArrayUtils.toPrimitive((Object) byte0);
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertEquals((byte)115, object1);
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      ArrayUtils.shift(longArray0, (-3047));
      assertArrayEquals(new long[] {115L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte0;
      intArray0[1] = (-802);
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {115, (-802)}, intArray0);
      assertEquals(2, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 115L}, longArray1);
      assertArrayEquals(new long[] {115L}, longArray0);
      assertEquals(2, longArray1.length);
      assertEquals(1, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)115, (-802));
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-39), (byte)115, (byte)115, (byte)115}, byteArray1);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 252.6114296097147;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 252.6114296097147, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {252.6114296097147, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)94;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)94;
      shortArray0[1] = (short) (byte)94;
      shortArray0[2] = (short) (byte)94;
      ArrayUtils.shift(shortArray0, 512, (-1), (int) (byte)94);
      assertArrayEquals(new short[] {(short)94, (short)94, (short)94}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)94;
      shortArray1[1] = (short) (byte)94;
      shortArray1[2] = (short) (byte)94;
      shortArray1[3] = (short) byte0;
      ArrayUtils.swap(shortArray1, 1, (-491), 2146283535);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)94, (short)94, (short)94, (short)94}, shortArray1);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)94;
      longArray0[2] = (long) 512;
      longArray0[3] = (long) byte0;
      longArray0[4] = 867L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 94L, 512L, 94L, 867L}, longArray0);
      assertArrayEquals(new long[] {(-1L), 94L, 512L, 94L, 867L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'Z', 115);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) 115;
      longArray0[2] = (long) 'Z';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {90L, 115L, 90L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((short[]) null, (short)4054, (-1));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {90L, 115L, 90L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {90L, 115L, 90L}, longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(3, longArray2.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bitSet1;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)120, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)120);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)120, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)12);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)12, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)120);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)120, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)120);
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertEquals((byte)120, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = ArrayUtils.get(byteArray0, 1);
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte1));
      assertEquals((byte)120, (byte)byte7);
      assertNotNull(byte7);
      assertEquals(6, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte7, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 867L;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean1 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 867.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = 867L;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1L), (-1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {0L, (-1L), 867L, (-1L), (-1L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{1, 3, 4}", bitSet1.toString());
      assertFalse(bitSet1.isEmpty());
      assertEquals(3, bitSet1.cardinality());
      assertEquals(5, bitSet1.length());
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-1.0), (-1.0), 0.0, 867.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3865.3638F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 2987L;
      longArray0[1] = (-286L);
      longArray0[2] = (-840L);
      longArray0[3] = 1436L;
      longArray0[4] = 745L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 1436L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2987L, (-286L), (-840L), 1436L, 745L}, longArray0);
      assertArrayEquals(new long[] {1436L, 2987L, (-286L), (-840L), 1436L, 745L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertSame(floatArray1, floatArray2);
      assertSame(floatArray2, floatArray1);
      
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 2987L;
      longArray2[1] = 1436L;
      longArray2[2] = 1436L;
      longArray2[3] = 1436L;
      ArrayUtils.shift(longArray2, 1, 1, 1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {2987L, 1436L, 1436L, 1436L}, longArray2);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      short[] shortArray0 = new short[3];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)82;
      ArrayUtils.shift(byteArray0, (int) (byte)90);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)58, (byte)0, (byte)23, (byte)70, (byte)81, (byte)90, (byte)82}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Short short0 = new Short((short) (-491));
      assertEquals((short) (-491), (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.swap(intArray0, (int) (short) (-491), (int) (byte)23);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte)58, (byte)0, (byte)23, (byte)70, (byte)81, (byte)90, (byte)82}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 7);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long[] longArray1 = new Long[7];
      longArray1[0] = (Long) 796L;
      longArray1[1] = (Long) 796L;
      longArray1[2] = (Long) 796L;
      longArray1[3] = (Long) 796L;
      longArray1[4] = (Long) 796L;
      Long long0 = new Long(7);
      assertEquals(7L, (long)long0);
      assertNotNull(long0);
      
      longArray1[5] = long0;
      ArrayUtils.swap((char[]) null, 7, 2146283265);
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-90);
      Byte byte2 = new Byte((byte) (-90));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-90), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-98));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-98), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-98));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-98), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-90));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte) (-90), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) byte1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert(41, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Short short0 = new Short((short) (-739));
      assertEquals((short) (-739), (short)short0);
      assertNotNull(short0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      ArrayUtils.swap(intArray1, (int) (short) (-491), 41);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2}, intArray1);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = ':';
      charArray0[2] = '^';
      charArray0[3] = '2';
      charArray0[4] = ':';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'T');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', ':', '^', '2', ':'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray3 = ArrayUtils.add(byteArray2, byte0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) ':';
      longArray0[1] = (long) ':';
      longArray0[2] = (long) 'T';
      longArray0[3] = (long) 41;
      ArrayUtils.shift(longArray0, (int) (short) (-739), 145, (int) (byte)41);
      assertArrayEquals(new long[] {41L, 58L, 58L, 84L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short) (-2), (int) (short)6, (int) (short)6);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3641;
      shortArray0[1] = (short)3641;
      shortArray0[2] = (short)2420;
      shortArray0[3] = (short)3641;
      ArrayUtils.shift(shortArray0, (-712), (int) (short)2420, (-712));
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, 0, (-712), (int) (short)3641);
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)3641, (short)3641, (short)2420, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Character[] characterArray0 = new Character[9];
      Character character0 = new Character('F');
      assertEquals('F', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character((char) character0);
      assertTrue(character1.equals((Object)character0));
      assertEquals('F', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character('1');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('1', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('F');
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('F', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = new Character((char) character0);
      assertFalse(character4.equals((Object)character2));
      assertTrue(character4.equals((Object)character0));
      assertTrue(character4.equals((Object)character3));
      assertTrue(character4.equals((Object)character1));
      assertTrue(character0.equals((Object)character1));
      assertFalse(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character3));
      assertEquals('F', (char)character4);
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character((char) character2);
      assertFalse(character2.equals((Object)character3));
      assertFalse(character2.equals((Object)character4));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character3));
      assertFalse(character5.equals((Object)character4));
      assertTrue(character5.equals((Object)character2));
      assertEquals('1', (char)character5);
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character character6 = new Character('O');
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character5));
      assertEquals('O', (char)character6);
      assertNotNull(character6);
      
      characterArray0[6] = character6;
      Character character7 = new Character('J');
      assertFalse(character7.equals((Object)character0));
      assertFalse(character7.equals((Object)character6));
      assertFalse(character7.equals((Object)character4));
      assertFalse(character7.equals((Object)character2));
      assertFalse(character7.equals((Object)character3));
      assertFalse(character7.equals((Object)character1));
      assertFalse(character7.equals((Object)character5));
      assertEquals('J', (char)character7);
      assertNotNull(character7);
      
      characterArray0[7] = character7;
      Character character8 = Character.valueOf('.');
      assertFalse(character8.equals((Object)character6));
      assertFalse(character8.equals((Object)character1));
      assertFalse(character8.equals((Object)character0));
      assertFalse(character8.equals((Object)character7));
      assertFalse(character8.equals((Object)character3));
      assertFalse(character8.equals((Object)character4));
      assertFalse(character8.equals((Object)character2));
      assertFalse(character8.equals((Object)character5));
      assertEquals('.', (char)character8);
      assertNotNull(character8);
      
      characterArray0[8] = character8;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character6);
      assertFalse(character6.equals((Object)character1));
      assertFalse(character6.equals((Object)character0));
      assertFalse(character6.equals((Object)character3));
      assertFalse(character6.equals((Object)character7));
      assertFalse(character6.equals((Object)character4));
      assertFalse(character6.equals((Object)character2));
      assertFalse(character6.equals((Object)character8));
      assertFalse(character6.equals((Object)character5));
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'F', 'F', '1', 'F', 'F', '1', 'O', 'J', '.'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-2), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      Byte byte2 = new Byte((byte) (-87));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-87), (byte)byte2);
      assertNotNull(byte2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-87);
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)2;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte) (-87);
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-87), (byte)2, (byte) (-2), (byte) (-87)}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte)2, (int) (byte)2, (int) (byte) (-87));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)163;
      shortArray0[1] = (short)163;
      shortArray0[2] = (short)163;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (short)163;
      objectArray0[1] = (Object) (short)163;
      objectArray0[2] = (Object) (short)163;
      objectArray0[3] = (Object) (short)163;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "J\"jOQbH");
      assertNotNull(stringArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 394.8;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2744.7441240939497, 0, 2744.7441240939497);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0), 394.8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3956), (-915));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)163, (short)163, (short)163, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)163, (short)163, (short)163, (short)0, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1), 1.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-1.0), 394.8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1), 3355, 56);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, 9, 76, 1636);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = new short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1);
      shortArray1[1] = (short) (-1);
      shortArray1[2] = (short) (-1);
      shortArray1[3] = (short) (-1);
      shortArray1[4] = (short) (-2004);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-2004)}, shortArray1);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1);
      longArray0[1] = (long) 76;
      longArray0[2] = (long) (short) (-1);
      longArray0[3] = (long) 1636;
      longArray0[4] = (long) (short) (-2004);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1280L, (-188));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1L), 76L, (-1L), 1636L, (-2004L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-106));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)52;
      Byte byte2 = new Byte((byte)52);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)52, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)79;
      Byte byte4 = new Byte((byte)79);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)79, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-809L));
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-98));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-98)}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) (byte) (-98), (int) byte1);
      assertFalse(byte1 == byte3);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)79;
      intArray0[1] = (-320);
      intArray0[2] = (int) (byte)79;
      intArray0[3] = (int) (byte)79;
      intArray0[4] = (int) byte3;
      intArray0[5] = (int) (byte)52;
      intArray0[6] = 0;
      intArray0[7] = 1652;
      intArray0[8] = (int) (byte)79;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1652, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)32, (int) (byte)0, (-19));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray0[3] = true;
      booleanArray2[5] = (Boolean) true;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) true;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      ArrayUtils.swap(longArray0, (int) (byte)0, (-782), (int) (byte)32);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short[] shortArray0 = new Short[9];
      try { 
        Short.valueOf("invokeSuper", 936);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 936 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 27.39F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {27.39F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf((long[]) null, 0L, 1533);
      assertEquals((-1), int0);
      
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8192);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)8192, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short)8192);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)8192, (short)short2);
      assertNotNull(short2);
      
      long[] longArray0 = ArrayUtils.insert(Integer.MAX_VALUE, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      ArrayUtils.shift(byteArray0, 1952, (-200), (-1737));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-61), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-61), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)81);
      assertEquals((byte)81, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)81, object0);
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, (int) (byte)81);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)81, (int) (byte) (-61), (-1176));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-1);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-484));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-484), (short) (-1), (short) (-1), (short) (-1)}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray1, true, (int) (short) (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int1 == int0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short)19;
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte)97;
      shortArray0[4] = (short) (byte)97;
      shortArray0[5] = (short)19;
      shortArray0[6] = (short) (byte) (-1);
      shortArray0[7] = (short) (byte)97;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)19);
      assertEquals(5, int0);
      assertArrayEquals(new short[] {(short) (-1), (short)19, (short)97, (short)97, (short)97, (short)19, (short) (-1), (short)97}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short) (-1), (short)19, (short)97, (short)97, (short)97, (short)19, (short) (-1), (short)97}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.swap((int[]) null, Integer.MAX_VALUE, 2244, (-1488));
      ArrayUtils.reverse((Object[]) null, (int) (short) (-1), (-904));
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      short[] shortArray0 = new short[2];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 3.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 3.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 3.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2697L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-487);
      longArray0[4] = 2342L;
      longArray0[5] = (long) (-487);
      longArray0[6] = (long) (-487);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-487), 118L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -487, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      Double double0 = new Double(252.6114296097147);
      assertEquals(252.6114296097147, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.1, (double)double1, 0.01);
      assertNotNull(double1);
      
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 0, (-2183));
      assertNull(intArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2146334861, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      intArray0[2] = (int) (short)0;
      ArrayUtils.swap(intArray0, 2, 0);
      assertArrayEquals(new int[] {0, 2, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[1] = (Integer) 0;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertArrayEquals(new int[] {0, 2, 0}, intArray0);
      assertEquals(5, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      byte byte0 = (byte)66;
      Byte byte1 = new Byte((byte)66);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)66, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean0);
      
      Byte byte2 = new Byte((byte)66);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)66, (byte)byte2);
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int) 66, byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 66, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)94;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      int int2 = ArrayUtils.lastIndexOf((int[]) null, (-707), (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) byte1;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      int int0 = (-1);
      ArrayUtils.shift((boolean[]) null, (-1), (-1), (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (int) (byte)1, (-2146366388), (-38));
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1167.0F);
      floatArray0[3] = (-2497.1282F);
      floatArray0[4] = (-1813.0F);
      floatArray0[5] = (-5207.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-800.60187F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, 4, (-1.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1167.0F), (-2497.1282F), (-1813.0F), (-5207.0F), (-1.0F), (-800.60187F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1167.0F), (-2497.1282F), (-1.0F), (-1813.0F), (-5207.0F), (-1.0F), (-800.60187F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = (-1630);
      intArray0[6] = 4;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1630, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 317L;
      longArray0[1] = (-706L);
      longArray0[2] = 6L;
      ArrayUtils.swap(longArray0, 7, 0, 0);
      assertArrayEquals(new long[] {317L, (-706L), 6L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 7);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 317L;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) (-706L);
      objectArray0[4] = (Object) true;
      objectArray0[5] = (Object) false;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, objectArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '{', 99);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '317', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 774;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 774;
      doubleArray0[1] = (double) 774;
      doubleArray0[2] = 1.0;
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.valueOf(false);
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean((String) null);
      assertFalse(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean3));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean3));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = new Boolean(true);
      assertFalse(boolean6.equals((Object)boolean3));
      assertFalse(boolean6.equals((Object)boolean1));
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = new Boolean(true);
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean3));
      assertTrue(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, true, true}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-33), 774);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[9];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-2340));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-89);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146524649), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146524649, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-2125962148);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 489.0, (-2125962148), (double) (-2125962148));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int2 = (-753);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-753), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -753, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      boolean[] booleanArray2 = ArrayUtils.remove(booleanArray1, 0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = 0.0F;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-674));
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = 2147483647L;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (short)3064;
      longArray0[5] = (long) (short)3064;
      ArrayUtils.shift(longArray0, (-674));
      assertArrayEquals(new long[] {2147483647L, 0L, 3064L, 3064L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, 3064L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2147483647L, 0L, 3064L, 3064L, 0L, 0L, 3064L}, longArray1);
      assertArrayEquals(new long[] {2147483647L, 0L, 3064L, 3064L, 0L, 0L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-674));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert(0, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(40, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = '\\';
      charArray0[2] = '.';
      charArray0[3] = '@';
      charArray0[4] = 'M';
      charArray0[5] = '}';
      charArray0[6] = ':';
      charArray0[7] = '*';
      charArray0[8] = 'N';
      boolean boolean1 = ArrayUtils.contains(charArray0, '@');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'X', '\\', '.', '@', 'M', '}', ':', '*', 'N'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-3300L);
      longArray0[1] = (-1401L);
      longArray0[2] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3300L), (-1401L), 0L}, longArray0);
      assertArrayEquals(new long[] {(-3300L), (-1401L), 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)4822;
      shortArray0[1] = (short)358;
      shortArray0[2] = (short)1369;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)4822, (short)358, (short)1369}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int0 = ArrayUtils.indexOf((int[]) null, 13, (int) (short)358);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int[] intArray0 = new int[0];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      ArrayUtils.swap(intArray0, 1823, Integer.MAX_VALUE, 1823);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1441;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 1441;
      ArrayUtils.swap(floatArray0, 0, (-1243), (-92));
      assertArrayEquals(new float[] {0.0F, 1441.0F, 0.0F, 1441.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1505;
      shortArray0[1] = (short) (-11);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-571);
      shortArray0[4] = (short)1092;
      shortArray0[5] = (short)288;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1051);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1505, (short) (-11), (short) (-1), (short) (-571), (short)1092, (short)288}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-106);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(97, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      byte[] byteArray0 = new byte[3];
      ArrayUtils.reverse((short[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(19, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)220);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int0 = 49;
      Integer integer2 = new Integer(49);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(49, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", int0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(49, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals(2, mutableInt0.intValue());
      assertEquals(2L, mutableInt0.longValue());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals("2", mutableInt0.toString());
      
      mutableInt0.setValue((Number) integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals(49, mutableInt0.intValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49L, mutableInt0.longValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      
      Integer integer4 = mutableInt0.getValue();
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(49, (int)integer4);
      assertNotNull(integer4);
      assertEquals(49, mutableInt0.intValue());
      assertEquals(49.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(49L, mutableInt0.longValue());
      assertEquals("49", mutableInt0.toString());
      assertEquals(49.0F, mutableInt0.floatValue(), 0.01F);
      assertEquals((short)49, mutableInt0.shortValue());
      assertEquals((byte)49, mutableInt0.byteValue());
      assertEquals(49, (int)mutableInt0.toInteger());
      assertEquals(49, (int)mutableInt0.getValue());
      
      integerArray0[4] = integer0;
      short[] shortArray2 = ArrayUtils.removeElements((short[]) null, shortArray1);
      assertNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray3);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray3.length);
      assertSame(shortArray3, shortArray1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-16);
      byteArray0[8] = (byte)124;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-111));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-1), (byte) (-11), (byte)20, (byte)118, (byte)33, (byte) (-69), (byte) (-16), (byte)124}, byteArray0);
      assertArrayEquals(new byte[] {(byte)14, (byte) (-1), (byte) (-11), (byte)20, (byte)118, (byte)33, (byte) (-69), (byte) (-16), (byte)124}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      Double double0 = new Double((short) (-147));
      assertEquals((-147.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-147.0), (-147.0), (-147.0), (-147.0)}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (int) (short) (-147), (-71), 1484);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MAX_VALUE;
      intArray1[1] = (int) (short) (-147);
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[4] = Integer.MAX_VALUE;
      intArray1[5] = 2;
      intArray1[6] = 540;
      intArray1[7] = 1484;
      intArray1[8] = 2;
      int int0 = ArrayUtils.indexOf(intArray1, 540, (-837));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, int0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, (-147), Integer.MAX_VALUE, 0, Integer.MAX_VALUE, 2, 540, 1484, 2}, intArray1);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte)32, (int) (byte)0, (-19));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = new Boolean[8];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) false;
      booleanArray2[2] = (Boolean) false;
      booleanArray2[3] = (Boolean) false;
      booleanArray2[4] = (Boolean) true;
      booleanArray2[5] = (Boolean) false;
      booleanArray2[6] = (Boolean) true;
      booleanArray2[7] = (Boolean) false;
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotNull(booleanArray3);
      assertEquals(8, booleanArray3.length);
      assertEquals(8, booleanArray2.length);
      assertSame(booleanArray3, booleanArray2);
      assertSame(booleanArray2, booleanArray3);
      
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short)0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)21, (int) (short)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-14), (int) (short) (-14));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-1);
      ArrayUtils.swap(byteArray0, 731, (int) (byte)2, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)2, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      int int1 = ArrayUtils.indexOf(floatArray0, (float) (byte) (-1), (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte)2;
      byteArray1[1] = (Byte) (byte) (-1);
      byteArray1[2] = (Byte) (byte)2;
      byteArray1[3] = (Byte) (byte) (-1);
      byteArray1[4] = (Byte) (byte) (-1);
      byteArray1[5] = (Byte) (byte) (-1);
      byteArray1[6] = (Byte) (byte)2;
      byteArray1[7] = (Byte) (byte)2;
      byteArray1[8] = (Byte) (byte)2;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get(byteArray1, 2017, byte0);
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      assertEquals(9, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      assertEquals(9, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0);
      assertNotNull(bitSet0);
      assertEquals(9, byteArray1.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      Short[] shortArray0 = new Short[4];
      Short short0 = new Short((byte)109);
      assertEquals((short)109, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = Short.valueOf((short)8292);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)8292, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)27);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)27, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)4848);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)4848, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 850L, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-400.8603F);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      ArrayUtils.swap(intArray0, 2, (-9), 3407);
      assertArrayEquals(new int[] {(-1), 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-229));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-229), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-1), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)1951);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)1951, (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short1;
      shortArray0[1] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)3045);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-229), (short)1951}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)41;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)113, (byte)66, (byte)82, (byte) (-102), (byte)0, (byte)41}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(16, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      Integer integer0 = new Integer(4);
      assertEquals(4, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shift((short[]) null, (int) (short)64, (int) (short)64, (int) (short)64);
      short[] shortArray1 = ArrayUtils.insert((int) (short) (-1516), (short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, false, true, true, true, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Short[] shortArray2 = new Short[9];
      Short short0 = new Short((short)946);
      assertEquals((short)946, (short)short0);
      assertNotNull(short0);
      
      shortArray2[0] = short0;
      Short short1 = new Short((short) (-1));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      
      shortArray2[1] = short1;
      Short short2 = new Short((short)1);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)1, (short)short2);
      assertNotNull(short2);
      
      shortArray2[2] = short2;
      short short3 = (short)71;
      Short short4 = new Short((short)71);
      assertFalse(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)71, (short)short4);
      assertNotNull(short4);
      
      shortArray2[3] = short4;
      Short short5 = new Short((short)48);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short)48, (short)short5);
      assertNotNull(short5);
      
      shortArray2[4] = short5;
      Short short6 = new Short((short) (-55));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short) (-55), (short)short6);
      assertNotNull(short6);
      
      shortArray2[5] = short6;
      Short short7 = new Short(short3);
      assertFalse(short7.equals((Object)short6));
      assertFalse(short7.equals((Object)short1));
      assertFalse(short7.equals((Object)short0));
      assertTrue(short7.equals((Object)short4));
      assertFalse(short7.equals((Object)short2));
      assertTrue(short7.equals((Object)short3));
      assertFalse(short7.equals((Object)short5));
      assertEquals((short)71, (short)short7);
      assertNotNull(short7);
      
      shortArray2[6] = short7;
      Short short8 = new Short((short) (-55));
      assertFalse(short8.equals((Object)short4));
      assertFalse(short8.equals((Object)short1));
      assertFalse(short8.equals((Object)short3));
      assertFalse(short8.equals((Object)short5));
      assertFalse(short8.equals((Object)short2));
      assertFalse(short8.equals((Object)short0));
      assertFalse(short8.equals((Object)short7));
      assertTrue(short8.equals((Object)short6));
      assertEquals((short) (-55), (short)short8);
      assertNotNull(short8);
      
      shortArray2[7] = short8;
      Short short9 = new Short((short)4099);
      assertFalse(short9.equals((Object)short0));
      assertFalse(short9.equals((Object)short1));
      assertFalse(short9.equals((Object)short2));
      assertFalse(short9.equals((Object)short6));
      assertFalse(short9.equals((Object)short4));
      assertFalse(short9.equals((Object)short5));
      assertFalse(short9.equals((Object)short3));
      assertFalse(short9.equals((Object)short8));
      assertFalse(short9.equals((Object)short7));
      assertEquals((short)4099, (short)short9);
      assertNotNull(short9);
      
      shortArray2[8] = short9;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(9, shortArray2.length);
      assertEquals(9, shortArray3.length);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 2771);
      assertNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'W';
      charArray0[2] = 'H';
      charArray0[3] = ',';
      charArray0[4] = 'F';
      charArray0[5] = '?';
      charArray0[6] = '.';
      charArray0[7] = 'j';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'L');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'G', 'W', 'H', ',', 'F', '?', '.', 'j'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.insert((-1), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert((int)  (-2998), (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = new Integer(93);
      assertEquals(93, int0);
      
      int[] intArray0 = new int[21];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[0] = 93;
      ArrayUtils.swap(intArray0, 93, 0, 0);
      assertEquals(21, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, 93, (short) (-2746));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 36;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-103), 36);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {'K', 'g'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)71;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte)71}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse(floatArray0, (int) (byte) (-44), 36);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-400.8603F), (-400.8603F), (-1486.3279F), 850.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-44);
      intArray0[1] = (-103);
      intArray0[2] = (int) (byte) (-44);
      intArray0[3] = 36;
      intArray0[4] = (int) (byte) (-44);
      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte) (-44), (int) (byte) (-44));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-44), (-103), (-44), 36, (-44)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)163;
      shortArray0[1] = (short)163;
      shortArray0[2] = (short)163;
      shortArray0[3] = (short)3641;
      ArrayUtils.shift(shortArray0, (int) (short)163, 3331, (int) (short)163);
      assertArrayEquals(new short[] {(short)163, (short)163, (short)163, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, 1636, (int) (short)163, 0);
      assertArrayEquals(new short[] {(short)163, (short)163, (short)163, (short)3641}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = new short[0];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)6);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)9);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)9, (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)79;
      longArray0[1] = (long) (byte)9;
      longArray0[2] = (long) (byte)9;
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, ' ');
      assertNull(charArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte) (-1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      Byte[] byteArray3 = ArrayUtils.insert(37, byteArray0, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.swap((Object[]) floatArray1, 37, (int) (byte) (-1), (int) (byte)9);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert(2795, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("14", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      ArrayUtils.shift(byteArray0, 51, (int) (byte)14, 167);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)14;
      longArray0[1] = 137L;
      longArray0[2] = (long) 167;
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 160L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {14L, 137L, 167L}, longArray0);
      assertArrayEquals(new long[] {160L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2922, 51);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      ArrayUtils.shift(byteArray0, (-1406), 1490, 8);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Double double0 = new Double((byte)32);
      assertEquals(32.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1108.502092);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1108.502092, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1406));
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1406.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = Double.valueOf(3.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(3.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1490;
      longArray0[1] = (long) (byte)32;
      longArray0[2] = (long) (byte)32;
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) (byte)32;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-67L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-67L), 1490L, 32L, 32L, 84L, 32L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {1490L, 32L, 32L, 84L, 32L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'T', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'T');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)32, 1490);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)32;
      byteArray1[1] = (Byte) (byte)32;
      Byte byte0 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[2] = byte0;
      byteArray1[3] = (Byte) (byte)32;
      byteArray1[4] = (Byte) (byte)32;
      Byte byte1 = new Byte((byte)1);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray1[5] = byte1;
      byteArray1[6] = (Byte) (byte)32;
      byteArray1[7] = (Byte) (byte)32;
      Byte byte2 = ArrayUtils.get(byteArray1, (-2146535177));
      assertNull(byte2);
      assertEquals(8, byteArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-14), (int) (short) (-14));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte byte0 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1), (int) (byte)2);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.toPrimitive((Integer[]) null);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-1), 99);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)220);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int1 = 49;
      Integer integer2 = new Integer(49);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(49, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("", int1);
      assertFalse(int1 == int0);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(49, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      int int2 = 2;
      MutableInt mutableInt0 = new MutableInt(2);
      assertNotNull(mutableInt0);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      
      Integer integer4 = mutableInt0.getValue();
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(2, (int)integer4);
      assertNotNull(integer4);
      assertEquals(2L, mutableInt0.longValue());
      assertEquals(2, mutableInt0.intValue());
      assertEquals("2", mutableInt0.toString());
      assertEquals(2, (int)mutableInt0.getValue());
      assertEquals((byte)2, mutableInt0.byteValue());
      assertEquals(2, (int)mutableInt0.toInteger());
      assertEquals((short)2, mutableInt0.shortValue());
      assertEquals(2.0, mutableInt0.doubleValue(), 0.01);
      assertEquals(2.0F, mutableInt0.floatValue(), 0.01F);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int2);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(int0);
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int2));
      assertEquals(Integer.MAX_VALUE, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray0.length);
      assertEquals(8, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)10);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)37);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)37, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.addFirst((Byte[]) null, byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.reverse((long[]) null, (int) (byte)85, 689);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)85;
      doubleArray0[1] = (double) (byte)85;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = 1574.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {85.0, 85.0, (-1.0), (-1.0), 1574.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-74);
      intArray0[1] = (int) (byte)37;
      intArray0[2] = (-2563);
      intArray0[3] = (int) (byte) (-74);
      intArray0[4] = (int) (byte) (-1);
      intArray0[5] = (int) (byte)117;
      intArray0[6] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 1080;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (-38L);
      floatArray0[5] = (float) (short)0;
      floatArray0[6] = (float) (-38L);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 6.0F, 1080.0F, 0.0F, (-38.0F), 0.0F, (-38.0F)}, floatArray0, 0.01F);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1187);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {1187}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2617.7F;
      floatArray0[1] = (float) 6;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2617.7F, 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2617.7F, 6.0F, 2617.7F, 6.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (-2267));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-2267)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1172);
      shortArray0[1] = (short)3551;
      shortArray0[2] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new short[] {(short) (-1172), (short)3551, (short) (-1172)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), (int) (short) (-707));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-582), 14, (-582));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-17));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-17), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-29));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-29), (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, (-1580.9422177220001));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)6);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)6, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-58));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-58), (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)9);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)9, (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)79;
      longArray0[1] = (long) (byte)9;
      longArray0[2] = (long) (byte)9;
      longArray0[3] = (long) (byte) (-58);
      longArray0[4] = (long) (byte)6;
      longArray0[5] = (long) (byte)9;
      longArray0[6] = (long) (byte)6;
      longArray0[7] = (long) (byte)9;
      longArray0[8] = (long) (byte)6;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {79L, 9L, 9L, (-58L), 6L, 9L, 6L, 9L, 6L}, longArray0);
      assertEquals(9, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Integer integer0 = new Integer(1259);
      assertEquals(1259, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((byte[]) null, (-681), (-2145373292), 1);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1259;
      floatArray0[2] = (-3718.9153F);
      floatArray0[3] = (float) (-2145373292);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1259.0F, 0.0F, (-3718.9153F), (-2.14537331E9F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1172);
      shortArray0[1] = (short)3551;
      shortArray0[2] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new short[] {(short) (-1172), (short)3551, (short) (-1172)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), (int) (short) (-707));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-602), 14, (-602));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray0, (-1088.0111707141334));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = ArrayUtils.removeAllOccurences(doubleArray0, (-1374.32734783));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(15, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)32;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {32.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse(doubleArray0, (int) (byte)32, (int) (byte)0);
      assertArrayEquals(new double[] {32.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)32);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)32;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)32;
      ArrayUtils.swap(longArray0, (int) (byte)32, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new long[] {32L, 0L, 0L, 32L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'z');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'z', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      
      byte byte0 = (byte)50;
      Byte byte1 = new Byte((byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray0, object0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-24L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-32L), (-166L), (-166L), 4300L}, longArray0);
      assertArrayEquals(new long[] {(-24L), (-32L), (-166L), (-166L), 4300L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[0];
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Byte byte2 = ArrayUtils.get(byteArray0, 0, (Byte) null);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray2, (Object) byte2, (int) (byte)50);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(bitSet0);
      assertEquals(0, longArray2.length);
      assertEquals(1, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1588);
      shortArray0[1] = (short)3407;
      shortArray0[2] = (short)3407;
      shortArray0[3] = (short)3407;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)3407);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-1588), (short)3407, (short)3407, (short)3407, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short)3407);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (int) '-';
      intArray0[3] = (int) (short)3407;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1, 1, 45, 3407}, intArray0);
      assertEquals(4, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '-';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (int) (short)3407);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3407, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      char[] charArray0 = new char[2];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)78;
      byteArray0[1] = (Byte) (byte)78;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-674));
      assertNotNull(bitSet0);
      assertEquals(17, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-674));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = ']';
      charArray0[2] = 'I';
      charArray0[3] = 'x';
      charArray0[4] = '}';
      charArray0[5] = '/';
      charArray0[6] = 'E';
      charArray0[7] = ':';
      charArray0[8] = 'g';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ']');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'G', ']', 'I', 'x', '}', '/', 'E', ':', 'g'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'G', ']', 'I', 'x', '}', '/', 'E', ':', 'g'}, charArray0);
      assertEquals(9, characterArray0.length);
      assertEquals(9, charArray0.length);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 102, (-2146858103));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 220);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[3] = 7;
      intArray0[4] = 220;
      intArray0[5] = 1931;
      intArray0[6] = 220;
      intArray0[7] = 220;
      ArrayUtils.shift(intArray0, (-1), 220, (-1));
      assertArrayEquals(new int[] {220, 220, 7, 220, 1931, 220, 220, 220}, intArray0);
      assertEquals(8, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 3055, (double) 1931);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 220;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(4, objectArray1.length);
      assertEquals(4, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray1, objectArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, objectArray1.length);
      assertEquals(4, objectArray0.length);
      assertSame(objectArray1, objectArray0);
      assertSame(objectArray0, objectArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)177;
      shortArray0[1] = (short)1130;
      shortArray0[2] = (short)1591;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short)126;
      shortArray0[5] = (short)52;
      shortArray0[6] = (short) (-386);
      shortArray0[7] = (short)10;
      shortArray0[8] = (short)3;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1), 182);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3, int2);
      assertArrayEquals(new short[] {(short)177, (short)1130, (short)1591, (short) (-1), (short)126, (short)52, (short) (-386), (short)10, (short)3}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-30), 1, 1);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.reverse(byteArray0, 3043, 220);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-1776.7861F));
      assertFalse(boolean0);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0));
      assertEquals(2, booleanArray1.length);
      assertEquals(3, booleanArray2.length);
      assertEquals(4, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.402F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray1, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(9, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Short short0 = Short.valueOf((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-393));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-393), (short)short1);
      assertNotNull(short1);
      
      MockRandom mockRandom0 = new MockRandom((-545L));
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, Float.NaN);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2771;
      intArray0[1] = 2771;
      intArray0[2] = (int) (short)13;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (short)2, 2771);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2771, 2771, 13}, intArray0);
      assertEquals(3, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertNotNull(map0);
      assertEquals(0, floatArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (-1), 25, 4);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)704;
      shortArray0[5] = (short) (-393);
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)13, (short)2, (short)2, (short)704, (short) (-393)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.swap(longArray0, (-93), (-1171), (-93));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'z');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'z', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray0, object0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-24L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-24L), (-32L), (-166L), (-166L), 4300L}, longArray1);
      assertArrayEquals(new long[] {(-32L), (-166L), (-166L), 4300L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Long[] longArray2 = new Long[0];
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray3);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      long[] longArray4 = ArrayUtils.add(longArray1, (-4033L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {(-24L), (-32L), (-166L), (-166L), 4300L}, longArray1);
      assertArrayEquals(new long[] {(-32L), (-166L), (-166L), 4300L}, longArray0);
      assertArrayEquals(new long[] {(-24L), (-32L), (-166L), (-166L), 4300L, (-4033L)}, longArray4);
      assertEquals(5, longArray1.length);
      assertEquals(4, longArray0.length);
      assertEquals(6, longArray4.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray3);
      assertNotSame(longArray1, longArray4);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-17);
      floatArray0[1] = (-1649.8264F);
      floatArray0[2] = (-1649.8264F);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {(-1649.8264F), (-1649.8264F), (-17.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1649.8264F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-1649.8264F), (-1649.8264F), (-17.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(charArray0, (-2148), 1, Integer.MAX_VALUE);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 796L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 796L;
      doubleArray0[1] = (double) 796L;
      doubleArray0[2] = (double) (byte)2;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 796L);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {796.0, 796.0, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (-3300), (-3300));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 796L;
      floatArray0[1] = (-1178.0F);
      floatArray0[2] = 693.0F;
      floatArray0[4] = (float) 796L;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1178.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {796.0F, (-1178.0F), 693.0F, 0.0F, 796.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {796.0F, 693.0F, 0.0F, 796.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[0];
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertArrayEquals(new long[] {796L, 0L}, longArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-24));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)2, (byte)22, (byte)2, (byte)0, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-125);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-125));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-125), (byte)11, (byte) (-125)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (byte) (-125));
      assertNull(doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 1236L;
      longArray0[1] = (long) (byte)11;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {1236L, 11L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("14", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte)14);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)14, (short)short1);
      assertNotNull(short1);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertEquals("byte", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)914;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-37), 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {914}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      int int1 = ArrayUtils.indexOf(doubleArray0, 100.0, 1783.8);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 93;
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 93.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 93;
      longArray0[1] = (long) 93;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {93L, 93L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '>';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'J';
      ArrayUtils.swap(charArray0, (-1), (-1), 93);
      assertArrayEquals(new char[] {'K', '>', 'C', 'C', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {93L, 93L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 93.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 93.0}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte[] byteArray0 = new Byte[8];
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-88);
      Byte byte6 = new Byte((byte) (-88));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte) (-88), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[0] = byte6;
      Byte byte7 = new Byte((byte)15);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte)15, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertEquals((byte) (-1), (byte)byte8);
      assertNotNull(byte8);
      
      Byte byte9 = new Byte((byte) (-1));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte6));
      assertEquals((byte) (-1), (byte)byte9);
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, byte5);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte5 == byte0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray3 = new Byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = byte2;
      byteArray3[1] = byte3;
      byteArray3[2] = byte2;
      byteArray3[3] = byte1;
      byteArray3[4] = byte8;
      Byte byte10 = new Byte(byte0);
      assertFalse(byte0 == byte5);
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte8));
      assertTrue(byte10.equals((Object)byte4));
      assertTrue(byte10.equals((Object)byte3));
      assertTrue(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte5));
      assertEquals((byte)0, (byte)byte10);
      assertNotNull(byte10);
      
      byteArray3[5] = byte10;
      Byte[] byteArray4 = ArrayUtils.insert(6, byteArray0, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(8, byteArray0.length);
      assertEquals(6, byteArray3.length);
      assertEquals(14, byteArray4.length);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1167));
      assertNull(intArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1167);
      floatArray0[1] = (float) (-1167);
      floatArray0[2] = (-5207.0F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1167.0F), (-1167.0F), (-5207.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1167.0F), (-1167.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)10;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short) (-1);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)52, (int) (short)10);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)52, (short)10, (short)9, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 331);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = '-';
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      ArrayUtils.shift(booleanArray0, 106);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)180;
      shortArray0[1] = (short)180;
      ArrayUtils.shift(shortArray0, (-915), 1, 0);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, 2, 1, (int) (short)180);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)57;
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      boolean[] booleanArray0 = new boolean[0];
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte)57;
      byteArray1[1] = (Byte) (byte)57;
      byteArray1[2] = (Byte) (byte)57;
      byteArray1[3] = (Byte) (byte)57;
      byteArray1[4] = (Byte) (byte)57;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) '+';
      longArray0[2] = (long) 'R';
      longArray0[3] = (long) '+';
      longArray0[4] = (long) byte0;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) 'R';
      longArray0[7] = (long) byte0;
      longArray0[8] = (long) byte0;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {43L, 43L, 82L, 43L, 57L, 57L, 82L, 57L, 57L}, longArray0);
      assertEquals(9, longArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed(82L);
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray0, byte0);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray3.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray0, byteArray3);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(40, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-229.0F));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'', '', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-74));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-74), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      ArrayUtils.reverse(longArray0, (int) (byte) (-1), (int) (byte) (-74));
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '#';
      charArray0[1] = '~';
      charArray0[2] = '>';
      charArray0[3] = '#';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'L');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'#', '~', '>', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int int0 = ArrayUtils.indexOf(charArray0, '#', 4);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'#', '~', '>', '#'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'L';
      intArray0[1] = (int) '#';
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = (int) 'L';
      intArray0[5] = (int) '~';
      intArray0[6] = (int) '~';
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {76, 35, 4, 4, 76, 126, 126}, intArray0);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (double) 4, (-706.875776));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, true);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray0);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 489.0, (-2125962148), (double) (-2125962148));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 0.1, 228.933);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '[';
      charArray0[2] = '-';
      charArray0[3] = 'm';
      charArray0[5] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (double) '[';
      doubleArray0[3] = (double) 'q';
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 'q';
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {45.0, 45.0, 91.0, 113.0, 0.0, 4.0, 113.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'q';
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '-';
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 'q';
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-2326.3403F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {113.0F, (-1.0F), 45.0F, 4.0F, 113.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {113.0F, (-1.0F), 45.0F, 4.0F, 113.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2172.6462297959;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1458.22757);
      doubleArray0[4] = 1724.2625704902;
      doubleArray0[5] = 1719.5145271;
      doubleArray0[6] = 66.8639;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      ArrayUtils.swap(doubleArray0, 2, 2, 2835);
      assertArrayEquals(new double[] {2172.6462297959, (-1.0), (-1.0), (-1458.22757), 1724.2625704902, 1719.5145271, 66.8639, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'N';
      charArray0[2] = '!';
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'!', 'N', '!'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'N';
      longArray0[1] = (long) '!';
      longArray0[2] = (long) '!';
      longArray0[3] = (long) 2;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf("Pd,]k3@p.yH<>%c");
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      Boolean[] booleanArray2 = new Boolean[3];
      booleanArray2[0] = (Boolean) true;
      booleanArray2[1] = (Boolean) true;
      booleanArray2[2] = (Boolean) true;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray3));
      assertEquals(3, booleanArray2.length);
      assertEquals(3, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)57;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)1);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)57, (byte)57, (byte)57, (byte)57, (byte)1, (byte)57, (byte)57, (byte)57}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)57;
      intArray0[1] = (int) (byte)57;
      intArray0[2] = (int) (byte)57;
      intArray0[3] = (int) '+';
      int[] intArray1 = ArrayUtils.insert(4, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {57, 57, 57, 43}, intArray0);
      assertArrayEquals(new int[] {57, 57, 57, 43, 57, 57, 57, 43}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\u0017');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\u0017';
      intArray0[1] = 1;
      intArray0[2] = (int) '\u0017';
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {23, 1, 23}, intArray0);
      assertArrayEquals(new int[] {23, 23, 1, 23, 1, 23}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'F';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      charArray0[7] = 'F';
      charArray0[8] = 'F';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F', 'F'}, charArray0);
      assertEquals(18, charArray1.length);
      assertEquals(9, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = 47.0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (byte)32;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 32.0, (-3049));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 47.0, 0.0, 0.0, 1.0, 0.0, 32.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      int int1 = ArrayUtils.indexOf(charArray0, 'j', (-55));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'j', 'j', 'j', 'j'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-34);
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-34)}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-681), 3398, 16);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)41;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) (byte) (-34);
      doubleArray0[3] = (double) (byte) (-34);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, 8, (double) (byte)41);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {41.0, 16.0, (-34.0), (-34.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Long long0 = new Long(2132L);
      assertEquals(2132L, (long)long0);
      assertNotNull(long0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 745);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      ArrayUtils.shift(booleanArray0, (-1), 11, (-702));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      Float float0 = new Float((-2503.53F));
      assertEquals((-2503.53F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockRandom mockRandom0 = new MockRandom(3385L);
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      LongStream longStream0 = mockRandom1.longs(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(longStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      mockRandom0.setSeed(0L);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      
      IntStream intStream0 = mockRandom1.ints();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(intStream0);
      assertNotSame(mockRandom1, mockRandom0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-4010L);
      floatArray0[2] = (-1649.8264F);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new float[] {(-4010.0F), (-1649.8264F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1649.8264F));
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-4010.0F), (-1649.8264F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (-55), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 867L;
      floatArray0[1] = (float) 867L;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 867L;
      floatArray0[6] = (float) (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {867.0F, 867.0F, Float.NaN, (-1.0F), (-1.0F), 867.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-320);
      shortArray0[1] = (short) (-320);
      shortArray0[2] = (short) (-320);
      shortArray0[3] = (short) (-320);
      shortArray0[4] = (short)16;
      shortArray0[5] = (short) (-718);
      shortArray0[6] = (short) (-320);
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-320), (short) (-320), (short) (-320), (short) (-320), (short)16, (short) (-718), (short) (-320)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.shift(booleanArray0, (int) (short) (-320));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.swap(shortArray0, (-375), 834);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1867);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-147);
      shortArray0[1] = (short) (-147);
      shortArray0[2] = (short) (-147);
      shortArray0[3] = (short) (-1736);
      shortArray0[4] = (short) (-147);
      shortArray0[5] = (short) (-147);
      shortArray0[6] = (short) (-147);
      shortArray0[7] = (short) (-147);
      ArrayUtils.swap(shortArray0, (-535), 1114111, (-166));
      assertArrayEquals(new short[] {(short) (-147), (short) (-147), (short) (-147), (short) (-1736), (short) (-147), (short) (-147), (short) (-147), (short) (-147)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Long[] longArray0 = new Long[8];
      Long long0 = Long.getLong("{Lc-v6YCe]ww'", (-3243L));
      assertEquals((-3243L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-1811L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1811L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-1811L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1811L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short) (-147));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertEquals((-147L), (long)long3);
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long((short) (-1736));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertEquals((-1736L), (long)long4);
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long((-1L));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertFalse(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long3));
      assertEquals((-1L), (long)long5);
      assertNotNull(long5);
      
      longArray0[5] = long5;
      Long long6 = new Long((long) longArray0[2]);
      assertFalse(long6.equals((Object)long3));
      assertTrue(long6.equals((Object)long2));
      assertFalse(long6.equals((Object)long4));
      assertFalse(long6.equals((Object)long0));
      assertFalse(long6.equals((Object)long5));
      assertTrue(long6.equals((Object)long1));
      assertEquals((-1811L), (long)long6);
      assertNotNull(long6);
      assertEquals(8, longArray0.length);
      
      longArray0[6] = long6;
      Long long7 = new Long(2342L);
      assertFalse(long7.equals((Object)long3));
      assertFalse(long7.equals((Object)long6));
      assertFalse(long7.equals((Object)long4));
      assertFalse(long7.equals((Object)long0));
      assertFalse(long7.equals((Object)long5));
      assertFalse(long7.equals((Object)long1));
      assertFalse(long7.equals((Object)long2));
      assertEquals(2342L, (long)long7);
      assertNotNull(long7);
      
      longArray0[7] = long7;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 84L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3243L), (-1811L), (-1811L), (-147L), (-1736L), (-1L), (-1811L), 2342L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 220);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[3] = 0;
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1941;
      int int1 = ArrayUtils.indexOf(longArray0, 1941L, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new long[] {1941L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '<';
      charArray0[2] = 'N';
      charArray0[3] = '_';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1257;
      intArray0[1] = 114;
      intArray0[2] = 114;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 114, 840);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)38;
      ArrayUtils.shift(byteArray0, 114, 840, (-2146582773));
      assertArrayEquals(new byte[] {(byte)1, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(byteArray0, (-2146582773), (-1), (-2352));
      assertArrayEquals(new byte[] {(byte)1, (byte)38}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 8);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 8);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1545);
      intArray0[1] = 1;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 1;
      intArray0[4] = (-1545);
      ArrayUtils.reverse(intArray0, (-1545), 15);
      assertArrayEquals(new int[] {(-1545), 1, 0, 1, (-1545)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(1264.48063751);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1264.4806F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1779.9647F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1779.9647F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((-636.971));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-636.971F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-3125.0F));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-3125.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) floatArray0[0]);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals(6, floatArray0.length);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short)2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)2;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2320;
      doubleArray0[3] = (double) (short) (-2150);
      doubleArray0[4] = (double) 2320;
      doubleArray0[5] = (double) (short)2;
      doubleArray0[6] = (double) (short)2;
      ArrayUtils.swap(doubleArray0, (-2866), 2, 2378);
      assertArrayEquals(new double[] {2320.0, (-2150.0), 2320.0, 2.0, 2.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-664), (-1299), (double) (-2866));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {2320.0, (-2150.0), 2320.0, 2.0, 2.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)2;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 26, (-491));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, (int) (short)2, 2143101028, 2987);
      assertArrayEquals(new long[] {(-32L), (-166L), 4300L, (-166L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[4] = (long) (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte) (-84);
      doubleArray0[2] = (double) (byte)0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Long[] longArray1 = new Long[8];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      Long long0 = new Long(49L);
      assertEquals(49L, (long)long0);
      assertNotNull(long0);
      
      longArray1[3] = long0;
      longArray1[4] = (Long) 0L;
      longArray1[5] = (Long) 0L;
      longArray1[6] = (Long) 0L;
      longArray1[7] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, 26L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 49L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(8, longArray2.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray2, longArray0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      ArrayUtils.shift(floatArray1, 596, (int) (short)0, 112);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.insert(12, (float[]) null, (float[]) null);
      assertNull(floatArray2);
      
      float[] floatArray3 = ArrayUtils.addFirst((float[]) null, (float) (short)0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {0.0F}, floatArray3, 0.01F);
      assertEquals(1, floatArray3.length);
      assertNotSame(floatArray3, floatArray1);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-71));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-71), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)120);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)120, (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray4 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray1.equals((Object)floatArray3));
      assertNotNull(floatArray4);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray4.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray4, floatArray1);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)120;
      int[] intArray1 = ArrayUtils.addAll((int[]) null, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 120}, intArray0);
      assertArrayEquals(new int[] {(-1), 120}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[3] = (-1380L);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)127);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)127, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte2;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.swap(floatArray0, 40, 12, 68);
      assertArrayEquals(new float[] {(-1380.0F), (-1380.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = '`';
      charArray0[2] = 'k';
      charArray0[3] = '^';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = '';
      int int0 = ArrayUtils.indexOf(charArray0, 'k');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'x', '`', 'k', '^', 'k', 'k', 'k', ''}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 2321);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-103), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-883), 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {850.0F, (-1486.3279F), (-400.8603F), (-400.8603F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'K';
      longArray0[1] = (-641L);
      longArray0[2] = (long) 'g';
      longArray0[3] = (long) 'K';
      longArray0[4] = 850L;
      longArray0[5] = (long) 'K';
      ArrayUtils.shift(longArray0, (-883), 0, 0);
      assertArrayEquals(new long[] {75L, (-641L), 103L, 75L, 850L, 75L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'K';
      intArray0[1] = (int) 'K';
      intArray0[2] = (int) 'g';
      intArray0[3] = (int) 'g';
      intArray0[4] = (int) 'g';
      intArray0[5] = (int) 'K';
      intArray0[6] = (int) 'K';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {75, 75, 103, 103, 103, 75, 75}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 3544);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2124, (double) 2124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2124, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-747L);
      longArray0[1] = (-747L);
      longArray0[2] = (-747L);
      longArray0[3] = (-747L);
      longArray0[4] = (-747L);
      longArray0[5] = (-747L);
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)11);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IntStream intStream0 = bitSet0.stream();
      assertNotNull(intStream0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2249L;
      longArray0[1] = 2249L;
      longArray0[2] = (-1L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2249L, 2249L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-103);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-103));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-103)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) (byte)118;
      objectArray0[2] = (Object) (byte)118;
      objectArray0[3] = (Object) bitSet0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) bitSet0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 867L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-467), 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 867.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) (-467);
      floatArray2[1] = (float) 0;
      boolean boolean1 = ArrayUtils.isSameLength(floatArray2, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 867.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-467.0F), 0.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[3] = (long) (byte)13;
      longArray0[5] = (long) (byte)13;
      longArray0[6] = (long) (byte)103;
      boolean boolean0 = ArrayUtils.contains(longArray0, 13L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {103L, 0L, 0L, 13L, 0L, 13L, 103L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 13L, 0L, 13L, 103L, 103L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.reverse((int[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte byte0 = (byte)74;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)74;
      byteArray0[1] = (Byte) (byte)74;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 102;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (-75.0F);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 102.0F, 74.0F, 0.0F, (-75.0F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-2833), 53, 33);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2771, 75);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {446, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 446;
      longArray0[1] = (long) 2145147847;
      longArray0[2] = (long) 2145147847;
      longArray0[3] = (long) 1563;
      longArray0[4] = (long) 1563;
      longArray0[5] = (long) 0;
      ArrayUtils.swap(longArray0, 0, 945, 0);
      assertArrayEquals(new long[] {446L, 2145147847L, 2145147847L, 1563L, 1563L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1563L;
      doubleArray0[1] = (double) (-1819);
      doubleArray0[2] = (double) 2145147847L;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1563;
      int int1 = ArrayUtils.indexOf(doubleArray0, 2223.0, 446, (double) 1563L);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {1563.0, (-1819.0), 2.145147847E9, 0.0, 1563.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-103), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 10;
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) 'g';
      intArray0[4] = (int) 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 12);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {11, 10, 75, 103, 103}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift(charArray0, (-2145482264));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)41);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)79);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)79, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)41);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)41, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = Byte.valueOf((byte) (-86));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-86), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = ArrayUtils.get(byteArray0, 11);
      assertNull(byte5);
      assertEquals(5, byteArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-2267), (-2267));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'M';
      intArray0[1] = (-2267);
      intArray0[2] = (int) 'M';
      intArray0[3] = (-103);
      intArray0[4] = (-2267);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-103));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {77, (-2267), 77, (-103), (-2267)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{3}", bitSet0.toString());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'M';
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-400.8603F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {77.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(charArray1, 'M');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, characterArray0.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.subarray(charArray1, 0, (-2146858103));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(charArray1, charArray2);
      assertSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (double) (byte)15;
      doubleArray0[1] = (double) (byte)15;
      doubleArray0[3] = (double) (byte)15;
      doubleArray0[4] = (double) (byte)15;
      doubleArray0[5] = (double) (byte)15;
      doubleArray0[7] = (double) (byte)15;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 402, Integer.MAX_VALUE);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {100.0, 15.0, 0.0, 15.0, 15.0, 15.0, 0.0, 15.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)15, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      ArrayUtils.swap(doubleArray1, (int) (byte)15, (int) (byte)15, 2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, 15.0, 0.0, 15.0, 15.0, 15.0, 0.0, 15.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)15;
      int int0 = (-664);
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, Integer.MAX_VALUE, (-664));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) longArray0, "");
      assertNotNull(stringArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 1, 1, 1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1380.0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-3300L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (-2125962148);
      floatArray0[3] = (float) (-3300L);
      floatArray0[4] = (float) (-2125962148);
      floatArray0[5] = (float) 6;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) (-3300L);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2125962148), 92);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {6.0F, 0.0F, (-2.12596211E9F), (-3300.0F), (-2.12596211E9F), 6.0F, 0.0F, (-3300.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 0.0F, (-2.12596211E9F), (-3300.0F), (-2.12596211E9F), 6.0F, 0.0F, (-3300.0F)}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 92;
      floatArray2[1] = (float) (-3300L);
      floatArray2[2] = (float) (byte) (-102);
      floatArray2[3] = (float) (-2125962148);
      floatArray2[4] = (float) 0L;
      floatArray2[5] = (float) (-2125962148);
      float[] floatArray3 = ArrayUtils.removeElements(floatArray1, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {6.0F, 0.0F, (-2.12596211E9F), (-3300.0F), (-2.12596211E9F), 6.0F, 0.0F, (-3300.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F, 0.0F, (-3300.0F)}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {6.0F, 0.0F, (-2.12596211E9F), (-3300.0F), (-2.12596211E9F), 6.0F, 0.0F, (-3300.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {92.0F, (-3300.0F), (-102.0F), (-2.12596211E9F), 0.0F, (-2.12596211E9F)}, floatArray2, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(4, floatArray3.length);
      assertEquals(8, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray3);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-26);
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 92, (short)50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (byte)97;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 97L;
      floatArray0[1] = (float) 2789L;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, (-4306));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {97.0F, 2789.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 97L;
      floatArray1[2] = (float) (byte)97;
      floatArray1[3] = (float) (-4306);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {97.0F, 2789.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 97.0F, 97.0F, (-4306.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 97.0F, (-4306.0F)}, floatArray2, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertEquals(3, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 220, 0.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 0;
      intArray0[3] = 220;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {220, 220, 0, 220}, intArray0);
      assertEquals(4, intArray0.length);
      
      ArrayUtils.swap((byte[]) null, 0, 220, 0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2249L;
      doubleArray0[1] = (double) (-4L);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (-4L);
      doubleArray0[4] = (-1867.17);
      doubleArray0[5] = (double) (-4L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 8, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2249.0, (-4.0), (-1.0), (-4.0), (-1867.17), (-4.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte3;
      Byte byte5 = new Byte(byte0);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      
      ArrayUtils.swap((float[]) null, 1169, (-1), (-2720));
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)6332);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray1 = new byte[0];
      ArrayUtils.swap(byteArray1, (-3391), (-1), (int) (short)6332);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)419);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)419, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) (-3391);
      doubleArray0[2] = (double) (short)419;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (byte) (-1);
      doubleArray0[8] = (double) (short)6332;
      ArrayUtils.shift(doubleArray0, (-1146), (-1), (-2720));
      assertArrayEquals(new double[] {(-1.0), (-3391.0), 419.0, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), 6332.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (short) (-1);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.swap(byteArray0, (-1), (-63), (-63));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2620.589518;
      doubleArray0[3] = 2620.589518;
      ArrayUtils.swap(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 2620.589518, 2620.589518}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("-32", string0);
      assertNotNull(string0);
      
      ArrayUtils.hashCode((Object) byte0);
      float[] floatArray0 = ArrayUtils.add((float[]) null, 469.27203F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {469.27203F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-32);
      longArray0[1] = (-4789L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-4789L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-32L), (-4789L)}, longArray0);
      assertArrayEquals(new long[] {(-32L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Float[] floatArray1 = new Float[2];
      Float float0 = new Float(2620.589518);
      assertEquals(2620.5896F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float float1 = new Float(1.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray1[1] = float1;
      float[] floatArray2 = ArrayUtils.remove(floatArray0, 0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {469.27203F}, floatArray0, 0.01F);
      assertEquals(0, floatArray2.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      ArrayUtils.swap(shortArray0, 6, (-535), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'e';
      charArray0[1] = 'T';
      charArray0[2] = '&';
      charArray0[3] = '$';
      charArray0[4] = '*';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      ArrayUtils.swap(charArray0, 1080, 1490, 89);
      assertArrayEquals(new char[] {'e', 'T', '&', '$', '*', 'x', 'x'}, charArray0);
      assertEquals(7, charArray0.length);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.reverse((float[]) null);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1094);
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 446;
      longArray0[1] = (long) (-1094);
      longArray0[2] = (long) 0;
      longArray0[4] = (long) (-707);
      longArray0[5] = (long) (-1094);
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {446L, (-1094L), 0L, 0L, (-707L), (-1094L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(floatArray1, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1094.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)2;
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)7, (byte)6, (byte)15, (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 122, (int) (byte)15);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {446L, (-1094L), 0L, 0L, (-707L), (-1094L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 31;
      int int1 = 3768;
      ArrayUtils.swap(booleanArray0, 31, 3768, 31);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '%';
      char char0 = 'j';
      charArray0[2] = 'j';
      char char1 = 'u';
      charArray0[3] = 'u';
      char char2 = '+';
      charArray0[4] = '+';
      charArray0[5] = 'T';
      charArray0[6] = '0';
      char char3 = 'i';
      charArray0[7] = 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 3768);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3768, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.swap((boolean[]) null, (-3558), (-3558), (-3558));
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 788, 788);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (float) 788, 15);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1634.8497F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1634.8497F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      Float float0 = new Float(1788.0F);
      assertEquals(1788.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockRandom mockRandom0 = new MockRandom(3385L);
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs((long) 15);
      assertNotNull(longStream0);
      
      mockRandom0.setSeed((-4010L));
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(floatArray1, (java.util.Random) mockRandom0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1634.8497F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 15);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1634.8497F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-55), 15, 788);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertArrayEquals(new char[] {'J', 'J'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 'J';
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'J';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {74L, 74L, 74L, 74L, 74L, 74L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)72;
      Byte byte1 = new Byte((byte)72);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)72, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)72, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)72, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte)72;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) byte0;
      intArray0[4] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte3, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-103), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 10;
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) 'g';
      intArray0[4] = (int) 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 12);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {11, 10, 75, 103, 103}, intArray0);
      assertEquals(5, intArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      ArrayUtils.shift(charArray0, (-2145482264));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray0, charArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      shortArray0[1] = (short)0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-49));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      ArrayUtils.reverse(floatArray0, (int) (byte) (-49), (int) (short)0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (-2146959486));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(9, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      Double double0 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-144.0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-144.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray2 = ArrayUtils.remove(shortArray0, 1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(8, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short)0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2, (-1509));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)51;
      longArray0[1] = (long) (byte)51;
      longArray0[2] = (long) (-1509);
      longArray0[3] = 1209L;
      longArray0[4] = (long) (byte)51;
      longArray0[5] = 3189L;
      longArray0[6] = (long) (-1509);
      longArray0[7] = (long) 2;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {51L, 51L, (-1509L), 1209L, 51L, 3189L, (-1509L), 2L}, longArray0);
      assertArrayEquals(new long[] {51L, 51L, (-1509L), 1209L, 51L, 3189L, (-1509L), 2L}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) null);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '1');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.shift((int[]) null, (int) (byte)51);
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 2147036953);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2249L;
      longArray0[1] = (-4569L);
      longArray0[2] = (-1L);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) 2249L;
      floatArray0[2] = (float) 2249L;
      floatArray0[3] = (float) (-4569L);
      floatArray0[4] = (float) (-4569L);
      floatArray0[5] = (float) (-1L);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), 2249.0F, 2249.0F, (-4569.0F), (-4569.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-4569.0F);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-4569.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      BitSet bitSet0 = new BitSet(1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.add((float[]) null, 0, (float) 6);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {6.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      
      ArrayUtils.shift((long[]) null, 0);
      Short short0 = new Short((short)500);
      assertEquals((short)500, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)183);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)183, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-1350));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-1350), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)500);
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)500, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)183);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)183, (short)short4);
      assertNotNull(short4);
      
      Short[] shortArray0 = new Short[4];
      shortArray0[0] = short1;
      shortArray0[1] = short0;
      shortArray0[2] = short1;
      shortArray0[3] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)183, (short)500, (short)183, (short)500}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, 0, 33L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {33L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-1242);
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1242), 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-26);
      Byte byte1 = new Byte((byte) (-26));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-26), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      Byte byte3 = new Byte((byte)44);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0);
      assertNotNull(stringArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)44;
      intArray0[2] = (int) byte0;
      intArray0[3] = (int) (byte)44;
      intArray0[4] = (int) (byte)44;
      intArray0[5] = (int) (byte)44;
      intArray0[6] = (int) (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {(-1), 44, (-26), 44, 44, 44, (-1)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      int[] intArray0 = new int[16];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(16, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(550L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte0);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[1] = 39.45F;
      floatArray0[2] = 1.0F;
      ArrayUtils.swap(floatArray0, (int) (byte)41, (-2720), (-2720));
      assertArrayEquals(new float[] {0.0F, 39.45F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte)41;
      shortArray0[2] = (short) (byte)41;
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short) (byte)41;
      shortArray0[5] = (short) (byte)41;
      shortArray0[6] = (short) (byte)41;
      shortArray0[7] = (short) (byte)41;
      shortArray0[8] = (short)919;
      Byte byte1 = new Byte((byte) (-88));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-88), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.addFirst((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)41;
      intArray0[1] = (int) (byte) (-88);
      intArray0[2] = (int) (short)41;
      intArray0[3] = (int) (short)41;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {41, (-88), 41, 41}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'l';
      charArray0[2] = 'O';
      charArray0[3] = 'U';
      charArray0[4] = '~';
      charArray0[5] = '5';
      ArrayUtils.swap(charArray0, (-2720), 1);
      assertArrayEquals(new char[] {'l', 'C', 'O', 'U', '~', '5'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '9';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'9'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '9';
      doubleArray0[1] = (double) '9';
      ArrayUtils.swap(doubleArray0, (-2742), 120, (-2742));
      assertArrayEquals(new double[] {57.0, 57.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, 53, (-1843L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-2125962148), (-2125962148), (double) (-2125962148));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 316, (-3280));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 316;
      intArray0[1] = 26;
      intArray0[2] = 26;
      intArray0[3] = 5;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2146959486), 316);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {316, 26, 26, 5}, intArray0);
      assertArrayEquals(new int[] {316, 26, 26, 5}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray2 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayUtils.shift(doubleArray0, (-231), 512, 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[6];
      int int0 = ArrayUtils.indexOf(charArray0, 'V');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1303);
      intArray0[1] = 554;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 554);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1303)}, intArray1);
      assertArrayEquals(new int[] {(-1303), 554}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(2, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = '';
      charArray0[3] = 'k';
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (byte)101;
      longArray0[2] = (long) 'k';
      longArray0[3] = (long) 'k';
      longArray0[4] = (long) (byte)101;
      longArray0[5] = (long) 'k';
      longArray0[6] = (long) 'k';
      ArrayUtils.shift(longArray0, (-1290));
      assertArrayEquals(new long[] {107L, 107L, 101L, 107L, 107L, 127L, 101L}, longArray0);
      assertEquals(7, longArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-2125L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {107L, 107L, 101L, 107L, 107L, 127L, 101L}, longArray0);
      assertArrayEquals(new long[] {107L, 107L, 101L, 107L, 107L, 127L, 101L, (-2125L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, (int) (byte)101);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '';
      floatArray0[1] = (float) '';
      floatArray0[2] = (float) '';
      floatArray0[3] = (float) 127L;
      floatArray0[4] = (float) 'k';
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2110, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2110, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), 0L, (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'c');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) '6';
      ArrayUtils.swap(intArray0, 308, 99, 99);
      assertArrayEquals(new int[] {99, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      
      int int0 = ArrayUtils.indexOf(intArray0, 99, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {99, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1380L);
      doubleArray0[1] = (double) (-1380L);
      doubleArray0[2] = (double) 'c';
      doubleArray0[3] = (double) (-1380L);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1380L));
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertArrayEquals(new double[] {(-1380.0), (-1380.0), 99.0, (-1380.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short) (-300));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2952;
      longArray0[1] = (long) (short)3407;
      longArray0[2] = (long) (short) (-300);
      longArray0[3] = (long) (short)2952;
      longArray0[4] = (long) (short)1369;
      ArrayUtils.shift(longArray0, 1);
      assertArrayEquals(new long[] {1369L, 2952L, 3407L, (-300L), 2952L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1954L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1369L, 2952L, 3407L, (-300L), 2952L}, longArray0);
      assertArrayEquals(new long[] {(-1954L), 1369L, 2952L, 3407L, (-300L), 2952L}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayUtils.reverse((int[]) null, (int) (short)2952, 2912);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      Byte byte3 = new Byte((byte) (-119));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-119), (byte)byte3);
      assertNotNull(byte3);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte3, byte2);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Byte, Byte>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        abstractMap_SimpleImmutableEntry0.setValue(byte2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1788.0;
      doubleArray0[1] = 865.33760012;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 517.77181;
      doubleArray0[4] = (-99.0);
      doubleArray0[5] = (-2017.94437);
      doubleArray0[6] = 1016.9;
      doubleArray0[7] = (-452.89986324);
      doubleArray0[8] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1788.0, 865.33760012, (-1.0), 517.77181, (-99.0), (-2017.94437), 1016.9, (-452.89986324), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1788.0, 865.33760012, (-1.0), 517.77181, (-99.0), (-2017.94437), 1016.9, (-452.89986324)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int2 = ArrayUtils.indexOf(doubleArray0, (-3112.921888666415), 1, (-5.56902));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (-1);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertTrue(object0.equals((Object)byte1));
      assertTrue(byte0.equals((Object)byte1));
      assertEquals((byte)1, object0);
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) true;
      int int3 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(5, int3);
      assertEquals(6, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-1);
      Integer integer0 = new Integer(121);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertEquals(121, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[3] = integer0;
      Integer integer1 = new Integer((-1));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 2851);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, (-1), 121, (-1)}, intArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2146272962);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse(charArray0, 2139, 2139);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2139;
      longArray0[1] = (long) 2146272962;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 2139;
      longArray1[1] = (long) 2139;
      longArray1[2] = (long) 2146272962;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2139L, 2146272962L}, longArray0);
      assertArrayEquals(new long[] {2139L, 2139L, 2146272962L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7;
      doubleArray0[2] = (double) 2146272962L;
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray2 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      
      ArrayUtils.reverse(longArray0, 2139, (-1052));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {2139L, 2146272962L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7, 0.0, 2.146272962E9, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146272962;
      intArray0[1] = 2139;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146272962, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (short)0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1256), 2145232616);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2145232616;
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 26);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2145232616L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)11);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 2145232616);
      assertNull(byte2);
      assertEquals(2, byteArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1204L));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)72;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-1310), (int) (short)72);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)72}, shortArray0);
      assertArrayEquals(new short[] {(short)72}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[1] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-535);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      shortArray0[4] = (short) (byte)byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences((Byte[]) null, byteArray0[0]);
      assertNull(byteArray1);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short) (-535);
      floatArray0[3] = 39.45F;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-2720), (int) (byte) (-1));
      assertArrayEquals(new float[] {4.0F, (-1.0F), (-535.0F), 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4.0F, (-1.0F), (-535.0F), 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F, (-1.0F), (-535.0F), 39.45F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)180;
      shortArray0[1] = (short)180;
      shortArray0[2] = (short)180;
      shortArray0[3] = (short)77;
      shortArray0[4] = (short)180;
      shortArray0[5] = (short)180;
      shortArray0[6] = (short)180;
      ArrayUtils.shift(shortArray0, (int) (short)180, 1464, (int) (short)180);
      assertArrayEquals(new short[] {(short)180, (short)180, (short)180, (short)77, (short)180, (short)180, (short)180}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 1464);
      assertNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) null);
      assertNull(byteArray0);
      
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences((Byte[]) null, (Byte) null);
      assertNull(byteArray1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)77, 96);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)180, (short)180, (short)180, (short)77, (short)180, (short)180, (short)180}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = (-1332);
      intArray0[2] = (int) (short)180;
      intArray0[3] = (int) (short)180;
      intArray0[4] = (int) (short)180;
      intArray0[5] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 180, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1788.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-953.0);
      doubleArray0[1] = (double) 867L;
      doubleArray0[2] = (double) 1788.0F;
      doubleArray0[3] = (double) (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-953.0), 867.0, 1788.0, (-102.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 0L);
      assertNull(longArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1378), 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 0L;
      floatArray2[1] = 1788.0F;
      floatArray2[2] = (float) 0;
      floatArray2[3] = 1788.0F;
      floatArray2[4] = (float) 6;
      floatArray2[5] = (float) 6;
      floatArray2[6] = 1.0F;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray0, floatArray2);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1788.0F, 0.0F, 1788.0F, 6.0F, 6.0F, 1.0F}, floatArray2, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertEquals(7, floatArray2.length);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray2, floatArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-953.0), 867.0, 1788.0, (-102.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-1), 0, 0);
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7', '7', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)56);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(19, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 19, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-2145482265), (-2145482265), (-2145482265));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert((-1256), floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 611;
      intArray0[1] = 2;
      intArray0[2] = (-1256);
      intArray0[3] = (-12);
      intArray0[4] = (-1256);
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-2688.4989848442256));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2688.4989848442256), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 611);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, (-2688.4989848442256)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) 1080;
      longArray0[2] = (long) 1080;
      long[] longArray1 = ArrayUtils.insert((int) (short)2, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1080L, 1080L, 1080L}, longArray0);
      assertArrayEquals(new long[] {1080L, 1080L, 1080L, 1080L, 1080L, 1080L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(intArray0, 1080, (int) (short)2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)49;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte)49}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long long0 = new Long(63L);
      assertEquals(63L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(119L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(119L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(3095L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3095L, (long)long2);
      assertNotNull(long2);
      
      Long long3 = new Long(796L);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertEquals(796L, (long)long3);
      assertNotNull(long3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed((-1L));
      ArrayUtils.reverse((boolean[]) null);
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2183.4828149);
      doubleArray0[1] = (double) 82;
      doubleArray0[2] = (double) 119L;
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-1), (int) (short) (-14));
      assertArrayEquals(new double[] {(-2183.4828149), 82.0, 119.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), (-166));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Long long0 = new Long(63L);
      assertEquals(63L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(119L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(119L, (long)long1);
      assertNotNull(long1);
      
      Long long2 = new Long(3095L);
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals(3095L, (long)long2);
      assertNotNull(long2);
      
      Long long3 = new Long(796L);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long2));
      assertEquals(796L, (long)long3);
      assertNotNull(long3);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      mockRandom0.setSeed((-1L));
      ArrayUtils.reverse((boolean[]) null);
      double double0 = new Short((byte) (-1));
      assertEquals((short) (-1), double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2183.4828149);
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 119L;
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-1), (int) (short) (-14));
      assertArrayEquals(new double[] {(-2183.4828149), 67.0, 119.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)0, (-166));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertNotNull(map0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      Short short0 = new Short((short) (-1310));
      assertEquals((short) (-1310), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1310)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      short[] shortArray2 = new short[1];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1310);
      ArrayUtils.swap(shortArray2, (int) (short) (-1310), (-4157), (int) shortArray0[0]);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1310)}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      long long0 = (-1380L);
      long[] longArray0 = new long[2];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1380L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1380L), (-1380L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), (-1380L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      char char0 = '7';
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '7');
      assertNull(charArray0);
      
      char char1 = '(';
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, '(');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertEquals(1, charArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '(';
      intArray0[1] = (int) '7';
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) '(';
      ArrayUtils.swap(intArray0, 40, 40, Integer.MAX_VALUE);
      assertArrayEquals(new int[] {40, 55, Integer.MAX_VALUE, 40}, intArray0);
      assertEquals(4, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'('}, charArray1);
      assertEquals(1, charArray1.length);
      
      byte byte0 = (byte)45;
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)45);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1042), 841, (-1042));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 220);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[3] = 0;
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1941;
      int int1 = ArrayUtils.indexOf(longArray0, 1941L, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new long[] {1941L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)8192);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)8192, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short)19423);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)19423, (short)short2);
      assertNotNull(short2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(220, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 220, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-760));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2082);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertArrayEquals(new char[] {'.'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 52, 82, (int) (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte) (-1);
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-30), (-1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'H';
      charArray0[2] = '\'';
      charArray0[3] = 'X';
      charArray0[4] = 'l';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'7', 'H', '\'', 'X', 'l'}, charArray1);
      assertArrayEquals(new char[] {'7', 'H', '\'', 'X', 'l'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(5, charArray0.length);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-908);
      shortArray0[2] = (short) (-681);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-681), (int) (short) (-681));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1), (short) (-908), (short) (-681)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      int int0 = 0;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertNull(object0);
      assertEquals(3, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)83;
      Byte byte1 = new Byte((byte)83);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)83, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-55);
      Byte byte3 = Byte.valueOf((byte) (-55));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-55), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      byte byte4 = (byte)27;
      Byte byte5 = new Byte((byte)27);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertEquals((byte)27, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[2] = byte5;
      Byte byte6 = new Byte(byte0);
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte4);
      assertEquals((byte)83, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[3] = byte6;
      int int1 = (-2067947215);
      Byte byte7 = ArrayUtils.get(byteArray0, (-2067947215));
      assertNull(byte7);
      assertEquals(4, byteArray0.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift((short[]) null, 1, (int) (short) (-147), (int) (short) (-147));
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, (-378));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(21, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '`';
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3141.1278);
      doubleArray0[1] = 3104.126809388;
      doubleArray0[2] = (-102.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-102.0), (-74), 0.7);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3141.1278), 3104.126809388, (-102.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-74);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-74L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = '(';
      charArray0[2] = 'n';
      charArray0[3] = '&';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'X');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'B', '(', 'n', '&'}, charArray0);
      assertArrayEquals(new char[] {'X', 'B', '(', 'n', '&'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-102.0), (-102.0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-3141.1278), 3104.126809388, (-102.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-74), 9, (-1819));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)48);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ArrayUtils.shift(byteArray0, (int) (byte)103, (int) (byte)103, 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)103;
      objectArray0[1] = (Object) (byte)103;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) (byte)13);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'k';
      charArray0[2] = '';
      charArray0[3] = '[';
      charArray0[4] = 'D';
      ArrayUtils.swap(charArray0, 15, (-103), (int) (byte)103);
      assertArrayEquals(new char[] {'n', 'k', '', '[', 'D'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(charArray0, (int) (byte)103, 1379, (int) (byte)103);
      assertArrayEquals(new char[] {'n', 'k', '', '[', 'D'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1181.283156486747), (-2117), 947.2930219421);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2117), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2117, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('q');
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true, false, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)1;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-32));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte) (-22), (byte)5, (byte)108, (byte)1}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(40, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-229.0F));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-136));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)13);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)13, (short)short3);
      assertNotNull(short3);
      
      MockRandom mockRandom0 = new MockRandom((short) (-136));
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-136);
      intArray0[5] = (int) (short)13;
      ArrayUtils.shift(longArray0, (-715), 1, 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      float[] floatArray0 = new float[3];
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-491), (-491));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, (-491), 2987, 5);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2031;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)90;
      floatArray0[3] = (float) (byte)90;
      floatArray0[4] = (float) (byte)90;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (byte) (-84);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 7, (-2874));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2031.0F, 0.0F, 90.0F, 90.0F, 90.0F, 0.0F, (-84.0F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      ArrayUtils.shift(longArray0, (-2247), 2143101028, 7);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'K';
      charArray0[2] = '1';
      charArray0[3] = '8';
      ArrayUtils.swap(charArray0, (-2247), (int) (byte)90);
      assertArrayEquals(new char[] {'&', 'K', '1', '8'}, charArray0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-84);
      shortArray0[1] = (short) (byte) (-84);
      shortArray0[2] = (short) (byte)90;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)90;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)90;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-84), (short) (-84), (short)90, (short)0, (short)90, (short)0, (short)0, (short)90}, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2;
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'G';
      charArray0[2] = ')';
      charArray0[3] = 'R';
      charArray0[4] = '/';
      charArray0[5] = 'h';
      charArray0[6] = 'k';
      ArrayUtils.reverse(charArray0, (-2778), (int) (short)2);
      assertArrayEquals(new char[] {'G', 'O', ')', 'R', '/', 'h', 'k'}, charArray0);
      assertEquals(7, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1466);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1466}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'G';
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) 'k';
      doubleArray0[3] = (double) 'h';
      doubleArray0[4] = (double) ')';
      doubleArray0[5] = (double) 'R';
      doubleArray0[6] = (double) 'R';
      doubleArray0[7] = (double) 'O';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {71.0, 3.0, 107.0, 104.0, 41.0, 82.0, 82.0, 79.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      ArrayUtils.shift((float[]) null, (-5100), (-339), (-5100));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2243.89;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2243.89, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 774;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 774;
      doubleArray0[1] = (double) 774;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      float[] floatArray0 = new float[16];
      floatArray0[13] = (float) (byte)97;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(16, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 2145640314);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Character character0 = new Character(';');
      assertEquals(';', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1730);
      shortArray0[1] = (short)1226;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short) (-1730);
      shortArray0[5] = (short) (-1730);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1467);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-1730), (short)1226, (short)1, (short)3407, (short) (-1730), (short) (-1730)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (int) (short) (-1730));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1L, (-1L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) ';';
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1, 59}, intArray0);
      assertEquals(2, intArray0.length);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(2, floatArray0.length);
      
      floatArray0[1] = float1;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (float)floatArray0[0];
      doubleArray0[3] = (double) ';';
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (short) (-1730);
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.0), 1.0, (-1.0), 59.0, (-1.0), (-1.0), (-1730.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      float[] floatArray0 = new float[2];
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (-2267), (-2145133992));
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-2145133992));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (-94));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'K');
      assertEquals((-1), int0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      char[] charArray1 = ArrayUtils.subarray((char[]) null, (-2267), (-1));
      assertNull(charArray1);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      Short short0 = new Short((short)167);
      assertEquals((short)167, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      Byte byte0 = new Byte((byte) (-103));
      assertEquals((byte) (-103), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte0;
      byteArray0[2] = byte1;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2620.589518;
      doubleArray0[3] = (-1.0);
      ArrayUtils.swap(doubleArray0, 0, 0, 0);
      assertArrayEquals(new double[] {0.0, 1.0, 2620.589518, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("-32", string0);
      assertNotNull(string0);
      
      ArrayUtils.hashCode((Object) byte0);
      float[] floatArray0 = ArrayUtils.add((float[]) null, 469.27203F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {469.27203F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-32);
      longArray0[1] = (-4789L);
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-4789L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-32L), (-4789L)}, longArray0);
      assertArrayEquals(new long[] {(-32L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true}, booleanArray0));
      assertEquals(10, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) (-1.0);
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Object object0 = ArrayUtils.get(objectArray0, 0);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) (-4789L);
      objectArray0[7] = (Object) (-1.0);
      objectArray0[8] = (Object) true;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5]);
      assertEquals(0, int0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-166);
      shortArray0[2] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-2146959486), (int) (short) (-166));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short) (-166), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 26;
      longArray1[1] = (-32L);
      longArray1[2] = (long) 26;
      longArray1[3] = (long) (short)2;
      boolean boolean0 = ArrayUtils.contains(longArray1, (long) (short)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {26L, (-32L), 26L, 2L}, longArray1);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Byte byte0 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-64));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-64), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = ArrayUtils.get((Byte[]) null, (int) 2);
      assertNull(byte2);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)505;
      shortArray0[1] = (short)3064;
      shortArray0[2] = (short) (-1256);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3064;
      shortArray0[5] = (short)505;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 26, (-911));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)505, (short)3064, (short) (-1256), (short)0, (short)3064, (short)505}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = ArrayUtils.contains((long[]) null, (long) 26);
      assertFalse(boolean0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)11);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)11, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 1342);
      assertNull(byte2);
      assertEquals(2, byteArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-14), (int) (short) (-14));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte byte0 = new Byte((byte) (-71));
      assertEquals((byte) (-71), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)34}, byteArray0);
      assertArrayEquals(new byte[] {(byte)34}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 51.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 51);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1229);
      shortArray0[1] = (short) (-1);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-1);
      intArray1[1] = (int) (short) (-1);
      intArray1[2] = (int) (short) (-1229);
      intArray1[3] = (int) (short) (-1);
      intArray1[4] = (int) (short) (-1);
      intArray1[5] = 43;
      intArray1[6] = (int) (short) (-1);
      intArray1[7] = (-2145482264);
      intArray1[8] = (int) (short) (-1229);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray1, 69);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), (-1), (-1229), (-1), (-1), 43, (-1), (-2145482264), (-1229)}, intArray1);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-2145482264);
      ArrayUtils.shift(longArray0, 69);
      assertArrayEquals(new long[] {(-2145482264L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      Double double0 = new Double(43);
      assertEquals(43.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      ArrayUtils.reverse(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1229), (-2145482264), (-1), 43, (-1), (-1), (-1229), (-1), (-1)}, intArray1);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2145482264L);
      doubleArray1[1] = (double) (-5207.0F);
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = (double) (-2145482264);
      doubleArray1[4] = (-104.972);
      doubleArray1[5] = (double) (-1);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-2.145482264E9), (-5207.0), (-1.0), (-2.145482264E9), (-104.972), (-1.0)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) 1080;
      long[] longArray1 = ArrayUtils.insert((int) (short)2, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1080L, 1080L, 0L}, longArray0);
      assertArrayEquals(new long[] {1080L, 1080L, 1080L, 1080L, 0L, 0L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte0);
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 39.45F;
      floatArray0[1] = 39.45F;
      floatArray0[2] = 1.0F;
      ArrayUtils.swap(floatArray0, (int) (byte)41, Integer.MAX_VALUE, (-2720));
      assertArrayEquals(new float[] {39.45F, 39.45F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)41;
      shortArray0[1] = (short) (byte)41;
      shortArray0[2] = (short) (byte)41;
      shortArray0[3] = (short) (byte)41;
      shortArray0[4] = (short) (byte)41;
      shortArray0[5] = (short) (byte)41;
      shortArray0[6] = (short) (byte)41;
      shortArray0[7] = (short) (byte)41;
      shortArray0[8] = (short)919;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2151);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)919}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)41, (short)919}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)41;
      intArray0[1] = (int) (short)41;
      intArray0[2] = (int) (short)41;
      intArray0[3] = 1952;
      ArrayUtils.swap(intArray0, (int) (short)41, 125, (int) (short)41);
      assertArrayEquals(new int[] {41, 41, 41, 1952, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) (short)0;
      float[] floatArray2 = ArrayUtils.addAll((float[]) null, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray1.length);
      assertEquals(5, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '';
      longArray0[1] = (long) (-627);
      longArray0[2] = (long) 1;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {127L, (-627L), 1L}, longArray0);
      assertArrayEquals(new long[] {127L, (-627L), 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((short)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(3, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) 0.0F);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) doubleArray0[1], (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.contains((int[]) null, 6);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-1), 0, 0);
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7', '7', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte)0;
      byteArray1[2] = (Byte) (byte)0;
      byteArray1[3] = (Byte) (byte)0;
      byteArray1[4] = (Byte) (byte)0;
      byteArray1[5] = (Byte) (byte)0;
      byteArray1[6] = (Byte) (byte)0;
      byteArray1[7] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray1, byteArray2);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)56);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertEquals(8, byteArray1.length);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertSame(byteArray1, byteArray2);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '0');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'7', '7', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)byteArray1[1];
      floatArray0[1] = (float) (-1);
      boolean boolean2 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'o';
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-122));
      assertNull(byteArray0);
      
      Long long0 = new Long((byte) (-122));
      assertEquals((-122L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-122L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      int[] intArray0 = ArrayUtils.insert(1, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'q';
      charArray0[2] = 'F';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'T';
      charArray0[6] = 'F';
      charArray0[7] = 'q';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);
      assertNotNull(map0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1016.9, 1681.456655191493, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'F', 'q', 'F', 'q', 'q', 'T', 'F', 'q'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)14;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)14);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)95, (byte)83, (byte)35, (byte)2, (byte)14}, byteArray0);
      assertArrayEquals(new byte[] {(byte)95, (byte)83, (byte)35, (byte)2}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      ArrayUtils.swap(charArray0, 1, 16);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1067L);
      longArray0[1] = (long) 'J';
      longArray0[2] = (long) 'J';
      longArray0[3] = (long) 16;
      longArray0[4] = (long) 'J';
      long[] longArray1 = ArrayUtils.add(longArray0, (-2260L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1067L), 74L, 74L, 16L, 74L}, longArray0);
      assertArrayEquals(new long[] {(-1067L), 74L, 74L, 16L, 74L, (-2260L)}, longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1677;
      shortArray0[1] = (short) (-125);
      shortArray0[2] = (short) (-63);
      shortArray0[3] = (short)114;
      shortArray0[4] = (short)2205;
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1677, (short)1677, (short) (-125), (short) (-63), (short)114, (short)2205, (short) (-125), (short) (-63), (short)114, (short)2205}, shortArray1);
      assertArrayEquals(new short[] {(short)1677, (short) (-125), (short) (-63), (short)114, (short)2205}, shortArray0);
      assertEquals(10, shortArray1.length);
      assertEquals(5, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)20, (byte)66, (byte) (-67), (byte)0, (byte)33}, byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)9, (byte)20, (byte)66, (byte) (-67), (byte)0, (byte)33, (byte)2}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-110);
      doubleArray0[1] = 3313.7125401;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = (double) (byte) (-110);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (byte) (-1);
      doubleArray0[6] = 489.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 3313.7125401);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-110.0), 3313.7125401, (-1.0), (-110.0), (-1.0), (-1.0), 489.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1), (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean boolean1 = ArrayUtils.contains(doubleArray0, (-110.0), (double) (short)0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-110.0), 3313.7125401, (-1.0), (-110.0), (-1.0), (-1.0), 489.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      char[] charArray0 = new char[6];
      charArray0[3] = 'T';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer('T');
      assertEquals(84, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      ArrayUtils.shift(byteArray1, (-681), 1, (-2145373292));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short short0 = (short)1;
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Byte[] byteArray2 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray2, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      ArrayUtils.reverse((long[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)6;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-87), (byte)94, (byte)96, (byte) (-65), (byte)1, (byte) (-15), (byte)6}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2253.1F);
      ArrayUtils.swap(doubleArray0, (-387), (-387), (-387));
      assertArrayEquals(new double[] {(-2253.10009765625)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (-4429.267342532485);
      doubleArray0[3] = (double) (byte)2;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (short) (-147);
      ArrayUtils.swap(doubleArray0, (int) (short) (-147), (int) (byte)2);
      assertArrayEquals(new double[] {(-4429.267342532485), 2.0, 0.7, 2.0, (-1.0), (-147.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[1] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-535);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      shortArray0[4] = (short) (byte)byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences((Byte[]) null, byteArray0[0]);
      assertNull(byteArray1);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short) (-535);
      floatArray0[3] = 39.45F;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-2720), (int) (byte) (-1));
      assertArrayEquals(new float[] {4.0F, (-1.0F), (-535.0F), 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)4;
      intArray0[1] = (int) (short) (-300);
      intArray0[2] = (int) (short) (-300);
      intArray0[3] = (int) byte0;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) (short) (-300);
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) (byte) (-1);
      intArray0[8] = (int) (byte) (-1);
      ArrayUtils.swap(intArray0, (-1), (-515), (int) byte0);
      assertArrayEquals(new int[] {4, (-300), (-300), (-1), (-1), (-300), (-1), (-1), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-147);
      shortArray0[1] = (short)550;
      shortArray0[2] = (short)550;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (-2191);
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short)550;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)56);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {(short) (-147), (short)550, (short)550, (short)2, (short) (-2191), (short)2, (short)550}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)2;
      ArrayUtils.reverse(byteArray0, (int) (byte) (-128), 2562);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)126, (byte) (-128), (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 611;
      intArray0[1] = 611;
      intArray0[2] = 611;
      intArray0[0] = 611;
      intArray0[4] = 611;
      intArray0[5] = 2;
      ArrayUtils.swap(intArray0, 611, 1311);
      assertArrayEquals(new int[] {611, 611, 611, 0, 611, 2}, intArray0);
      assertEquals(6, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) byteArray1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 1311);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 2.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Random.setNextRandom((-89));
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 3483);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {611, 611, 611, 0, 611, 2}, intArray0);
      assertArrayEquals(new int[] {611, 611, 611, 0, 611, 2}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(intArray0, (java.util.Random) mockRandom0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {611, 0, 611, 611, 611, 2}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 15);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {15}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1361;
      intArray0[1] = 71;
      intArray0[2] = 8;
      intArray0[3] = (-30);
      intArray0[4] = 36;
      intArray0[5] = 1857;
      int[] intArray1 = ArrayUtils.add(intArray0, 51);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1361, 71, 8, (-30), 36, 1857}, intArray0);
      assertArrayEquals(new int[] {1361, 71, 8, (-30), 36, 1857, 51}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 71;
      int[] intArray3 = ArrayUtils.subarray(intArray2, 382, (-2470));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {71}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(1, intArray2.length);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)15;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-15), (byte)83, (byte)35, (byte)0, (byte) (-96), (byte)102, (byte)74, (byte)15}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3407;
      shortArray0[1] = (short) (-2039);
      shortArray0[2] = (short)1226;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)3407;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1730));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new short[] {(short)3407, (short) (-2039), (short)1226, (short)4, (short)3407}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (short) (-2039), 0);
      assertNull(longArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)3407;
      intArray0[1] = (int) (short)4;
      intArray0[2] = (int) (short)3407;
      intArray0[3] = (int) (short)1226;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {3407, 4, 3407, 1226}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = null;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byteArray0[0]);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)100;
      Byte byte1 = Byte.valueOf((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)28);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)28, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)100, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)7;
      Byte byte5 = Byte.valueOf((byte)7);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)7, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-112));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-112), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte4);
      assertFalse(byte4 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      Integer integer0 = new Integer((-1797));
      assertEquals((-1797), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift(byteArray0, (-681), (-681), (-681));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1797);
      floatArray0[1] = (float) 'T';
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 91, 91);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1797.0F), 84.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 831L;
      longArray0[1] = (long) 91;
      longArray0[2] = (long) (-681);
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) (-681);
      longArray0[5] = (long) (-1797);
      longArray0[6] = (long) (-1797);
      longArray0[7] = (long) 91;
      longArray0[8] = (long) 91;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new long[] {831L, 91L, (-681L), 84L, (-681L), (-1797L), (-1797L), 91L, 91L}, longArray1);
      assertArrayEquals(new long[] {831L, 91L, (-681L), 84L, (-681L), (-1797L), (-1797L), 91L, 91L}, longArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-84);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-84L), (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-84L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-39);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte) (-84);
      intArray0[3] = 0;
      intArray0[4] = (int) (byte) (-84);
      boolean boolean0 = ArrayUtils.contains(intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-39), 0, (-84), 0, (-84)}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      long[] longArray0 = new long[2];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-70);
      shortArray0[1] = (short)4003;
      shortArray0[2] = (short)18688;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 3771, 68);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-70), (short)4003, (short)18688}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 316, (-3280));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 316;
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 209);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-215), (-1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 2);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.TYPE;
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertNotSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      classArray0[1] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(2, classArray0.length);
      assertEquals(2, classArray1.length);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 51);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1212);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)778;
      shortArray0[3] = (short)3064;
      shortArray0[4] = (short) (-1672);
      shortArray0[5] = (short)505;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)3064, (int) (short)3064);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1212), (short) (-1), (short)778, (short)3064, (short) (-1672), (short)505}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      long[] longArray1 = ArrayUtils.add(longArray0, (-853L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {2L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 2L, (-853L)}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '6';
      charArray0[2] = '?';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '?', 47);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertArrayEquals(new char[] {'?', '6', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-707), (-1173));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)118;
      Byte byte1 = new Byte((byte)118);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-64);
      byteArray2[1] = (byte) (-64);
      byteArray2[2] = byte0;
      byte[] byteArray3 = ArrayUtils.addFirst(byteArray2, (byte) (-64));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte)118}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-64), (byte) (-64), (byte) (-64), (byte)118}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(4, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      
      Byte byte2 = new Byte((byte)118);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte)62);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)62, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray4 = ArrayUtils.addFirst(byteArray0, byte3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotNull(byteArray4);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray4.length);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      
      byte[] byteArray5 = ArrayUtils.toPrimitive(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotNull(byteArray5);
      assertArrayEquals(new byte[] {(byte)118}, byteArray5);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray5.length);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'd');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'d', 'd'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (int) (byte)118, 827);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-136));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)13);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)13, (short)short3);
      assertNotNull(short3);
      
      MockRandom mockRandom0 = new MockRandom((short) (-136));
      assertNotNull(mockRandom0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (-1));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-136);
      intArray0[5] = (int) (short)13;
      intArray0[6] = (int) (short)13;
      intArray0[7] = 0;
      intArray0[8] = 2771;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 1563);
      assertEquals(7, int0);
      assertArrayEquals(new int[] {0, 0, 0, (-1), (-136), 13, 13, 0, 2771}, intArray0);
      assertEquals(9, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertNotNull(map0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      ArrayUtils.swap(longArray0, (-1), (-1819), 2145147847);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte)122);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = (-1516.0);
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[7] = (double) (short) (-1516);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-48.358667646859), 4299.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[1] = true;
      Byte[] byteArray0 = new Byte[0];
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((byte[]) null, (byte)75);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      short[] shortArray1 = new short[0];
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      long[] longArray0 = ArrayUtils.insert((int) (byte)60, (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-760));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-8), (-8));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2082);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, (-8), 550);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-915), (int) (byte)32);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shuffle(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)180;
      shortArray0[1] = (short)180;
      ArrayUtils.shift(shortArray0, (-915), 1, 0);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte0);
      assertNull(byteArray0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1212, (int) (short)180);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)1212;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (short)180;
      longArray0[4] = (long) (-915);
      longArray0[5] = (long) (-915);
      longArray0[6] = (long) (short)180;
      longArray0[7] = (long) (byte) (-29);
      longArray0[8] = (long) (byte) (-29);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-2357.2627F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Byte[] byteArray1 = new Byte[5];
      byteArray1[1] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      
      Byte[] byteArray3 = new Byte[5];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      Byte[] byteArray4 = ArrayUtils.insert(2, byteArray3, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertNotNull(byteArray4);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray3.length);
      assertEquals(10, byteArray4.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 788, 788);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (float) 788, 15);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1634.8497F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1634.8497F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      Float float0 = new Float(1788.0F);
      assertEquals(1788.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 788, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) float0;
      objectArray0[2] = (Object) false;
      Object object0 = ArrayUtils.get(objectArray0, (-313), objectArray0[1]);
      assertEquals(1788.0F, object0);
      assertNotNull(object0);
      assertEquals(8, objectArray0.length);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) bitSet0;
      objectArray0[5] = (Object) bitSet2;
      objectArray0[6] = (Object) false;
      objectArray0[7] = (Object) float0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1788.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte)14);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)3407;
      intArray0[2] = (int) (short)2178;
      intArray0[3] = (int) (short)2952;
      intArray0[4] = (int) (short)1369;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3407);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 3407, 2178, 2952, 1369}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2952;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)2178, 311);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2952}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3407, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)25);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)25}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 850L;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[1] = (-1486.3279F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-103), 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11;
      intArray0[1] = 10;
      intArray0[2] = (int) 'K';
      intArray0[3] = (int) 'g';
      intArray0[4] = (int) 'g';
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 12);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {11, 10, 75, 103, 103}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (-4366.7F));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {850.0F, (-1486.3279F), (-400.8603F), (-400.8603F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)28, (byte)23, (byte)2, (byte)10, (byte)68, (byte)92, (byte) (-124), (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (int) (short) (-528), (int) (short) (-528));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ArrayUtils.shift(byteArray0, (int) (byte)103, (int) (byte)103, 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)103;
      objectArray0[1] = (Object) (byte)103;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) (byte)13);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'E';
      charArray0[2] = 'U';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '3', (int) (byte)103);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'3', 'E', 'U'}, charArray0);
      assertEquals(3, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)103, 1);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-2145482264), (-2145482264), (-2145482264));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.insert((-1256), floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (-2145482264));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-2.14548224E9F)}, floatArray2, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 611;
      intArray0[1] = 2;
      intArray0[2] = (-1256);
      intArray0[3] = 2;
      intArray0[4] = (-1256);
      intArray0[5] = 2;
      intArray0[6] = (-1256);
      boolean boolean2 = ArrayUtils.contains(intArray0, (-1256));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertArrayEquals(new int[] {611, 2, (-1256), 2, (-1256), 2, (-1256)}, intArray0);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(intArray0, 2082, 2);
      assertArrayEquals(new int[] {611, 2, (-1256), 2, (-1256), 2, (-1256)}, intArray0);
      assertEquals(7, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean3 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      float[] floatArray3 = ArrayUtils.removeAllOccurences(floatArray1, (-2286.085F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray3);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, ' ');
      assertNull(charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-2145482264), 15);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('q');
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1369, 683);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (short)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      
      objectArray0[0] = (Object) byte1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, int0);
      assertEquals(13, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ArrayUtils.shift(byteArray0, 1205, (int) (byte)50, 512);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = ':';
      charArray0[2] = 'A';
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {':', 'A', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences((long[]) null, (long) (byte)50);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      ArrayUtils.shift((int[]) null, (-2101), 1601, (-2101));
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shift(byteArray0, (int) (byte)0, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 2146737560, (-1871), (-1871));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.shift(booleanArray0, (-681), (-681), (-681));
      assertEquals(12, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-553.0), (-228), (double) (-681));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(12, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-707));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, 15, (int) (short) (-707), 101);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (-2146173407), 2064, 2064);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (-2144983810), (Byte) byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '';
      charArray0[2] = '1';
      charArray0[3] = '';
      charArray0[4] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '1');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\\', '', '', '\\'}, charArray1);
      assertArrayEquals(new char[] {'\\', '', '1', '', '\\'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) byte0;
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertNotNull(objectArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, objectArray0.length);
      assertSame(byteArray0, objectArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte)114;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte) (-7);
      byteArray1[5] = byte0;
      byteArray1[6] = byte0;
      byteArray1[7] = byte0;
      byteArray1[8] = (byte)56;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, (-2144983810));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2144983810, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 220);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)112;
      shortArray0[1] = (short) (byte)112;
      shortArray0[2] = (short) (byte)112;
      shortArray0[3] = (short) (byte)112;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)112);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertArrayEquals(new short[] {(short)112, (short)112, (short)112, (short)112}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (-382), (-382), (-382));
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte)15, 1715);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Double double0 = new Double((-2146959486));
      assertEquals((-2.146959486E9), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-2146959486));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2.146959486E9), (double)double1, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short) (byte)97;
      shortArray2[2] = (short) (byte)15;
      shortArray2[3] = (short) (byte)15;
      shortArray2[4] = (short)0;
      shortArray2[5] = (short) (byte)15;
      shortArray2[6] = (short) (byte) (-1);
      shortArray2[7] = (short) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray2, 1609);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1609, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1.0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(678);
      assertEquals(678, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(774);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(774, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1357);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1357, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(678);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(678, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(678);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(678, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[1]);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(774, (int)integer5);
      assertNotNull(integer5);
      assertEquals(7, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(820);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(820, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {678, 774, 1357, 678, 678, 774, 820}, intArray0);
      assertEquals(7, integerArray0.length);
      assertEquals(7, intArray0.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = Double.valueOf((double) 820);
      assertEquals(820.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(272.801515909);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(272.801515909, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1545.212872882);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(1545.212872882, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(678);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(678.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1327);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)521;
      shortArray0[3] = (short)601;
      shortArray0[4] = (short)47;
      shortArray0[5] = (short)1356;
      shortArray0[6] = (short) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) integerArray0[5]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 774, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-2146366388), (-2146366388), (-2146366388));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2146366388));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("{0, 1, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.length());
      assertEquals(6, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 850L, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-400.86F);
      floatArray0[2] = (-400.86F);
      floatArray0[3] = (-400.86F);
      floatArray0[4] = (-1486.3279F);
      floatArray0[5] = (float) 850L;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (-400.86F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-400.86F), 0.0F, (-400.86F), (-400.86F), (-1486.3279F), 850.0F, (-1.0F), (-400.86F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[16];
      intArray0[0] = 0;
      int int1 = ArrayUtils.indexOf(intArray0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-104));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-15), (byte)41, (byte) (-36), (byte) (-98), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)30, (byte) (-15), (byte)41, (byte) (-36), (byte) (-98), (byte) (-104), (byte)0}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '?', 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-104);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte) (-104), 2147483646, (double) 1);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-104.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)41, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      char[] charArray0 = new char[6];
      charArray0[3] = 'T';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer('T');
      assertEquals(84, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      ArrayUtils.shift(byteArray1, (-681), 1, (-2145373292));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, (-486));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short)1);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Long long0 = Long.getLong("The type must not be null", (-744L));
      assertEquals((-744L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long((-1L));
      assertFalse(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      Long[] longArray2 = new Long[4];
      longArray2[0] = long0;
      longArray2[1] = long1;
      longArray2[2] = long0;
      longArray2[3] = long1;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2, (-6089L));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-744L), (-1L), (-744L), (-1L)}, longArray3);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray3.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      Byte byte0 = new Byte((byte)124);
      assertEquals((byte)124, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1150.106), (-118.59325312607254));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      MockRandom mockRandom0 = new MockRandom(211L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 211L;
      longArray0[2] = 211L;
      longArray0[3] = 200L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 211L, 211L, 200L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 65);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      BitSet bitSet2 = ArrayUtils.indexesOf(doubleArray0, (double) 1L, (double) 1L);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(2, bitSet2.length());
      assertEquals("{1}", bitSet2.toString());
      assertEquals(64, bitSet2.size());
      assertEquals(1, bitSet2.cardinality());
      assertFalse(bitSet2.isEmpty());
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'X';
      charArray1[1] = '%';
      charArray1[2] = 'T';
      char[] charArray2 = ArrayUtils.removeElement(charArray1, ':');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'X', '%', 'T'}, charArray1);
      assertArrayEquals(new char[] {'X', '%', 'T'}, charArray2);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-1893.214569972432));
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 187;
      floatArray0[1] = (float) 187;
      floatArray0[2] = (float) 187;
      floatArray0[3] = (float) (-1406);
      floatArray0[4] = (float) 187;
      floatArray0[5] = (float) (-1406);
      floatArray0[6] = (float) 187;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {187.0F, 187.0F, 187.0F, (-1406.0F), 187.0F, (-1406.0F), 187.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {187.0F, 187.0F, 187.0F, (-1406.0F), 187.0F, (-1406.0F), 187.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1406);
      longArray0[1] = (long) '';
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-1406);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1406L), 127L, 1L, (-1406L)}, longArray1);
      assertArrayEquals(new long[] {(-1406L), 127L, 1L, (-1406L)}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (double) 1L);
      assertNull(doubleArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) (-1406L);
      floatArray3[1] = (float) 127L;
      floatArray3[2] = (float) 187;
      floatArray3[3] = (float) 1L;
      int int0 = ArrayUtils.indexOf(floatArray3, (-1.0F), (-1423));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-1406.0F), 127.0F, 187.0F, 1.0F}, floatArray3, 0.01F);
      assertEquals(4, floatArray3.length);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2588);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-13629);
      shortArray0[3] = (short) (-1334);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)8226);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2588), (short)2, (short) (-13629), (short) (-1334)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2588), (short)2, (short) (-13629), (short) (-1334)}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short) (-1334));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)2;
      longArray0[1] = (-3070L);
      longArray0[2] = (long) (short) (-13629);
      longArray0[3] = (long) (short) (-13629);
      longArray0[4] = (long) (short) (-2588);
      int int0 = ArrayUtils.indexOf(longArray0, (long) (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {2L, (-3070L), (-13629L), (-13629L), (-2588L)}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, false);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'k';
      charArray0[2] = '$';
      charArray0[3] = '`';
      int int0 = ArrayUtils.indexOf(charArray0, '');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'', 'k', '$', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1303);
      intArray0[1] = (int) 'k';
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)101);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1303), 107}, intArray0);
      assertArrayEquals(new int[] {(-1303), 107}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      byte byte0 = (byte) (-41);
      Byte byte1 = new Byte((byte) (-41));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-41), (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-41);
      doubleArray0[1] = (double) (byte) (-41);
      doubleArray0[2] = (-361.0);
      doubleArray0[3] = (double) (byte) (-41);
      doubleArray0[4] = (double) (byte) (-41);
      doubleArray0[5] = (double) (byte) (-41);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-41.0), (int) (byte) (-41));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-41.0), (-41.0), (-361.0), (-41.0), (-41.0), (-41.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 3, 4, 5}", bitSet0.toString());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      short[] shortArray0 = new short[6];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2998));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-2998);
      longArray0[1] = (long) (short) (-2998);
      longArray0[2] = (long) (short) (-2998);
      longArray0[3] = (long) (short) (-2998);
      ArrayUtils.shift(longArray0, (-19), 1163, (int) (short) (-2998));
      assertArrayEquals(new long[] {(-2998L), (-2998L), (-2998L), (-2998L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.swap(longArray0, 2, 120, (-3511));
      assertArrayEquals(new long[] {(-2998L), (-2998L), (-2998L), (-2998L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 33, (-2145373292), 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-144L);
      longArray0[1] = (long) 33;
      longArray0[2] = (long) (-2145373292);
      longArray0[3] = (long) 33;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 228.933;
      doubleArray0[1] = (double) (-144L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3.781));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {228.933, (-144.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 182);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L}, longArray0);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 182;
      floatArray0[1] = (float) 33L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 182, (-2145373292));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {182.0F, 33.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, (-2145373292), 4, 2143101028);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2143101028;
      intArray0[1] = (-2145373292);
      intArray0[2] = 182;
      intArray0[3] = 2143101028;
      intArray0[4] = 33;
      intArray0[5] = (-2145373292);
      intArray0[6] = 2143101028;
      intArray0[7] = (-2145373292);
      intArray0[8] = 182;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {182, (-2145373292), 2143101028, (-2145373292), 33, 2143101028, 182, (-2145373292), 2143101028}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[5] = 114;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      long[] longArray0 = new long[6];
      longArray0[0] = 79L;
      longArray0[1] = (long) 114;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 114;
      longArray0[4] = (long) 114;
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 79L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {79L, 114L, (-1L), 114L, 114L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 114L, (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(longArray1, (-1L), (-1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {79L, 114L, (-1L), 114L, 114L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 114L, (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1136);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-2103));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-2103), (short)short2);
      assertNotNull(short2);
      
      long[] longArray2 = ArrayUtils.insert(0, longArray1, longArray0);
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {79L, 114L, (-1L), 114L, 114L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {114L, (-1L), 114L, 114L, (-1L)}, longArray1);
      assertEquals(11, longArray2.length);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 1441);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[1];
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, 172);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 172, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (-2144983810), (Byte) byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '';
      charArray0[2] = '1';
      charArray0[3] = '';
      charArray0[4] = '\\';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '1');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\\', '', '', '\\'}, charArray1);
      assertArrayEquals(new char[] {'\\', '', '1', '', '\\'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(5, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '';
      intArray0[1] = (int) '\\';
      intArray0[2] = (int) byte0;
      ArrayUtils.shift(intArray0, 117);
      assertArrayEquals(new int[] {127, 92, 114}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-955L);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-955.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-955.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-955.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '8', 2931);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'2', '2', '2', '2', '2', '2'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) '2';
      objectArray0[1] = (Object) bitSet0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) '2';
      objectArray0[4] = (Object) '2';
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) (-955.0);
      BitSet bitSet1 = (BitSet)bitSet0.clone();
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new char[] {'2', '2', '2', '2', '2', '2'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertNotSame(bitSet0, bitSet1);
      assertEquals(0, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      objectArray0[7] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, (-3881), 282);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.removeElement((float[]) null, 1362.7F);
      assertNull(floatArray2);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2357);
      intArray0[3] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2357);
      intArray0[7] = 1;
      intArray0[8] = 1;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1810;
      shortArray0[1] = (short)1131;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (-342));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1810, (short)1131}, shortArray0);
      assertArrayEquals(new short[] {(short)1810, (short)1131, (short) (-342)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)1810;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2357);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1810.0, 1.0, (-2357.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1810.0, 1.0, (-2357.0), 1810.0, 1.0, (-2357.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = ArrayUtils.hashCode((Object) null);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, (-1406), 187);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1719);
      shortArray0[1] = (short) (-1719);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 187;
      longArray0[1] = (long) 82;
      longArray0[2] = (long) (short) (-1719);
      longArray0[3] = (long) (-1406);
      longArray0[4] = (long) (short) (-1719);
      longArray0[5] = (long) (short)1477;
      longArray0[6] = (long) (short)1477;
      longArray0[7] = (long) 187;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1406), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1406, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 1047;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1985), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1985, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      Object object0 = ArrayUtils.get((Object[]) null, 1);
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)44, 363);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)17, (byte)17, (byte)17, (byte)17, (byte)17}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 8);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 8);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, 103);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)17;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {17L, 0L, 0L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)17;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)17;
      shortArray0[4] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)17, (short)0, (short)17, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      Short short0 = new Short((short)167);
      assertEquals((short)167, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, 0, 1080);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      ArrayUtils.shift(charArray0, (-544), 1080, (-946));
      assertArrayEquals(new char[] {'&', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)5, (byte) (-30)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte) (-30)}, byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-30);
      shortArray0[1] = (short) (byte)5;
      shortArray0[2] = (short)112;
      shortArray0[3] = (short)49;
      shortArray0[4] = (short)167;
      shortArray0[5] = (short) (byte)5;
      shortArray0[6] = (short)82;
      shortArray0[7] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-30), (short)5, (short)112, (short)49, (short)167, (short)5, (short)82, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 220);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, 0.0F);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)27;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)27}, byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)1, (byte)27, (byte)112, (byte)1, (byte)27}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1257;
      intArray0[1] = 114;
      intArray0[2] = 114;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 114, 840);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) 1257, (-1899));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 840;
      floatArray0[1] = (float) (-1899);
      floatArray0[2] = (-1428.325F);
      floatArray0[3] = (float) 114;
      floatArray0[4] = (-1428.325F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-238.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {840.0F, (-1899.0F), (-1428.325F), 114.0F, (-1428.325F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {840.0F, (-1899.0F), (-1428.325F), 114.0F, (-1428.325F), (-238.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float((-1899.0F));
      assertEquals((-1899.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[3];
      floatArray2[0] = (Float) 114.0F;
      floatArray2[1] = (Float) (-1428.325F);
      floatArray2[2] = (Float) (-1428.325F);
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray3.length);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
      
      ArrayUtils.swap((Object[]) floatArray2, Integer.MAX_VALUE, (-2499), 840);
      assertEquals(3, floatArray2.length);
      assertSame(floatArray2, floatArray3);
      
      ArrayUtils.shift(floatArray0, (-2522));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1428.325F), 114.0F, (-1428.325F), 840.0F, (-1899.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 114);
      assertEquals(2, int0);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int1 = ArrayUtils.indexOf(intArray0, 99);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)113;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)113, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      short[] shortArray0 = new short[10];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(10, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[1] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-535);
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      shortArray0[4] = (short) (byte)byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences((Byte[]) null, byteArray0[0]);
      assertNull(byteArray1);
      assertEquals(6, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short) (-535);
      floatArray0[3] = 39.45F;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-2720), (int) (byte) (-1));
      assertArrayEquals(new float[] {4.0F, (-1.0F), (-535.0F), 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0);
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-300), (short)0, (short)3407, (short) (-1), (short) (-535), (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'R';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'m', 'd', 'd', 'R', '>', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'R';
      ArrayUtils.swap(longArray0, 1, 830);
      assertArrayEquals(new long[] {82L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)102);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)102, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-2766));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-2766), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)5);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)5, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)13);
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short)13, (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom((-2573L));
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 'd';
      floatArray0[1] = (float) 82L;
      floatArray0[2] = (float) (short)102;
      floatArray0[3] = (float) 'd';
      floatArray0[4] = (float) 'z';
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {100.0F, 102.0F, 100.0F, 122.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(floatArray0, (float) 82L);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertArrayEquals(new float[] {100.0F, 102.0F, 100.0F, 122.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-175));
      assertEquals((-175), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-175)}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-71);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (int) (byte) (-71);
      intArray0[3] = (int) (byte) (-71);
      intArray0[4] = (int) (byte) (-71);
      intArray0[5] = (int) (byte) (-71);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-71));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-71), Integer.MAX_VALUE, (-71), (-71), (-71), (-71)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("{0, 2, 3, 4, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-71), Integer.MAX_VALUE, (-71), (-71), (-71), (-71)}, intArray0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-71), Integer.MAX_VALUE, (-71), (-71), (-71), (-71)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-71), Integer.MAX_VALUE, (-71), (-71), (-71), (-71)}, intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-239), (-239));
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)6;
      ArrayUtils.shift(byteArray0, (int) (byte)2, (int) (byte)2, 2314);
      assertArrayEquals(new byte[] {(byte)2, (byte)65, (byte) (-96), (byte)6}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)69);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)65, (byte) (-96), (byte)6}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = 0.0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertNotNull(characterArray0);
      assertArrayEquals(new char[] {'j', 'j'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'j';
      intArray0[1] = (-1223);
      intArray0[2] = (int) (byte)32;
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {106, (-1223), 32}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {106, (-1223), 32}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1172);
      shortArray0[1] = (short)3551;
      shortArray0[2] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new short[] {(short) (-1172), (short)3551, (short) (-1172)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-1172));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-582), 14, (-582));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift((long[]) null, (-582));
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-727), (-424));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(15, floatArray0.length);
      assertEquals(30, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-229.0F));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-229.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-399);
      int int0 = ArrayUtils.indexOf(intArray0, 1, (-890));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-399)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2', 778);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, 778, 90);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2', 778);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) true;
      objectArray0[2] = (Object) bitSet0;
      objectArray0[3] = (Object) 0.0;
      ArrayUtils.swap(objectArray0, 778, 90);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'e';
      charArray0[3] = 'f';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'f');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'e', 'f'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'f', 'f', 'e', 'f'}, charArray0);
      assertArrayEquals(new char[] {'e'}, charArray1);
      assertArrayEquals(new char[] {'f', 'f', 'f'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1465), (short)1387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1465, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (int) (byte)0, (int) (byte)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2020);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2020);
      intArray0[1] = (int) (short) (-2020);
      intArray0[1] = (int) (short) (-2020);
      ArrayUtils.swap(intArray0, (-2020), (-4025), 1);
      assertArrayEquals(new int[] {(-2020), (-2020), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)58);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)58, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)61);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)61);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)58, (byte) (-1), (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, '!');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) 0;
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 172, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[18];
      longArray0[0] = (long) byte0;
      longArray0[1] = 2147483647L;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.remove(longArray0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(18, longArray0.length);
      assertEquals(17, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      ArrayUtils.shift(charArray0, (int) 'E');
      assertArrayEquals(new char[] {'U', ' ', 'E', '\u0000', '\u0000', '\u0000', 'h'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 9);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.TYPE;
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      assertNotSame(class1, class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      
      classArray0[3] = class0;
      Class<Byte> class2 = Byte.class;
      classArray0[4] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[5] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[6] = class4;
      ArrayUtils.swap(charArray0, 2145792335, (-1768));
      assertArrayEquals(new char[] {'U', ' ', 'E', '\u0000', '\u0000', '\u0000', 'h'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-76));
      assertEquals((byte) (-76), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) classArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(9, classArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3189.0), (-1768));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Short short0 = new Short((short) (-159));
      assertEquals((short) (-159), (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-7);
      longArray0[2] = (long) (byte) (-7);
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)32;
      longArray0[6] = (long) (byte) (-7);
      longArray0[6] = (-1040L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1040L), 52);
      assertEquals(6, int0);
      assertArrayEquals(new long[] {0L, (-7L), (-7L), (-24L), 32L, 0L, (-1040L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shift(byteArray0, 512, (-2995), (int) (byte)106);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((long[]) null, (-1402));
      long[] longArray0 = ArrayUtils.add((long[]) null, 867L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {867L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray1, false, 2627);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-17348);
      shortArray0[1] = (short) (-1361);
      shortArray0[2] = (short)611;
      shortArray0[3] = (short) (-47);
      shortArray0[4] = (short) (-894);
      shortArray0[5] = (short)10292;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-47));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-47), (short) (-17348), (short) (-1361), (short)611, (short) (-47), (short) (-894), (short)10292}, shortArray1);
      assertArrayEquals(new short[] {(short) (-17348), (short) (-1361), (short)611, (short) (-47), (short) (-894), (short)10292}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), 0L, (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (-1), (-1), 74);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '6';
      doubleArray0[1] = (double) (-1380L);
      doubleArray0[2] = (double) (-1380L);
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) (-1380.0F);
      doubleArray0[5] = (double) (-1380L);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7, 3055, 1.5);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {54.0, (-1380.0), (-1380.0), 0.0, (-1380.0), (-1380.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 74, 74);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {54.0, (-1380.0), (-1380.0), 0.0, (-1380.0), (-1380.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, 2379);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(1, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-108);
      ArrayUtils.reverse(byteArray0, (-1260), (int) (byte) (-110));
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-1), (byte)0, (byte)37, (byte)121, (byte) (-108)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-110);
      intArray0[3] = (int) (byte)37;
      intArray0[4] = (int) (byte) (-108);
      intArray0[5] = 1941;
      intArray0[6] = (int) (byte)121;
      intArray0[7] = (int) (byte)121;
      ArrayUtils.shift(intArray0, 121, 121, (int) (byte) (-108));
      assertArrayEquals(new int[] {121, (-1), (-110), 37, (-108), 1941, 121, 121}, intArray0);
      assertEquals(8, intArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte) (-108);
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 37, (-1260), (double) byte0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray1);
      assertNotNull(objectArray0);
      assertEquals(4, byteArray1.length);
      assertEquals(4, objectArray0.length);
      assertSame(byteArray1, objectArray0);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)37, 37);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      Short short0 = new Short((byte) (-21));
      assertEquals((short) (-21), (short)short0);
      assertNotNull(short0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-22L);
      longArray0[1] = (long) (byte) (-21);
      longArray0[2] = (long) (byte) (-21);
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)32;
      longArray0[5] = (long) (byte) (-21);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1040L), 54);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-22L), (-21L), (-21L), (-24L), 32L, (-21L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shift(byteArray0, 512, (-2995), (int) (byte)57);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1775), (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)322);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)322}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      short[] shortArray3 = new short[1];
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      
      shortArray3[0] = (short) (byte)32;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)32}, shortArray3);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray3.length);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 8);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 8);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, 103);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)17;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {17L, 0L, (-1L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, true, 93);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 1257;
      intArray0[1] = 114;
      intArray0[2] = 114;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 114, 840);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) 1257, (-1899));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 741L;
      longArray0[1] = (long) 114;
      long[] longArray1 = ArrayUtils.add(longArray0, 1804L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {741L, 114L}, longArray0);
      assertArrayEquals(new long[] {741L, 114L, 1804L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.indexOf(intArray0, 1618, 114);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1257, 114, 114}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'V', 'r'}, charArray0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      ArrayUtils.shift(byteArray0, (-1406), 1499, 8);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Double double0 = new Double((byte)0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1108.502092);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1108.502092, (double)double1, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double((-1406));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-1406.0), (double)double2, 0.01);
      assertNotNull(double2);
      
      Double double3 = Double.valueOf(3.0);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(3.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1499;
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (byte)32;
      longArray0[3] = (long) 'T';
      longArray0[4] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-67L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-67L), 1499L, 0L, 32L, 84L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {1499L, 0L, 32L, 84L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(10, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'T', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'T');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', 'a'}, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)32, 1499);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (-2958));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2958, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      Integer integer0 = new Integer((-3790));
      assertEquals((-3790), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[3];
      longArray0[2] = (long) (-3790);
      ArrayUtils.shift(longArray0, (-3790));
      assertArrayEquals(new long[] {0L, (-3790L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift((Object[]) null, 834);
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 867L;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) (-1));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new double[] {0.0, 867.0, (-1.0), (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(4, bitSet1.length());
      assertEquals("{2, 3}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(2, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-95);
      longArray0[1] = (long) (byte) (-95);
      longArray0[2] = (long) (byte) (-95);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-95L), (-95L), (-95L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-684);
      intArray0[1] = (int) (short) (-684);
      intArray0[2] = (int) (short) (-684);
      intArray0[3] = (int) (short) (-684);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {(-684), (-684), (-684), (-684)}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Byte byte0 = new Byte((byte)79);
      assertEquals((byte)79, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)36);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)36, (byte)byte1);
      assertNotNull(byte1);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)36, 108);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-684), (-684), (-684), (-684)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '$';
      charArray0[2] = 'a';
      charArray0[3] = '$';
      charArray0[4] = 'l';
      charArray0[5] = '8';
      charArray0[6] = '(';
      charArray0[7] = '3';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '8');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {')', '$', 'a', '$', 'l', '8', '(', '3'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(6, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'R', '+', 'R', '+'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.shift(byteArray0, (-526), 40, 2306);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)57, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '+';
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) 'R';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '+';
      charArray1[1] = 'R';
      int int1 = ArrayUtils.lastIndexOf(charArray1, '2', (int) (byte)57);
      assertFalse(int1 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'+', 'R'}, charArray1);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1);
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '2';
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) 'R';
      intArray0[3] = (int) '+';
      intArray0[4] = (-1);
      intArray0[5] = 3;
      intArray0[6] = (-1);
      intArray0[7] = (int) (byte)57;
      intArray0[8] = (int) '+';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      long[] longArray0 = new long[5];
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 0);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, Float.NaN, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 850L, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-400.8603F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[4] = (-1486.3279F);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'g';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1250), (-1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'g', 'g', 'K', 'K', 'g'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'K';
      intArray0[1] = (-103);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 508);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {75, (-103)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, Float.NaN);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-400.8603F), 0.0F, (-400.8603F), (-400.8603F), (-1486.3279F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2146902145);
      intArray0[1] = (-1048);
      intArray0[2] = 91;
      intArray0[3] = 2155;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 2465;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2146902145), (-1048), 91, 2155, 0, 1, 2465}, intArray0);
      assertArrayEquals(new int[] {0, (-2146902145), (-1048), 91, 2155, 0, 1, 2465}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)859;
      shortArray0[1] = (short) (-1346);
      shortArray0[2] = (short)21845;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1772));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)859, (short) (-1346), (short)21845}, shortArray0);
      assertArrayEquals(new short[] {(short)859, (short) (-1346), (short)21845}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 687;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 321, 687);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 321, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[3] = 1515.0F;
      floatArray0[1] = (-1486.3279F);
      floatArray0[2] = 1002.85474F;
      floatArray0[3] = 1.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1486.3279F), 1002.85474F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 881L;
      longArray0[1] = 881L;
      longArray0[2] = 881L;
      longArray0[3] = 881L;
      longArray0[4] = 881L;
      longArray0[5] = 881L;
      longArray0[6] = 881L;
      longArray0[7] = 881L;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 881L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {881L, 881L, 881L, 881L, 881L, 881L, 881L, 881L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, (-455.26F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, (-1486.3279F), 1002.85474F, 1.0F, 0.0F, 0.0F, (-455.26F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1486.3279F), 1002.85474F, 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray2.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)78;
      ArrayUtils.swap(byteArray0, (int) (byte)0, 0, (int) (byte)8);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)8, (byte)0, (byte)78}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 796L;
      doubleArray0[1] = (double) 796L;
      doubleArray0[2] = (double) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)2, (int) (byte)2);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)2, (int) (byte)2, 1746);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) 1746;
      floatArray0[2] = (float) (-2995);
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) 796L;
      floatArray0[5] = (float) (-2995);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1702), 1746);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F, 1746.0F, (-2995.0F), 65.0F, 796.0F, (-2995.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 1746.0F, (-2995.0F), 65.0F, 796.0F, (-2995.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte)2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)2}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'z';
      charArray0[2] = 'R';
      int int0 = ArrayUtils.indexOf(charArray0, 'R');
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'R', 'z', 'R'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)111, (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)15;
      longArray0[2] = (long) (byte)15;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 15L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {15L, (-1L), 15L, 15L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 15L, 15L}, longArray0);
      assertEquals(4, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Long[] longArray2 = new Long[7];
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      longArray2[0] = long0;
      longArray2[1] = (Long) (-1L);
      longArray2[2] = (Long) (-1L);
      longArray2[3] = (Long) 15L;
      longArray2[4] = (Long) 15L;
      longArray2[5] = (Long) 15L;
      longArray2[6] = (Long) 15L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), 15L, 15L, 15L, 15L}, longArray3);
      assertEquals(7, longArray2.length);
      assertEquals(7, longArray3.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      long[] longArray4 = ArrayUtils.add(longArray0, (long) longArray2[6]);
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {(-1L), 15L, 15L, 15L}, longArray4);
      assertArrayEquals(new long[] {(-1L), 15L, 15L}, longArray0);
      assertEquals(7, longArray2.length);
      assertEquals(4, longArray4.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray4);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 4;
      floatArray0[3] = (float) 4;
      floatArray0[4] = (float) 4;
      float[] floatArray1 = ArrayUtils.insert(4, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {4.0F, 4.0F, 4.0F, 4.0F, 4.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F, 4.0F, 4.0F, 4.0F, 4.0F, 4.0F, 4.0F, 4.0F, 4.0F, 4.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(15, int0);
      assertEquals(16, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      long[] longArray2 = ArrayUtils.add(longArray0, 1618L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {1618L}, longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-147));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(16, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((long[]) null, 1865);
      long[] longArray0 = ArrayUtils.add((long[]) null, (-21L));
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {(-21L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray1, false, (int) (short) (-300));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[1] = 352L;
      longArray0[2] = (-1L);
      longArray0[3] = 1492L;
      longArray0[4] = (-4726L);
      longArray0[5] = (-320L);
      longArray0[1] = (-2150L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-320L);
      floatArray0[2] = (float) (-2150L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-320.0F), (-2150.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 881L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byte byte1 = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)78;
      ArrayUtils.swap(byteArray0, (-569), (int) (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)8, (byte)91, (byte)78, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)78;
      byteArray1[1] = (Byte) (byte)2;
      byteArray1[2] = (Byte) (byte)91;
      byteArray1[3] = (Byte) (byte)91;
      byteArray1[4] = (Byte) (byte)8;
      byteArray1[5] = (Byte) (byte)8;
      Byte byte2 = new Byte(byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)91, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray1[6] = byte2;
      byteArray1[7] = (Byte) (byte)91;
      Byte[] byteArray2 = new Byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte0 == byte1);
      assertEquals((byte)8, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray2[0] = byte3;
      byteArray2[1] = (Byte) (byte)8;
      byteArray2[2] = byte2;
      byteArray2[3] = (Byte) (byte)91;
      byteArray2[4] = byte2;
      byteArray2[5] = (Byte) (byte)2;
      byteArray2[6] = (Byte) (byte)91;
      Byte[] byteArray3 = ArrayUtils.removeElements(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(7, byteArray2.length);
      assertEquals(8, byteArray1.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[2] = (short)180;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4096, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-199), (short)0, (short)180}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (short)0;
      ArrayUtils.swap(shortArray0, (-1), 2, (int) (short)180);
      assertArrayEquals(new short[] {(short)180, (short)0, (short) (-199)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, (Byte[]) null);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1L);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.0, (double)double2, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(3004.703192);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(3004.703192, (double)double3, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(64.0);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertEquals(64.0, (double)double4, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((short)180);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(180.0, (double)double5, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double(1L);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals(1.0, (double)double6, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1.0, 1.0, 3004.703192, 64.0, 180.0, 1.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)100;
      Byte byte1 = Byte.valueOf((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)100, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byteArray0[3] = (Byte) byte0;
      Byte byte3 = new Byte((byte)28);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)28, (byte)byte3);
      assertNotNull(byte3);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte3, (int) byte0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2998);
      shortArray0[1] = (short)0;
      ArrayUtils.swap(shortArray0, (int) (short)0, (-2946), (int) (short) (-2998));
      assertArrayEquals(new short[] {(short) (-2998), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 63.0, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-2295);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, 405, 8, (-2007));
      assertArrayEquals(new int[] {(-1), 93, (-1), (-2295), 93}, intArray0);
      assertEquals(5, intArray0.length);
      
      Short short0 = new Short((byte)87);
      assertEquals((short)87, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2694);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)2694, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)2694);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)2694, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((byte)87);
      assertFalse(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)87, (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[3];
      short short4 = (short) (-11);
      Short short5 = Short.valueOf((short) (-11));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertEquals((short) (-11), (short)short5);
      assertNotNull(short5);
      
      shortArray0[0] = short5;
      shortArray0[1] = short2;
      shortArray0[2] = short3;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, short4);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-11), (short)2694, (short)87}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short) (-11);
      intArray1[1] = (-1);
      intArray1[2] = (-3665);
      intArray1[3] = 93;
      intArray1[4] = (-1830);
      intArray1[5] = (-2007);
      intArray1[6] = (int) short4;
      int int1 = ArrayUtils.indexOf(intArray1, 55, 2113123909);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-11), (-1), (-3665), 93, (-1830), (-2007), (-11)}, intArray1);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)50);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) byte1;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte1;
      objectArray0[6] = (Object) byte0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) byte1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 68);
      assertEquals(7, int0);
      assertEquals(9, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)91;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)50, (byte)91, (byte)91, (byte) (-89), (byte)91}, byteArray1);
      assertArrayEquals(new byte[] {(byte)91, (byte)50, (byte)91, (byte)91, (byte) (-89), (byte)91}, byteArray0);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)14;
      shortArray0[2] = (short)126;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)126;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {126.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 126.0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (short)126);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 0.7, 775, 0.7);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-4));
      assertEquals((byte) (-4), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)47);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)47);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-615.668465379657), 11, (-615.668465379657));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      
      objectArray0[0] = (Object) byte1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, int0);
      assertEquals(13, objectArray0.length);
      
      long[] longArray1 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[4];
      longArray1[0] = 1006L;
      longArray1[1] = (-5150L);
      longArray1[2] = (-1L);
      longArray1[3] = 2411L;
      long[] longArray2 = ArrayUtils.addAll(longArray1, (long[]) null);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1006L, (-5150L), (-1L), 2411L}, longArray1);
      assertArrayEquals(new long[] {1006L, (-5150L), (-1L), 2411L}, longArray2);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1000L);
      longArray0[1] = (-950L);
      longArray0[2] = 2147483647L;
      longArray0[3] = 19L;
      longArray0[4] = (-1L);
      longArray0[5] = 1637L;
      longArray0[6] = 2814L;
      longArray0[7] = (-2147483648L);
      longArray0[8] = 1L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1000L), (-950L), 2147483647L, 19L, (-1L), 1637L, 2814L, (-2147483648L), 1L}, longArray0);
      assertEquals(18, longArray1.length);
      assertEquals(9, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 8);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 8);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)0, 103);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)17, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = (-1516.0);
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[7] = (double) (short) (-1516);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-48.358667646859), 4299.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf((char[]) null, '&');
      assertEquals((-1), int0);
      
      Short short0 = new Short((short) (-2810));
      assertEquals((short) (-2810), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)64);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)64, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-594));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-594), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)835);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)835, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-594));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short) (-594), (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short) (-1));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short) (-1), (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)1680);
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)1680, (short)short6);
      assertNotNull(short6);
      
      short[] shortArray1 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray1);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)64, (int) (short) (-594));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Short[] shortArray0 = new Short[4];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift((short[]) null, 1, (int) (short) (-147), (int) (short) (-147));
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, (-378));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(21, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = '`';
      charArray0[2] = '[';
      charArray0[3] = 'k';
      charArray0[4] = 'A';
      charArray0[5] = 'V';
      charArray0[6] = 'v';
      int int2 = ArrayUtils.indexOf(charArray0, 'V');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, int2);
      assertArrayEquals(new char[] {'2', '`', '[', 'k', 'A', 'V', 'v'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short) (-147));
      assertEquals((short) (-147), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)642);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)642, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)642);
      assertFalse(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short)642, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-1), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)624);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)624, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[2]);
      assertTrue(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short0));
      assertTrue(short5.equals((Object)short2));
      assertEquals((short)642, (short)short5);
      assertNotNull(short5);
      assertEquals(7, shortArray0.length);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short) shortArray0[1]);
      assertTrue(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short5));
      assertTrue(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertEquals((short)642, (short)short6);
      assertNotNull(short6);
      assertEquals(7, shortArray0.length);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-147), (short)642, (short)642, (short) (-1), (short)624, (short)642, (short)642}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-707));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 51.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-76));
      assertEquals((byte) (-76), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-76));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-76), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-34));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-34), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-34));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-34), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte)12);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)12, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[6] = byte6;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, object0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = ArrayUtils.insert(2, byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)36, (byte)53, (byte)1, (byte) (-39), (byte)104, (byte) (-56), (byte)36, (byte)122, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(15, floatArray0.length);
      assertEquals(30, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-229.0F));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Short short0 = new Short((short)167);
      assertEquals((short)167, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, (int) (short)167, 1080);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      ArrayUtils.shift(charArray0, 1, 1080, (-946));
      assertArrayEquals(new char[] {'&', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)31;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)31, (byte)0, (byte)5, (byte) (-30)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte) (-30)}, byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-30);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)31, (byte)0, (byte)5, (byte) (-30)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte) (-30)}, byteArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 115);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      characterArray0[1] = character0;
      Character character1 = Character.valueOf('\'');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('\'', (char)character1);
      assertNotNull(character1);
      
      characterArray0[2] = character1;
      Character character2 = new Character('M');
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('M', (char)character2);
      assertNotNull(character2);
      
      characterArray0[3] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', 'M', '\'', 'M'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)0;
      longArray0[4] = (long) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)51);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      Byte[] byteArray4 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertEquals(0, byteArray4.length);
      assertNotSame(byteArray4, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      
      ArrayUtils.shift(charArray0, (int) byte0, 931, (int) (byte)5);
      assertArrayEquals(new char[] {'M', 'M', 'M', '\''}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1711L;
      doubleArray0[3] = 0.0;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1.0F));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-257.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-257.0F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-257.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      try { 
        Byte.valueOf("`.G}1y/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`.G}1y/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, 8, 8, 8);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)4;
      Byte byte1 = new Byte((byte)4);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)4, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-95);
      Byte byte3 = new Byte((byte) (-95));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-95), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)4, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)4, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-95));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte) (-95), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      ArrayUtils.swap((short[]) null, 1, (int) byte2, 2146889435);
      assertFalse(byte2 == byte0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2146889435;
      longArray0[1] = (long) byte0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {4L, 2146889435L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) (byte)4;
      doubleArray0[2] = (double) byte2;
      doubleArray0[3] = (double) 4L;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) byte0;
      doubleArray0[6] = (double) 2146889435L;
      doubleArray0[7] = (double) 4L;
      doubleArray0[8] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 761.332557221847, (-587), 0.1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {4.0, 4.0, (-95.0), 4.0, 4.0, 4.0, 2.146889435E9, 4.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, true}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)38);
      assertEquals((byte)38, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, (int) (byte)38);
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      Byte byte0 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)122);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)122, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) (short)3407;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short)2952;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)4;
      floatArray0[6] = (float) (short)3407;
      floatArray0[7] = (float) (short)2952;
      floatArray0[8] = (float) (-2707);
      ArrayUtils.swap(floatArray0, 2146856893, 0, 6);
      assertArrayEquals(new float[] {4.0F, 3407.0F, 0.0F, 2952.0F, 0.0F, 4.0F, 3407.0F, 2952.0F, (-2707.0F)}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short)0);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[2] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'c');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'c', '\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4594L), 308);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) '6';
      ArrayUtils.swap(intArray0, 308, 99, 99);
      assertArrayEquals(new int[] {99, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)3);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)3, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean0);
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      long[] longArray1 = ArrayUtils.insert((int) (short)0, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1080L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1080L, (-38L), (-38L), 1080L, (-38L), (-38L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2217);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, (-2217), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      Byte byte0 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)49, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(0, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2217);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      ArrayUtils.shuffle(doubleArray1, (java.util.Random) mockRandom0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2217.0), 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-707));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-707);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short) (-707);
      floatArray0[4] = (float) (short) (-707);
      floatArray0[5] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-707.0F), 0.0F, 0.0F, (-707.0F), (-707.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) (short) (-707);
      longArray0[1] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = (long) 0;
      longArray0[6] = 1L;
      longArray0[7] = 0L;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1L, (-707L), 0L, 0L, 0L, 1L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 1L, (-707L), 0L, 0L, 0L, 1L, 0L}, longArray0);
      assertEquals(9, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 41.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('7');
      assertEquals('7', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      Short short0 = new Short((short)167);
      assertEquals((short)167, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, 0, 1080);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'E';
      ArrayUtils.shift(charArray0, (-544), 1080, (-946));
      assertArrayEquals(new char[] {'&', 'E'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals((byte)5, object1);
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte) (-30)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)5, (byte) (-30)}, byteArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(2L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)5, (byte) (-30), (byte)5}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      float[] floatArray2 = ArrayUtils.insert(2, floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(8, floatArray2.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift(shortArray0, (-1186), 512, (int) (short) (-147));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 2;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) Integer.MAX_VALUE, 512);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new float[] {2.14748365E9F, 2.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-14);
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short) (-14);
      intArray0[1] = (int) (short) (-14);
      ArrayUtils.swap(intArray0, 1921, 2142843339, 65);
      assertArrayEquals(new int[] {(-14), (-14)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Short short1 = new Short((short) (-14));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-14), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)98);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)98, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((byte) (-85));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short) (-85), (short)short4);
      assertNotNull(short4);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = short3;
      shortArray1[1] = short2;
      shortArray1[2] = (Short) (short) (-14);
      shortArray1[3] = short3;
      shortArray1[4] = short1;
      shortArray1[5] = short1;
      shortArray1[6] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)98, (short)0, (short) (-14), (short)98, (short) (-14), (short) (-14), (short) (-14)}, shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      
      int int0 = ArrayUtils.indexOf(shortArray2, (short)553, (int) short0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)98, (short)0, (short) (-14), (short)98, (short) (-14), (short) (-14), (short) (-14)}, shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) (byte)13;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 26;
      floatArray0[1] = (float) 103L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-4382), 2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {26.0F, 103.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {26.0F, 103.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, (int) (byte)13, 180, (-491));
      assertArrayEquals(new long[] {103L, 13L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[0];
      int int0 = new Short((byte) (-21));
      assertEquals((short) (-21), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-21);
      longArray0[2] = (long) (byte) (-21);
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)32;
      longArray0[5] = (long) (byte) (-21);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), 52);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, (-21L), (-21L), (-24L), 32L, (-21L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shift(byteArray0, 512, (-2995), (int) (byte)57);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1775), (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray2 = ArrayUtils.add(shortArray0, (short)322);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)322}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = (-1516.0);
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[7] = (double) (short) (-1516);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-48.358667646859), 4299.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {64.0, 0.0, (-1516.0), (-1516.0), (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift((byte[]) null, (int) (short) (-1516), (int) (short)64, (-2057));
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, (-1623.598F));
      assertNull(floatArray0);
      
      ArrayUtils.reverse((byte[]) null, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-108);
      int int0 = (-1260);
      ArrayUtils.reverse(byteArray0, (-1260), (int) (byte) (-110));
      assertArrayEquals(new byte[] {(byte) (-110), (byte)71, (byte)0, (byte)37, (byte)121, (byte) (-108)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)121;
      intArray0[1] = (int) (byte)71;
      intArray0[2] = (int) (byte) (-110);
      intArray0[3] = (int) (byte)37;
      intArray0[4] = (int) (byte) (-108);
      intArray0[5] = 1941;
      intArray0[6] = (int) (byte)121;
      intArray0[7] = (int) (byte)121;
      ArrayUtils.shift(intArray0, 121, 121, (int) (byte) (-108));
      assertArrayEquals(new int[] {121, 71, (-110), 37, (-108), 1941, 121, 121}, intArray0);
      assertEquals(8, intArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)0;
      byteArray1[1] = (Byte) (byte) (-108);
      try { 
        Byte.valueOf("7!kwns;Ds^1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7!kwns;Ds^1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-78));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-78)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)2196;
      short[] shortArray1 = new short[11];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray2);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-17);
      intArray0[1] = (-3868);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-17), (-3868)}, intArray0);
      assertArrayEquals(new int[] {(-17), (-3868)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-47);
      shortArray0[1] = (short) (-1721);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-159);
      shortArray0[4] = (short)730;
      shortArray0[5] = (short)4027;
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)4027;
      shortArray1[1] = (short)54;
      shortArray1[2] = (short)4027;
      shortArray1[3] = (short) (-1);
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1721), (short) (-159), (short)730}, shortArray2);
      assertArrayEquals(new short[] {(short) (-47), (short) (-1721), (short) (-1), (short) (-159), (short)730, (short)4027}, shortArray0);
      assertArrayEquals(new short[] {(short)4027, (short)54, (short)4027, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray2.length);
      assertEquals(6, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (short)54;
      floatArray0[2] = (float) (short)730;
      floatArray0[3] = (-1588.673F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 54.0F, 730.0F, (-1588.673F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((byte[]) null, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Boolean[] booleanArray0 = ArrayUtils.nullToEmpty((Boolean[]) null);
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3545L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray0);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('\'', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertEquals('M', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', 'M', '\'', 'M'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Float[] floatArray0 = new Float[0];
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1);
      Byte byte0 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)111);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)60;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short) (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {60}, intArray0);
      assertArrayEquals(new int[] {(-1), 60}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-26);
      byteArray2[1] = (byte)60;
      byteArray2[2] = (byte)60;
      byteArray2[3] = (byte)60;
      byteArray2[4] = (byte)60;
      byteArray2[5] = (byte)60;
      byteArray2[6] = (byte)60;
      byteArray2[7] = (byte)60;
      byteArray2[8] = (byte)60;
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)60;
      byteArray3[1] = (byte)60;
      byte[] byteArray4 = ArrayUtils.removeElements(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)60, (byte)60}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray4);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray2);
      assertEquals(2, byteArray3.length);
      assertEquals(7, byteArray4.length);
      assertEquals(9, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 364.52908F;
      floatArray0[1] = 0.0F;
      ArrayUtils.swap(floatArray0, 255, (-1));
      assertArrayEquals(new float[] {364.52908F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w/,WqPxE`";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)57);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short short0 = new Short((short)167);
      assertEquals((short)167, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      byte byte0 = (byte) (-1);
      byte byte1 = (byte) (-103);
      Byte byte2 = new Byte((byte) (-103));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-103), (byte)byte2);
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-77);
      Byte byte4 = new Byte((byte) (-77));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte) (-77), (byte)byte4);
      assertNotNull(byte4);
      
      Byte byte5 = Byte.valueOf((byte) (-103));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte) (-103), (byte)byte5);
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte6 = new Byte((byte) (-1));
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[0] = byte6;
      byteArray0[1] = byte4;
      byteArray0[2] = byte4;
      byteArray0[3] = (Byte) byte0;
      byteArray0[4] = byte2;
      byteArray0[5] = byte4;
      Byte byte7 = new Byte((byte) (-59));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte) (-59), (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      byteArray0[7] = byte5;
      byteArray0[8] = byte2;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte5));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte6));
      assertFalse(byte4.equals((Object)byte7));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      ArrayUtils.swap((float[]) null, (int) byte1, (int) byte3, 18688);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)12623);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) byte1, (int) byte0);
      assertFalse(byte0 == byte3);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7W!Y5sx@Y/Whu|+";
      stringArray0[1] = "Cannot assign self type: ";
      stringArray0[2] = ", '";
      stringArray0[3] = "*B|q6v852~8Cm";
      stringArray0[4] = "";
      stringArray0[5] = "&b2^s^yfA0Arvy";
      stringArray0[6] = "org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle";
      stringArray0[7] = "{}";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 2249L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean[] booleanArray0 = new boolean[4];
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 90, (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) 2249L, 2061);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 2249.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 4300L;
      longArray0[1] = 352L;
      longArray0[2] = (-1L);
      longArray0[3] = 1492L;
      longArray0[4] = (-4726L);
      longArray0[5] = (-320L);
      longArray0[1] = (-2150L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {4300L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-320L);
      floatArray0[2] = (float) (-2150L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-320.0F), (-2150.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 881L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray0);
      assertArrayEquals(new long[] {4300L, (-2150L), (-1L), 1492L, (-4726L), (-320L), 0L}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 167.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), (-320.0F), (-2150.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-320.0F), (-2150.0F), 167.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      ArrayUtils.swap(byteArray0, (-569), (int) (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)2, (byte)8, (byte)91, (byte)78, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.toObject(floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray2, floatArray1);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.valueOf(true);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean3));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, (boolean) boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1.equals((Object)boolean2));
      assertFalse(boolean1.equals((Object)boolean3));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 5857L;
      longArray0[1] = 5857L;
      longArray0[2] = 5857L;
      longArray0[3] = 5857L;
      longArray0[4] = 5857L;
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) false;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, false);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray2));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray3));
      assertEquals(9, booleanArray0.length);
      assertEquals(3, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5857L;
      doubleArray0[1] = (double) 5857L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 114.0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)180;
      shortArray0[1] = (short)180;
      ArrayUtils.shift(shortArray0, (-915), 1, 0);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, 2, 1, (int) (short)180);
      assertArrayEquals(new short[] {(short)180, (short)180}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-1), 0, 0);
      assertEquals(17, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte)98);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)98, (byte)byte2);
      assertNotNull(byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2);
      assertNotNull(bitSet0);
      assertEquals(17, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte)98;
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      shortArray0[5] = (short) (byte) (-1);
      shortArray0[6] = (short) (byte) (-1);
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3306), (-1893));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short) (-1), (short) (-1), (short)98, (short) (-1), (short) (-1), (short) (-1), (short) (-1)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 93;
      longArray0[1] = 2439L;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 93, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[2] = (short)180;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-199), 2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-199), (short)0, (short)180}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[1] = (short) (-1730);
      shortArray0[2] = (short)180;
      ArrayUtils.shift(shortArray0, 1, 1, (-1332));
      assertArrayEquals(new short[] {(short) (-199), (short) (-1730), (short)180}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte[] byteArray2 = new Byte[2];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray2[0] = byte2;
      byteArray2[1] = byte0;
      Byte[] byteArray3 = ArrayUtils.removeAllOccurences(byteArray2, (Byte) byte1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertEquals(2, byteArray2.length);
      assertEquals(1, byteArray3.length);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4096, 2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-199), (short) (-1730), (short)180}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1730);
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (short) (-1730);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte1;
      intArray0[1] = 2418;
      intArray0[2] = (int) (short) (-199);
      intArray0[3] = (int) (short) (-199);
      intArray0[4] = (int) (short) (-199);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2418, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 4156.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.shift(shortArray0, (-327), (int) (byte)41, (int) (byte)41);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1073;
      floatArray0[1] = (float) (byte)41;
      floatArray0[2] = (float) (byte)41;
      floatArray0[3] = (float) 2;
      floatArray0[4] = 3846.0F;
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) (byte)41;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2.0F, (-1385));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1073.0F, 41.0F, 41.0F, 2.0F, 3846.0F, 1.0F, 41.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1385);
      doubleArray0[2] = (double) (byte)41;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 347.730419113);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), (-1385.0), 41.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1385.0), 41.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)7;
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)7, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)0, 182, Integer.MAX_VALUE);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)7, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3189;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 446);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[6] = false;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 3189);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, int0);
      assertEquals(16, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, (double) 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(16, bitSet0.length());
      assertEquals("{0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}", bitSet0.toString());
      assertEquals(15, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 114;
      intArray0[6] = 0;
      intArray0[7] = (-238);
      intArray0[8] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 114, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-1), (-1), 114, 0, (-238), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{5}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) 0, (-2242));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1428.325F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float((-1499.3F));
      assertEquals((-1499.3F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      
      float[] floatArray3 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(0, floatArray3.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray3, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      
      float[] floatArray4 = ArrayUtils.removeElement(floatArray0, 2147.0994F);
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray3));
      assertNotNull(floatArray4);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray4, 0.01F);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray4.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray4, floatArray3);
      assertNotSame(floatArray4, floatArray0);
      assertNotSame(floatArray0, floatArray3);
      assertNotSame(floatArray0, floatArray4);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-97));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte1);
      assertNotNull(byte1);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte2 = new Byte((byte) (-97));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-97), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)74);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)74, (byte)byte3);
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte3);
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = (long) (byte)118;
      ArrayUtils.shift((Object[]) byteArray1, (int) (byte)118);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(intArray0, (-2293));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)50, (byte)byte1);
      assertNotNull(byte1);
      
      objectArray0[0] = (Object) byte1;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)50);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(0, int0);
      assertEquals(13, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)50;
      floatArray0[1] = (float) (byte)50;
      floatArray0[2] = (float) (byte)77;
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2274.5413F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 295.0F;
      floatArray0[3] = 1390.9723F;
      floatArray0[4] = 271.03027F;
      floatArray0[5] = 1331.6589F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 25, 568);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-2274.5413F), 1.0F, 295.0F, 1390.9723F, 271.03027F, 1331.6589F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short)2952;
      floatArray0[3] = 39.45F;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-2707), (int) (byte) (-1));
      assertArrayEquals(new float[] {4.0F, (-1.0F), 2952.0F, 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, (-574), (-574), 272);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-574);
      floatArray0[1] = (float) 272;
      floatArray0[2] = (float) 272;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-574), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -574, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[3] = (-1);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 0, 0);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (-238), (-1332.534201));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[2] = (-1);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1733);
      shortArray0[1] = (short) (-1733);
      shortArray0[2] = (short)115;
      shortArray0[3] = (short) (-894);
      shortArray0[4] = (short) (-894);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-1733), (short) (-1733), (short)115, (short) (-894), (short) (-894)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1733), (short) (-1733), (short)115, (short) (-894), (short) (-894)}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-40);
      Byte byte1 = new Byte((byte) (-40));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-40), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-40));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-40), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-40), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-40));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte) (-40), (byte) (-40)}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)115, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2020);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-2020);
      intArray0[1] = (int) (short) (-2020);
      intArray0[2] = (int) (short) (-2020);
      ArrayUtils.swap(intArray0, (-2020), (-4025), 1);
      assertArrayEquals(new int[] {(-2020), (-2020), (-2020)}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)58);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)58, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)61);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)61, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray0, (byte)61);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)58, (byte) (-1), (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray0.length);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, '!');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = (double) (-2020);
      ArrayUtils.swap(doubleArray0, Integer.MAX_VALUE, 172, 0);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-2020.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = 2147483647L;
      longArray0[2] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, (-2020));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2020, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      char[] charArray0 = new char[0];
      MockRandom mockRandom1 = new MockRandom(0L);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotSame(mockRandom1, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-85);
      Short short0 = new Short((byte)87);
      assertEquals((short)87, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)98);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)98, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((byte) (-85));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-85), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((byte) (-85));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short) (-85), (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-85));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[1] = '5';
      charArray0[2] = 'b';
      charArray0[3] = '<';
      MockRandom mockRandom0 = new MockRandom((-2125L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {'5', 'b', '<', '}'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      long[] longArray0 = new long[8];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(0, longArray2.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      
      Long[] longArray3 = ArrayUtils.nullToEmpty(longArray1);
      assertFalse(longArray0.equals((Object)longArray2));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(8, longArray3.length);
      assertNotSame(longArray0, longArray2);
      assertSame(longArray1, longArray3);
      assertSame(longArray3, longArray1);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-24), 93);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-21);
      longArray0[2] = (long) (byte) (-21);
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)32;
      longArray0[5] = (long) (byte) (-21);
      longArray0[6] = (-1040L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), 52);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertArrayEquals(new long[] {0L, (-21L), (-21L), (-24L), 32L, (-21L), (-1040L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      Float float0 = new Float((-1186.0F));
      assertEquals((-1186.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[3];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      float[] floatArray2 = new float[3];
      floatArray2[0] = (float) (-1);
      floatArray2[1] = (float) (short) (-159);
      floatArray2[2] = (float) 6;
      float[] floatArray3 = ArrayUtils.removeElements(floatArray2, floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertArrayEquals(new float[] {(-1.0F), (-159.0F), 6.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(0, floatArray3.length);
      assertNotSame(floatArray2, floatArray3);
      assertNotSame(floatArray3, floatArray2);
      
      Long[] longArray1 = new Long[6];
      longArray1[0] = (Long) (-24L);
      longArray1[1] = (Long) (-21L);
      longArray1[2] = (Long) 32L;
      longArray1[3] = (Long) (-1040L);
      longArray1[4] = (Long) (-21L);
      longArray1[5] = (Long) (-21L);
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertNotNull(longArray2);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray2.length);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 378;
      intArray0[1] = 0;
      intArray0[2] = (-2146485281);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {378, 0, (-2146485281)}, intArray0);
      assertArrayEquals(new int[] {378, 0, (-2146485281)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'j';
      charArray0[2] = '+';
      charArray0[3] = 'e';
      charArray0[4] = '-';
      charArray0[5] = 'W';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'j', '+', 'e', '-', 'W'}, charArray1);
      assertArrayEquals(new char[] {'u', 'j', '+', 'e', '-', 'W'}, charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2193.64967230356, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      ArrayUtils.shift(intArray0, 93, 93, 3297);
      assertEquals(17, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 93);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (-1179));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      Float float0 = new Float((-1727.0));
      assertEquals((-1727.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      ArrayUtils.shift(shortArray0, (int) (short)0, 1073, 0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1073;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {2.0F, 1073.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2.0F;
      doubleArray0[3] = (double) 1073.0F;
      doubleArray0[4] = (double) 2.0F;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 1073.0, 2.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 1073.0, 2.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)85;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1178.0F);
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {(-1178.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      shortArray0[2] = (short)180;
      Byte[] byteArray0 = new Byte[2];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(4263.0);
      assertEquals(4263.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1.0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4263.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      ArrayUtils.shift(charArray0, (int) 'E');
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 9);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[3] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[4] = class3;
      Class<Byte> class4 = Byte.TYPE;
      assertFalse(class4.equals((Object)class2));
      assertFalse(class4.equals((Object)class1));
      assertFalse(class4.equals((Object)class3));
      assertFalse(class4.equals((Object)class0));
      assertNotNull(class4);
      assertNotSame(class4, class2);
      assertNotSame(class4, class1);
      assertNotSame(class4, class3);
      assertNotSame(class4, class0);
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertTrue(class4.isPrimitive());
      assertEquals("byte", class4.toString());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isAnnotation());
      
      classArray0[5] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[6] = class5;
      ArrayUtils.swap(charArray0, 2145792315, (-1784));
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte byte0 = (byte) (-76);
      Byte byte1 = new Byte((byte) (-76));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-76), (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) classArray0, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(boolean0);
      assertEquals(9, classArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1711L;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1711L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 0.0, 5, (-684.0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse((short[]) null, (-477), 4017);
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.shuffle((Object[]) stringArray0);
      assertEquals(0, stringArray0.length);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-684.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-1.0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-684.0)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean2 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 4;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(4, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)118);
      assertEquals((byte)118, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = (long) (byte)118;
      longArray0[2] = (long) (byte)118;
      longArray0[3] = (long) (byte)118;
      longArray0[4] = (long) (byte)118;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)118, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-85);
      Short short0 = new Short((short)1912);
      assertEquals((short)1912, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)98);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)98, (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((byte) (-85));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-85), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((byte) (-85));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertEquals((short) (-85), (short)short3);
      assertNotNull(short3);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)1912);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)2984);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 33, (-2145373292), 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1717L);
      longArray0[1] = (long) 33;
      longArray0[2] = (long) (-2145373292);
      longArray0[3] = (long) 33;
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-1717L), 33);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1717L), 33L, (-2145373292L), 33L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1136);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short) (-700));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-700), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)0);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)0, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)12603);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short)12603, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[0]);
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)8192, (short)short5);
      assertNotNull(short5);
      assertEquals(7, shortArray0.length);
      
      longArray0[3] = (long) (short)short5;
      Short short6 = new Short((short)0);
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short0));
      assertTrue(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)789);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8192, (short)1136, (short) (-700), (short)0, (short)12603, (short)789, (short)0}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.swap((float[]) null, 2659, 46, 279);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-4083), (-4083), (-4083));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      charArray0[1] = 'C';
      charArray0[2] = '9';
      charArray0[3] = 'W';
      charArray0[4] = 's';
      charArray0[5] = 'E';
      int int0 = ArrayUtils.indexOf(charArray0, '9', (-33));
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'W', 'C', '9', 'W', 's', 'E'}, charArray0);
      assertEquals(6, charArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)7;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)102, (byte)16, (byte)7, (byte)7, (byte)82, (byte)7, (byte)7, (byte)7}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)102, (byte)16, (byte)7, (byte)7, (byte)82, (byte)7, (byte)7, (byte)7}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-295), (-295), (-295));
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      byteArray2[1] = (Byte) (byte)41;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)6, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      bitSet0.flip(41);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(42, bitSet0.length());
      assertEquals("{41}", bitSet0.toString());
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) byte1, (int) byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[4] = (long) (byte)0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte) (-84);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, (-84.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)98);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)98}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 796L;
      doubleArray0[2] = (double) (byte)2;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-955L), (double) (byte)2);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {796.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 796L);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {796.0, 0.0, 2.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (long) (-3300), (-3300));
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-955L);
      floatArray0[1] = (float) 796L;
      floatArray0[2] = (float) (-955L);
      floatArray0[3] = (float) (-3300);
      floatArray0[4] = (float) 796L;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-955.0F), 796.0F, (-955.0F), (-3300.0F), 796.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)2;
      shortArray0[1] = (short) (byte)2;
      shortArray0[2] = (short) (byte)2;
      shortArray0[3] = (short) (byte)2;
      shortArray0[4] = (short) (byte)2;
      shortArray0[5] = (short) (byte)2;
      shortArray0[6] = (short) (byte)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2440.132F;
      floatArray0[1] = (-3030.641F);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1443.373F), (-483));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {2440.132F, (-3030.641F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-483);
      intArray0[1] = (-1);
      intArray0[2] = (-82);
      intArray0[3] = (-241);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-689);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-689), 615);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-483), (-1), (-82), (-241), 0, 0, 0, (-689)}, intArray1);
      assertArrayEquals(new int[] {(-483), (-1), (-82), (-241), 0, 0, 0, (-689)}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (byte)7);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 788, 788);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      
      BitSet bitSet2 = ArrayUtils.indexesOf(floatArray0, (float) 788, 15);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1634.8497F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1634.8497F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      Float float0 = new Float(1788.0F);
      assertEquals(1788.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      MockRandom mockRandom0 = new MockRandom(3385L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      ArrayUtils.shuffle(floatArray1, (java.util.Random) mockRandom0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1634.8497F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 15);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1634.8497F, 0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2633);
      assertEquals(2633, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2633, (int)integer1);
      assertNotNull(integer1);
      assertEquals(2, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.EMPTY_SHORT_ARRAY;
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray1, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)41, 2752);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)102);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)102, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)13);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)13, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)13);
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)13, (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom((short)102);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) (-1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) (short)102;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (short) (-136);
      intArray0[5] = (int) (short)13;
      intArray0[6] = (int) (short)13;
      intArray0[7] = 0;
      intArray0[8] = 2771;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 10, 1563);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 102, 0, (-1), (-136), 13, 13, 0, 2771}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      byteArray0[1] = (byte) (-103);
      ArrayUtils.shift(byteArray0, (int) (byte) (-103), 1959, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-103)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);
      assertFalse(boolean0);
      
      ArrayUtils.shift((char[]) null, (int) (byte)2, (int) (byte)2, 1959);
      ArrayUtils.swap(longArray0, 1959, (int) (byte)2, (int) (byte) (-103));
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {796L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 477.893878150126, (double) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(1704, 3098);
      assertNotNull(intStream0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = ArrayUtils.toString(objectArray0[0]);
      assertEquals("0", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shift(doubleArray0, 789);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'H';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'u';
      charArray0[5] = 'H';
      charArray0[6] = 'D';
      charArray0[7] = 'u';
      charArray0[8] = 'N';
      boolean boolean1 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'D', 'H', 'N', 'N', 'u', 'H', 'D', 'u', 'N'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      BitSet bitSet0 = new BitSet(6);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = 'V';
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(charArray0, 43);
      assertArrayEquals(new char[] {'V', '7'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      ArrayUtils.shift(doubleArray0, (-224), 512, 5);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      byte byte0 = (byte)41;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Byte byte1 = new Byte((byte)41);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)41);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)41, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)41);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)41, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)79);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)79, (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray2 = new Byte[5];
      Byte byte5 = new Byte((byte)41);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte)41, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray2[0] = byte5;
      byteArray2[1] = byte1;
      byteArray2[2] = byte1;
      byteArray2[3] = (Byte) (byte)41;
      byteArray2[4] = byte3;
      Byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new long[] {41L, 41L, 41L, 41L}, longArray0);
      assertEquals(4, longArray0.length);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("41", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 41L;
      doubleArray0[1] = (double) 41L;
      doubleArray0[2] = (double) 41L;
      doubleArray0[3] = (double) 41L;
      doubleArray0[4] = (double) byte0;
      ArrayUtils.shift(doubleArray0, 41);
      assertArrayEquals(new double[] {41.0, 41.0, 41.0, 41.0, 41.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'N';
      charArray0[4] = '-';
      charArray0[5] = 'D';
      charArray0[6] = 'i';
      boolean boolean2 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'u', 'H', 'H', 'N', '-', 'D', 'i'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.0F);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)7;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 7L, 5L}, longArray0);
      assertArrayEquals(new long[] {4300L, 5L, 5L, 5L, 0L, 5L, 7L, 5L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[20];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('\'', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertTrue(character3.equals((Object)char0));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertEquals('M', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertEquals(20, charArray0.length);
      assertEquals(20, characterArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)0;
      longArray0[4] = (long) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)51);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character3, byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 1.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-784);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-784)}, intArray0);
      assertArrayEquals(new int[] {(-784)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-913);
      intArray0[1] = (-2258);
      intArray0[2] = 2;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-913), (-2258), 2}, intArray0);
      assertArrayEquals(new int[] {(-913), (-2258), 2}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-102);
      ArrayUtils.shift(intArray0, 2952, 1, 116);
      assertEquals(17, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 609, (double) 93, 165.60714635817135);
      assertNotNull(doubleStream0);
      
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (int) 87, object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      objectArray0[0] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[1] = object2;
      objectArray0[2] = (Object) (byte)87;
      objectArray0[3] = (Object) 93;
      objectArray0[4] = (Object) (byte)87;
      objectArray0[5] = (Object) 93;
      Object object3 = ArrayUtils.toPrimitive(objectArray0[4]);
      assertEquals((byte)87, object3);
      assertNotNull(object3);
      assertEquals(7, objectArray0.length);
      
      objectArray0[6] = object3;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      float[] floatArray0 = new float[18];
      ArrayUtils.swap(floatArray0, (-3511), (-10), (-10));
      assertEquals(18, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)4;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = (float) (short)2952;
      floatArray0[3] = 39.45F;
      floatArray0[4] = (float) byte0;
      ArrayUtils.swap(floatArray0, (int) (byte) (-1), (-2707), (int) (byte) (-1));
      assertArrayEquals(new float[] {4.0F, (-1.0F), 2952.0F, 39.45F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) byte0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)1369, (short) (-300), (short)3407, (short)4, (short)2952, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Z');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4250.641332353141;
      doubleArray0[1] = (double) (-955L);
      doubleArray0[2] = (double) (-955L);
      doubleArray0[3] = (double) (-955L);
      doubleArray0[4] = (double) (-955L);
      doubleArray0[5] = (double) (-955L);
      doubleArray0[6] = (double) (-955L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-955.0), (-238));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {4250.641332353141, (-955.0), (-955.0), (-955.0), (-955.0), (-955.0), (-955.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)87);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-85)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift((Object[]) null, (-1405), (-2167), 2);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ArrayUtils.shift(byteArray0, (int) (byte)103, (int) (byte)103, 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)103;
      objectArray0[1] = (Object) (byte)103;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) (byte)13);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(objectArray0, (-3332), 1, (int) (byte)13);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 69, 69, 69);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      int int2 = ArrayUtils.lastIndexOf((long[]) null, (long) 0, (-3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short)27;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)27, (short)99}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-153), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -153, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1), (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short) (-1), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
      assertSame(longArray0, longArray2);
      assertSame(longArray2, longArray0);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[17];
      intArray0[1] = 93;
      intArray0[4] = 93;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(Integer.MAX_VALUE, intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(17, intArray0.length);
      assertEquals(17, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)734);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      Byte[] byteArray0 = new Byte[17];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(17, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, (double) byte0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, (-1323L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1323L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray1 = ArrayUtils.removeElement((byte[]) null, (byte)47);
      assertNull(byteArray1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '[';
      charArray0[2] = 'A';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = 'Q';
      charArray0[6] = '>';
      charArray0[7] = 'Q';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'Q', (int) (short) (-102));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'p', '[', 'A', '>', '>', 'Q', '>', 'Q'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2146272962);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2146272962;
      longArray0[1] = (long) 2146272962;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 3528;
      longArray1[1] = (long) 2146272962;
      longArray1[2] = (long) 3528;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2146272962L, 2146272962L}, longArray0);
      assertArrayEquals(new long[] {3528L, 2146272962L, 3528L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte) (-81));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(charArray0, '<', (-1081));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-2125L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte)57, (int) (byte)57);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-2125L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)41);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte2);
      assertNotNull(byte2);
      
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte4;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byteArray0[7] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      Double[] doubleArray0 = new Double[13];
      Double double0 = new Double(117);
      assertEquals(117.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(46.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(46.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 46.0);
      assertNotNull(doubleArray1);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, 46.0);
      assertEquals(12, int0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 951);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (byte)47, 5);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)64, (short)64}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 102, (-134.0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (short)64;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) (short)64;
      doubleArray1[3] = (double) (short)64;
      doubleArray1[4] = 2242.64335;
      doubleArray1[5] = (double) (short)64;
      doubleArray1[6] = (double) (short)64;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {64.0, 1.0, 64.0, 64.0, 2242.64335, 64.0, 64.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "*@M`?He+";
      objectArray0[1] = (Object) 64.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ":(W@RTx1M");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, objectArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2116L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)2332);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)47);
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short)47}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4259.852);
      doubleArray0[1] = (-207.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2338.0;
      doubleArray0[4] = (-32088.8);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4259.852), (-1), 2.147483723E9);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-4259.852), (-207.0), Double.NaN, 2338.0, (-32088.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)768);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)768}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-1));
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '\"', 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 796L;
      doubleArray0[1] = (double) 796L;
      doubleArray0[2] = (double) (byte)2;
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'c', (int) (byte)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(1, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals(16, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((boolean[]) null, true, 97);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)122;
      Byte byte2 = new Byte((byte)122);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)122, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)122);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)122, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-126));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte) (-126), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte3;
      byteArray0[2] = byte4;
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.insert(56, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (int) (short)2952);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2147483648L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-2147483648L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-1);
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)72;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)72);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)72;
      intArray0[1] = 611;
      intArray0[2] = (int) (byte)72;
      intArray0[3] = (int) (byte)1;
      intArray0[4] = (int) (byte)72;
      intArray0[5] = (int) (byte)72;
      intArray0[6] = (int) (byte)41;
      intArray0[7] = (int) (byte)41;
      intArray0[8] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {72, 611, 72, 1, 72, 72, 41, 41, 41}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)72);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)72, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)72}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayUtils.shift(intArray0, (-1888), 0, (int) (byte)1);
      assertArrayEquals(new int[] {72, 611, 72, 1, 72, 72, 41, 41, 41}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F);
      assertNotNull(bitSet0);
      assertEquals(15, floatArray0.length);
      assertEquals(15, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}", bitSet0.toString());
      assertEquals(15, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      doubleArray0[1] = (double) 1788.0F;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) 0.0F);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), 1788.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6, (int) (byte) (-102));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(15, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, (-1513));
      assertNull(intArray0);
      
      int[] intArray1 = new int[4];
      intArray1[0] = (-1513);
      intArray1[1] = 6;
      intArray1[2] = (-1513);
      intArray1[3] = 6;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray1, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      ArrayUtils.shift(byteArray0, 1164, (-3372), (int) (byte)97);
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 1164;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {1164L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, 1070);
      assertArrayEquals(new long[] {1164L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 774;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 774;
      doubleArray0[1] = (double) 774;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)5);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)5;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0], 1956);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Short short0 = new Short((short)1635);
      assertEquals((short)1635, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)32);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)32, (short)short1);
      assertNotNull(short1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)32;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 32, 32);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {32}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ArrayUtils.shift(byteArray0, 1, (int) (byte) (-103), 389);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-103), (byte) (-103)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4591), Integer.MAX_VALUE);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int0);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)18688);
      assertEquals((short)18688, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-103));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-103), (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)18688);
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short)18688, (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) (-106));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-106), (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) shortArray0[1]);
      assertTrue(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-103), (short)short4);
      assertNotNull(short4);
      assertEquals(7, shortArray0.length);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) (-907));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short) (-907), (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)182);
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertEquals((short)182, (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) shortArray0[2]);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)18688, (short) (-103), (short)18688, (short) (-106), (short) (-103), (short) (-907), (short)182}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = ArrayUtils.get(objectArray0, 8);
      assertNull(object0);
      assertEquals(2, objectArray0.length);
      
      objectArray0[0] = null;
      Object object1 = ArrayUtils.get(objectArray0, 8);
      assertNull(object1);
      assertEquals(2, objectArray0.length);
      
      objectArray0[1] = null;
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-1));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-1), (short)short1);
      assertNotNull(short1);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("byte", class0.toString());
      assertTrue(class0.isPrimitive());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-2781), (int) (short)914);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {8}, intArray0);
      assertArrayEquals(new int[] {8}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 661.3F;
      floatArray0[3] = (-812.366F);
      floatArray0[4] = 3551.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte byte0 = (byte) (-91);
      Byte byte1 = new Byte((byte) (-91));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-91), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-39));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-39), (byte)byte2);
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-81);
      Byte byte4 = new Byte((byte) (-81));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte) (-81), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte5 = new Byte((byte) (-91));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertEquals((byte) (-91), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[3] = byte4;
      byteArray0[4] = byte2;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byteArray0[7] = byte1;
      byteArray0[8] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-81), (byte) (-91), (byte) (-81), (byte) (-39), (byte) (-91), (byte) (-81), (byte) (-91), (byte) (-81)}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 1.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte3;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte3;
      intArray0[3] = (int) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (byte) (-81));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-81), (-91), (-81), (-81), 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(4, bitSet0.length());
      assertEquals("{0, 2, 3}", bitSet0.toString());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3551.0F;
      doubleArray0[1] = (double) 3551.0F;
      ArrayUtils.shift(doubleArray0, 2);
      assertArrayEquals(new double[] {3551.0, 3551.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-103);
      intArray0[1] = (int) (byte) (-103);
      intArray0[3] = (-38);
      intArray0[4] = (int) (byte)13;
      intArray0[6] = (-74);
      intArray0[7] = (int) (byte)13;
      ArrayUtils.shift(intArray0, (-5), 1689, (int) (byte) (-103));
      assertArrayEquals(new int[] {13, (-103), (-103), 0, (-38), 13, 0, (-74)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'j';
      charArray0[2] = '4';
      charArray0[3] = '_';
      charArray0[4] = 'L';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'L', '_', '4', 'j', ':'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, (-1871));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-23));
      assertEquals((byte) (-23), (byte)byte0);
      assertNotNull(byte0);
      
      float[] floatArray0 = new float[15];
      floatArray0[1] = (float) (byte) (-23);
      ArrayUtils.shift(floatArray0, (int) (byte) (-23), 4, (int) (short) (-199));
      assertEquals(15, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-1), 10, (-642));
      assertEquals(22, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-1), 2, (-587));
      assertEquals(22, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)2;
      floatArray0[1] = (-2294.8577F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) (byte)32;
      floatArray0[4] = (-3030.641F);
      floatArray0[5] = (-3030.641F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.0F, (-2294.8577F), 0.0F, 32.0F, (-3030.641F), (-3030.641F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, (-2145482264), (int) (byte)32, (int) (byte)32);
      assertArrayEquals(new float[] {(-3030.641F), (-3030.641F), 2.0F, (-2294.8577F), 0.0F, 32.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1507, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1507, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      float[] floatArray0 = new float[22];
      ArrayUtils.shift(floatArray0, (-32), 2, 2);
      assertEquals(22, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-36), 121, 177);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      float[] floatArray0 = new float[15];
      ArrayUtils.shift(floatArray0, 1, 1, (-10));
      assertEquals(15, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 75);
      assertNull(intArray0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      ArrayUtils.swap((Object[]) classArray0, (-2499), 75, 75);
      assertEquals(8, classArray0.length);
      
      ArrayUtils.shift(floatArray1, 2403);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-2499);
      longArray0[2] = (long) (-2522);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2403, Integer.MAX_VALUE);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, (-2499L), (-2522L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      byteArray2[1] = (Byte) (byte)41;
      byteArray2[2] = (Byte) (byte)41;
      Byte byte2 = new Byte((byte)114);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte2);
      assertNotNull(byte2);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayUtils.shift(intArray0, 0, (int) (byte)1, 611);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray1 = new short[9];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte)114;
      shortArray1[1] = (short) (byte)114;
      shortArray1[2] = (short) (byte)41;
      shortArray1[3] = (short) (-14);
      shortArray1[4] = (short) (byte)41;
      shortArray1[5] = (short) byte0;
      shortArray1[6] = (short) byte0;
      shortArray1[7] = (short) (byte)41;
      shortArray1[8] = (short) (byte)41;
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short)0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)114, (short)114, (short)41, (short) (-14), (short)41, (short)114, (short)114, (short)41, (short)41}, shortArray2);
      assertArrayEquals(new short[] {(short)114, (short)114, (short)41, (short) (-14), (short)41, (short)114, (short)114, (short)41, (short)41}, shortArray1);
      assertEquals(9, shortArray2.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-41);
      ArrayUtils.swap(byteArray0, (-104), (-1), (-1));
      assertArrayEquals(new byte[] {(byte)111, (byte) (-41)}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)2, 2);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)59, (int) (byte)115);
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)115}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int[] intArray0 = new int[6];
      intArray0[0] = 3235;
      intArray0[1] = 102;
      intArray0[2] = (-38);
      intArray0[3] = (int) (short) (-2);
      intArray0[4] = (-38);
      intArray0[5] = (-38);
      ArrayUtils.shift(intArray0, 102, (-38), 7);
      assertArrayEquals(new int[] {3235, 102, (-38), (-2), (-38), (-38)}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.swap(shortArray0, (-2), (-3666), 1239);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      long[] longArray1 = ArrayUtils.add(longArray0, 2, (long) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)97;
      shortArray0[1] = (short) (byte)15;
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte)15;
      shortArray0[4] = (short) (byte)15;
      shortArray0[5] = (short) (byte)15;
      shortArray0[6] = (short)2;
      shortArray0[7] = (short) (byte)15;
      ArrayUtils.swap(shortArray0, (int) (short)15, 2187, (int) (short)15);
      assertArrayEquals(new short[] {(short)97, (short)15, (short)97, (short)15, (short)15, (short)15, (short)2, (short)15}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      Short[] shortArray1 = new Short[6];
      shortArray1[0] = (Short) (short)97;
      shortArray1[1] = (Short) (short)97;
      shortArray1[2] = (Short) (short)15;
      shortArray1[3] = (Short) (short)97;
      shortArray1[4] = (Short) (short)15;
      shortArray1[5] = (Short) (short)2;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)318;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)318);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)318}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)57, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-24);
      longArray0[2] = (long) (byte)57;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, (-24L), 57L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2467), 0, (-21), 2, 57}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, Integer.MAX_VALUE, (int) (byte) (-24));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-311), (-21));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)57, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-24);
      longArray0[2] = (long) (byte)57;
      int int1 = new Byte((byte)0);
      assertFalse(int1 == int0);
      assertEquals((byte)0, int1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2467), 0, (-21), 2, 57}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, Integer.MAX_VALUE, (int) (byte) (-24));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-311), (-21));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      ArrayUtils.shift(charArray0, (int) 'E');
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 9);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[3] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[4] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[5] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[6] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[7] = class6;
      Class<Byte> class7 = Byte.class;
      classArray0[8] = class7;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("");
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = new Boolean("");
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("");
      assertTrue(boolean4.equals((Object)boolean0));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean2));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.valueOf((boolean) boolean2);
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean3));
      assertTrue(boolean2.equals((Object)boolean4));
      assertTrue(boolean2.equals((Object)boolean1));
      assertFalse(boolean5);
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6);
      assertNotNull(boolean6);
      
      booleanArray0[6] = boolean6;
      Boolean boolean7 = Boolean.TRUE;
      assertFalse(boolean7.equals((Object)boolean0));
      assertFalse(boolean7.equals((Object)boolean5));
      assertFalse(boolean7.equals((Object)boolean3));
      assertFalse(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean1));
      assertFalse(boolean7.equals((Object)boolean2));
      assertFalse(boolean7.equals((Object)boolean6));
      assertTrue(boolean7);
      assertNotNull(boolean7);
      
      booleanArray0[7] = boolean7;
      Boolean boolean8 = Boolean.FALSE;
      assertTrue(boolean8.equals((Object)boolean0));
      assertTrue(boolean8.equals((Object)boolean2));
      assertTrue(boolean8.equals((Object)boolean3));
      assertFalse(boolean8.equals((Object)boolean7));
      assertFalse(boolean8);
      assertNotNull(boolean8);
      
      booleanArray0[8] = boolean8;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Boolean[] booleanArray1 = new Boolean[4];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) false;
      booleanArray1[3] = (Boolean) true;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray2));
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray2, booleanArray0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray3));
      assertEquals(9, booleanArray0.length);
      assertEquals(4, booleanArray3.length);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5857L;
      doubleArray0[1] = (double) 5857L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 114.0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object0);
      assertArrayEquals(new double[] {5857.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'J';
      charArray0[0] = '0';
      charArray0[3] = 'C';
      charArray0[4] = 'h';
      charArray0[5] = '\'';
      ArrayUtils.shift(charArray0, (int) (short) (-684));
      assertArrayEquals(new char[] {'0', 'J', '\u0000', 'C', 'h', '\''}, charArray0);
      assertEquals(6, charArray0.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte> class3 = Byte.class;
      Class<Byte> class4 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class2;
      classArray0[1] = class3;
      classArray0[2] = class4;
      classArray0[3] = class1;
      classArray0[4] = class0;
      classArray0[5] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) 'h';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {67.0F, 104.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(longArray0, 2147411178);
      assertArrayEquals(new long[] {(-166L), 4300L, (-32L), (-166L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4762.71551692802);
      doubleArray1[1] = 1772.8908347;
      doubleArray1[2] = (-4762.71551692802);
      doubleArray1[3] = (double) (-32L);
      doubleArray1[4] = (double) 4300L;
      doubleArray1[5] = (double) 4300L;
      doubleArray1[6] = (double) (byte) (-1);
      doubleArray1[7] = (double) (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-1), doubleArray1, doubleArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Float[] floatArray0 = new Float[5];
      Float float0 = new Float(566.1F);
      assertEquals(566.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(0.0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(73.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(73.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) floatArray0[1]);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals(5, floatArray0.length);
      
      floatArray0[3] = float3;
      Float float4 = new Float((-1.0F));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      floatArray0[4] = float4;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {566.1F, 0.0F, 73.0F, 0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2036);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2036));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-2036)}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'd';
      charArray0[2] = '|';
      charArray0[3] = 'L';
      charArray0[4] = ')';
      charArray0[5] = 'b';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'|', 'd', '|', 'L', ')', 'b'}, charArray1);
      assertArrayEquals(new char[] {'|', 'd', '|', 'L', ')', 'b'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[3] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5857L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 5857L;
      longArray2[1] = 5857L;
      longArray2[2] = 5857L;
      longArray2[3] = 5857L;
      longArray2[4] = 5857L;
      longArray2[5] = 5857L;
      Long[] longArray3 = ArrayUtils.toObject(longArray0);
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray3.length);
      assertEquals(0, longArray0.length);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, false, true, true}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 53;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 6;
      intArray0[3] = 1825;
      intArray0[4] = 460;
      intArray0[5] = (-1899);
      intArray0[6] = 108;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = (-2854);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 5);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {53, Integer.MAX_VALUE, 6, 1825, 460, (-1899), 108, Integer.MAX_VALUE, (-2854)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1855L;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)33);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)33, (byte)byte1);
      assertNotNull(byte1);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) integer0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short)3064);
      long[] longArray0 = ArrayUtils.add((long[]) null, 0L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(75, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(longArray0, 2147411178);
      assertArrayEquals(new long[] {(-166L), 4300L, (-32L), (-166L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = ArrayUtils.add(longArray0, (-24L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-166L), 4300L, (-32L), (-166L)}, longArray0);
      assertArrayEquals(new long[] {(-166L), 4300L, (-32L), (-166L), (-24L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotSame(booleanArray0, booleanArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-24L);
      floatArray0[1] = (float) 4300L;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short) (-166);
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (-32L);
      floatArray0[7] = (float) (-24L);
      float[] floatArray1 = ArrayUtils.insert((int) (short)2, floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-24.0F), 4300.0F, 2.0F, 2.0F, (-166.0F), 2.0F, (-32.0F), (-24.0F)}, floatArray0, 0.01F);
      assertEquals(16, floatArray1.length);
      assertEquals(8, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Boolean[] booleanArray2 = new Boolean[0];
      Boolean[] booleanArray3 = ArrayUtils.nullToEmpty(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = 'h';
      charArray0[3] = 'E';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'E';
      charArray0[7] = 'U';
      charArray0[8] = 'E';
      ArrayUtils.shift(charArray0, 920);
      assertArrayEquals(new char[] {'U', 'E', 'h', 'U', 'h', 'E', 'U', 'U', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      ArrayUtils.swap(charArray0, (-1768), (-81));
      assertArrayEquals(new char[] {'U', 'E', 'h', 'U', 'h', 'E', 'U', 'U', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'U';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 'U';
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      ArrayUtils.shift(charArray0, (int) 'E');
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 9);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[3] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[4] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[5] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[6] = class5;
      ArrayUtils.swap(charArray0, 2145792315, (-1768));
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-76));
      assertEquals((byte) (-76), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) classArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(9, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 0, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      long[] longArray0 = ArrayUtils.insert(0, (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-381.3002483543673);
      doubleArray0[6] = 501.330846;
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[9];
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      long[] longArray2 = ArrayUtils.insert((-2113), longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray2);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(5, longArray2.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(2878, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)39);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Random.setNextRandom((byte)41);
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, 293, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 293, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 2325, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2325, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, 1501);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1501, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = (Object) null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)50);
      assertEquals(12, int0);
      assertEquals(13, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)50;
      floatArray0[1] = (float) (byte)50;
      floatArray0[2] = (float) (byte)50;
      Byte[] byteArray2 = new Byte[2];
      byteArray2[0] = (Byte) (byte)50;
      byteArray2[1] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray2, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1150.106), (-4628.381913175041));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      MockRandom mockRandom0 = new MockRandom(183L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 183L;
      longArray0[2] = 183L;
      longArray0[3] = 200L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 183L, 183L, 200L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0, (-118.59325312607254), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf((float[]) null, (-1186.0F), 585);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      float[] floatArray0 = new float[21];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      ArrayUtils.shift(charArray0, 527);
      assertArrayEquals(new char[] {'-', '\u0000', ''}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '';
      intArray0[1] = 13;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-829);
      shortArray0[1] = (short)953;
      shortArray0[2] = (short) (-1476);
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short)953, (short) (-1476), (short) (-829)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', '\u0000', ''}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-51);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-101), (byte) (-51)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte) (-101), (byte) (-51)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byte byte0 = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-102));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = (-937);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte)87, (-937));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(17, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)7);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-85), (byte) (-102), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-85), (byte) (-102), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long((-937));
      assertEquals((-937L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      try { 
        Long.valueOf("$kD&;8S{2", 53);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 53 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1150.106), (-118.59325312607254));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, 462.071F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      
      BitSet bitSet2 = ArrayUtils.indexesOf((float[]) null, 1788.0F);
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertNotNull(bitSet2);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(0, bitSet2.length());
      assertTrue(bitSet2.isEmpty());
      assertEquals(0, bitSet2.cardinality());
      assertEquals(64, bitSet2.size());
      assertEquals("{}", bitSet2.toString());
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, 4780.5611439);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-102);
      longArray0[2] = (long) (byte) (-102);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (long) (byte) (-102);
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-3159L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, (-102L), (-102L), 0L, 0L, (-102L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-102L), (-102L), 0L, 0L, (-102L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 6, 6);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, (-501));
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short) (-2085));
      assertEquals((short) (-2085), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2085));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2085)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 52, 82, (int) (byte) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) (short) (-14);
      floatArray0[2] = (float) 82;
      floatArray0[3] = (float) (short) (-14);
      floatArray0[4] = (float) 82;
      floatArray0[5] = 1821.1687F;
      floatArray0[6] = (-450.34085F);
      floatArray0[7] = (float) 52;
      floatArray0[8] = (float) (byte) (-1);
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-14.0F), 82.0F, (-14.0F), 82.0F, 1821.1687F, (-450.34085F), 52.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 82;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (short) (-14);
      int int0 = ArrayUtils.indexOf(longArray0, 1802L, 2225);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {82L, (-1L), (-14L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      Short short0 = new Short((short)4177);
      assertEquals((short)4177, (short)short0);
      assertNotNull(short0);
      
      Short short1 = Short.valueOf((short) (-3219));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-3219), (short)short1);
      assertNotNull(short1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      Short[] shortArray0 = new Short[9];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2087));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087), (short) (-2087)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-681), (-681), (-681));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-553.0), (-228), (double) (-681));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, true, true, true, false}, booleanArray1));
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 33, (-2145373292), 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-144L);
      longArray0[1] = (long) 33;
      longArray0[2] = (long) (-2145373292);
      longArray0[3] = (long) 33;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (-2145373292));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L}, longArray0);
      assertArrayEquals(new long[] {(-144L), 33L, 33L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(longArray0, (-144L), 33);
      assertFalse(longArray0.equals((Object)longArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      Short[] shortArray0 = new Short[7];
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1136);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short) (-700));
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-700), (short)short2);
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short)260);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)260, (short)short3);
      assertNotNull(short3);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)12603);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short)12603, (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short) shortArray0[0]);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertTrue(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)8192, (short)short5);
      assertNotNull(short5);
      assertEquals(7, shortArray0.length);
      
      shortArray0[5] = short5;
      Short short6 = new Short((short)0);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short2));
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      
      shortArray0[6] = short6;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)789);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)8192, (short)1136, (short) (-700), (short)260, (short)12603, (short)8192, (short)0}, shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (short) (-2998);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, (-2998L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[4];
      longArray0[2] = (long) 898;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)97;
      longArray0[3] = (long) 898;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {0L, 2L, 97L, 898L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      boolean boolean3 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertArrayEquals(new long[] {0L, 2L, 97L, 898L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (byte)97, (int) (byte)97, (-1223));
      assertArrayEquals(new byte[] {(byte)97, (byte)97}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      long[] longArray0 = new long[9];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short) (-707);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 1802L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-707L)}, longArray0);
      assertArrayEquals(new long[] {(-707L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      Short short0 = new Short((short)197);
      assertEquals((short)197, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-707));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-707), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short)0);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)0, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)10283);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short)10283, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)19);
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short)19, (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short) (-700));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short) (-700), (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short)0);
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short0));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short1));
      assertTrue(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short3));
      assertEquals((short)0, (short)short6);
      assertNotNull(short6);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-707));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-1453.0), 366.4);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)110;
      ArrayUtils.swap(byteArray0, (-2977), (int) (byte)110, 2440);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-71), (byte)110, (byte)110, (byte) (-24), (byte)110, (byte)50, (byte)110}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte) (-24), 43);
      assertNull(doubleArray0);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2004), (int) (byte) (-71));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-24), (byte) (-71), (byte)110, (byte)110, (byte) (-24), (byte)110, (byte)50, (byte)110}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 4300L;
      longArray0[1] = 352L;
      longArray0[2] = (-1L);
      longArray0[3] = 1492L;
      longArray0[4] = (-4726L);
      longArray0[5] = (-297L);
      longArray0[6] = (-2150L);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {4300L, 352L, (-1L), 1492L, (-4726L), (-297L), (-2150L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-297L);
      floatArray0[2] = (float) (-2150L);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-297.0F), (-2150.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 881L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 352L, (-1L), 1492L, (-4726L), (-297L), (-2150L)}, longArray0);
      assertArrayEquals(new long[] {4300L, 352L, (-1L), 1492L, (-4726L), (-297L), (-2150L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 167.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {(-1.0F), (-297.0F), (-2150.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-297.0F), (-2150.0F), 167.0F}, floatArray2, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)0;
      ArrayUtils.swap(byteArray0, 37, (int) (byte)2, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)8, (byte)91, (byte) (-59), (byte)2, (byte)78, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 76.0, 1, (double) Integer.MAX_VALUE);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)1, (byte)byte1);
      assertNotNull(byte1);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray1, (Object) byte1, (-710));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-1L), 1L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      long[] longArray0 = new long[5];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short)1369);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)1369;
      intArray0[1] = (int) (short)1369;
      intArray0[2] = (int) (short) (-2150);
      intArray0[3] = (int) (short)2952;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1369, 1369, (-2150), 2952}, intArray0);
      assertArrayEquals(new int[] {1369, 1369, (-2150), 2952}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      ArrayUtils.shift(byteArray0, 2262, 2147038689, 1);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-7)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 't';
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)30);
      assertNull(byteArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(charArray0, 114, 114, 2017);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)2, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)15, (byte)2, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      char[] charArray0 = ArrayUtils.insert((-435), (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      char[] charArray0 = ArrayUtils.insert((-1949), (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '2';
      floatArray0[1] = (float) 796L;
      floatArray0[2] = (float) (-1949);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) '2';
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 796L;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1949);
      intArray0[1] = (-1949);
      intArray0[2] = (int) '2';
      intArray0[3] = (-1949);
      intArray0[4] = (int) '2';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-2035), (-2035));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 82, (-526));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) 82;
      longArray0[3] = (long) 82;
      longArray0[4] = (long) (byte) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-1L), (-526L), 82L, 82L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-2057), (int) (byte)97, (int) (byte)97);
      byte[] byteArray1 = ArrayUtils.subarray((byte[]) null, (int) (byte)97, (-1206));
      assertNull(byteArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = 82;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      long[] longArray0 = new long[0];
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)57;
      doubleArray0[1] = 489.0;
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) '+';
      doubleArray0[4] = (double) (byte)57;
      doubleArray0[5] = (-869.533507);
      doubleArray0[6] = (double) '+';
      doubleArray0[7] = (double) 'R';
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-869.533507));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {57.0, 489.0, 82.0, 43.0, 57.0, (-869.533507), 43.0, 82.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)57, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)1763;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)1763, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1763, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1788.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      doubleArray0[1] = (-869.533507);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), (-869.533507)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-102);
      shortArray0[1] = (short) (byte) (-102);
      shortArray0[2] = (short) (byte) (-102);
      shortArray0[3] = (short)93;
      shortArray0[4] = (short) (byte) (-102);
      shortArray0[5] = (short) (byte) (-102);
      shortArray0[6] = (short) (byte) (-102);
      shortArray0[7] = (short) (byte) (-102);
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-102), (short) (-102), (short) (-102), (short)93, (short) (-102), (short) (-102), (short) (-102), (short) (-102)}, shortArray0);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      short[] shortArray2 = new short[0];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      short[] shortArray3 = ArrayUtils.addAll(shortArray0, shortArray2);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotNull(shortArray3);
      assertArrayEquals(new short[] {}, shortArray2);
      assertArrayEquals(new short[] {(short) (-102), (short) (-102), (short) (-102), (short)93, (short) (-102), (short) (-102), (short) (-102), (short) (-102)}, shortArray3);
      assertArrayEquals(new short[] {(short) (-102), (short) (-102), (short) (-102), (short)93, (short) (-102), (short) (-102), (short) (-102), (short) (-102)}, shortArray0);
      assertEquals(0, shortArray2.length);
      assertEquals(8, shortArray3.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray3);
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0L;
      floatArray1[1] = (-81.10602F);
      floatArray1[2] = 1788.0F;
      floatArray1[3] = (float) 0L;
      floatArray1[4] = (float) (short) (-102);
      floatArray1[5] = (float) (short)93;
      int int0 = ArrayUtils.indexOf(floatArray1, 0.0F, (-462));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, (-81.10602F), 1788.0F, 0.0F, (-102.0F), 93.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-106));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)614;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)76);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)0, (short)614, (short)4479}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)0, (short)614, (short)4479}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)614;
      doubleArray0[7] = (double) (short)76;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 614.0);
      assertNotNull(bitSet0);
      assertEquals(18, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(18, bitSet0.cardinality());
      assertEquals(18, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 614.0);
      assertTrue(boolean0);
      assertEquals(18, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)76;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-1572L), (-3300));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {76L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-60);
      byteArray1[1] = (byte) (-112);
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte) (-3);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-15);
      byteArray1[7] = (byte)32;
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-112), (byte) (-31), (byte) (-53), (byte) (-3), (byte) (-1), (byte) (-15), (byte)32}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-21);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      short short0 = (short) (-4871);
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short) (-4871));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3946), (-2144940721));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((long[]) null, (-1), (-3946), 1810);
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((long[]) null, (-1004L));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift((short[]) null, (-2144940721));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      short short0 = (short)2;
      long[] longArray0 = new long[4];
      int int0 = 1847;
      ArrayUtils.shift(longArray0, 6061, 1847, 2143101028);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long long0 = 1L;
      int int2 = ArrayUtils.indexOf(longArray0, 1L);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int3 = 2;
      ArrayUtils.shift((short[]) null, 2);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)100;
      Byte byte1 = Byte.valueOf((byte)100);
      assertEquals((byte)100, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)28);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)28, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)100, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = Byte.valueOf((byte)7);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)7, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-112));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertEquals((byte) (-112), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1), (int) byte0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 93L;
      longArray0[1] = (long) (short) (-1);
      longArray0[2] = (long) (short) (-1);
      long[] longArray1 = new long[1];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 'R';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {93L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {82L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2126), (-2126));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, true, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals("{0, 3, 7, 8}", bitSet0.toString());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 114;
      intArray0[6] = 0;
      intArray0[7] = (-238);
      intArray0[8] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 114, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-1), (-1), 114, 0, (-238), (-1)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) 0, (-2242));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      float[] floatArray0 = ArrayUtils.add((float[]) null, (-1428.325F));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1428.325F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Float[] floatArray1 = new Float[1];
      Float float0 = new Float((-1499.3F));
      assertEquals((-1499.3F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray2.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      
      ArrayUtils.swap((Object[]) floatArray1, (-238), (-238), (-1));
      assertEquals(1, floatArray1.length);
      assertSame(floatArray1, floatArray2);
      
      ArrayUtils.shift((float[]) null, (-238));
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1788.0;
      doubleArray0[1] = 865.9635658312735;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 517.77181;
      doubleArray0[4] = (-99.0);
      doubleArray0[5] = (-2017.94437);
      doubleArray0[6] = 1016.9;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-2017.94437);
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-2017.94437));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1788.0, 865.9635658312735, (-1.0), 517.77181, (-99.0), (-2017.94437), 1016.9, (-1.0), (-2017.94437)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1788.0, 865.9635658312735, (-1.0), 517.77181, (-99.0), 1016.9, (-1.0)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-38);
      ArrayUtils.shift(intArray0, (-293), 1117, 972);
      assertArrayEquals(new int[] {(-38)}, intArray0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)57;
      ArrayUtils.swap(shortArray0, 122, 1, 321);
      assertArrayEquals(new short[] {(short)57}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 486;
      intArray0[1] = (-1917);
      intArray0[2] = (-16);
      intArray0[3] = 1088;
      intArray0[4] = (-6872);
      intArray0[5] = (-2553);
      ArrayUtils.shift(intArray0, (-16), 2, 1088);
      assertArrayEquals(new int[] {486, (-1917), (-16), 1088, (-6872), (-2553)}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte)41;
      byteArray2[2] = (Byte) (byte)41;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean2 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      ArrayUtils.shift(intArray0, 0, (int) (byte)1, 611);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 696.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-11);
      byteArray1[1] = (byte)7;
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)7}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)7, (byte)0, (byte)7}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)7}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)96;
      ArrayUtils.shift(byteArray0, (-235), (int) (byte)123, 4051);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-40), (byte)96, (byte)17}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-40);
      Byte byte0 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, (int) (byte)123);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) (byte)17;
      objectArray1[1] = (Object) true;
      objectArray1[2] = (Object) byte0;
      objectArray1[3] = (Object) (byte)123;
      objectArray1[4] = (Object) (byte) (-40);
      objectArray1[5] = (Object) byte0;
      objectArray1[6] = (Object) (byte)123;
      ArrayUtils.shift(objectArray1, (int) (byte)17, 4051, (-665));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (short) (-1);
      ArrayUtils.shift(byteArray0, (int) (short) (-1), (int) (short) (-1), (int) (short) (-1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2635);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-2635);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2635, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      short[] shortArray0 = new short[4];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, 1028, 1028, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, 0, 2106, (-289));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      shortArray0[6] = (short) (-1730);
      shortArray0[7] = (short) (-2150);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-2150);
      longArray0[2] = (long) (short)4;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short) (-2150);
      longArray0[5] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-2150));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {0L, (-2150L), 4L, (-1L), (-2150L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2428;
      intArray0[1] = (int) (short) (-300);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2428, (-300), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2428, (-300), 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(shortArray0, (int) (short)4);
      assertArrayEquals(new short[] {(short)4, (short)2952, (short) (-1730), (short) (-2150), (short)0, (short)1369, (short) (-300), (short)3407}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2428, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3159L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf(longArray0, (-706L));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-3159L), 1L, (-1L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)2952;
      intArray0[1] = (int) (short) (-2150);
      intArray0[2] = (int) (short)2952;
      intArray0[3] = (int) (short) (-1730);
      intArray0[4] = (int) (short) (-2150);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 2428;
      intArray0[8] = (int) (short) (-2150);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2952, (-2150), 2952, (-1730), (-2150), (-1), (-1), 2428, (-2150)}, intArray1);
      assertArrayEquals(new int[] {2952, (-2150), 2952, (-1730), (-2150), (-1), (-1), 2428, (-2150)}, intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1730);
      ArrayUtils.shift(shortArray0, (-4565));
      assertArrayEquals(new short[] {(short) (-1730)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2952, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      shortArray0[6] = (short) (-1730);
      shortArray0[7] = (short) (-2150);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-2150);
      longArray0[2] = (long) (short)4;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short) (-2150);
      longArray0[5] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-2150));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {0L, (-2150L), 4L, (-1L), (-2150L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2428;
      intArray0[1] = (int) (short) (-300);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2428, (-300), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2428, (-300), 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = ArrayUtils.subarray(intArray0, 0, (-710));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {2428, (-300), 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int2 = ArrayUtils.indexOf(booleanArray0, false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)961);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)961, (short)short1);
      assertNotNull(short1);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-1);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, (-2147422673), 2);
      assertArrayEquals(new byte[] {(byte)97, (byte)15, (byte)97, (byte)15, (byte) (-1), (byte)15, (byte) (-1), (byte)15, (byte)97}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)15;
      longArray0[1] = 66L;
      longArray0[2] = (long) 898;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {15L, 66L, 898L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 917, (-1745));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)97, (byte)15, (byte)97, (byte)15, (byte) (-1), (byte)15, (byte) (-1), (byte)15, (byte)97}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), 82, (-526));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (-526);
      longArray0[2] = (long) 82;
      longArray0[3] = (long) 82;
      longArray0[4] = (long) (byte) (-1);
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-1L), (-526L), 82L, 82L, (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), 172);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte) (-1)}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte byte0 = (byte)41;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte1 = new Byte((byte)114);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      byteArray2[1] = (Byte) (byte)41;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) byte0, (-1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = 1357;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1357, 1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = ArrayUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = mockRandom0.nextInt();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.1F, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((double[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 489.0, (-2125962148), (double) (-2125962148));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-1), (-2125962148));
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3946), (-2144940721));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((long[]) null, (-1), (-3946), 1810);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (-3946));
      assertNull(longArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 1810;
      floatArray0[2] = (float) (-3946);
      floatArray0[3] = (float) 1810;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1810.0F, (-3946.0F), 1810.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-3946), (-3346));
      assertNull(booleanArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double[] doubleArray0 = new double[4];
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      IntStream intStream0 = mockRandom0.ints((long) 0);
      assertNotNull(intStream0);
      
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 5857L;
      doubleArray0[3] = 41.0;
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 41.0, 5857.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.shift(booleanArray0, 5212);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-229.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1250.0567267299;
      doubleArray0[3] = 1.0;
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-79));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-79), (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, (float) (byte) (-79));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((byte)60);
      assertEquals(60.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {60.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)7;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (double) 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)7;
      int int3 = ArrayUtils.lastIndexOf(intArray0, 0, 2262);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2, int3);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 7.0;
      doubleArray1[1] = (Double) 7.0;
      doubleArray1[2] = (Double) 7.0;
      doubleArray1[3] = (Double) 7.0;
      Double double0 = new Double((-375.174756257));
      assertEquals((-375.174756257), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[4] = double0;
      doubleArray1[5] = (Double) 7.0;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {7.0, 7.0, 7.0, 7.0, (-375.174756257), 7.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      Integer integer0 = new Integer((-3782));
      assertEquals((-3782), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-3782);
      ArrayUtils.shift(longArray0, (-3782));
      assertArrayEquals(new long[] {0L, (-3782L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)97, (int) (byte)97, (int) (byte)97);
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97, (byte)97}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)97;
      longArray0[1] = (long) 898;
      longArray0[2] = (long) (byte)97;
      longArray0[3] = (long) (byte)97;
      longArray0[4] = (long) ' ';
      longArray0[5] = 1L;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {97L, 898L, 97L, 97L, 32L, 1L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayUtils.shift(longArray0, (int) (byte)97);
      assertArrayEquals(new long[] {1L, 97L, 898L, 97L, 97L, 32L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)14);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)14, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte)14);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)14, (byte)byte2);
      assertNotNull(byte2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)3407;
      intArray0[2] = (int) (short)2178;
      intArray0[3] = (int) (short)2952;
      intArray0[4] = (int) (short)1369;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 3407);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, 3407, 2178, 2952, 1369}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(2, bitSet0.length());
      assertEquals("{1}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 2178;
      longArray0[2] = (long) (short)3407;
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (byte)14;
      ArrayUtils.shift(longArray0, 1369);
      assertArrayEquals(new long[] {2178L, 3407L, 0L, 14L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 3407, 2178, 2952, 1369}, intArray0);
      assertEquals(5, intArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (short)1369);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1369L, 2178L, 3407L, 0L, 14L, 0L}, longArray1);
      assertArrayEquals(new long[] {2178L, 3407L, 0L, 14L, 0L}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(5, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      boolean boolean2 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      short[] shortArray0 = new short[2];
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)15, (byte)15, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(19, booleanArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (short)0, (int) (byte)0, (int) (byte)15);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)15, (byte)15, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'd';
      charArray0[2] = '!';
      charArray0[3] = 'R';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'m', 'd', '!', 'R', '>', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'R';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {82L}, longArray0);
      assertArrayEquals(new long[] {1L, 82L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[2];
      longArray2[0] = (Long) 82L;
      longArray2[1] = (Long) 82L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {82L, 82L}, longArray3);
      assertEquals(2, longArray3.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      ArrayUtils.swap((Object[]) byteArray0, 1, (-789), (-531));
      assertEquals(1, byteArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-6));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, (int) (byte) (-14));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 364;
      intArray0[1] = 320;
      intArray0[2] = 476;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 476, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)97, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 2);
      assertNull(byte2);
      assertEquals(1, byteArray0.length);
      
      Object object2 = ArrayUtils.get(objectArray0, 2, (Object) null);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) (byte)97;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = (int) (byte)97;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 5487, 1080, 5487);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[8];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertEquals(8, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5487;
      longArray0[1] = (long) 1;
      longArray0[2] = 1L;
      longArray0[3] = (long) (-78);
      longArray0[4] = (long) 1;
      longArray0[5] = (long) (-627);
      ArrayUtils.reverse(longArray0, 1, 1);
      assertArrayEquals(new long[] {5487L, 1L, 1L, (-78L), 1L, (-627L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (float) 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertEquals(1, int0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 1.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      Short short0 = new Short((short) (-3956));
      assertEquals((short) (-3956), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      ArrayUtils.shift((Object[]) shortArray0, (int) shortArray0[1], 69, (int) (short) (-3956));
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.0);
      doubleArray0[2] = (-4301.0);
      doubleArray0[3] = (-1807.29);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-637));
      assertEquals(4, int0);
      assertArrayEquals(new double[] {(-207.0), 0.0, (-4301.0), (-1807.29), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-4762.71551692802));
      assertEquals((-4762.7153F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) 4);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      ArrayUtils.shift((Object[]) floatArray0, 4);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1091);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte) (-1);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)0, (byte)34, (byte)66, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)34;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {34}, intArray0);
      assertArrayEquals(new int[] {34}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-64));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)5, (byte)97, (byte)0, (byte)34, (byte)66, (byte) (-1)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = ArrayUtils.removeAllOccurences((int[]) null, (int) (byte)97);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      float[] floatArray0 = new float[16];
      BitSet bitSet0 = new BitSet(6);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
      assertEquals(16, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 788;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 788;
      doubleArray0[6] = (double) 788;
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.0, 6.0, 788.0, 6.0, 6.0, 788.0, 788.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Byte byte0 = new Byte((byte) (-63));
      assertEquals((byte) (-63), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 6);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      objectArray0[1] = (Object) 6.0;
      objectArray0[2] = (Object) 6.0;
      objectArray0[3] = (Object) 788.0;
      objectArray0[4] = (Object) 6.0;
      objectArray0[5] = (Object) 788.0;
      objectArray0[6] = (Object) 6.0;
      objectArray0[7] = (Object) 788.0;
      objectArray0[8] = (Object) 788.0;
      Byte byte1 = new Byte((byte) (-19));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-19), (byte)byte1);
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, 6);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((-1), int0);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 850L, 0);
      assertEquals((-1), int0);
      
      Object object0 = ArrayUtils.get((Object[]) null, (-468));
      assertNull(object0);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = ArrayUtils.indexOf((byte[]) null, (byte)17, (int) (byte)17);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 93;
      objectArray0[1] = (Object) 93;
      objectArray0[2] = (Object) 93;
      objectArray0[3] = (Object) (-1);
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(4, objectArray0.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte)93;
      int int2 = ArrayUtils.indexOf(byteArray0, (byte)17, (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(25138, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 25138, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)91);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)91, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-56));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-56), (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-32), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -32, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(65, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 65, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte)41;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 4L;
      longArray0[1] = (long) (byte)41;
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {41L, 4L}, longArray0);
      assertEquals(2, longArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.indexOf(charArray0, 'e', 2);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      float[] floatArray0 = new float[15];
      ArrayUtils.shift(floatArray0, (-10), (-4015), (-10));
      assertEquals(15, floatArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'C');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (-1186), 512, (int) (short) (-147));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = 1973.6663F;
      floatArray0[4] = (float) (short) (-147);
      floatArray0[5] = (-2318.78F);
      floatArray0[6] = (float) (short) (-102);
      floatArray0[7] = (float) (-1186);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-102.0F), 226);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 1973.6663F, 0.0F, (-147.0F), (-2318.78F), (-102.0F), (-1186.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = 'b';
      charArray0[2] = '7';
      charArray0[3] = '&';
      charArray0[4] = '$';
      charArray0[5] = 'O';
      charArray0[6] = '!';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '$');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'(', 'b', '7', '&', 'O', '!'}, charArray1);
      assertArrayEquals(new char[] {'(', 'b', '7', '&', '$', 'O', '!'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'(', 'b', '7', '&', 'O', '!'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'(', 'b', '7', '&', '$', 'O', '!'}, charArray0);
      assertEquals(6, charArray1.length);
      assertEquals(0, charArray2.length);
      assertEquals(7, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null, (-1960L));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-616L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-616L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (-616L));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {(-616L)}, longArray1);
      assertArrayEquals(new long[] {(-616L), (-616L)}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      ArrayUtils.swap((Object[]) longArray0, (-276), (-4544), (-276));
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-909L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte byte0 = (byte)74;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)74;
      byteArray0[1] = (Byte) (byte)74;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, (int) (byte)74);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(byte0);
      assertEquals(74L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      
      longArray0[1] = long2;
      Long long3 = new Long((-2219L));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertEquals((-2219L), (long)long3);
      assertNotNull(long3);
      
      longArray0[2] = long3;
      Long long4 = new Long(long1);
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long2));
      assertEquals((-1L), (long)long4);
      assertNotNull(long4);
      
      longArray0[3] = long4;
      Long long5 = new Long(long1);
      assertFalse(long5.equals((Object)long3));
      assertTrue(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long2));
      assertTrue(long5.equals((Object)long4));
      assertFalse(long5.equals((Object)long0));
      assertEquals((-1L), (long)long5);
      assertNotNull(long5);
      
      longArray0[4] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {74L, (-1L), (-2219L), (-1L), (-1L)}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 102;
      integerArray0[1] = (Integer) 102;
      integerArray0[2] = (Integer) 102;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {102, 102, 102}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)74;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74}, byteArray1);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, (int) (byte)74);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      Long[] longArray0 = new Long[5];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2219L));
      assertFalse(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertEquals((-2219L), (long)long2);
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(long0);
      assertTrue(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long1));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(long0);
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long1));
      assertTrue(long4.equals((Object)long3));
      assertTrue(long4.equals((Object)long0));
      assertEquals((-1L), (long)long4);
      assertNotNull(long4);
      
      longArray0[4] = long4;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-2219L), (-1L), (-1L)}, longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 102;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 102;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {102, 0, 102}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short)13, (int) (short)1763, (int) (short)1763);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((short)13);
      assertEquals(13.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {13.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)3897);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.402F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1788.402F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1788.402F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 403.0, 0, (-85.0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {0.0, 1788.4019775390625, 0.0, 1788.4019775390625, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte1, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      floatArray0[12] = (float) '<';
      ArrayUtils.shift(charArray0, 527);
      assertArrayEquals(new char[] {'-', '\u0000', ''}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '';
      intArray0[1] = 13;
      intArray0[2] = (int) '';
      intArray0[3] = (int) '-';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {127, 13, 127, 45}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(15, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1150.106), (-4628.381913175041));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      MockRandom mockRandom0 = new MockRandom(211L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 211L;
      longArray0[2] = 211L;
      longArray0[3] = 200L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 211L, 211L, 200L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean2 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(booleanArray0, false, 65);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.add(longArray0, 1L);
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1L, 211L, 211L, 200L, 1L}, longArray2);
      assertArrayEquals(new long[] {1L, 211L, 211L, 200L}, longArray0);
      assertEquals(5, longArray2.length);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1150.106), (-4628.381913175041));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, (String) null);
      assertNull(stringArray0);
      
      MockRandom mockRandom0 = new MockRandom(211L);
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 211L;
      longArray0[2] = 211L;
      longArray0[3] = 200L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1L, 211L, 211L, 200L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-118.59325312607254), 0.0, (-118.59325312607254), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("java.lang.Byte");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-118.59325312607254), 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN);
      assertEquals((-1), int0);
      
      byte byte0 = (byte) (-78);
      Byte byte1 = new Byte((byte) (-78));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-78), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (-1010);
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) byte0;
      shortArray0[7] = (short) byte0;
      shortArray0[8] = (short) byte0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-78), (short) (-78), (short) (-1010), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78), (short) (-78)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)2, 354, (int) (byte) (-103));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '$';
      charArray0[2] = 'T';
      charArray0[3] = 'g';
      charArray0[4] = 'Y';
      charArray0[5] = '`';
      charArray0[6] = '\'';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'g');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'u', '$', 'T', 'g', 'Y', '`', '\''}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '}';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'7', '7', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Byte[] byteArray1 = new Byte[8];
      byteArray1[0] = (Byte) (byte)61;
      byteArray1[1] = (Byte) (byte)61;
      byteArray1[2] = (Byte) (byte)61;
      byteArray1[3] = (Byte) (byte)61;
      byteArray1[4] = (Byte) (byte)61;
      byteArray1[5] = (Byte) (byte)61;
      byteArray1[6] = (Byte) (byte)61;
      byteArray1[7] = (Byte) (byte)61;
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)56);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61, (byte)61}, byteArray3);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, '0');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'7', '7', '}'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 117;
      intArray0[1] = 9;
      intArray0[2] = 1604;
      intArray0[3] = 2;
      intArray0[4] = (-57);
      ArrayUtils.reverse(intArray0, 2143856141, 0);
      assertArrayEquals(new int[] {117, 9, 1604, 2, (-57)}, intArray0);
      assertEquals(5, intArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2674;
      shortArray0[1] = (short)2445;
      shortArray0[2] = (short)1946;
      shortArray0[3] = (short)50;
      shortArray0[4] = (short)65;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)2674, (short)2445, (short)1946, (short)50, (short)65}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)50;
      shortArray1[1] = (short)2445;
      shortArray1[2] = (short)65;
      int int0 = ArrayUtils.indexOf(shortArray1, (short)50, 0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)50, (short)2445, (short)65}, shortArray1);
      assertEquals(3, shortArray1.length);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-39);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)1, (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-37), (byte) (-18), (byte)1, (byte) (-13), (byte)73, (byte) (-31), (byte)0, (byte) (-39)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((Object[]) null, 33);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)41);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 41}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)41);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-37));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-37), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)79);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)79, (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray2 = new Byte[5];
      Byte byte4 = new Byte((byte)41);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)41, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray2[0] = byte4;
      Byte byte5 = new Byte((byte)41);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)41, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray2[1] = byte5;
      byteArray2[2] = byte0;
      byteArray2[3] = (Byte) (byte)41;
      byteArray2[4] = byte2;
      Byte[] byteArray3 = ArrayUtils.removeElements(byteArray2, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-498));
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2.0, (-783), (double) (-783));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.5, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ']';
      Character character0 = new Character(']');
      assertTrue(character0.equals((Object)char0));
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(']');
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals(']', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)char0));
      assertEquals(']', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1136.9381283000544);
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 57.0, (-3674), 1203.0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1136.9381283000544), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = (char) character3;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = ']';
      charArray0[5] = (char) character3;
      charArray0[6] = 'z';
      charArray0[7] = (char) character1;
      char[] charArray1 = ArrayUtils.add(charArray0, ']');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', ']', 'z', 'z'}, charArray0);
      assertArrayEquals(new char[] {']', ']', ']', ']', ']', ']', 'z', 'z', ']'}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2435);
      shortArray0[2] = (short)256;
      shortArray0[3] = (short) (-2088);
      shortArray0[4] = (short)99;
      shortArray0[5] = (short) (-2435);
      shortArray0[6] = (short)489;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1654), 3909);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short) (-2435), (short)256, (short) (-2088), (short)99, (short) (-2435), (short)489}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-2435);
      doubleArray0[1] = (double) (short) (-2088);
      doubleArray0[2] = 3189.0;
      ArrayUtils.reverse(doubleArray0, 129, 6);
      assertArrayEquals(new double[] {(-2435.0), (-2088.0), 3189.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) (short)0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (short) (-102), 1073, (-1));
      assertArrayEquals(new short[] {(short) (-102)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1073;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1), 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {2.0F, 1073.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-102);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 2;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      ArrayUtils.reverse(longArray0, 1073, 1186);
      assertArrayEquals(new long[] {(-102L), (-1L), 2L, (-1L), (-1L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      ArrayUtils.reverse(booleanArray0, 1186, 473);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Float[] floatArray1 = new Float[9];
      floatArray1[0] = (Float) 2.0F;
      floatArray1[1] = (Float) 1073.0F;
      floatArray1[2] = (Float) 1073.0F;
      floatArray1[3] = (Float) 1073.0F;
      floatArray1[4] = (Float) 2.0F;
      floatArray1[5] = (Float) 2.0F;
      Float float0 = new Float((double) (short) (-102));
      assertEquals((-102.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[6] = float0;
      floatArray1[7] = (Float) 1073.0F;
      floatArray1[8] = (Float) 1073.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {2.0F, 1073.0F, 1073.0F, 1073.0F, 2.0F, 2.0F, (-102.0F), 1073.0F, 1073.0F}, floatArray2, 0.01F);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)4179);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 779L);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-24);
      intArray0[1] = (int) (byte) (-24);
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, (int) (byte)0, (int) (byte)32);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {(-24), (-24)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 779L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-69), (-81));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      Integer integer0 = new Integer((-3756));
      assertEquals((-3756), (int)integer0);
      assertNotNull(integer0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-3756);
      ArrayUtils.shift(longArray0, (-3756));
      assertArrayEquals(new long[] {(-3756L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-200), (-200), (-200));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-3113));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-14));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-14), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)9);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)9, (byte)byte5);
      assertNotNull(byte5);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 587.6031F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3206.0), (-3859), (-530.19));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 587.6030883789062}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) byte0;
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (int) byte0, (-298));
      assertNull(floatArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'e';
      charArray0[2] = '1';
      charArray0[3] = '\"';
      charArray0[4] = 'f';
      charArray0[5] = '+';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'D', 'e', '1', '\"', 'f', '+'}, charArray0);
      assertArrayEquals(new char[] {'D', 'e', '1', '\"', 'f', '+'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-491), (-491));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)30;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (int) (byte)30);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)30}, byteArray0);
      assertArrayEquals(new byte[] {(byte)30}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3378;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)76);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)0, (short)3378, (short)4479}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)0, (short)3378, (short)4479}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)614;
      doubleArray0[7] = (double) (short)76;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 614.0);
      assertNotNull(bitSet0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(18, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(18, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.insert(107, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 2721, (int) (short)76);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)46, (byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte) (-1), (int) (byte)15, (-1745));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 898;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)97;
      longArray0[3] = (long) 898;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {898L, 2L, 97L, 898L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (int) (byte)15);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)8);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)8, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)20);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, Integer.MAX_VALUE, byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, 7, (Byte) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-30);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-98), (byte) (-30)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1406), (int) (byte) (-30));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', 'a', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray1 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '0';
      doubleArray0[3] = (double) (byte) (-98);
      doubleArray0[4] = (double) (byte) (-98);
      doubleArray0[5] = (double) (byte) (-30);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'v', 2145994933);
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', 'a', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte) (-30);
      byteArray2[1] = (Byte) (byte) (-98);
      byteArray2[2] = (Byte) (byte) (-98);
      Byte byte0 = new Byte((byte) (-30));
      assertEquals((byte) (-30), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray2, 1407, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1407, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      float[] floatArray0 = new float[29];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.addAll(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-103);
      ArrayUtils.shift(byteArray0, 1, (int) (byte) (-103), 389);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-103), (byte) (-103)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[22];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2;
      intArray0[2] = (int) (short)0;
      ArrayUtils.swap(intArray0, 2, 0);
      assertArrayEquals(new int[] {0, 2, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0L;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)614;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)76);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)0, (short)614, (short)4479}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)0, (short)614, (short)4479}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(5, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)614;
      doubleArray0[7] = (double) (short)76;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 614.0);
      assertNotNull(bitSet0);
      assertEquals(18, doubleArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}", bitSet0.toString());
      assertEquals(18, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(18, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 614.0);
      assertTrue(boolean0);
      assertEquals(18, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)76;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, (-2147483648L), (-3300));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {76L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1833L), (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-118));
      assertNull(byteArray0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(117, intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(15, floatArray0.length);
      assertEquals(30, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '-';
      longArray0[1] = (long) 1;
      longArray0[2] = (long) (-627);
      longArray0[3] = (long) '';
      ArrayUtils.reverse(longArray0, 2, 1542);
      assertArrayEquals(new long[] {45L, 1L, 127L, (-627L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {45L, 1L, 127L, (-627L)}, longArray0);
      assertArrayEquals(new long[] {45L, 1L, 127L, (-627L)}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-29), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -29, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(6, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2440.132F;
      floatArray0[1] = (-3030.641F);
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (short) (-1172);
      ArrayUtils.shift(doubleArray1, (int) (short) (-1172), 0, (int) (short) (-1172));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1172.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 0;
      int int1 = 1659;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1659, doubleArray1, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1659, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '~';
      charArray0[2] = 'X';
      charArray0[3] = '~';
      charArray0[4] = 'E';
      charArray0[5] = 'X';
      charArray0[6] = 'E';
      charArray0[7] = 'X';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'E', '~', 'X', '~', 'E', 'X', 'E', 'X'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      shortArray0[6] = (short) (-1730);
      shortArray0[7] = (short) (-2150);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-2150);
      longArray0[2] = (long) (short)4;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (short) (-2150);
      longArray0[5] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-2150));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {0L, (-2150L), 4L, (-1L), (-2150L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2428;
      intArray0[1] = (int) (short) (-300);
      intArray0[2] = (int) (short)0;
      intArray0[3] = 3620;
      intArray0[4] = (-49);
      intArray0[5] = (-1);
      intArray0[6] = (int) (short)4;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2428, (-300), 0, 3620, (-49), (-1), 4}, intArray0);
      assertArrayEquals(new int[] {2428, (-300), 0, 3620, (-49), (-1), 4}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-1.0), 1926);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      ArrayUtils.shift(charArray0, 2);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'U';
      ArrayUtils.swap(charArray1, (-1768), 11);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'U'}, charArray1);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2242.64335, 102);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 102;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 102;
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, 102, 1, (-91));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 102;
      longArray0[2] = (long) (byte)46;
      longArray0[3] = (long) 102;
      longArray0[4] = (long) (-4420);
      longArray0[5] = (long) 102;
      longArray0[6] = (long) (-1);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 102L, 46L, 102L, (-4420L), 102L, (-1L)}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(7, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = '_';
      charArray0[2] = '8';
      ArrayUtils.swap(charArray0, (-1), (-1));
      assertArrayEquals(new char[] {'d', '_', '8'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 37, (-1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(15, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 4300L;
      longArray0[1] = (-32L);
      ArrayUtils.shift(longArray0, 1, 2143101028, 1);
      assertArrayEquals(new long[] {4300L, (-32L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1788.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertTrue(bitSet1.isEmpty());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      doubleArray0[1] = (-869.533507);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 489.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-102.0), (-869.533507)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 6, 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1788.0F}, floatArray0, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-102), (int) (byte) (-102));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-102), (byte) (-102), (byte) (-102)}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeAllOccurrences((long[]) null, 2849L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)32425;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)32425}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)32425;
      intArray0[1] = (int) (short)32425;
      intArray0[2] = 2099;
      intArray0[3] = (int) (short)32425;
      intArray0[4] = (int) (short)32425;
      intArray0[5] = (int) (short)32425;
      intArray0[6] = (int) (short)32425;
      intArray0[7] = (int) (short)32425;
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {32425, 32425, 2099, 32425, 32425, 32425, 32425, 32425}, intArray0);
      assertEquals(8, intArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      ArrayUtils.shift(byteArray0, 0, (-3691), 32425);
      assertArrayEquals(new byte[] {(byte)35}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)35;
      longArray0[1] = (long) (byte)35;
      longArray0[2] = (long) (-3691);
      longArray0[3] = (long) (short)32425;
      longArray0[4] = (long) 32425;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {35L, 35L, (-3691L), 32425L, 32425L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 51.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(longArray1);
      assertNotNull(map0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray1, 51.0, (double) (byte)7);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {51.0}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = 'f';
      charArray0[2] = 'J';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {']', 'f', 'J'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      
      int int0 = 50;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(50, charArray1, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray2 = ArrayUtils.insert(385, charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(charArray0.equals((Object)charArray2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      
      Byte byte2 = new Byte((byte)44);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)44);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte4);
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)67);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)67, (byte)byte5);
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)85);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)85, (byte)byte6);
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-82));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertEquals((byte) (-82), (byte)byte7);
      assertNotNull(byte7);
      
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)50;
      ArrayUtils.shift(shortArray0, (int) (short) (-102), (-1186), 1777);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1927.0), (int) (short) (-102));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1186);
      floatArray0[2] = (float) (short)50;
      floatArray0[3] = (float) (-1186);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1186.0F), 50.0F, (-1186.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-320));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int2 = (-1949);
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1949), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1949, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-502), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -502, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, 3522);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 3522, (-2995), (double) 3522);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 2, 2146681393, 3522);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'x';
      charArray0[1] = '#';
      charArray0[2] = 'K';
      charArray0[3] = 'C';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'C', 'K', '#', 'x'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[2] = 1390.9723F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (float) (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-11));
      assertEquals((byte) (-11), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-112));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-112), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.add((Byte[]) null, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertEquals((byte) (-112), object0);
      assertNotNull(object0);
      
      Byte byte2 = new Byte((byte) (-1));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      String string0 = ArrayUtils.toString((Object) byte2, "");
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object0));
      assertEquals("-1", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (byte)59;
      shortArray0[1] = (short) (byte)59;
      shortArray0[2] = (short) (byte)59;
      ArrayUtils.shift(shortArray0, (-407), (int) (short)0, (-407));
      assertEquals(18, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift(shortArray0, (-1186), 512, (int) (short) (-147));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) 2;
      floatArray0[2] = 1973.6663F;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short) (-147);
      floatArray0[5] = (-2318.78F);
      floatArray0[6] = (float) (short) (-102);
      floatArray0[7] = (float) (-1186);
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (-102.0F), 226);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertArrayEquals(new float[] {2.14748365E9F, 2.0F, 1973.6663F, 0.0F, (-147.0F), (-2318.78F), (-102.0F), (-1186.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 1L;
      floatArray0[5] = (float) 2422L;
      floatArray0[6] = (float) 2422L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 2422.0F, 2422.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Long[] longArray0 = new Long[2];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1855L);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1855L, 1855L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.reverse(floatArray1, (-2414), 6);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 2422.0F, 2422.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-2414), 6);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {1855L, 1855L}, longArray1);
      assertArrayEquals(new long[] {1855L, 1855L}, longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      
      float[] floatArray2 = ArrayUtils.add(floatArray1, (-1248.6F));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 2422.0F, 2422.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(16, floatArray1.length);
      assertEquals(17, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3808.9626F;
      floatArray0[2] = 661.3F;
      floatArray0[3] = (-812.366F);
      floatArray0[4] = 3551.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)101}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 21;
      Integer integer0 = new Integer(21);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-91));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-91), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 183);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {21, (-91)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      Byte[] byteArray1 = new Byte[5];
      byteArray1[0] = (Byte) (byte) (-91);
      byteArray1[1] = (Byte) (byte) (-91);
      byteArray1[2] = (Byte) (byte)101;
      byteArray1[3] = (Byte) (byte)101;
      byteArray1[4] = (Byte) (byte)101;
      Byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(10, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)101;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) int0;
      longArray0[3] = 1400L;
      longArray0[4] = (long) 21;
      longArray0[5] = (-54L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (byte) (-91), 223);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {101L, 101L, 21L, 1400L, 21L, (-54L)}, longArray1);
      assertArrayEquals(new long[] {101L, 101L, 21L, 1400L, 21L, (-54L)}, longArray0);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) (byte)51;
      doubleArray0[3] = (double) (byte)51;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 51.0, (int) (byte)51, 1.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1.5, 3.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) byteArray0, (-1161));
      assertEquals(8, byteArray0.length);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)20);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-68));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-68), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)51, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)67);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertEquals((byte)67, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)75);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals((byte)75, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)20);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertEquals((byte)20, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)75);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertEquals((byte)75, (byte)byte8);
      assertNotNull(byte8);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 3);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-118.59325312607254), 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'Z';
      longArray0[1] = (long) 'Z';
      longArray0[2] = (long) 'Z';
      longArray0[3] = (long) 'Z';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 'Z';
      int int1 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      assertArrayEquals(new long[] {90L, 90L, 90L, 90L, 0L, (-1L), 0L, 0L, 90L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int int2 = ArrayUtils.indexOf((int[]) null, 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)44, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)44, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      try { 
        Byte.valueOf(";r", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1516));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = 477.893878150126;
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[7] = (double) (short) (-1516);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-48.358667646859), 4299.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {64.0, 1016.9, (-1516.0), 477.893878150126, (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {64.0, 1016.9, (-1516.0), 477.893878150126, (-1516.0), 1016.9, 0.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift((byte[]) null, (int) (short) (-1516), (int) (short)64, (-2057));
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (int) (byte)15, (int) (byte)15, (int) (byte)15);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-21), 594, 594);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 4);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-116), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean1 = new Boolean(false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = '\'';
      charArray0[2] = 'I';
      charArray0[3] = 'Q';
      charArray0[4] = '\"';
      charArray0[5] = 'l';
      boolean boolean2 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'v', '\'', 'I', 'Q', '\"', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, false);
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, (double) byte0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)47;
      shortArray0[4] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (byte)47, 3479, 1026);
      assertEquals(13, shortArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)47;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (short)47;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)47);
      assertTrue(boolean0);
      assertEquals(13, shortArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float(2180.267);
      assertEquals(2180.267F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(2494.81385262302);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2494.814F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) 47L);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(47.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (byte)47);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(47.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)47);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2180.267F, 2494.814F, 47.0F, 47.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray2 = new byte[0];
      MockRandom mockRandom0 = new MockRandom((short)47);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray2, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray0 = new long[2];
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 2147036953);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-102));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, (-2293));
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      ArrayUtils.shift(intArray0, (int) (byte)61);
      assertEquals(17, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-1380L);
      floatArray0[4] = (float) (-1380L);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2188);
      intArray0[1] = 47;
      intArray0[2] = 83;
      intArray0[3] = (-2210);
      intArray0[4] = 3252;
      intArray0[5] = 1298;
      intArray0[6] = (-1618);
      intArray0[7] = (-1);
      ArrayUtils.shift(intArray0, (-2210), 609, 83);
      assertArrayEquals(new int[] {1298, (-1618), (-1), (-2188), 47, 83, (-2210), 3252}, intArray0);
      assertEquals(8, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1L, Double.NaN, (double) (-1380L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 90;
      intArray0[1] = 2600;
      intArray0[2] = 128;
      intArray0[3] = 1279;
      ArrayUtils.shift(intArray0, (-5546), 2600, 53);
      assertArrayEquals(new int[] {1279, 90, 2600, 128}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = (-78);
      int int1 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int2 = 1;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)167;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 121;
      floatArray0[3] = (float) (short)167;
      floatArray0[4] = (float) 121;
      floatArray0[5] = (float) (-78);
      int int3 = ArrayUtils.indexOf(floatArray0, 167.0F, 1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(3, int3);
      assertArrayEquals(new float[] {167.0F, (-1.0F), 121.0F, 167.0F, 121.0F, (-78.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[2] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'r');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'r'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4594L), 308);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'r';
      intArray0[1] = (int) '6';
      ArrayUtils.swap(intArray0, 308, 114, 114);
      assertArrayEquals(new int[] {114, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)(byte)91).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)1, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer integer0 = new Integer((short)1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte) (-14);
      Byte byte3 = new Byte((byte) (-14));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-14), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)9);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertEquals((byte)9, (byte)byte6);
      assertNotNull(byte6);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) 587.6031F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3206.0), (-3859), (-530.19));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 587.6030883789062}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte2;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-14)}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-14), (short)0, (short) (-14)}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(32.514558955631585);
      assertEquals(32.514558955631585, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {32.514558955631585}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 254.5947707088319);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {254.5947707088319}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(15, floatArray0.length);
      assertEquals(30, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (-229.0F));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-229.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-1588.33));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, 0, 1080);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'E';
      ArrayUtils.shift(charArray0, (-544), 1080, (-946));
      assertArrayEquals(new char[] {'&', 'E'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals((byte)5, object1);
      assertNotNull(object1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-544);
      doubleArray0[1] = (double) (-946);
      int int1 = ArrayUtils.indexOf(doubleArray0, 26.253472750073726, 2560, 26.253472750073726);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-544.0), (-946.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.reverse(shortArray0, (-78), (int) (byte)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte1;
      objectArray0[1] = (Object) (-78);
      ArrayUtils.shuffle(objectArray0);
      assertEquals(2, objectArray0.length);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) (-946.0);
      doubleArray1[1] = (Double) (-544.0);
      Double double0 = new Double((-946.0));
      assertEquals((-946.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[2] = double0;
      doubleArray1[3] = (Double) (-946.0);
      doubleArray1[4] = (Double) (-544.0);
      doubleArray1[5] = (Double) (-946.0);
      doubleArray1[6] = (Double) (-946.0);
      doubleArray1[7] = (Double) (-544.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 0.1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-946.0), (-544.0), (-946.0), (-946.0), (-544.0), (-946.0), (-946.0), (-544.0)}, doubleArray2, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      float[] floatArray2 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertEquals(15, floatArray0.length);
      assertEquals(30, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0, 1, (-627));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-229.0F);
      floatArray0[1] = (-885.0F);
      floatArray0[2] = (-885.0F);
      floatArray0[3] = (-885.0F);
      floatArray0[4] = (-885.0F);
      floatArray0[5] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-229.0F), (-885.0F), (-885.0F), (-885.0F), (-885.0F), (-885.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ArrayUtils.shift(charArray0, 2);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '-';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {63, 45}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-229.0F), (-885.0F), (-885.0F), (-885.0F), (-885.0F), (-885.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ']';
      Character character0 = new Character(']');
      assertTrue(character0.equals((Object)char0));
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)character0));
      assertFalse(character1.equals((Object)char0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(']');
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals(']', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertEquals(']', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1136.9381283000544);
      doubleArray0[1] = (double) (char)character0;
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (char)character1;
      longArray0[1] = (long) ']';
      longArray0[2] = (long) ']';
      longArray0[3] = (long) (char)character3;
      longArray0[4] = (long) (char)character1;
      longArray0[5] = (long) 'z';
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {93L, 93L, 93L, 122L, 122L, 122L}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = char0;
      charArray0[1] = (char) character0;
      charArray0[2] = (char) character1;
      charArray0[3] = (char) character1;
      int int1 = ArrayUtils.indexOf(charArray0, 'L', (-2192));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {']', ']', 'z', 'z'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ']';
      Character character0 = new Character(']');
      assertTrue(character0.equals((Object)char0));
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(']');
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals(']', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertEquals(']', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1136.9381283000544);
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = (-777.4324598013749);
      doubleArray0[4] = (double) (char)character0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1136.9381283000544), (int) character3, 0.0);
      assertFalse(int1 == int0);
      assertTrue(character3.equals((Object)character0));
      assertFalse(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1136.9381283000544), 93.0, 93.0, (-777.4324598013749), 93.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      int int2 = ArrayUtils.indexOf((Object[]) characterArray1, (Object) byte0, Integer.MAX_VALUE);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      ArrayUtils.shift(floatArray0, (-1), 2, (-642));
      assertEquals(22, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 35;
      ArrayUtils.shift(floatArray0, 35, 35, 35);
      assertArrayEquals(new float[] {35.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean[] booleanArray2 = new Boolean[2];
      booleanArray2[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray2[1] = boolean1;
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray3);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)57;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)57;
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte)57;
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)57, (-1365));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)57, (short)57, (short)57}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray4 = ArrayUtils.removeElements(booleanArray3, (boolean[]) null);
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertNotNull(booleanArray4);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray4));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray3));
      assertEquals(2, booleanArray4.length);
      assertEquals(2, booleanArray2.length);
      assertEquals(2, booleanArray3.length);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray0);
      assertNotSame(booleanArray3, booleanArray4);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1346;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1346, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1346, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, (-4306), (-4306), (-4306));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)61;
      doubleArray0[1] = (double) (byte) (-102);
      doubleArray0[2] = (double) (byte)61;
      doubleArray0[3] = 1665.8221;
      doubleArray0[4] = (double) (byte)61;
      doubleArray0[5] = (double) (byte) (-85);
      doubleArray0[6] = (-1695.4079);
      doubleArray0[7] = (double) (byte)61;
      doubleArray0[8] = (double) (byte)61;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {61.0, (-102.0), 61.0, 1665.8221, 61.0, (-85.0), (-1695.4079), 61.0, 61.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) null, 33);
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 118);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-85);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-85L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[3];
      float float0 = 2440.132F;
      floatArray0[0] = 2440.132F;
      floatArray0[1] = (-3030.641F);
      floatArray0[2] = (-2294.8577F);
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2440.132F, (-3030.641F), (-2294.8577F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      ArrayUtils.shift(floatArray0, 223, 223, 1072);
      assertArrayEquals(new float[] {2440.132F, (-3030.641F), (-2294.8577F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(Integer.MAX_VALUE, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)51;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.subarray(byteArray1, 2, (-1511));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)20);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = (Byte) byte0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)20;
      ArrayUtils.shift(doubleArray0, 56);
      assertArrayEquals(new double[] {20.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)20;
      byteArray3[1] = (byte)20;
      byteArray3[2] = (byte)1;
      byte[] byteArray4 = ArrayUtils.add(byteArray3, (byte) (-11));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)1, (byte) (-11)}, byteArray4);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)1}, byteArray3);
      assertEquals(4, byteArray4.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte0);
      assertTrue(boolean0);
      
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      float[] floatArray0 = new float[22];
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(22, floatArray0.length);
      assertEquals(22, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1266;
      shortArray0[1] = (short) (-1953);
      shortArray0[2] = (short)4783;
      shortArray0[3] = (short) (-2388);
      shortArray0[4] = (short) (-2967);
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)501;
      shortArray0[7] = (short) (-967);
      shortArray0[8] = (short)732;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), 8);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)1266, (short) (-1953), (short)4783, (short) (-2388), (short) (-2967), (short)6, (short)501, (short) (-967), (short)732}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      intArray0[1] = (-1994091957);
      ArrayUtils.shift(intArray0, (-1994091957), (-2146660242), 11);
      assertArrayEquals(new int[] {10, (-1994091957)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(22, floatArray0.length);
      assertEquals(44, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      Byte byte0 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-86));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte2 = new Byte((byte) (-110));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-110), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      Byte byte3 = new Byte((byte) (-78));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-78), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[5] = byte3;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, 0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      ArrayUtils.shift(byteArray0, 611, 35, 1585);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
      
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (-689));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {41, 611, (-14), 0, 0}, intArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), (-5688));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean boolean0 = ArrayUtils.contains(charArray1, 'o');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1406), (int) (byte) (-30));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'T', 'a', '0', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Byte[] byteArray1 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) '0';
      doubleArray0[3] = (double) (byte) (-121);
      doubleArray0[4] = (double) (byte) (-98);
      doubleArray0[5] = (double) (byte) (-121);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 48.0, (int) (byte) (-98), (double) 47);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0, 48.0, (-121.0), (-98.0), (-121.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.reverse(booleanArray0, (int) (byte) (-98), 446);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '^';
      charArray0[2] = 'X';
      charArray0[3] = '~';
      charArray0[4] = 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'P', 6058);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'r', '^', 'X', '~', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      Byte byte0 = new Byte((byte)65);
      assertEquals((byte)65, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)100);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)100, (byte)byte2);
      assertNotNull(byte2);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-115), 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 5487, 1080, 5487);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 'Z';
      floatArray0[3] = (float) 0;
      floatArray0[5] = (float) 'Z';
      floatArray0[6] = (float) 0;
      floatArray0[7] = 90.0F;
      floatArray0[8] = (float) 0;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 90.0F, 0.0F, 0.0F, 90.0F, 0.0F, 90.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-3346));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-3346)}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (-102.0), 251.028435);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)32, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-24);
      longArray0[2] = (long) (byte)32;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-24L), 0L, 32L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      ArrayUtils.shift(byteArray0, (-1), (-4306), 51);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)32, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-21);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1969.40484639), 643.3564167191);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-21.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)47;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)47;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)10;
      ArrayUtils.shift(byteArray0, 9, (-707), 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)47, (byte)47, (byte) (-18), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)7;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (double) 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {7.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (int) (byte)0;
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = (int) (byte)0;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray1, (-2119));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new int[] {0, 0, 0, (-1), 0}, intArray1);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'R', '+', 'R', '+'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'R';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'m', 'd', 'd', 'R', '>', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'R';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {82L}, longArray0);
      assertArrayEquals(new long[] {1L, 82L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[2];
      longArray2[0] = (Long) 82L;
      longArray2[1] = (Long) 82L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {82L, 82L}, longArray3);
      assertEquals(2, longArray3.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      
      long[] longArray4 = ArrayUtils.add(longArray3, (long) (-1));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray0));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {82L, 82L}, longArray3);
      assertArrayEquals(new long[] {82L, 82L, (-1L)}, longArray4);
      assertEquals(2, longArray3.length);
      assertEquals(3, longArray4.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray3);
      assertNotSame(longArray4, longArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.subarray(charArray0, 21, (int) (byte)111);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m', 'd', 'd', 'R', '>', 'z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      ArrayUtils.swap(charArray1, (-1), (-523), (int) (byte)111);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', 'd', 'd', 'R', '>', 'z'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'U';
      charArray0[2] = 'h';
      charArray0[3] = 'E';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'E';
      charArray0[7] = 'U';
      charArray0[8] = 'E';
      ArrayUtils.shift(charArray0, 920);
      assertArrayEquals(new char[] {'U', 'E', '\u0000', 'U', 'h', 'E', 'U', 'U', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      ArrayUtils.swap(charArray0, (-1768), (-81));
      assertArrayEquals(new char[] {'U', 'E', '\u0000', 'U', 'h', 'E', 'U', 'U', 'E'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-38));
      assertEquals((byte) (-38), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 'U';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) 'U';
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1711L;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1711L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'C';
      charArray0[2] = 'l';
      charArray0[3] = 'K';
      ArrayUtils.swap(charArray0, (-1), (int) (short) (-684), (int) (short) (-684));
      assertArrayEquals(new char[] {'J', 'C', 'l', 'K'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 2146272962);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.reverse(charArray0, 2139, 3528);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2139;
      longArray0[1] = (long) 2146272962;
      long[] longArray1 = new long[3];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) 3528;
      longArray1[1] = (long) 2139;
      longArray1[2] = (long) 3528;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {2139L, 2146272962L}, longArray0);
      assertArrayEquals(new long[] {3528L, 2139L, 3528L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) 2139L;
      doubleArray0[2] = (double) 3528L;
      doubleArray0[3] = (double) 3528L;
      ArrayUtils.swap(doubleArray0, 3528, 2146272962);
      assertArrayEquals(new double[] {0.7, 2139.0, 3528.0, 3528.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[2] = 1390.9723F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (float) (short)0;
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 611);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.swap(intArray0, 2, 2);
      assertArrayEquals(new int[] {0, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) byteArray1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurences(floatArray1, (-1178.0F));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1390.9723F, (-1.0F), 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1390.9723F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      charArray0[2] = '0';
      charArray0[3] = ',';
      charArray0[4] = '1';
      charArray0[5] = 'S';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'k', (int) (byte) (-121));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', 'a', '0', ',', '1', 'S'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-30);
      intArray0[1] = (int) (byte) (-121);
      ArrayUtils.swap(intArray0, (int) (byte) (-121), (int) (byte) (-121));
      assertArrayEquals(new int[] {(-30), (-121)}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) (byte) (-121));
      assertNull(floatArray0);
      
      boolean boolean2 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-30), (-2131));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      Integer[] integerArray0 = new Integer[13];
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, Integer.MAX_VALUE);
      assertNotNull(intArray0);
      assertEquals(13, integerArray0.length);
      assertEquals(13, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 92);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {92}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3808.9626F;
      floatArray0[2] = 661.3F;
      floatArray0[3] = (-812.366F);
      floatArray0[4] = 3551.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)101;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)101}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(21);
      assertEquals(21, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-91));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-91), (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 183);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {21, (-91)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray1, 1.0F);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1.0F, 3808.9626F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      Long[] longArray0 = new Long[5];
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      assertTrue(long1.equals((Object)long0));
      assertEquals((-1L), (long)long1);
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((-2219L));
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertEquals((-2219L), (long)long2);
      assertNotNull(long2);
      
      longArray0[3] = long2;
      Long long3 = new Long(long0);
      assertFalse(long3.equals((Object)long2));
      assertTrue(long3.equals((Object)long0));
      assertTrue(long3.equals((Object)long1));
      assertEquals((-1L), (long)long3);
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(long0);
      assertTrue(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long2));
      assertTrue(long4.equals((Object)long0));
      assertTrue(long4.equals((Object)long1));
      assertEquals((-1L), (long)long4);
      assertNotNull(long4);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 102;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 102}, intArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.reverse((short[]) null);
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2242.64335, 102);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 102;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 102;
      ArrayUtils.swap(intArray0, (-1), 102, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-102);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-102));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 4156.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, bitSet0.length());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 2}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      ArrayUtils.shift((long[]) null, 0);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      int int2 = ArrayUtils.lastIndexOf((long[]) null, (long) 0, (-3));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)99;
      shortArray0[1] = (short)27;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)27, (short)99}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, 0, (-1), 0}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(longArray1, 453L, (int) (byte)0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      long[] longArray0 = new long[9];
      longArray0[0] = 796L;
      longArray0[1] = 796L;
      longArray0[2] = 796L;
      longArray0[3] = (-1040L);
      longArray0[4] = (-1040L);
      longArray0[5] = 796L;
      longArray0[6] = 796L;
      longArray0[7] = (-1040L);
      longArray0[8] = (-1040L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-2150L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {796L, 796L, 796L, (-1040L), (-1040L), 796L, 796L, (-1040L), (-1040L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int1 = ArrayUtils.indexOf(intArray0, 1749);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1788.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1788.0F;
      doubleArray0[4] = (double) 1788.0F;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 403.0, 0, (-85.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 1788.0, 0.0, 1788.0, 1788.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 220);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 220;
      intArray0[1] = 220;
      intArray0[2] = 220;
      intArray0[3] = 7;
      intArray0[4] = 220;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 220;
      doubleArray1[1] = 2265.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 220;
      doubleArray1[4] = (double) 7;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, (-3202.13728), 220, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {220.0, 2265.0, 0.0, 220.0, 7.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "[H4:E(q");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3002, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Short short0 = new Short((byte) (-102));
      assertEquals((short) (-102), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((byte) (-102));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-102), (short)short1);
      assertNotNull(short1);
      
      Short short2 = new Short((short)6539);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)6539, (short)short2);
      assertNotNull(short2);
      
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (byte) (-102);
      shortArray1[1] = (short) (byte) (-102);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)6539, shortArray0, shortArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6539, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      Short short0 = new Short((short) (-3963));
      assertEquals((short) (-3963), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = short0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte) (-76);
      Byte byte1 = new Byte((byte) (-76));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-76), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)110);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)110, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = Byte.valueOf((byte) (-104));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-104), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-124));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-124), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)11);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)11, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte0);
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertEquals((byte) (-76), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, (Byte[]) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      Object[] objectArray0 = new Object[11];
      ArrayUtils.shift(objectArray0, 1, 2593, 2593);
      assertEquals(11, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 3;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 3, 0.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {0.0, 3.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Short short0 = new Short((short) (-3973));
      assertEquals((short) (-3973), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[2];
      shortArray0[0] = short0;
      shortArray0[1] = shortArray0[0];
      ArrayUtils.shift((Object[]) shortArray0, (int) shortArray0[1], 69, (int) (short) (-3973));
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)51;
      Byte byte1 = new Byte((byte)51);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)51, (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = (double) (byte)51;
      doubleArray0[3] = (double) (byte)51;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 51.0, (int) (byte)51, 1.0);
      assertEquals(3, int0);
      assertArrayEquals(new double[] {1.5, 3.0, 51.0, 51.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) byteArray0, (-1161));
      assertEquals(8, byteArray0.length);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)20);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)20, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-68));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-68), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte)51, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)67);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)67, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)75);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals((byte)75, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)20);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertEquals((byte)20, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte)75);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertEquals((byte)75, (byte)byte8);
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 30.09397F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {30.09397F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((float[]) null, (-1406), 31, 187);
      float[] floatArray0 = ArrayUtils.insert(1507, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 1963.3552F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1963.3552F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)56);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)56, (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1963.3552F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1963.3552F}, floatArray2, 0.01F);
      assertEquals(1, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 661.3F;
      floatArray0[3] = (-812.366F);
      floatArray0[4] = 3551.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      
      byte byte0 = (byte) (-91);
      Byte byte1 = new Byte((byte) (-91));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-91), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-39));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-39), (byte)byte2);
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-81);
      Byte byte4 = new Byte((byte) (-81));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertEquals((byte) (-81), (byte)byte4);
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte5 = new Byte((byte) (-91));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertEquals((byte) (-91), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[0] = byte5;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[3] = byte4;
      byteArray0[4] = byte2;
      byteArray0[5] = byte1;
      byteArray0[6] = byte4;
      byteArray0[7] = byte1;
      byteArray0[8] = byte4;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-81), (byte) (-91), (byte) (-81), (byte) (-39), (byte) (-91), (byte) (-81), (byte) (-91), (byte) (-81)}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray1, 1.0F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F, 661.3F, (-812.366F), 3551.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertNotSame(floatArray0, floatArray2);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte3;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte3;
      intArray0[3] = (int) byte3;
      intArray0[4] = (int) byte0;
      intArray0[5] = (int) byte3;
      intArray0[6] = (int) byte3;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-206), (-2950));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-81), (-91), (-81), (-81), (-91), (-81), (-81)}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)57;
      longArray0[1] = (long) (byte)57;
      longArray0[2] = 1L;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = 5857L;
      longArray0[5] = 5857L;
      longArray0[6] = 265L;
      longArray0[7] = (long) (byte)57;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 265L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {57L, 57L, 1L, 0L, 5857L, 5857L, 57L}, longArray1);
      assertArrayEquals(new long[] {57L, 57L, 1L, 0L, 5857L, 5857L, 265L, 57L}, longArray0);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 5857L;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) 1L;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) 265L;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {5857.0F, 0.0F, 1.0F, 0.0F, 265.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      long[] longArray2 = ArrayUtils.add(longArray1, (int) (byte)0, (-1752L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotNull(longArray2);
      assertArrayEquals(new long[] {57L, 57L, 1L, 0L, 5857L, 5857L, 57L}, longArray1);
      assertArrayEquals(new long[] {57L, 57L, 1L, 0L, 5857L, 5857L, 265L, 57L}, longArray0);
      assertArrayEquals(new long[] {(-1752L), 57L, 57L, 1L, 0L, 5857L, 5857L, 57L}, longArray2);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray2.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)12);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      assertEquals((byte)50, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      objectArray0[0] = (Object) null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)50);
      assertEquals(12, int0);
      assertEquals(13, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)50;
      floatArray0[1] = (float) (byte)50;
      floatArray0[2] = (float) (byte)77;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {50.0F, 50.0F, 77.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {50.0F, 50.0F, 77.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-605), (float) (-10));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -605, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((float[]) null, (-567), (float) (-567));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -567, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      float[] floatArray0 = new float[7];
      char[] charArray0 = new char[6];
      charArray0[3] = 'T';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(51);
      assertEquals(51, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 2146608552);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {51}, intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(8, classArray0.length);
      assertEquals(8, classArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      charArray0[2] = ' ';
      charArray0[3] = 'E';
      ArrayUtils.shift(charArray0, 5);
      assertArrayEquals(new char[] {'E', 'h', 'U', ' '}, charArray0);
      assertEquals(4, charArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 9);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[6] = class6;
      Class<Byte> class7 = Byte.class;
      classArray0[7] = class7;
      Class<Byte> class8 = Byte.class;
      classArray0[8] = class8;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(9, classArray0.length);
      assertEquals(9, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short short0 = (short)167;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int1 = 1;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, (-1), (-78), (-1));
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = null;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = 2809L;
      // Undeclared exception!
      try { 
        mockRandom0.doubles(2809L, (double) 1, (double) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[0] = '[';
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (byte) (-30), 2143127697);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-30);
      doubleArray0[1] = (-842.0);
      doubleArray0[2] = (double) 2143127697;
      doubleArray0[3] = (double) 'a';
      doubleArray0[4] = (double) (byte) (-30);
      doubleArray0[5] = (double) (byte) (-98);
      doubleArray0[6] = (double) (byte) (-30);
      doubleArray0[7] = (double) 'T';
      doubleArray0[8] = (double) (byte) (-98);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 1.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-30.0), (-842.0), 2.143127697E9, 97.0, (-30.0), (-98.0), (-30.0), 84.0, (-98.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-30.0), (-842.0), 2.143127697E9, 97.0, (-30.0), (-98.0), (-30.0), 84.0, (-98.0)}, doubleArray0, 0.01);
      assertEquals(10, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte)41;
      byteArray2[2] = (Byte) (byte)41;
      ArrayUtils.reverse((Object[]) byteArray2);
      assertEquals(9, byteArray2.length);
      
      ArrayUtils.swap(intArray0, 9, (-1745));
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = 'i';
      charArray0[2] = ':';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ':');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'.', 'i', ':'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{2}", bitSet0.toString());
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray2, 611);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      intArray0[3] = (int) (byte)41;
      intArray0[4] = (int) (byte)41;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 611, (-14), 41, 41}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte)41;
      byteArray2[2] = (Byte) (byte)41;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 41;
      floatArray0[1] = (float) (-14);
      boolean boolean1 = ArrayUtils.contains(floatArray0, 566.1F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {41.0F, (-14.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      char char0 = 'q';
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('q');
      assertTrue(character1.equals((Object)char0));
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      Character character2 = Character.valueOf('D');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('D', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short)0, 913, 2247.991643794294);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(shortArray0, (-454), 77);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1369, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1369, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shuffle((Object[]) characterArray0);
      assertEquals(3, characterArray0.length);
      assertSame(characterArray0, characterArray1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)1369;
      floatArray0[1] = (float) char0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = 241.501F;
      floatArray0[4] = (float) char0;
      floatArray0[5] = (float) 'D';
      floatArray0[6] = (float) 'D';
      floatArray0[7] = (float) char0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1369.0F, 113.0F, 0.0F, 241.501F, 113.0F, 68.0F, 68.0F, 113.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1711L;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 1711.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1711L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)643, (-102));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-90);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)120, (byte)1, (byte) (-55), (byte)102, (byte)1, (byte) (-74), (byte) (-90), (byte)1}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)120, (byte)1, (byte) (-55), (byte)102, (byte)1, (byte) (-74), (byte) (-90)}, byteArray0);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(stringArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-823), (int) (short) (-823));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-1516));
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)64;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = (double) (short) (-1516);
      doubleArray0[3] = 477.893878150126;
      doubleArray0[4] = (double) (short) (-1516);
      doubleArray0[5] = 1016.9;
      doubleArray0[6] = (double) (short)64;
      doubleArray0[7] = (double) (short) (-1516);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-48.358667646859), 4299.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {64.0, 1016.9, (-1516.0), 477.893878150126, (-1516.0), 1016.9, 64.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {64.0, 1016.9, (-1516.0), 477.893878150126, (-1516.0), 1016.9, 64.0, (-1516.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)64;
      longArray0[1] = 200L;
      longArray0[2] = 200L;
      longArray0[3] = (long) (short) (-1516);
      longArray0[4] = 200L;
      longArray0[5] = (long) (short)64;
      longArray0[6] = (long) (short) (-1516);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {64L, 200L, 200L, (-1516L), 200L, 64L, (-1516L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[2] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'c');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4594L), 308);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) '6';
      ArrayUtils.swap(intArray0, 308, 99, 99);
      assertArrayEquals(new int[] {99, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(99).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)32);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)32, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)35;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)35;
      intArray1[2] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '_');
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      Short short0 = new Short((short)19);
      assertEquals((short)19, (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)24);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)24}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[0];
      short[] shortArray2 = ArrayUtils.removeAll(shortArray1, intArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)24}, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)24}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, shortArray2.length);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(charArray0, (int) (byte) (-15), (int) (byte)1, (int) (byte)1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotNull(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, 0, 1080);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'E';
      ArrayUtils.shift(charArray0, (-544), 1080, (-946));
      assertArrayEquals(new char[] {'&', 'E'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte1 = new Byte((byte)5);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)5, (byte)byte1);
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object1.equals((Object)byte0));
      assertEquals((byte)5, object1);
      assertNotNull(object1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-30);
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)5, (byte) (-30)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)5, (byte) (-30)}, byteArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte) (-24), 1987, 3940.9);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(shortArray1, (-1), (int) (byte)0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      ArrayUtils.shuffle((Object[]) characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.0);
      doubleArray0[1] = (-2087.8041537926);
      doubleArray0[2] = (-4301.0);
      doubleArray0[3] = (-1807.29);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-637));
      assertEquals(4, int0);
      assertArrayEquals(new double[] {(-207.0), (-2087.8041537926), (-4301.0), (-1807.29), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-4762.71551692802));
      assertEquals((-4762.7153F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-4762.7153F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2638.1F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4762.7153F), (-4762.7153F), (-1.0F), 1.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'f');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[1] = 'd';
      charArray0[2] = '!';
      charArray0[3] = 'R';
      charArray0[4] = '>';
      charArray0[5] = 'z';
      int int0 = ArrayUtils.indexOf(charArray0, 'd');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'m', 'd', '!', 'R', '>', 'z'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayUtils.reverse((byte[]) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'R';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {82L}, longArray0);
      assertArrayEquals(new long[] {1L, 82L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Long[] longArray2 = new Long[2];
      longArray2[0] = (Long) 82L;
      longArray2[1] = (Long) 82L;
      long[] longArray3 = ArrayUtils.toPrimitive(longArray2);
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertNotNull(longArray3);
      assertArrayEquals(new long[] {82L, 82L}, longArray3);
      assertEquals(2, longArray3.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      
      long[] longArray4 = ArrayUtils.add(longArray3, (long) (-1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray0));
      assertFalse(longArray4.equals((Object)longArray3));
      assertNotNull(longArray4);
      assertArrayEquals(new long[] {82L, 82L}, longArray3);
      assertArrayEquals(new long[] {82L, 82L, (-1L)}, longArray4);
      assertEquals(2, longArray3.length);
      assertEquals(3, longArray4.length);
      assertEquals(2, longArray2.length);
      assertNotSame(longArray3, longArray4);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray4, longArray1);
      assertNotSame(longArray4, longArray0);
      assertNotSame(longArray4, longArray3);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'd';
      charArray1[1] = '+';
      charArray1[2] = 'd';
      charArray1[3] = 'd';
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'m', 'd', '!', 'R', '>', 'z'}, charArray0);
      assertArrayEquals(new char[] {'d', '+', 'd', 'd'}, charArray1);
      assertArrayEquals(new char[] {'+', 'd', 'd'}, charArray2);
      assertEquals(6, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1), (short) (byte)111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '&';
      charArray1[1] = '&';
      charArray1[2] = '&';
      charArray1[3] = '&';
      ArrayUtils.shift(charArray1, 63, 63, 63);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&', '&', '&', '&'}, charArray1);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&', '&', '&', '&'}, charArray1);
      assertArrayEquals(new char[] {'&', '&', '&', '&'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)60;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)55);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)1, (byte)14, (byte)55, (byte)60}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)1, (byte)14, (byte)55, (byte)60, (byte)55}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 2151.2794;
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5, 2151.2794, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5, 2151.2794, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 1.5;
      objectArray0[1] = (Object) 1.5;
      objectArray0[2] = (Object) 1.5;
      objectArray0[3] = (Object) Double.NaN;
      objectArray0[4] = (Object) Double.NaN;
      objectArray0[5] = (Object) 1.5;
      objectArray0[6] = (Object) Double.NaN;
      objectArray0[7] = (Object) 1.5;
      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(8, objectArray0.length);
      assertEquals(8, objectArray1.length);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short) (-684);
      shortArray0[2] = (short)4675;
      int[] intArray0 = new int[3];
      intArray0[0] = 944;
      intArray0[1] = (int) (short)4675;
      intArray0[2] = (int) (short)4675;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {944, 4675, 4675}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      byte byte0 = (byte)114;
      Byte byte1 = new Byte((byte)114);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)114, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)55);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)55, (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte1;
      Byte byte3 = new Byte(byte0);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)114, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 944);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = (Short) (short)4675;
      Short short0 = new Short((short) (-684));
      assertEquals((short) (-684), (short)short0);
      assertNotNull(short0);
      
      shortArray1[1] = short0;
      shortArray1[2] = (Short) (short) (-684);
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertSame(shortArray2, shortArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-4412), 944);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {944, 4675, 4675}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = '7';
      charArray0[2] = 'L';
      charArray0[3] = '0';
      charArray0[4] = ')';
      charArray0[5] = 'Y';
      charArray0[6] = 'P';
      charArray0[7] = 'e';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'Y', '7', 'L', '0', ')', 'Y', 'P', 'e'}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[3] = 'T';
      charArray0[4] = '*';
      charArray0[5] = 'l';
      ArrayUtils.shift(charArray0, (-1023), (-946), (-1816));
      assertArrayEquals(new char[] {'T', 'i', '\u0000', 'T', '*', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'T';
      objectArray0[1] = (Object) '*';
      objectArray0[2] = (Object) 'i';
      objectArray0[3] = (Object) '*';
      objectArray0[4] = (Object) '*';
      objectArray0[5] = (Object) byte0;
      objectArray0[0] = (Object) 'l';
      objectArray0[7] = (Object) '*';
      ArrayUtils.swap(objectArray0, (-979), 0, (-2039));
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, 2160, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2160, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '?', 2379);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[1] = 'k';
      charArray0[2] = ',';
      charArray0[3] = '1';
      charArray0[4] = 'I';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'I', (int) (byte) (-98));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'T', 'k', ',', '1', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("{4}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) (byte) (-121);
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) '1';
      ArrayUtils.swap(intArray0, 11, (-2037));
      assertArrayEquals(new int[] {107, (-121), 73, 49}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte) (-98), (byte) (-98), (byte) (-121)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 2303.82F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3407;
      shortArray0[1] = (short) (-2039);
      shortArray0[2] = (short)1226;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)3407;
      int int2 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1730));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new short[] {(short)3407, (short) (-2039), (short)1226, (short)4, (short)3407}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      Character character0 = Character.valueOf('D');
      assertEquals('D', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 867L, 2, 4207.112);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-863);
      shortArray0[2] = (short) (-909);
      shortArray0[3] = (short)63;
      ArrayUtils.reverse(shortArray0, (int) (short) (-909), 77);
      assertArrayEquals(new short[] {(short)63, (short) (-909), (short) (-863), (short)100}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)63, (short) (-909), (short) (-863), (short)100}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      int[] intArray0 = new int[17];
      Byte byte0 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte)40);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)40, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)6);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)6, (byte)byte2);
      assertNotNull(byte2);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte1;
      objectArray0[2] = (Object) byte1;
      objectArray0[3] = (Object) byte2;
      objectArray0[4] = (Object) byte1;
      objectArray0[5] = (Object) byte2;
      objectArray0[6] = (Object) byte1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((byte)6);
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)40;
      longArray0[1] = (long) (byte)6;
      longArray0[2] = (long) (byte)40;
      longArray0[3] = (long) (byte)6;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 6L);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {40L, 6L, 40L, 6L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('q');
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      Character character2 = Character.valueOf('D');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('D', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short)0, 913, 2247.991643794294);
      assertEquals((-1), int0);
      
      ArrayUtils.reverse(shortArray0, (-454), 77);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1369, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)1369, (short)0}, shortArray0);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      
      ArrayUtils.shuffle((Object[]) characterArray0);
      assertEquals(3, characterArray0.length);
      assertSame(characterArray0, characterArray1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray0);
      assertArrayEquals(new long[] {4300L, 5L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(8, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('\'', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertEquals('M', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', 'M', '\'', 'M'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)0;
      longArray0[4] = (long) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)51);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)51, (byte)0}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character3, byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-64);
      Byte byte2 = new Byte((byte) (-64));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-64), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte) (-64), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte2;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) byte1, byteArray0, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -64, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3189;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 446);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 377, (int) (byte)1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 3189.0;
      ArrayUtils.swap(objectArray0, 2, (-3048), (-2145727446));
      assertEquals(2, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 446, (double) (-3048));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 446, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("14", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[2] = '{';
      charArray0[3] = 'T';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'l';
      doubleArray0[2] = (double) '*';
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte)14, (-1185));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {84.0, 108.0, 42.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[3];
      Byte byte1 = new Byte((byte)121);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)121, (byte)byte1);
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertEquals((byte)121, object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) '*';
      objectArray0[2] = (Object) '*';
      ArrayUtils.swap(objectArray0, 2, 0, (int) (byte)121);
      assertEquals(3, objectArray0.length);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, 0, 614.0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {614.0, 84.0, 108.0, 42.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {84.0, 108.0, 42.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      longArray0[4] = 0L;
      ArrayUtils.swap(longArray0, 0, 0);
      assertArrayEquals(new long[] {0L, 172L, (-1612L), (-2168L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short) shortArray0[1]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      shortArray0[3] = shortArray0[2];
      shortArray0[4] = short1;
      float[] floatArray0 = new float[1];
      MockRandom mockRandom0 = new MockRandom(4300L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Random.setNextRandom((-947));
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 1950.9987F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 51);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(21, floatArray0.length);
      assertEquals(21, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) (byte)13;
      longArray0[2] = (long) (byte)13;
      longArray0[3] = (long) (byte)13;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurrences(booleanArray1, (boolean) boolean0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (-1291), (-1291));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Byte byte0 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte0);
      assertNotNull(byte0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((Object[]) floatArray0, (Object) null);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(0, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray0);
      assertNotNull(map0);
      assertEquals(0, floatArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)47;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)47;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)10;
      ArrayUtils.shift(byteArray0, 9, (-707), 6);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)47, (byte) (-18), (byte)0, (byte)0, (byte)10}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1, 2}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.cardinality());
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-1);
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-38), (byte) (-48), (byte) (-17), (byte)0, (byte) (-128), (byte)11, (byte)67}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-118.59325312607254);
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-118.59325312607254), 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      ArrayUtils.reverse((byte[]) null);
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.lastIndexOf(shortArray0, (short)1351);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      Short short0 = new Short((short) (-21));
      assertEquals((short) (-21), (short)short0);
      assertNotNull(short0);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short0;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-21)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Short short1 = new Short((short) (-21));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-21), (short)short1);
      assertNotNull(short1);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1529.5082130239));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, 1546);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1546, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1313));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1313)}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte byte0 = Byte.valueOf((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 2783);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2783;
      ArrayUtils.swap(longArray0, (-1313), (-2145422723), (-1313));
      assertArrayEquals(new long[] {2783L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, (-743), 6, (-743));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, (-3511), 0, 0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = 0L;
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), 1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)102);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)102, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)13);
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)13, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short)13);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertTrue(short4.equals((Object)short3));
      assertEquals((short)13, (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom((short)102);
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 4300L;
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      floatArray0[2] = (float) 0;
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {4300.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 4300.0F);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {4300.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = ArrayUtils.get(objectArray0, (-2771));
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[0];
      int int0 = (-2995);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2771), (-2995), (double) (-2771));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2771);
      intArray0[1] = (-2995);
      intArray0[2] = (-2995);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2771, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      int int0 = 1;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int1 = ArrayUtils.indexOf(objectArray0, object1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(3, objectArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2299, 519);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = null;
      objectArray1[1] = (Object) 1.0;
      objectArray1[2] = null;
      objectArray1[3] = null;
      objectArray1[4] = null;
      objectArray1[5] = (Object) 1.0;
      objectArray1[6] = (Object) 1.0;
      ArrayUtils.swap(objectArray1, 1, 2, 369);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2357), 812.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2357, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      Byte byte0 = ArrayUtils.get((Byte[]) null, 76);
      assertNull(byte0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(254.5947707088319);
      assertEquals(254.59477F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {254.59477F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      Float[] floatArray0 = new Float[11];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 496.0F);
      assertNotNull(floatArray1);
      assertEquals(11, floatArray0.length);
      assertEquals(11, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-3863.5703F));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.0);
      doubleArray0[2] = (-4301.0);
      doubleArray0[3] = (-1807.29);
      doubleArray0[4] = (-1.0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-637));
      assertEquals(4, int0);
      assertArrayEquals(new double[] {(-207.0), 0.0, (-4301.0), (-1807.29), (-1.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((-4762.71551692802));
      assertEquals((-4762.7153F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) floatArray0[0]);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-4762.7153F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1.0F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 2638.1F);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-4762.7153F), (-4762.7153F), (-1.0F), 2638.1F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2005.816F;
      floatArray0[1] = 936.3788F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 2830.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1647.0F);
      floatArray0[6] = 3757.978F;
      floatArray0[7] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2005.816F, 936.3788F, (-1.0F), 2830.0F, 1.0F, (-1647.0F), 3757.978F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 3757.978F, (-1647.0F), 1.0F, 2830.0F, (-1.0F), 936.3788F, 2005.816F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      Float[] floatArray1 = new Float[5];
      floatArray1[0] = (Float) 3757.978F;
      floatArray1[1] = (Float) 936.3788F;
      floatArray1[2] = (Float) 2830.0F;
      floatArray1[3] = (Float) (-1.0F);
      floatArray1[4] = (Float) 2830.0F;
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-1424.6511F));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(floatArray2);
      assertArrayEquals(new float[] {3757.978F, 936.3788F, 2830.0F, (-1.0F), 2830.0F}, floatArray2, 0.01F);
      assertEquals(5, floatArray2.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray2, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 109, 109, 109);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character character0 = new Character(']');
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      Character character2 = Character.valueOf('7');
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertEquals('7', (char)character2);
      assertNotNull(character2);
      
      Character character3 = new Character('?');
      assertFalse(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertEquals('?', (char)character3);
      assertNotNull(character3);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int int2 = ArrayUtils.indexOf(doubleArray0, (double) (short)167, (int) (short)167, 1.5);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {55.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((Object[]) characterArray0, (-1));
      assertEquals(0, characterArray0.length);
      
      int[] intArray0 = new int[0];
      int int3 = ArrayUtils.lastIndexOf(intArray0, 3, (-2771));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      char[] charArray0 = new char[5];
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) ':';
      intArray0[1] = 2206;
      intArray0[2] = (int) ':';
      intArray0[3] = (int) ':';
      intArray0[4] = (int) ':';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {58, 2206, 58, 58, 58, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)35;
      ArrayUtils.shift(byteArray0, (int) (byte)35, (-952), 2146996950);
      assertArrayEquals(new byte[] {(byte)35, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35, (byte)35}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-952);
      longArray0[1] = (long) (byte)35;
      longArray0[2] = (long) (byte)35;
      longArray0[3] = (long) (byte)35;
      longArray0[4] = (long) (byte)35;
      boolean boolean1 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new long[] {(-952L), 35L, 35L, 35L, 35L}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean boolean2 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      short[] shortArray0 = new short[2];
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift(longArray0, 2147411178);
      assertArrayEquals(new long[] {(-166L), 4300L, (-32L), (-166L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)3551;
      shortArray0[4] = (short) (-707);
      shortArray0[5] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, 489, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)100, (short)3551, (short) (-707), (short) (-1172)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short)3551, 0, (int) (short)100);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (short) (-707), doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-707);
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-359.3099F), (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-707.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)0;
      doubleArray2[1] = (double) (short)3551;
      doubleArray2[2] = (double) (short)3551;
      doubleArray2[3] = (double) (short)100;
      doubleArray2[4] = (double) (short)3551;
      doubleArray2[5] = (double) (short)100;
      doubleArray2[6] = (double) (short)100;
      doubleArray2[7] = (double) (short)0;
      doubleArray2[8] = (double) 0.0F;
      double[] doubleArray3 = ArrayUtils.add(doubleArray2, (-2339.53438));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 3551.0, 3551.0, 100.0, 3551.0, 100.0, 100.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 3551.0, 3551.0, 100.0, 3551.0, 100.0, 100.0, 0.0, 0.0, (-2339.53438)}, doubleArray3, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(10, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1567);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1567);
      shortArray0[5] = (short) (-809);
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)50;
      shortArray0[8] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short) (-1567), (int) (short)0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1567), (short)2, (short) (-1567), (short) (-809), (short)91, (short)50, (short) (-102)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1567);
      doubleArray0[1] = (double) (short) (-102);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[4] = (double) (short) (-1567);
      doubleArray0[5] = (double) (short)50;
      doubleArray0[6] = (double) (short) (-102);
      doubleArray0[7] = (double) (short) (-102);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (short) (-809));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1567.0), (-102.0), 0.0, 0.0, (-1567.0), 50.0, (-102.0), (-102.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)50;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short) (-1567);
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short) (-1567);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {50.0F, 2.0F, (-1567.0F), 2.0F, (-1567.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1567), (short)2, (short) (-1567), (short) (-809), (short)91, (short)50, (short) (-102)}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1567), (short)2, (short) (-1567), (short) (-809), (short)91, (short)50, (short) (-102)}, shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(9, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      try { 
        Byte.valueOf("", (int) (short)2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-2040L));
      assertNotNull(bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte byte0 = (byte)78;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)78;
      byteArray0[1] = (Byte) (byte)78;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, (int) (byte)78);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(1L, long0);
      
      Long long1 = new Long(byte0);
      assertFalse(long1.equals((Object)long0));
      assertEquals(78L, (long)long1);
      assertNotNull(long1);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)78, (byte)78}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2242.64335, 102);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 102;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 102;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)74;
      byteArray0[1] = (Byte) (byte)74;
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, (int) (byte)46);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int1 = mockRandom0.nextInt();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) bitSet0;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) false;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) false;
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) bitSet0;
      objectArray1[1] = (Object) bitSet0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(boolean0);
      assertEquals(5, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (-1178.0F));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 2146984349, 2146984349);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (-742));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 47;
      intArray0[1] = 72;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte) (-31);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2360), 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {47, 72, 0, (-1), (-31)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 47;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray1, (Object[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, (float) 47);
      assertNull(floatArray0);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 0;
      objectArray1[1] = (Object) 47;
      objectArray1[2] = (Object) (-31);
      objectArray1[3] = (Object) 47;
      objectArray1[4] = (Object) 72;
      objectArray1[5] = (Object) (byte)0;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, objectArray1.length);
      assertNotSame(objectArray1, objectArray0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)17);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)17;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short)17;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)17;
      intArray0[1] = (int) (short)17;
      intArray0[2] = (int) (short)17;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-2), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-2), (byte)byte2);
      assertNotNull(byte2);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      Byte[] byteArray0 = new Byte[2];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      Double[] doubleArray0 = new Double[16];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, 702.9263630372);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = ArrayUtils.removeElement(doubleArray2, 702.9263630372);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(16, doubleArray0.length);
      assertEquals(16, doubleArray2.length);
      assertEquals(15, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-111));
      assertEquals((byte) (-111), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)47;
      Byte byte2 = new Byte((byte)47);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)43);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)43, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)47);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)43);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)43, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte1);
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals((byte)47, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)2);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertEquals((byte)2, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      long[] longArray0 = new long[6];
      longArray0[0] = (-1380L);
      longArray0[1] = (-1380L);
      longArray0[2] = (-1380L);
      longArray0[3] = (-1380L);
      longArray0[4] = (-1380L);
      longArray0[5] = (-1380L);
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '6');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, 'c');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'c'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-4594L), 308);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {(-1380L), (-1380L), (-1380L), (-1380L), (-1380L), (-1380L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'c';
      intArray0[1] = (int) '6';
      ArrayUtils.swap(intArray0, 308, 99, 99);
      assertArrayEquals(new int[] {99, 54}, intArray0);
      assertEquals(2, intArray0.length);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean1 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (short)3407;
      floatArray0[2] = (float) (-2720);
      floatArray0[3] = (float) (short)4;
      floatArray0[4] = (float) (short) (-300);
      ArrayUtils.swap(floatArray0, 35, 1646, 1646);
      assertArrayEquals(new float[] {(-1.0F), 3407.0F, (-2720.0F), 4.0F, (-300.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3407;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)691);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-409.8);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-812.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-409.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-409.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 0L);
      assertNull(longArray0);
      
      int[] intArray0 = ArrayUtils.insert((-1), (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (-885.0F);
      objectArray0[2] = (Object) 0.0F;
      objectArray0[3] = (Object) (-885.0F);
      objectArray0[4] = (Object) 0.0F;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals((-1), int0);
      assertEquals(5, objectArray0.length);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.indexOf(intArray0, 1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-1);
      ArrayUtils.shift(longArray0, (-1303), Integer.MAX_VALUE, 1);
      assertArrayEquals(new long[] {(-1L), 1L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3159L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 3035L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3159L), 1L, (-1L), (-1L), 3035L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1122.3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1122.3), 1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (-359.3099F);
      floatArray0[2] = (float) 3035L;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), Integer.MAX_VALUE, 0.1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-120));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-120), (byte)byte1);
      assertNotNull(byte1);
      
      int int1 = ArrayUtils.indexOf((Object[]) longArray1, (Object) byte1, (int) (byte) (-120));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {(-3159L), 1L, (-1L), (-1L), 3035L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{0, 2}", bitSet0.toString());
      
      Character character0 = new Character('z');
      assertEquals('z', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('z');
      assertTrue(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      Character character2 = new Character('z');
      assertTrue(character2.equals((Object)character0));
      assertTrue(character2.equals((Object)character1));
      assertEquals('z', (char)character2);
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[9];
      characterArray0[0] = character1;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character2;
      characterArray0[5] = character2;
      characterArray0[6] = character2;
      characterArray0[7] = character0;
      characterArray0[8] = character1;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(9, characterArray1.length);
      assertEquals(9, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int int2 = ArrayUtils.indexOf((double[]) null, (double) (-1), (-2057), (double) character0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(character0.equals((Object)character2));
      assertTrue(character0.equals((Object)character1));
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short) (-516);
      shortArray0[2] = (short) (-3576);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)1943;
      shortArray0[5] = (short) (-2360);
      shortArray0[6] = (short) (-400);
      shortArray0[7] = (short)564;
      ArrayUtils.reverse(shortArray0, 1073741824, 1885);
      assertArrayEquals(new short[] {(short)100, (short) (-516), (short) (-3576), (short)2, (short)1943, (short) (-2360), (short) (-400), (short)564}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 117;
      intArray0[1] = 9;
      intArray0[2] = 1604;
      intArray0[3] = 2;
      intArray0[4] = (-57);
      ArrayUtils.reverse(intArray0, 2143856141, 0);
      assertArrayEquals(new int[] {117, 9, 1604, 2, (-57)}, intArray0);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) 1604, 982);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 1604);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1604.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray2 = new Float[0];
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertNotNull(floatArray3);
      assertEquals(0, floatArray3.length);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray3, floatArray2);
      assertNotSame(floatArray2, floatArray3);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray2, (Object) byte0);
      assertFalse(floatArray2.equals((Object)floatArray3));
      assertEquals((-1), int0);
      assertEquals(0, floatArray2.length);
      assertNotSame(floatArray2, floatArray3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1604;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-57));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -57, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((-1013.3934F));
      assertEquals((-1013.3934F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-238);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-1);
      intArray0[3] = 2931;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-238), (int) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-238), 0, (-1), 2931}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-238);
      floatArray0[2] = (float) 2931;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-3648);
      floatArray0[5] = (float) 2931;
      floatArray0[7] = (float) 2931;
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) 0, (-3893));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {(-1.0F), (-238.0F), 2931.0F, 0.0F, (-3648.0F), 2931.0F, 0.0F, 2931.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals("{3, 6}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(7, bitSet1.length());
      assertEquals(2, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-238.0F), 2931.0F, 0.0F, (-3648.0F), 2931.0F, 0.0F, 2931.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-238.0F), 2931.0F, 0.0F, (-3648.0F), 2931.0F, 0.0F, 2931.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-238.0F), 2931.0F, 0.0F, (-3648.0F), 2931.0F, 0.0F, 2931.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-238.0F), 2931.0F, 0.0F, (-3648.0F), 2931.0F, 0.0F, 2931.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Float[] floatArray2 = new Float[9];
      floatArray2[0] = (Float) (-238.0F);
      floatArray2[1] = (Float) 2931.0F;
      floatArray2[2] = (Float) (-3648.0F);
      floatArray2[3] = (Float) 2931.0F;
      floatArray2[4] = (Float) (-238.0F);
      floatArray2[5] = (Float) 2931.0F;
      floatArray2[6] = (Float) (-3648.0F);
      floatArray2[7] = (Float) (-238.0F);
      floatArray2[8] = (Float) (-3648.0F);
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray3.length);
      assertSame(floatArray2, floatArray3);
      assertSame(floatArray3, floatArray2);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      float[] floatArray0 = new float[4];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)7);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray1);
      
      ArrayUtils.shift((Object[]) null, (int) (byte)7, 182, Integer.MAX_VALUE);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-97));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-97), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray1.length);
      assertEquals(1, integerArray0.length);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.0F);
      floatArray0[2] = 1663.7241F;
      floatArray0[3] = 587.6031F;
      floatArray0[4] = 816.9053F;
      floatArray0[5] = 3783.8228F;
      ArrayUtils.swap(floatArray0, 1852, 1852, 2267);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.0F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 587.6031F;
      ArrayUtils.swap(doubleArray0, 1852, 1852, (-3917));
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1634.8497F, (-3917));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.0F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1634.8497F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)45, (int) (byte)0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)86, (byte)86, (byte)86, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'k';
      charArray0[2] = 'p';
      charArray0[3] = 'R';
      charArray0[4] = '{';
      charArray0[5] = 'a';
      charArray0[6] = 'k';
      charArray0[7] = '\\';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'&', 'k', 'p', 'R', '{', 'a', 'k', '\\'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.4116F);
      floatArray0[2] = 1663.7241F;
      floatArray0[3] = 587.6031F;
      floatArray0[4] = 816.9053F;
      floatArray0[5] = 3783.8228F;
      ArrayUtils.swap(floatArray0, 1852, 1852, 2267);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 587.6031F;
      ArrayUtils.swap(doubleArray0, 1852, 1852, (-3859));
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1634.8497F, (-3859));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 1634.8497F);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)45, (int) (byte)86);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertArrayEquals(new byte[] {(byte)86, (byte)86, (byte)86, (byte)86, (byte)86, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'k';
      charArray0[2] = 'p';
      charArray0[3] = 'R';
      charArray0[4] = '{';
      charArray0[5] = 'a';
      charArray0[6] = '7';
      charArray0[7] = 'Y';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'&', 'k', 'p', 'R', '{', 'a', '7', 'Y'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.4116F);
      floatArray0[2] = 1663.7241F;
      floatArray0[3] = 587.6031F;
      floatArray0[4] = 816.9053F;
      floatArray0[5] = 3783.8228F;
      ArrayUtils.swap(floatArray0, 1852, 1852, 2267);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 587.6031F;
      ArrayUtils.swap(doubleArray0, 1852, 1852, (-3859));
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1634.8497F, (-3859));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1634.8497F, 2267, 2.146973678E9);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1), (-21));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[21];
      intArray0[0] = (-21);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) (byte)21;
      intArray0[3] = (int) (byte)21;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(21, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-85);
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)53);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)87, (byte) (-85), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1027.49283);
      doubleArray0[2] = 383.587530783793;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-1027.49283), 383.587530783793}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 462.59525F;
      floatArray0[1] = 1184.9F;
      floatArray0[2] = (-582.6F);
      floatArray0[3] = (-1355.224F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-1100.1382F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      floatArray0[8] = 0.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 1144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1144, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-102);
      boolean[] booleanArray1 = new boolean[2];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)32425;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)32425}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)32425;
      floatArray0[1] = (float) (short)32425;
      floatArray0[2] = 1788.0F;
      floatArray0[3] = (float) (short)32425;
      floatArray0[4] = (float) (short)32425;
      floatArray0[5] = (float) (short)32425;
      floatArray0[6] = (float) (short)32425;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 32425.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {32425.0F, 32425.0F, 1788.0F, 32425.0F, 32425.0F, 32425.0F, 32425.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(6, bitSet0.cardinality());
      assertEquals("{0, 1, 3, 4, 5, 6}", bitSet0.toString());
      
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 32425.0F);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {32425.0F, 32425.0F, 1788.0F, 32425.0F, 32425.0F, 32425.0F, 32425.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(6, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{0, 1, 3, 4, 5, 6}", bitSet1.toString());
      assertEquals(7, bitSet1.length());
      assertFalse(bitSet1.isEmpty());
      
      Boolean[] booleanArray1 = new Boolean[5];
      booleanArray1[0] = (Boolean) true;
      booleanArray1[1] = (Boolean) true;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) true;
      booleanArray1[4] = (Boolean) true;
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray2.length);
      assertSame(booleanArray1, booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = '4';
      charArray0[2] = 'v';
      charArray0[3] = '$';
      charArray0[4] = 'B';
      charArray0[5] = 'm';
      charArray0[6] = '5';
      charArray0[7] = '~';
      charArray0[8] = '^';
      BitSet bitSet2 = ArrayUtils.indexesOf(charArray0, 'm', (int) (short)32425);
      assertFalse(bitSet2.equals((Object)bitSet1));
      assertFalse(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertArrayEquals(new char[] {'D', '4', 'v', '$', 'B', 'm', '5', '~', '^'}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotSame(bitSet2, bitSet1);
      assertNotSame(bitSet2, bitSet0);
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.length());
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)48;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertNotNull(stringArray0);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, stringArray0.length);
      
      ArrayUtils.swap((Object[]) doubleArray1, (-372), 128, (-372));
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-885.0F);
      floatArray0[5] = 1719.729F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-885.0F), 1719.729F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1719.729F;
      doubleArray0[2] = (double) 1719.729F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1719.72900390625, 1719.72900390625, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((Object[]) floatArray1, 1, 17, (-16));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-885.0F), 1719.729F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-903), (-696.41098358));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -903, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[3];
      ArrayUtils.swap((Object[]) booleanArray0, 2593, 3009, 3009);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '=');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)115);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0, (Byte) byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(3, byteArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertEquals((byte)115, object1);
      assertNotNull(object1);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (byte)9;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2734), (-2146586619));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((Object[]) byteArray0, (int) byte0, (int) byte0, 0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, (-2734), (double) 454L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2734, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, 4, 1777, (int) (short)15);
      assertArrayEquals(new short[] {(short)15, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-127.841518545), 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new short[] {(short)15, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.shift(shortArray0, (int) (short) (-102), (-1186), 1777);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-1927.0), (int) (short) (-102));
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1186);
      floatArray0[2] = (float) (short)50;
      floatArray0[3] = (float) (-1186);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1186.0F), 50.0F, (-1186.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-320));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-1567);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short) (-1567);
      shortArray0[5] = (short) (-809);
      shortArray0[6] = (short)91;
      shortArray0[7] = (short)50;
      shortArray0[8] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (short) (-1567), (int) (short)0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short) (-1567), (short)2, (short) (-1567), (short) (-809), (short)91, (short)50, (short) (-102)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-1567);
      doubleArray0[1] = (double) (short) (-102);
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short) (-1567);
      doubleArray0[4] = (double) (short) (-1567);
      doubleArray0[5] = (double) (short)50;
      doubleArray0[6] = (double) (short) (-102);
      doubleArray0[7] = (double) (short) (-102);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1567.0), (int) (short) (-809));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1567.0), (-102.0), 0.0, (-1567.0), (-1567.0), 50.0, (-102.0), (-102.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)50;
      floatArray0[1] = (float) (short)2;
      floatArray0[2] = (float) (short) (-1567);
      floatArray0[3] = (float) (short)2;
      floatArray0[4] = (float) (short) (-1567);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (-1.0F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {50.0F, 2.0F, (-1567.0F), 2.0F, (-1567.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-116.496682);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1.0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) (-1L);
      ArrayUtils.swap((short[]) null, (-1), 2);
      int int1 = ArrayUtils.indexOf(doubleArray0, 1.5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      ArrayUtils.swap((short[]) null, (int) (short)126, (int) (short)126);
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)126);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-38);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf((double[]) null, (double) (short)0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)21, (int) (short)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), (int) (byte)86);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Byte[] byteArray1 = new Byte[3];
      byteArray1[0] = (Byte) (byte)86;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-38), 1080);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1080L, 0L, (-38L)}, longArray1);
      assertArrayEquals(new long[] {1080L, 0L, (-38L)}, longArray0);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)3378;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)0, (short)3378, (short)4479}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)0, (short)3378, (short)4479}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)614;
      doubleArray0[7] = (double) (short)64;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 614.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {614.0, 76.0, 0.0, 76.0, 76.0, 76.0, 614.0, 64.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(9, bitSet0.length());
      assertEquals(9, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {614.0, 76.0, 0.0, 76.0, 76.0, 76.0, 614.0, 64.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 76.0;
      objectArray0[1] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "lO(be;Z<BvB&");
      assertNotNull(stringArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3159L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, 122, 122);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) (-1L), 0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, (float) 122);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {122.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 850L, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-400.8603F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[4] = (-1486.3279F);
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-1486.3279F));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1486.327880859375)}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-238);
      intArray0[1] = (int) (short)0;
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-238));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-238.0), 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = 3898.23F;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 3898.23F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-3113));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) (-3113));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-3113L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-3113), (-3113), (-3113));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-84.0), (-200), (double) (-200));
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 788, 6);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 72;
      intArray0[4] = 47;
      intArray0[5] = 2;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 47, 47);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 0, 0, 72, 47, 2, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.swap(intArray0, (-1532), (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 72, 47, 2, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      ArrayUtils.shift(doubleArray0, (-2151));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 72, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0, 1072, 187);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1719);
      shortArray0[1] = (short) (-1719);
      shortArray0[2] = (short) (-1719);
      Byte byte0 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.7, (double) byte0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (byte)47;
      shortArray0[1] = (short) (byte)47;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) (byte)47;
      shortArray0[4] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (byte)47, 3479, 1026);
      assertEquals(13, shortArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)47;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) (short)47;
      longArray0[3] = (long) (short)47;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) (-1);
      longArray0[7] = (-2270L);
      longArray0[8] = (long) (short) (-102);
      ArrayUtils.reverse(longArray0, (int) (short) (-102), 1026);
      assertArrayEquals(new long[] {(-102L), (-2270L), (-1L), 0L, 0L, 47L, 47L, 47L, 47L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 33, (-2145373292), 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-144L);
      longArray0[1] = (long) 33;
      longArray0[2] = (long) (-2145373292);
      longArray0[3] = (long) 33;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 228.933;
      doubleArray0[1] = (double) (-144L);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3.781));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {228.933, (-144.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) 182);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-144L), 33L, (-2145373292L), 33L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 182;
      int[] intArray0 = new int[7];
      intArray0[0] = (-2145373292);
      intArray0[1] = 33;
      intArray0[2] = 11;
      intArray0[3] = (-2145373292);
      intArray0[4] = 12;
      intArray0[5] = (-2145373292);
      intArray0[6] = 182;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1083);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2145373292), 33, 11, (-2145373292), 12, (-2145373292), 182}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      ArrayUtils.shift((char[]) null, 11);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3809.218F;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '';
      charArray0[2] = '<';
      ArrayUtils.shift(charArray0, 536);
      assertArrayEquals(new char[] {'<', '', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 527;
      intArray0[1] = (int) '<';
      intArray0[2] = (int) '<';
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {527, 60, 60}, intArray0);
      assertArrayEquals(new int[] {127}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1503.0F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1.0F, 3809.218F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '';
      longArray0[1] = (long) 527;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("14", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[2] = '{';
      charArray0[3] = 'T';
      ArrayUtils.shift(charArray0, 0, (int) (byte)14, (-1816));
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'l', '*', '{', 'T'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      String string1 = ArrayUtils.toString((Object) null, "The Array must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (-2139250727));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '-';
      charArray0[2] = '<';
      ArrayUtils.shift(charArray0, 527);
      assertArrayEquals(new char[] {'-', '<', ''}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) '';
      intArray0[1] = 13;
      intArray0[2] = (int) '';
      intArray0[3] = (int) '-';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {127, 13, 127, 45}, intArray0);
      assertEquals(4, intArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, 1.0F);
      assertEquals((-1), int0);
      assertEquals(15, floatArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 127;
      longArray0[1] = (long) 127;
      longArray0[2] = (long) '-';
      longArray0[3] = (long) '';
      longArray0[4] = (-1L);
      longArray0[5] = (long) 127;
      longArray0[6] = (long) 13;
      longArray0[7] = (long) 527;
      longArray0[8] = (-300L);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 1391);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1391, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'R';
      charArray0[3] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'R', '+', 'R', '+'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'R';
      doubleArray1[1] = (double) 'R';
      doubleArray1[2] = (double) '+';
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.4116F);
      floatArray0[2] = 1663.7241F;
      floatArray0[3] = 587.6031F;
      floatArray0[4] = 816.9053F;
      floatArray0[5] = 3783.8228F;
      ArrayUtils.swap(floatArray0, 1852, 1852, 2267);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, 3783.8228F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 587.6031F;
      ArrayUtils.swap(doubleArray0, 1852, 1852, (-3859));
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte2);
      assertNotNull(byte2);
      
      floatArray0[1] = (float) (byte)byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)9);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)9, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte)49);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertEquals((byte)49, (byte)byte5);
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)0);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[6] = byte6;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)41, (byte)41, (byte)41}, byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = 611;
      intArray0[2] = (int) (short) (-14);
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'K');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '-');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'-'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)41;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) '~';
      longArray0[3] = (long) '~';
      longArray0[4] = (long) (byte)41;
      longArray0[5] = (long) 611;
      longArray0[6] = (long) (byte)41;
      longArray0[7] = (long) '~';
      longArray0[8] = (long) 611;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 611L, 8192);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {41L, 1L, 126L, 126L, 41L, 611L, 41L, 126L, 611L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)115);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0, (Byte) byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(3, byteArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertEquals((byte)115, object1);
      assertNotNull(object1);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      byte byte4 = (byte)9;
      Character character0 = Character.valueOf('^');
      assertEquals('^', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('\'');
      assertFalse(character1.equals((Object)character0));
      assertEquals('\'', (char)character1);
      assertNotNull(character1);
      
      Character character2 = new Character('\"');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('\"', (char)character2);
      assertNotNull(character2);
      
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0, 'F');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      assertSame(charArray1, charArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)9);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)115}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4152), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4152, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-29));
      assertEquals((byte) (-29), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)32);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)32, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)32);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)32, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1365, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1365, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'a';
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = (Byte) (byte)32;
      byteArray1[1] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1, (byte)32);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray3);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray3.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      Byte[] byteArray4 = ArrayUtils.insert(2, byteArray1, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertNotNull(byteArray4);
      assertEquals(2, byteArray1.length);
      assertEquals(4, byteArray4.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3545L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray0);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)char0));
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('\'', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertEquals('M', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', 'M', '\'', 'M'}, charArray0);
      assertEquals(4, characterArray0.length);
      assertEquals(4, charArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)51);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) character3, byteArray2, byteArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1101.7F);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1101.7F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1342.2646);
      doubleArray0[4] = (double) (-1101.7F);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) (-1101.7F);
      doubleArray0[7] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435, 0.0, (-1342.2646), (-1101.699951171875), 1.0, (-1101.699951171875), 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435, 0.0, (-1342.2646), (-1101.699951171875), 1.0, (-1101.699951171875), 251.028435}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1101.7F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 3479, 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.0, 251.028435, 0.0, (-1342.2646), (-1101.699951171875), 1.0, (-1101.699951171875), 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435, 0.0, (-1342.2646), (-1101.699951171875), 1.0, (-1101.699951171875), 251.028435}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1416);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1416;
      longArray0[1] = (long) 1416;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1416L, 1416L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      ArrayUtils.swap(longArray0, (-1141), 1416, (-1779));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1416L, 1416L}, longArray0);
      assertEquals(2, longArray0.length);
      assertNotSame(longArray0, longArray1);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-2168L);
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1354L;
      longArray0[5] = (long) 0;
      longArray0[6] = 0L;
      longArray0[7] = (long) 0;
      longArray0[8] = (-1612L);
      ArrayUtils.swap(longArray0, (-1505), 1089);
      assertArrayEquals(new long[] {(-2168L), 0L, 0L, 0L, 1354L, 0L, 0L, 0L, (-1612L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-136));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-3317));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertEquals((short) (-3317), (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-3317));
      assertTrue(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-3317), (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)13;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      ArrayUtils.shift(byteArray0, 1, (int) (byte)103, 389);
      assertArrayEquals(new byte[] {(byte)0, (byte)103, (byte)103}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)103;
      objectArray0[1] = (Object) (byte)103;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1], (int) (byte)13);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)74);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)74, (byte)byte1);
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte1, (int) (byte) (-67));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((-1), int0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray0, (Object) byte0, (int) (byte)74);
      assertEquals((-1), int0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, (-1380L));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1380L);
      floatArray0[1] = (float) (-1380L);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) (-1380L);
      floatArray0[4] = (float) (-1380L);
      floatArray0[5] = (float) (-1380L);
      int int0 = 121;
      int int1 = ArrayUtils.indexOf(floatArray0, 1.0F, 121);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {(-1380.0F), (-1380.0F), 1.0F, (-1380.0F), (-1380.0F), (-1380.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)35;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)35;
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte)35;
      intArray1[4] = (int) (byte)0;
      ArrayUtils.shift(byteArray0, (-4420), (-462), 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)35, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-3159L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = 3035L;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-3159L), 1L, (-1L), (-1L), 3035L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1L;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (-1122.3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1122.3), 1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (-359.3099F);
      floatArray0[2] = (float) 3035L;
      floatArray0[3] = (float) 1L;
      floatArray0[4] = (float) (-3159L);
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) (-1L);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-3159.0F), 1.0F, 3035.0F, (-359.3099F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {1L, (-1L), (-1L), 3035L, (-3159L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ArrayUtils.swap(byteArray0, (int) (byte) (-74), (int) (byte) (-74));
      assertArrayEquals(new byte[] {(byte) (-74)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertNotNull(arrayUtils0);
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      
      byte byte0 = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        mockRandom0.longs(417L, 1012L, 1012L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-239), (-239));
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2049870754);
      assertEquals(2049870754, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = 615;
      intArray0[3] = 2049870754;
      intArray0[4] = (-239);
      intArray0[5] = (-239);
      intArray0[6] = (-689);
      intArray0[7] = (-239);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1727, (int) integerArray0[0]);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2049870754, 2049870754, 615, 2049870754, (-239), (-239), (-689), (-239)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(2, integerArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)110);
      assertNull(byteArray0);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Object[] objectArray0 = new Object[6];
      Byte byte0 = new Byte((byte)57);
      assertEquals((byte)57, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)57, object0);
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((byte)57, object1);
      assertNotNull(object1);
      
      Object object2 = ArrayUtils.get(objectArray0, (-865), object1);
      assertEquals((byte)57, object2);
      assertNotNull(object2);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = object2;
      objectArray0[1] = (Object) 1.0;
      byte byte1 = (byte)17;
      Byte byte2 = new Byte((byte)17);
      assertFalse(byte2.equals((Object)object2));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)object0));
      assertEquals((byte)17, (byte)byte2);
      assertNotNull(byte2);
      
      Object object3 = ArrayUtils.get(objectArray0, 0, (Object) byte2);
      assertFalse(byte2.equals((Object)object2));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object1));
      assertFalse(byte2.equals((Object)object0));
      assertFalse(object3.equals((Object)byte2));
      assertFalse(object3.equals((Object)byte1));
      assertEquals((byte)57, object3);
      assertNotNull(object3);
      assertEquals(6, objectArray0.length);
      
      objectArray0[2] = object3;
      Object object4 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertFalse(object4.equals((Object)byte1));
      assertFalse(object4.equals((Object)byte2));
      assertEquals((byte)57, object4);
      assertNotNull(object4);
      assertEquals(6, objectArray0.length);
      
      objectArray0[3] = object4;
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) 251.028435;
      Object object5 = ArrayUtils.get(objectArray0, (int) 17);
      assertNull(object5);
      assertEquals(6, objectArray0.length);
      
      Object object6 = new Object();
      assertNotNull(object6);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertFalse(byte3.equals((Object)object2));
      assertFalse(byte3.equals((Object)object4));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)object1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object3));
      assertEquals((byte)17, (byte)byte3);
      assertNotNull(byte3);
      
      Byte byte4 = ArrayUtils.get(byteArray0, (-924), byte3);
      assertFalse(byte3.equals((Object)object2));
      assertFalse(byte3.equals((Object)object4));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)object1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)object0));
      assertFalse(byte4.equals((Object)object1));
      assertFalse(byte4.equals((Object)object4));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)object3));
      assertFalse(byte4.equals((Object)object2));
      assertEquals((byte)17, (byte)byte4);
      assertNotNull(byte4);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = new BitSet(byte1);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2);
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean2));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3);
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("J");
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4);
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      float[] floatArray0 = new float[22];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(22, floatArray0.length);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 3077);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3077, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-616L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-616L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.swap(longArray1, 3094, 1244, 1244);
      assertArrayEquals(new long[] {(-616L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      Character[] characterArray0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.get((Object[]) null, (-2357));
      assertNull(object1);
      
      Object object2 = ArrayUtils.get((Object[]) null, (-2357));
      assertNull(object2);
      
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = null;
      objectArray0[1] = null;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) byte0;
      objectArray0[4] = object0;
      objectArray0[5] = null;
      objectArray0[6] = null;
      objectArray0[7] = object0;
      objectArray0[8] = null;
      Object object3 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object3);
      assertEquals(9, objectArray0.length);
      
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)67;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)67;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object4, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '=');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)115);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0, (Byte) byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)115, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(3, byteArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertEquals((byte)115, object1);
      assertNotNull(object1);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      byte byte4 = (byte)9;
      byte byte5 = (byte) (-1);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (byte)9;
      longArray0[2] = (long) (byte)115;
      longArray0[3] = 454L;
      longArray0[4] = (long) (byte) (-1);
      longArray0[5] = (-2221L);
      longArray0[6] = 454L;
      longArray0[7] = (long) byte0;
      int int0 = 2557;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 2557, 454L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2557, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = (Byte) byte0;
      Byte byte2 = new Byte((byte)115);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = ArrayUtils.get(byteArray0, (int) byte0, (Byte) byte0);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte3);
      assertNotNull(byte3);
      assertEquals(3, byteArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertEquals((byte)115, object1);
      assertNotNull(object1);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object1);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(object1.equals((Object)byte2));
      assertTrue(object1.equals((Object)byte1));
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)9;
      longArray0[1] = (long) (byte)9;
      Object object2 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object2);
      assertSame(object2, object0);
      assertSame(object0, object2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, 12);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(15, int0);
      assertEquals(16, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertEquals(21, floatArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)127);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)127, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)10);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)10, (byte)byte2);
      assertNotNull(byte2);
      
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(21, floatArray1.length);
      assertEquals(21, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertEquals((byte)127, object0);
      assertNotNull(object0);
      
      ArrayUtils.shift(booleanArray0, 6, 15, 1);
      assertEquals(16, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      ArrayUtils.shift(booleanArray0, (-2146796232));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, (-1223), 6, (-681));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 'a';
      doubleArray0[3] = 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1223), (-681), (double) (byte)32);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {6.0, 0.0, 97.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = 93;
      intArray0[4] = 93;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte) (-102);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 93;
      objectArray0[1] = (Object) (byte) (-102);
      objectArray0[2] = (Object) 93;
      objectArray0[3] = (Object) 93;
      objectArray0[4] = (Object) 93;
      objectArray0[5] = (Object) 93;
      ArrayUtils.shift(objectArray0, (-2069));
      assertEquals(6, objectArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[1], objectArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      ArrayUtils.shift((boolean[]) null, 0);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-116.496682);
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = '?';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'R', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shuffle(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-116.496682), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-116.496682)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'R';
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {82}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 'R';
      objectArray0[1] = (Object) '?';
      objectArray0[2] = (Object) '?';
      objectArray0[3] = (Object) (-1.0);
      ArrayUtils.shift(objectArray0, 82);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-67));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-121);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-97), (byte) (-30), (byte) (-30), (byte) (-121)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) (-147));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-147L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[1];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '?', (int) (byte)2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, '7');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'A');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, 69, 69, 3);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (-742));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 47;
      intArray0[1] = 72;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-3339);
      intArray0[4] = (int) (byte) (-31);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2360), 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {47, 72, 0, (-3339), (-31)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 47;
      objectArray0[2] = (Object) 47;
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)8;
      shortArray0[4] = (short) (byte)8;
      shortArray0[5] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 47, (int) (short)0, (-742));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)8, (short)8, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 4);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) (byte)0, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte0 = Byte.valueOf((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) null);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      Byte byte1 = new Byte((byte)65);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)65, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte)32, (byte)byte2);
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte3 = new Byte((byte) (-89));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte) (-89), (byte)byte3);
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte3, byte2);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(4, abstractMap_SimpleImmutableEntryArray0.length);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short) (-684);
      shortArray0[2] = (short)4675;
      shortArray0[3] = (short)241;
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '<');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'<', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(2, charArray2.length);
      assertEquals(6, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, (int) (short)4675);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 182, 182, 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 182;
      longArray0[1] = (long) 182;
      longArray0[2] = (-144L);
      longArray0[3] = (long) 182;
      longArray0[4] = (long) 182;
      longArray0[5] = (-144L);
      longArray0[6] = (-144L);
      longArray0[7] = (-144L);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 182L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {182L, 182L, (-144L), 182L, 182L, (-144L), (-144L), (-144L)}, longArray0);
      assertArrayEquals(new long[] {(-144L), (-144L), (-144L), (-144L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.indexOf(longArray1, 2675L, 182);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {182L, 182L, (-144L), 182L, 182L, (-144L), (-144L), (-144L)}, longArray0);
      assertArrayEquals(new long[] {(-144L), (-144L), (-144L), (-144L)}, longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Short short0 = new Short((short)8192);
      assertEquals((short)8192, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)1136);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)1136, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short)5564);
      assertFalse(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertEquals((short)5564, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)2);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)2, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-28342));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short) (-28342), (short)short4);
      assertNotNull(short4);
      
      Short short5 = new Short((short)260);
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short2));
      assertEquals((short)260, (short)short5);
      assertNotNull(short5);
      
      Short short6 = new Short((short) (-8587));
      assertFalse(short6.equals((Object)short5));
      assertFalse(short6.equals((Object)short1));
      assertFalse(short6.equals((Object)short4));
      assertFalse(short6.equals((Object)short3));
      assertFalse(short6.equals((Object)short2));
      assertFalse(short6.equals((Object)short0));
      assertEquals((short) (-8587), (short)short6);
      assertNotNull(short6);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.shift((short[]) null, (int) (short)2, 49, 182);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), 0L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1709.296, (-1592));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '';
      charArray0[2] = '\'';
      charArray0[3] = '2';
      charArray0[4] = ' ';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^', 778);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {'5', '', '\'', '2', ' '}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)81);
      assertEquals((byte)81, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)81}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-707));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-238), (-238));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-3648);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 650.0F, 2950);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {0.0F, (-3648.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet2 = ArrayUtils.indexesOf(booleanArray0, false, Integer.MAX_VALUE);
      assertTrue(bitSet2.equals((Object)bitSet1));
      assertTrue(bitSet2.equals((Object)bitSet0));
      assertNotNull(bitSet2);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertNotSame(bitSet2, bitSet0);
      assertNotSame(bitSet2, bitSet1);
      assertEquals(64, bitSet2.size());
      assertEquals(0, bitSet2.length());
      assertEquals("{}", bitSet2.toString());
      assertEquals(0, bitSet2.cardinality());
      assertTrue(bitSet2.isEmpty());
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-110);
      Byte byte1 = new Byte((byte) (-110));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-86));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-86), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte) (-110), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)43);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertEquals((byte)43, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)43);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertEquals((byte)43, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-86), (byte) (-110), (byte)43, (byte)43}, byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-811);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-811), (-811));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {(-811.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.indexOf(floatArray0, (-259.8411F), (-2146100538));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)17);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[2] = '{';
      charArray0[3] = 'T';
      ArrayUtils.shift(charArray0, 0, (int) (byte)14, (-1816));
      assertArrayEquals(new char[] {'l', '*', '{', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Byte byte1 = new Byte((byte)0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)0;
      ArrayUtils.shift(byteArray2, 6, (int) (byte)0, (int) (byte)0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)14, (byte)0}, byteArray2);
      assertEquals(5, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'l', '*', '{', 'T'}, charArray1);
      assertArrayEquals(new char[] {'l', '*', '{', 'T'}, charArray0);
      assertEquals(4, charArray1.length);
      assertEquals(4, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (byte)14);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)118;
      Byte byte1 = new Byte((byte)118);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)118, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[11];
      ArrayUtils.reverse(intArray0);
      assertEquals(11, intArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)118;
      longArray0[1] = (long) (byte)118;
      longArray0[2] = (long) (byte)118;
      Byte byte2 = ArrayUtils.get(byteArray1, (int) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNull(byte2);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertFalse(byte1.equals((Object)byte0));
      assertEquals((byte) (-52), (byte)byte1);
      assertNotNull(byte1);
      
      ArrayUtils.reverse((int[]) null);
      Byte byte2 = ArrayUtils.get((Byte[]) null, 649);
      assertNull(byte2);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);
      assertNotNull(shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1529.5082130239));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (-1020), (-1020), (-47));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short) (-1);
      ArrayUtils.shift(shortArray0, 4, 1777, (int) (short)15);
      assertArrayEquals(new short[] {(short)15, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-127.841518545), 2146549619);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new short[] {(short)15, (short) (-1)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) (-1));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2258.4);
      doubleArray1[1] = (double) (short)15;
      doubleArray1[2] = (double) (short) (-1);
      doubleArray1[3] = (double) 4;
      doubleArray1[4] = (double) 2146549619;
      int int2 = ArrayUtils.lastIndexOf(doubleArray1, 1776.77558, 2146549619);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      assertArrayEquals(new double[] {(-2258.4), 15.0, (-1.0), 4.0, 2.146549619E9}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (double) 2559;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 'e';
      ArrayUtils.shift(doubleArray0, 2559, (-1461), (-679));
      assertEquals(12, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '[';
      charArray0[2] = ' ';
      charArray0[3] = '|';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'|', ' ', '[', '-'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (long) Integer.MAX_VALUE;
      longArray0[4] = (long) Integer.MAX_VALUE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-70);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)14, (byte) (-70)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3431.8363799999997);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 401.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-3431.8363799999997), 0.0, 401.0, 2.147483647E9}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = '#';
      charArray0[2] = 'D';
      charArray0[3] = '{';
      charArray0[4] = '<';
      charArray0[5] = ';';
      charArray0[6] = '7';
      charArray0[7] = '_';
      charArray0[8] = ';';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {';', '_', '7', ';', '<', '{', 'D', '#', 'i'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'h';
      charArray0[1] = 'U';
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 'h';
      doubleArray0[3] = (double) ' ';
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 104.0, 0.0, 32.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'h', (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new char[] {'h', 'U', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      short[] shortArray0 = new short[8];
      ArrayUtils.swap(shortArray0, (-375), 834);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2178;
      shortArray0[2] = (short)726;
      shortArray0[3] = (short)2;
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1343), (int) (short) (-1343));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      floatArray0[5] = 1719.729F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(15, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-229.0F);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-885.0F));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-229.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-175), 8, (-175));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-239), (-239));
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2049870754);
      assertEquals(2049870754, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-239));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-239), (int)integer1);
      assertNotNull(integer1);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-239), 2049870754, (int) integerArray0[0]);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2, integerArray0.length);
      assertEquals(0, doubleArray0.length);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {2049870754, (-239)}, intArray0);
      assertEquals(2, integerArray0.length);
      assertEquals(2, intArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'S';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'S', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (-429.95128465291555);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-429.95128465291555), (-429.95128465291555));
      assertNotNull(bitSet0);
      assertEquals(11, doubleArray0.length);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      Double double0 = new Double((-429.95128465291555));
      assertEquals((-429.95128465291555), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-429.95128465291555);
      doubleArray1[1] = (-429.95128465291555);
      doubleArray1[2] = (-429.95128465291555);
      doubleArray1[3] = (-429.95128465291555);
      doubleArray1[4] = (-429.95128465291555);
      ArrayUtils.shift(doubleArray1, 478);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-429.95128465291555), (-429.95128465291555), (-429.95128465291555), (-429.95128465291555), (-429.95128465291555)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2593;
      doubleArray0[1] = (double) 2593;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2593;
      ArrayUtils.shift(doubleArray0, 1, 40, 1);
      assertArrayEquals(new double[] {2593.0, 2593.0, 2593.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)8, (-742));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 47;
      intArray0[1] = 72;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-3339);
      intArray0[4] = (int) (byte) (-31);
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-2360), 2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {47, 72, 0, (-3339), (-31)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 47;
      objectArray0[2] = (Object) 47;
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.swap(intArray0, 9, 0);
      assertArrayEquals(new int[] {47, 72, 0, (-3339), (-31)}, intArray0);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-3339);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 47;
      doubleArray0[3] = (-194.69594121);
      doubleArray0[4] = (double) (-2360);
      doubleArray0[5] = (double) 47;
      ArrayUtils.shift(doubleArray0, (-1731));
      assertArrayEquals(new double[] {(-194.69594121), (-2360.0), 47.0, (-3339.0), 9.0, 47.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-200), 8, (-200));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 1474L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-394.0);
      doubleArray0[6] = 501.330846;
      doubleArray0[7] = (-394.0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[1] = 1400L;
      longArray0[2] = 0L;
      longArray0[3] = (-1981L);
      longArray0[4] = 66L;
      longArray0[5] = (-1L);
      longArray0[6] = (-3789L);
      boolean boolean0 = ArrayUtils.contains(longArray0, 2809L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 1400L, 0L, (-1981L), 66L, (-1L), (-3789L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 93, 93);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, (-2244), (-665), 49);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-2746));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-2746)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse((double[]) null, 49, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-811.755685324302);
      doubleArray0[1] = (-918.3781972640663);
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {(-918.3781972640663), (-811.755685324302)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, false, false, true, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals(5, bitSet0.cardinality());
      assertEquals(9, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2, 4, 5, 7, 8}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[5] = 114;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 114;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 228.933);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 114.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) 0;
      longArray0[2] = (-4033L);
      longArray0[3] = (long) 114;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, (-4033L), 114L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-4033L), 114L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2143101028, 2031);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      ArrayUtils.shift(longArray0, 0, (-1), (-1));
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L, (-4033L), 114L}, longArray0);
      assertEquals(4, longArray0.length);
      assertNotSame(longArray0, longArray1);
      
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 114, 0, (-1), (-1), 0, (-1)}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(22L);
      assertNotNull(mockRandom0);
      
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-105), 1755);
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-105);
      intArray0[1] = (int) (byte) (-105);
      intArray0[2] = (int) (byte) (-105);
      intArray0[3] = 1755;
      intArray0[4] = (int) (byte) (-105);
      intArray0[5] = 1755;
      intArray0[6] = (int) (byte) (-105);
      int[] intArray1 = ArrayUtils.addAll(intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-105), (-105), (-105), 1755, (-105), 1755, (-105)}, intArray0);
      assertArrayEquals(new int[] {(-105), (-105), (-105), 1755, (-105), 1755, (-105)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-105);
      objectArray0[1] = (Object) (-105);
      ArrayUtils.swap(objectArray0, 1755, (-105), (-1));
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-105);
      floatArray0[1] = 496.5016F;
      floatArray0[2] = (float) (-105);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-105.0F), 496.5016F, (-105.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-105.0F), 496.5016F, (-105.0F), (-105.0F), 496.5016F, (-105.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[3] = (-1);
      ArrayUtils.swap(intArray0, (-1), 0, 0);
      assertEquals(17, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.add((short[]) null, (short) (-2746));
      assertNotNull(shortArray0);
      assertArrayEquals(new short[] {(short) (-2746)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.reverse(doubleArray0, 1513, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.shift((long[]) null, 5, 5, 5);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3946), (-2144940721));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.shift((long[]) null, (-1), (-3946), 1810);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1), 17);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-3946);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2144940721);
      ArrayUtils.reverse(doubleArray0, (-2144940721), 17);
      assertArrayEquals(new double[] {(-2.144940721E9), (-1.0), (-3946.0), (-1.0), 17.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      ArrayUtils.shift(intArray0, 145, (-1), (-2534));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      
      Byte[] byteArray1 = new Byte[9];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      byte byte1 = (byte) (-72);
      Byte byte2 = new Byte((byte) (-72));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertEquals((byte) (-72), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray1[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte) (-72), (byte)byte3);
      assertNotNull(byte3);
      
      byteArray1[2] = byte3;
      Byte byte4 = new Byte((byte)85);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertEquals((byte)85, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray1[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertEquals((byte) (-72), (byte)byte5);
      assertNotNull(byte5);
      
      byteArray1[4] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertEquals((byte)2, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray1[5] = byte6;
      Byte byte7 = new Byte((byte)57);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertEquals((byte)57, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray1[6] = byte7;
      Byte byte8 = new Byte((byte) (-1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte8);
      assertNotNull(byte8);
      
      byteArray1[7] = byte8;
      Byte byte9 = new Byte((byte)1);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      assertEquals((byte)1, (byte)byte9);
      assertNotNull(byte9);
      
      byteArray1[8] = byte9;
      Byte byte10 = ArrayUtils.get(byteArray1, (int) 1);
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte9));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte8));
      assertTrue(byte10.equals((Object)byte2));
      assertFalse(byte10.equals((Object)byte4));
      assertEquals((byte) (-72), (byte)byte10);
      assertNotNull(byte10);
      assertEquals(9, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 114;
      Byte byte0 = new Byte((byte) (-72));
      assertEquals((byte) (-72), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2371, (int) (byte) (-72));
      assertEquals((-1), int0);
      assertEquals(15, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) null, (-1879));
      assertNotNull(bitSet0);
      assertEquals(12, byteArray0.length);
      assertEquals(12, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(12, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)94);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)94, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      Byte byte3 = new Byte((byte)2);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)2, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-40));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertEquals((byte) (-40), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)2, booleanArray0, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, object0, (-1879));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)120);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)120, (byte)byte1);
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray0, object0, 121);
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3407;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)691);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-919L);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-919L)}, longArray0);
      assertArrayEquals(new long[] {(-919L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      
      Byte[] byteArray0 = new Byte[9];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)56;
      Byte byte2 = new Byte((byte)56);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)56, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertEquals((byte)56, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte) (-127);
      Byte byte6 = new Byte((byte) (-127));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertEquals((byte) (-127), (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte1);
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte1 == byte5);
      assertEquals((byte)56, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-24));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertEquals((byte) (-24), (byte)byte8);
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte) (-127));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte2));
      assertEquals((byte) (-127), (byte)byte9);
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = Byte.valueOf(byte5);
      assertFalse(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte1));
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte8));
      assertTrue(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte0));
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte7));
      assertFalse(byte10.equals((Object)byte2));
      assertFalse(byte5 == byte1);
      assertEquals((byte) (-127), (byte)byte10);
      assertNotNull(byte10);
      
      byteArray0[8] = byte10;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (Byte) byte5);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte5 == byte1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)41;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 58;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (-3199);
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {41, 0, 58, 0, (-3199)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3481.21537602);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 3.0, 1252);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {(-3481.21537602)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      ArrayUtils.swap((Object[]) integerArray0, (-1186), (-1767), 0);
      assertArrayEquals(new int[] {41, 0, 58, 0, (-3199)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1788.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-102);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.shift(doubleArray0, (int) (byte) (-102));
      assertArrayEquals(new double[] {(-102.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte) (-102), (-2665), 594);
      assertEquals(0, objectArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)550;
      shortArray0[1] = (short) (byte) (-102);
      shortArray0[2] = (short) (byte) (-102);
      shortArray0[3] = (short) (byte) (-102);
      shortArray0[4] = (short) (byte) (-102);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-102));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new short[] {(short)550, (short) (-102), (short) (-102), (short) (-102), (short) (-102)}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-885.0F);
      floatArray0[5] = 1719.729F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-885.0F), 1719.729F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1719.729F;
      doubleArray0[2] = (double) 1719.729F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1719.72900390625, 1719.72900390625, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      ArrayUtils.swap((Object[]) floatArray1, 1, 2, (-16));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-885.0F), 1719.729F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-903), (-696.41098358));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -903, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.shift(objectArray0, 1, 2593, 2593);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift((byte[]) null, (-3221));
      float[] floatArray0 = ArrayUtils.insert((int) (byte)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 531;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-2152.25051);
      doubleArray0[4] = (double) 531;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 531;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertArrayEquals(new double[] {531.0, 2.147483647E9, 0.0, (-2152.25051), 531.0, (-1.0), 531.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {531.0, 2.147483647E9, 0.0, (-2152.25051), 531.0, (-1.0), 531.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte)86, (int) (byte)0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)86;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)86, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      int int0 = ArrayUtils.indexOf((double[]) null, 1.0);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)55, 1080);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'k';
      charArray0[3] = 'a';
      charArray0[4] = 'R';
      boolean boolean1 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'R', 'R', 'k', 'a', 'R'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ArrayUtils.shift((byte[]) null, (-3221));
      float[] floatArray0 = ArrayUtils.insert((int) (byte)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-1.0F), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 531;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (-2152.25051);
      doubleArray0[4] = (double) 531;
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 531;
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1));
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertArrayEquals(new double[] {531.0, 2.147483647E9, 0.0, (-2152.25051), 531.0, (-1.0), 531.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {531.0, 2.147483647E9, 0.0, (-2152.25051), 531.0, (-1.0), 531.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int2 = ArrayUtils.lastIndexOf((byte[]) null, (byte)86, (int) (byte)0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)86;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)86;
      ArrayUtils.swap(shortArray0, (int) (short)86, 2952);
      assertArrayEquals(new short[] {(short)86, (short)0, (short)0, (short)86}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int int3 = ArrayUtils.indexOf(doubleArray0, 775.5099335944169);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      assertArrayEquals(new double[] {531.0, 2.147483647E9, 0.0, (-2152.25051), 531.0, (-1.0), 531.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2891);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1158, (-2891));
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-2891)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)232;
      shortArray0[4] = (short)3378;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)232, (short)3378, (short)4479}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)232, (short)3378, (short)4479}, shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)232;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)232;
      doubleArray0[7] = (double) (short)64;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 232.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {614.0, 76.0, 232.0, 76.0, 76.0, 76.0, 232.0, 64.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {614.0, 76.0, 232.0, 76.0, 76.0, 76.0, 232.0, 64.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 76.0;
      objectArray0[1] = (Object) 232.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "lO(be;Z<BvB&");
      assertNotNull(stringArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)34, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)34, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte)34;
      shortArray0[3] = (short) (byte)34;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)34;
      shortArray0[6] = (short) (byte)34;
      shortArray0[7] = (short) byte0;
      ArrayUtils.swap(shortArray0, (int) (short)34, 0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "k}.S|b");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      Byte[] byteArray0 = new Byte[12];
      byte byte0 = (byte) (-118);
      Byte byte1 = new Byte((byte) (-118));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-118), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray0.length);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 774;
      byte byte0 = (byte)0;
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)0);
      assertNull(byteArray1);
      
      Byte[] byteArray2 = new Byte[4];
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray2[0] = byte1;
      Byte byte2 = new Byte((byte)72);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)72, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray2[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray2[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray2[3] = byte4;
      Byte[] byteArray3 = ArrayUtils.insert((-633), (Byte[]) null, byteArray2);
      assertNull(byteArray3);
      assertEquals(4, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (byte)0, 1563);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {774.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-95));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-95));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 4300L;
      longArray0[1] = (long) (byte)5;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)5;
      longArray0[4] = (long) (byte)5;
      longArray0[5] = (long) (byte)0;
      longArray0[6] = (long) (byte)5;
      longArray0[7] = (long) (byte)0;
      longArray0[8] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 3545L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray0);
      assertArrayEquals(new long[] {4300L, 5L, 0L, 5L, 5L, 0L, 5L, 0L, 5L}, longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(9, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      Character[] characterArray0 = new Character[4];
      char char0 = 'M';
      Character character0 = Character.valueOf('M');
      assertEquals('M', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('M', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('\'');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)char0));
      assertEquals('\'', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character('M');
      assertTrue(character3.equals((Object)character1));
      assertFalse(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertEquals('M', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'M', 'M', '\'', 'M'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)51);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotNull(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray3);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray3.length);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (-2139250727), (-2139250727));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short) (byte)34;
      shortArray0[3] = (short) (byte)34;
      shortArray0[5] = (short) (byte)34;
      shortArray0[6] = (short) (byte)34;
      ArrayUtils.swap(shortArray0, (int) (short)34, 0);
      assertArrayEquals(new short[] {(short)0, (short)34, (short)0, (short)34, (short)0, (short)34, (short)34, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) byte0, 256);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)34;
      doubleArray0[1] = (double) (short)34;
      doubleArray0[2] = (double) (short)34;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)34;
      doubleArray0[5] = (double) 256;
      doubleArray0[6] = (double) (short)34;
      doubleArray0[7] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) 0, (-2145727446));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {34.0, 34.0, 34.0, (-1.0), 34.0, 256.0, 34.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      shortArray0[6] = (short) (-1730);
      shortArray0[7] = (short) (-2150);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3407);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short)1369, (short) (-300), (short)3407, (short)4, (short)2952, (short) (-1730), (short) (-2150)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-2150);
      longArray0[2] = (long) (short)4;
      longArray0[3] = (long) 3;
      longArray0[4] = (long) (short) (-2150);
      longArray0[5] = (long) (short)0;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-2150));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertArrayEquals(new long[] {0L, (-2150L), 4L, 3L, (-2150L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      longArray0[4] = 0L;
      ArrayUtils.swap(longArray0, 0, 0);
      assertArrayEquals(new long[] {0L, 172L, (-1612L), (-2168L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short) (-136), (short)short3);
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1271));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short) (-1271), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      shortArray0[5] = shortArray0[4];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[2] = 'f';
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short) shortArray0[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray2, (short) (-1271), (-1490));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-1271)}, shortArray2);
      assertEquals(1, shortArray2.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'S');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'S'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = new Short[9];
      Byte byte0 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray0, (Object) byte0, (int) (byte)67);
      assertEquals((-1), int0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-409.8);
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (-812.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-409.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-409.8)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 1;
      intArray0[3] = (int) (byte)0;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0}, intArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      longArray0[4] = 0L;
      ArrayUtils.swap(longArray0, 0, 0);
      assertArrayEquals(new long[] {0L, 172L, (-1612L), (-2168L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = Short.valueOf((short) shortArray0[1]);
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertEquals((short) (-136), (short)short3);
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1271));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short1));
      assertEquals((short) (-1271), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 172L;
      MockRandom mockRandom0 = new MockRandom(4300L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {172.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MockRandom mockRandom0 = new MockRandom((-4000L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '\"';
      charArray0[2] = 'i';
      charArray0[3] = '?';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      Short[] shortArray0 = new Short[2];
      Short short0 = new Short((short)1);
      assertEquals((short)1, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)1, (short)short1);
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'P');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'G', '\"', 'i', '?', 'q', ' ', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'G', '\"', 'i', '?', 'q', ' ', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray1.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, '0');
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'0', 'G', '\"', 'i', '?', 'q', ' ', '\u0000', '\u0000'}, charArray2);
      assertArrayEquals(new char[] {'G', '\"', 'i', '?', 'q', ' ', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray2.length);
      assertEquals(8, charArray0.length);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) shortArray1);
      assertFalse(boolean0);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-1));
      assertEquals(0, objectArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = 0L;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(4, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      
      int int0 = ArrayUtils.indexOf(longArray1, 90L);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 90L;
      floatArray0[1] = (float) (-1L);
      int int1 = ArrayUtils.indexOf(floatArray0, (-14.0F));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new float[] {90.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (byte) (-103);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (int) (byte) (-103));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-103.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '2', 91);
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.swap(objectArray0, (int) (byte) (-103), (int) (byte)0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)110;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1756.6);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {110.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Byte byte0 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "");
      assertEquals("14", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[1] = '{';
      charArray0[3] = 'T';
      ArrayUtils.shift(charArray0, 34, (int) (byte)14, (-1816));
      assertArrayEquals(new char[] {'l', '{', '\u0000', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {14.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 14.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3956);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3956, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      Byte[] byteArray0 = new Byte[17];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(17, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = Byte.valueOf((byte) (-1));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte) (-1), (byte)byte3);
      assertNotNull(byte3);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNull(byteArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) (short)3407;
      floatArray0[2] = (float) (-2720);
      floatArray0[3] = (float) (short)4;
      floatArray0[4] = (float) (short) (-300);
      ArrayUtils.swap(floatArray0, (int) (short)4, 1646, 1646);
      assertArrayEquals(new float[] {(-1.0F), 3407.0F, (-2720.0F), 4.0F, (-300.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)3407;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)691);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)3407}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int[] intArray0 = new int[7];
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      doubleArray0[0] = (-1.0);
      ArrayUtils.swap(doubleArray0, 512, 1546, 1546);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-219.68823F);
      floatArray0[1] = (-8010.4116F);
      floatArray0[2] = 1663.7241F;
      floatArray0[3] = 587.6031F;
      floatArray0[4] = 816.9053F;
      floatArray0[5] = (-1.0F);
      ArrayUtils.swap(floatArray0, 1852, 1852, 2267);
      assertArrayEquals(new float[] {(-219.68823F), (-8010.4116F), 1663.7241F, 587.6031F, 816.9053F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 587.6031F;
      ArrayUtils.swap(doubleArray0, 1852, 1852, (-3859));
      assertArrayEquals(new double[] {587.6030883789062}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-14));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte) (-14), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertEquals((byte)0, (byte)byte4);
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)9);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertEquals((byte)9, (byte)byte5);
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)49);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertEquals((byte)49, (byte)byte6);
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte)0);
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      assertEquals((byte)0, (byte)byte7);
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      float[] floatArray0 = new float[6];
      ArrayUtils.swap(floatArray0, 93, (-3), 93);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-73), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte) (-73));
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte) (-73);
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte) (-73);
      intArray0[4] = (int) (byte) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)64;
      shortArray0[1] = (short)64;
      shortArray0[2] = (short)64;
      shortArray0[3] = (short)64;
      shortArray0[4] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)64, (short)64, (short)64, (short)64, (short)64}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 477.893878150126, (double) (short)64);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 1016.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1016.9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)64;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)64;
      longArray0[1] = 200L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {64L, 200L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[0] = 'G';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'G', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '`');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'j');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertEquals(1, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'j');
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '@');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '@');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'@'}, charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '@';
      longArray0[1] = (long) '@';
      longArray0[2] = (long) '@';
      longArray0[3] = (long) '@';
      long[] longArray1 = ArrayUtils.subarray(longArray0, 2032, 2032);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {64L, 64L, 64L, 64L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)47;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)47;
      longArray0[2] = (long) byte0;
      longArray0[3] = 2147483647L;
      longArray0[4] = (long) (byte)47;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) byte0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) byte0, 160);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L, 47L, 47L, 2147483647L, 47L, 0L, 47L}, longArray0);
      assertEquals(0, longArray1.length);
      assertEquals(7, longArray0.length);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      
      boolean boolean1 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, true, true}, booleanArray1));
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      Short short0 = new Short((short) (-867));
      assertEquals((short) (-867), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)6539);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)6539, (short)short1);
      assertNotNull(short1);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-2167), 248);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-394.0);
      doubleArray0[6] = 501.330846;
      doubleArray0[7] = (-2123.0);
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (int) '2');
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-933));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      long[] longArray0 = new long[4];
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-32L);
      doubleArray0[4] = (double) (-32L);
      doubleArray0[5] = (double) (-32L);
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)2, (long) (byte) (-1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-32L), (-166L), (-166L), 4300L}, longArray0);
      assertArrayEquals(new long[] {(-32L), (-166L), (-1L), (-166L), 4300L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-2055), 1080, 160);
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = 'm';
      charArray0[2] = 'p';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'p', 'm', '6'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 735);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 1, 0, 1044);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      Object[] objectArray0 = null;
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1L, (double) 1L, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (byte)110;
      intArray0[5] = (int) (byte)110;
      intArray0[6] = (int) (byte)110;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 6);
      assertEquals(4, int0);
      assertArrayEquals(new int[] {0, 110, 0, 0, 0, 110, 110, 0}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((int[]) null, 1);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-104), (int) (byte) (-104));
      assertNotNull(bitSet0);
      assertArrayEquals(new byte[] {(byte) (-104)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)39);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)41, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)39, 21);
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      Random.setNextRandom((byte)41);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1348));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1348), 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)35;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (byte)35;
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte)35;
      intArray1[4] = (int) (byte)0;
      int[] intArray2 = ArrayUtils.insert(0, intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {35, 0, 0, 35, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 35, 0, 0, 35, 0}, intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(8, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'F';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'q', 'F'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)35;
      objectArray0[1] = (Object) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '35', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short) (-14));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short) (-14), (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short) (-14);
      floatArray1[1] = (float) (short) (-14);
      floatArray1[2] = 1390.9723F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (float) (short) (-14);
      int int0 = ArrayUtils.lastIndexOf(floatArray1, 0.0F, 57);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-14.0F), (-14.0F), 1390.9723F, (-1.0F), (-14.0F)}, floatArray1, 0.01F);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = '[';
      charArray0[2] = '-';
      charArray0[3] = 'm';
      charArray0[5] = 'q';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      
      char[] charArray1 = ArrayUtils.insert(4, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'i', '[', '-', 'm', '\u0000', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(12, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'q';
      longArray0[1] = (long) 'i';
      longArray0[2] = (long) 'q';
      longArray0[3] = (long) '-';
      longArray0[4] = 1676L;
      longArray0[5] = (long) 'i';
      longArray0[6] = (long) '\u0000';
      longArray0[7] = (-1237L);
      longArray0[8] = (long) '\u0000';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '2');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000'}, charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(3, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(1867, charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '&');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'&'}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, 'F');
      assertNull(charArray0);
      
      char[] charArray1 = ArrayUtils.addFirst((char[]) null, '<');
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertEquals(1, charArray1.length);
      
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte2);
      assertNotNull(byte2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      longArray0[4] = 0L;
      ArrayUtils.swap(longArray0, 0, 0);
      assertArrayEquals(new long[] {0L, 172L, (-1612L), (-2168L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertEquals((short) (-136), (short)short3);
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1271));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short) (-1271), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      shortArray0[5] = shortArray0[4];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[2] = 'f';
      charArray0[3] = '~';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L', '\u0000', 'f', '~'}, charArray0);
      assertArrayEquals(new char[] {'L', '\u0000', 'f', '~'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray0, '&');
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'L', '\u0000', 'f', '~'}, charArray0);
      assertArrayEquals(new char[] {'&', 'L', '\u0000', 'f', '~'}, charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(5, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '7');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte) (-43));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'm');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'m'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)34, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals((byte)34, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (byte)34;
      shortArray0[2] = (short) (byte)34;
      shortArray0[3] = (short) (byte)34;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) (byte)34;
      shortArray0[6] = (short) (byte)34;
      shortArray0[7] = (short) byte0;
      ArrayUtils.swap(shortArray0, (int) (short)34, 0);
      assertArrayEquals(new short[] {(short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34, (short)34}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'H';
      charArray0[2] = 'l';
      charArray0[3] = '^';
      charArray0[4] = '1';
      charArray0[5] = 'V';
      charArray0[6] = '\'';
      charArray0[7] = '-';
      charArray0[8] = '%';
      int int0 = ArrayUtils.indexOf(charArray0, 'H');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'F', 'H', 'l', '^', '1', 'V', '\'', '-', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte) (-84));
      assertNotNull(bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      
      String string0 = ArrayUtils.toString((Object) byte2, "3WF[2WeYe");
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals("34", string0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-3272));
      assertNotNull(bitSet0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-1489), (-1489), 2543);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.insert(0, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2146973678;
      doubleArray0[1] = (double) (byte) (-1);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1), (double) 4300L);
      assertEquals(1, int0);
      assertArrayEquals(new double[] {2.146973678E9, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)4675;
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 2529);
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-684);
      floatArray0[1] = (float) 0L;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0L);
      assertEquals(1, int0);
      assertArrayEquals(new float[] {(-684.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      char[] charArray0 = new char[7];
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'X';
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      intArray0[4] = (int) 'X';
      intArray0[5] = (int) 'X';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 88, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3189;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 446);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)4, (int) (short)827);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'P';
      charArray0[1] = '(';
      charArray0[2] = 'g';
      charArray0[3] = '8';
      charArray0[4] = 'w';
      charArray0[5] = 'p';
      charArray0[6] = '_';
      charArray0[7] = '<';
      charArray0[8] = '4';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 446, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)101;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)101);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101}, byteArray0);
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101, (byte)101}, byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-66);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)118);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte)30, (byte)30, (byte)30, (byte) (-66), (byte)30, (byte)74, (byte) (-66)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-14), (int) (short) (-14));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-14);
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-14)}, shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      assertSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertSame(shortArray2, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)318;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)318);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)318}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-4);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte) (-20), (byte)0, (byte) (-24), (byte) (-4)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-24);
      longArray0[2] = (long) (byte) (-20);
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (-778L));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)47, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = ArrayUtils.get(byteArray0, 0, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)47, (byte)byte2);
      assertNotNull(byte2);
      assertEquals(1, byteArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)47;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)47;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) byte0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)47;
      byteArray1[2] = byte0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)47;
      byteArray1[5] = (byte) (-18);
      byteArray1[6] = (byte)0;
      byteArray1[7] = byte0;
      byteArray1[8] = (byte)10;
      ArrayUtils.shift(byteArray1, 9, (-707), 6);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)47, (byte)47, (byte)0, (byte)47, (byte) (-18), (byte)0, (byte)47, (byte)10}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals(3, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(3, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 1, 2}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)32, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) (byte)32;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 32L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)32;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2467), 32, (-21), 2, 57}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.reverse(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      short[] shortArray0 = new short[2];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3530);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-777.7F);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertEquals((byte)18, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)18;
      int[] intArray0 = new int[0];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {18.0F}, floatArray0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new float[] {18.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)54;
      Byte byte1 = new Byte((byte)54);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)54, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)54);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)54, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertEquals((byte)54, (byte)byte3);
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte2);
      assertTrue(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = '+';
      charArray0[2] = 'x';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'x');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'R', '+', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      int int0 = 3522;
      Object object0 = ArrayUtils.get(objectArray0, 3522);
      assertNull(object0);
      assertEquals(9, objectArray0.length);
      
      objectArray0[0] = null;
      double[] doubleArray0 = new double[0];
      int int1 = (-2995);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 3522, (-2995), (double) 3522);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertNull(object1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3522;
      intArray0[1] = (-2995);
      intArray0[2] = (-2995);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3522, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 4156.0F;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 4156.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 4156.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray1, (-1618));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1618, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)113);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)51;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)32);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)32, (byte)51, (byte)41}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)41}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (-3199));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3199, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)91;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2179);
      shortArray0[5] = (short) (-1567);
      shortArray0[6] = (short) (-809);
      shortArray0[7] = (short)50;
      ArrayUtils.shift(shortArray0, (-146), (int) (short) (-1567), (int) (short) (-809));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)91, (short)0, (short) (-2179), (short) (-1567), (short) (-809), (short)50}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-809);
      intArray0[1] = (-119);
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)91;
      intArray0[4] = (int) (short)50;
      intArray0[5] = (int) (short) (-809);
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)50, 446);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {(-809), (-119), 0, 91, 50, (-809), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 2.0F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {2.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      ArrayUtils.swap((int[]) null, 302, 302, 47);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-394.0);
      doubleArray0[6] = 501.330846;
      doubleArray0[7] = (-2123.0);
      int[] intArray0 = new int[0];
      ArrayUtils.swap(intArray0, 99, 99, 99);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      short[] shortArray0 = new short[5];
      doubleArray0[1] = (double) (short)64;
      shortArray0[2] = (short)64;
      shortArray0[4] = (short)64;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)64, (short)0, (short)64}, shortArray0);
      assertArrayEquals(new short[] {(short)64, (short)64}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(2, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 477.893878150126, (double) (short)0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {1.0, 64.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 64.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "*@M`?He+");
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(200L);
      assertNotNull(mockRandom0);
      
      float float0 = mockRandom0.nextFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-46);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-46));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-96), (byte) (-46)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-90), (byte) (-96), (byte) (-46)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertNotNull(shortArray2);
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray2.length);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 3189;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 446);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 3189.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)1);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-1816));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(4, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 5, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)1);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)45);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)45}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[5];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)40;
      byte byte0 = (byte) (-66);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)30;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-66));
      assertEquals(6, int0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-39), (byte) (-102), (byte)1, (byte)74, (byte)40, (byte) (-66), (byte)30}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[4];
      byteArray1[0] = (Byte) (byte)30;
      byteArray1[1] = (Byte) (byte) (-66);
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-66), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray1[2] = byte1;
      byteArray1[3] = (Byte) (byte)30;
      Byte[] byteArray2 = ArrayUtils.clone(byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray2.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 661.3F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-707));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(0, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray0, (double) 0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '=');
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      long[] longArray0 = new long[3];
      longArray0[0] = 454L;
      longArray0[1] = (long) '=';
      longArray0[2] = 454L;
      long[] longArray1 = ArrayUtils.add(longArray0, (int) (byte)0, (-1040L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {454L, 61L, 454L}, longArray0);
      assertArrayEquals(new long[] {(-1040L), 454L, 61L, 454L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-394.0);
      doubleArray0[6] = 501.330846;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true, true, true}, booleanArray0));
      assertEquals(1, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(3, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Character[] characterArray0 = new Character[4];
      char char0 = ']';
      Character character0 = new Character(']');
      assertTrue(character0.equals((Object)char0));
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('z');
      assertFalse(character1.equals((Object)char0));
      assertFalse(character1.equals((Object)character0));
      assertEquals('z', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(']');
      assertFalse(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertEquals(']', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals(']', (char)character3);
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotNull(characterArray1);
      assertEquals(4, characterArray1.length);
      assertEquals(4, characterArray0.length);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1136.9381283000544);
      doubleArray0[1] = (double) (char)character0;
      doubleArray0[2] = (double) char0;
      doubleArray0[3] = (-777.4324598013749);
      doubleArray0[4] = (double) (char)character0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1136.9381283000544), (int) character3, 0.0);
      assertFalse(int1 == int0);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)char0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {(-1136.9381283000544), 93.0, 93.0, (-777.4324598013749), 93.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      boolean boolean0 = ArrayUtils.isArrayIndexValid(abstractMap_SimpleImmutableEntryArray0, 193);
      assertFalse(boolean0);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-83), 74);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-66), (byte) (-83), (byte) (-31), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte) (-66);
      intArray0[2] = 47;
      intArray0[3] = 7;
      intArray0[5] = (int) (byte) (-66);
      intArray0[6] = (int) (byte) (-66);
      intArray0[7] = (-603);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1749, 74);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, (-66), 47, 7, 0, (-66), (-66), (-603)}, intArray0);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-66), (byte) (-83), (byte) (-31), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) (byte) (-66);
      ArrayUtils.reverse(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      longArray0[3] = 4300L;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-1);
      doubleArray0[1] = (-4762.71551692802);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-32L);
      doubleArray0[4] = (double) (-32L);
      doubleArray0[5] = (double) (-32L);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) 1495, 1.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), (-4762.71551692802), 2.0, (-32.0), (-32.0), (-32.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)110);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)232;
      shortArray0[4] = (short)3378;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2123.0);
      doubleArray0[1] = (double) (short)614;
      doubleArray0[2] = (double) (short)76;
      doubleArray0[3] = (double) (short)3378;
      doubleArray0[4] = (double) (short)4479;
      doubleArray0[5] = (double) (short)3378;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)0, (int) (short)0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2123.0), 614.0, 76.0, 3378.0, 4479.0, 3378.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-2998));
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)318;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)318);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)318}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)19);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)19, (byte)57, (byte)0, (byte)0, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-24);
      longArray0[2] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, (-24L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2467), 0, (-21), 2, 57}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-73), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte) (-73));
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte) (-73);
      intArray0[4] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {(-1), 0, (-1), (-73), 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.reverse((short[]) null);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)57, (byte)0, (byte)0, (byte)0, (byte) (-24), (byte) (-21)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[2] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-2467), 0, (-21), 2, 57}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.reverse(shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2357);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2357);
      intArray0[7] = 1;
      intArray0[8] = 1;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-102);
      shortArray0[1] = (short) (-893);
      shortArray0[2] = (short) (-1523);
      shortArray0[3] = (short)8;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-102), (short) (-893), (short) (-1523), (short)8}, shortArray0);
      assertArrayEquals(new short[] {(short) (-102), (short) (-893), (short) (-1523), (short)8}, shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      char[] charArray0 = new char[7];
      ArrayUtils.shift(charArray0, (-2139250717));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-533);
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-533)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-533)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)32;
      shortArray0[1] = (short) (byte)32;
      shortArray0[2] = (short) (byte)32;
      shortArray0[3] = (short) (byte)32;
      shortArray0[4] = (short)72;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1503);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)32, (short)32, (short)32, (short)32, (short)72}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)32;
      longArray0[1] = (long) (byte)32;
      longArray0[2] = (-262L);
      longArray0[3] = (-955L);
      longArray0[4] = (long) (short)32;
      longArray0[5] = (long) (byte)32;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 779L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {32L, 32L, (-262L), (-955L), 32L, 32L}, longArray0);
      assertEquals(6, longArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)114;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)114);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)114}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)360);
      assertNull(shortArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertNotNull(bitSet0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-400.8603F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (-400.8603F);
      floatArray0[3] = (-400.8603F);
      floatArray0[4] = (-1486.3279F);
      floatArray0[5] = (float) 867L;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = 1002.85474F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-400.8603F), (-1.0F), (-400.8603F), (-400.8603F), (-1486.3279F), 867.0F, (-1.0F), 1002.85474F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.add((long[]) null, (long) 0);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)2);
      assertNull(byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'p';
      charArray0[2] = '>';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'A', (int) (byte)2);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'Q', 'p', '>'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[2] = (long) 898;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)97;
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'd', (int) (byte)15);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', 'P', 'P'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      byte byte0 = (byte) (-56);
      Byte byte1 = new Byte((byte) (-56));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-56), (byte)byte1);
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte) (-56), (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = 'D';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'q');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'R', 'D', 'R', 'R'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)57;
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[3] = '+';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '+');
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'+', '\u0000', '\u0000', '+'}, charArray0);
      assertEquals(4, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-31), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-83), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-31);
      intArray0[1] = (int) (byte) (-83);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 54, 54);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-31), (-83), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-83), (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte) (-83);
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) 0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'T';
      charArray0[2] = 'E';
      charArray0[3] = '8';
      charArray0[4] = 'e';
      charArray0[5] = '^';
      charArray0[6] = 'p';
      charArray0[7] = '%';
      int int2 = ArrayUtils.lastIndexOf(charArray0, 'E');
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      assertArrayEquals(new char[] {'2', 'T', 'E', '8', 'e', '^', 'p', '%'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((short[]) null, (-971));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -971, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '\"';
      charArray0[2] = 'i';
      charArray0[3] = '?';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      charArray0[6] = '<';
      charArray0[7] = 'M';
      int int1 = ArrayUtils.indexOf(doubleArray0, (double) (-1), (-2286.2123218));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) '<';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) '?';
      longArray0[4] = (-61L);
      longArray0[5] = (long) Integer.MAX_VALUE;
      longArray0[6] = (long) '\"';
      longArray0[7] = (long) '?';
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {63L, 34L, 2147483647L, (-61L), 63L, 77L, 0L, 60L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2952;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)172;
      shortArray0[4] = (short) (-874);
      shortArray0[5] = (short)115;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, 33, (-2145373292), 182);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'z';
      charArray0[2] = '7';
      int int0 = ArrayUtils.indexOf(charArray0, '7');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'>', 'z', '7'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 1847.89205370597);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1847.89205370597, 0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)90, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-84);
      long[] longArray1 = ArrayUtils.add(longArray0, 0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-84L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-84L)}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) (short)0;
      floatArray1[1] = (float) (short)0;
      floatArray1[2] = 1390.9723F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (float) (short)0;
      long[] longArray0 = new long[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      boolean boolean1 = ArrayUtils.contains(intArray0, 611);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      Byte byte0 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray1, byte0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) (short)0;
      boolean boolean2 = ArrayUtils.isEmpty(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)123;
      doubleArray0[1] = 1045.1880293761087;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 330.76367498);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {123.0, 1045.1880293761087}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {330.76367498, 123.0, 1045.1880293761087}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 3437, (int) (byte)0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      Byte byte0 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)41);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)41, (byte)byte1);
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) byte0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte)41);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '$';
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (-3177));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {36L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray1));
      assertEquals(4, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ArrayUtils.shift(objectArray0, 1, 1, 1);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1343);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1343), 2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-1343)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      short[] shortArray0 = new short[6];
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)4);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2023.71527);
      doubleArray0[1] = 2077.697660917;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 628.95840089;
      doubleArray0[4] = (-207.3083264483);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-880.2803), 2551.55608);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {(-2023.71527), 2077.697660917, 1.0, 628.95840089, (-207.3083264483), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 668;
      intArray0[1] = 668;
      intArray0[2] = 668;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(668, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 668, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 1080, (-38), (int) (short)2);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      longArray0[1] = (long) (-38);
      longArray0[2] = (long) (-38);
      long[] longArray1 = ArrayUtils.insert((int) (short)2, longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {1080L, (-38L), (-38L)}, longArray0);
      assertArrayEquals(new long[] {1080L, (-38L), 1080L, (-38L), (-38L), (-38L)}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = ArrayUtils.contains((float[]) null, Float.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-4310L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-4310L), 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)13;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-40);
      intArray0[1] = 99;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(99, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2146630794);
      intArray0[1] = (-2146630794);
      intArray0[2] = (-2146630794);
      intArray0[3] = (-2146630794);
      intArray0[4] = (-2146630794);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2146630794), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2146630794, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ArrayUtils.shift(byteArray0, (int) (byte)15, 898, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)97}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[19];
      booleanArray0[9] = true;
      booleanArray0[1] = true;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(19, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (byte)0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[17];
      intArray0[0] = (-1);
      intArray0[1] = 93;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 93;
      ArrayUtils.swap(intArray0, (-1), 93, (-1));
      assertEquals(17, intArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(Integer.MAX_VALUE, intArray0, (int[]) null);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(17, intArray0.length);
      assertEquals(17, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1L));
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(1, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      short[] shortArray0 = new short[8];
      int int0 = new Short((short)3517);
      assertEquals((short)3517, int0);
      
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-2497));
      assertNotNull(bitSet0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 2509L);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {2509L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1711L;
      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray0);
      
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1711L}, longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-684);
      intArray0[1] = 2144846647;
      intArray0[2] = 49;
      intArray0[3] = 49;
      intArray0[4] = (int) (short) (-684);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(49, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 49, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2684);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (short)2);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '\u0000');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 4384L);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)4675;
      shortArray0[3] = (short)241;
      shortArray0[4] = (short)827;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1929), (int) (short)1);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short) (-684), (short)1, (short)4675, (short)241, (short)827}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1302;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1302, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'i';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '*';
      charArray0[5] = 'l';
      ArrayUtils.shift(charArray0, (-1023), (-946), (-1816));
      assertArrayEquals(new char[] {'T', 'i', 'T', 'T', '*', 'l'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertNotNull(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "The Array must not be null");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'T';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 84, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short) (-684);
      shortArray0[2] = (short)4675;
      int[] intArray0 = new int[3];
      intArray0[0] = 944;
      ArrayUtils.shift((char[]) null, 944, (int) (short)4675, (int) (short) (-684));
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)0, object0);
      assertNotNull(object0);
      
      try { 
        Byte.valueOf("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The Array must not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((double[]) null, 649.533, 649.533);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'i';
      charArray0[3] = '?';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = '<';
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 222);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) Integer.MAX_VALUE, (double) Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '\"';
      charArray0[2] = 'i';
      charArray0[3] = '?';
      charArray0[4] = 'q';
      charArray0[5] = ' ';
      charArray0[6] = '<';
      charArray0[7] = 'M';
      ArrayUtils.shift(charArray0, Integer.MAX_VALUE, 0, 0);
      assertArrayEquals(new char[] {'G', '\"', 'i', '?', 'q', ' ', '<', 'M'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, (String) null);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = (int) 'M';
      intArray0[4] = (-1);
      intArray0[5] = (int) '<';
      intArray0[6] = (int) 'G';
      intArray0[7] = (int) '<';
      intArray0[8] = (-3190);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      float[] floatArray0 = new float[22];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, (float) 1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(22, floatArray0.length);
      assertEquals(23, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 251.028435}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 'Z';
      objectArray0[2] = (Object) 251.028435;
      objectArray0[3] = (Object) 'Z';
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '1.0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      Byte byte0 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)115);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)115, (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = ArrayUtils.get((Byte[]) null, (-3058), byte0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte1));
      assertEquals((byte)115, (byte)byte2);
      assertNotNull(byte2);
      
      Byte byte3 = Byte.valueOf((byte) (-2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertEquals((byte) (-2), (byte)byte3);
      assertNotNull(byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertEquals((byte) (-2), object0);
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = ArrayUtils.isEquals(object1, object0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte2));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object2 = ArrayUtils.toPrimitive((Object) byte2);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object0));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)byte3));
      assertTrue(object2.equals((Object)byte1));
      assertEquals((byte)115, object2);
      assertNotNull(object2);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-3956L));
      assertEquals((-3956L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'N');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '=');
      assertNull(charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isEquals(object0, object0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-7);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2942), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2942, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      floatArray0[5] = 1719.729F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-229.0F), (-885.0F), 1719.729F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertEquals(5, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'F';
      charArray0[2] = '[';
      charArray0[3] = 'f';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1533), 'g');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1533, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, 7, '^');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-199);
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (long) (short) (-199);
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      ArrayUtils.swap(longArray0, 0, (int) (short) (-199));
      assertArrayEquals(new long[] {0L, (-199L), 1L, 1L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Short short0 = new Short((short) (-199));
      assertEquals((short) (-199), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-136));
      assertFalse(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-199));
      assertFalse(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-199), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-1915));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short) (-1915), (short)short3);
      assertNotNull(short3);
      
      MockRandom mockRandom0 = new MockRandom((-1));
      assertNotNull(mockRandom0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (short)13);
      assertNull(floatArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (int) (short) (-199);
      intArray0[2] = 1563;
      intArray0[3] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-102), (int) (short) (-199));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1, (-199), 1563, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('q');
      assertTrue(character1.equals((Object)character0));
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[3];
      Character character2 = Character.valueOf('D');
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertEquals('D', (char)character2);
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      ArrayUtils.swap((long[]) null, (int) (short)0, 2143991804);
      Short short0 = new Short((short) (-3640));
      assertEquals((short) (-3640), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)102);
      assertFalse(short1.equals((Object)short0));
      assertEquals((short)102, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short)3);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short)3, (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)102);
      assertTrue(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short2));
      assertEquals((short)102, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-3490));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short3));
      assertEquals((short) (-3490), (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom((short)1369);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 4300L;
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {4300.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (float) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {4300.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (long) (byte)97;
      ArrayUtils.shift(longArray0, 2670);
      assertArrayEquals(new long[] {0L, 0L, 0L, 97L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)39;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)39, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      Short[] shortArray2 = new Short[3];
      shortArray2[0] = (Short) (short)39;
      shortArray2[1] = (Short) (short)39;
      shortArray2[2] = (Short) (short)39;
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray2);
      assertNotNull(shortArray3);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray3.length);
      assertSame(shortArray2, shortArray3);
      assertSame(shortArray3, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1852;
      longArray0[1] = (long) 1852;
      longArray0[2] = (long) 2267;
      longArray0[3] = (long) 2267;
      longArray0[4] = (long) 1852;
      ArrayUtils.swap(longArray0, 2267, 2267);
      assertArrayEquals(new long[] {1852L, 1852L, 2267L, 2267L, 1852L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short short0 = new Short((short)53);
      assertEquals((short)53, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)53);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)53, (short)short1);
      assertNotNull(short1);
      
      Short short2 = Short.valueOf((short) (-136));
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      
      Short short3 = new Short((short)2);
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertEquals((short)2, (short)short3);
      assertNotNull(short3);
      
      Short short4 = new Short((short) (-136));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertEquals((short) (-136), (short)short4);
      assertNotNull(short4);
      
      MockRandom mockRandom0 = new MockRandom(1354L);
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((char[]) null, (int) (short) (-136));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -136, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 172L;
      longArray0[2] = (-1612L);
      longArray0[3] = (-2168L);
      longArray0[4] = 0L;
      ArrayUtils.swap(longArray0, 0, 0);
      assertArrayEquals(new long[] {0L, 172L, (-1612L), (-2168L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short) (-136));
      assertEquals((short) (-136), (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short) shortArray0[0]);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-136), (short)short1);
      assertNotNull(short1);
      assertEquals(6, shortArray0.length);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) shortArray0[0]);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertEquals((short) (-136), (short)short2);
      assertNotNull(short2);
      assertEquals(6, shortArray0.length);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short1));
      assertEquals((short) (-136), (short)short3);
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short) (-1271));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short2));
      assertEquals((short) (-1271), (short)short4);
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)2820);
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short1));
      assertFalse(short5.equals((Object)short3));
      assertEquals((short)2820, (short)short5);
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 's';
      charArray0[2] = 'f';
      charArray0[3] = '~';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'L', 's', 'f', '~'}, charArray0);
      assertArrayEquals(new char[] {'L', 's', 'f', '~'}, charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-224);
      doubleArray0[1] = (double) (-224);
      doubleArray0[2] = (double) (-224);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = (double) (short)2;
      ArrayUtils.shift(doubleArray0, (int) (short)2, (int) (short)2, (int) (short)2);
      assertArrayEquals(new double[] {(-224.0), (-224.0), (-224.0), 2.0, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      ArrayUtils.shift(doubleArray0, 54, 54, (-175));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      ArrayUtils.reverse(shortArray0, (int) (short) (-166), 8);
      assertArrayEquals(new short[] {(short)0, (short)2}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (short) (-166), (int) (short) (-1172), (-122));
      double[] doubleArray0 = ArrayUtils.insert((int) (short) (-166), (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) Integer.MAX_VALUE, (-2633));
      assertEquals((-1), int0);
      
      double[] doubleArray1 = ArrayUtils.add((double[]) null, (double) (-122));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-122.0)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      Byte byte0 = new Byte((byte) (-35));
      assertEquals((byte) (-35), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-35));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte) (-35), (byte)byte1);
      assertNotNull(byte1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2633);
      intArray0[1] = (-2633);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert(3290, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      short[] shortArray0 = new short[2];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.reverse(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 79;
      intArray0[2] = 19;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 79, 19}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-211), (-211), (-211));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.insert(2, doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)100;
      shortArray0[3] = (short)3551;
      shortArray0[4] = (short) (-707);
      shortArray0[5] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, 489, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)100, (short)3551, (short) (-707), (short) (-1172)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short)3551, 0, (int) (short)100);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (short) (-707), doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)3551;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short) (-707);
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-359.3099F), (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {3551.0F, 0.0F, 0.0F, (-707.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (short)0;
      doubleArray2[1] = (double) (short)3551;
      doubleArray2[2] = (double) (short)3551;
      doubleArray2[3] = (double) (short)100;
      doubleArray2[4] = (double) (short)3551;
      doubleArray2[5] = (double) (short)100;
      doubleArray2[6] = (double) (short)100;
      doubleArray2[7] = (double) (short)0;
      doubleArray2[8] = (double) 0.0F;
      double[] doubleArray3 = ArrayUtils.add(doubleArray2, (-2339.53438));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 3551.0, 3551.0, 100.0, 3551.0, 100.0, 100.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 3551.0, 3551.0, 100.0, 3551.0, 100.0, 100.0, 0.0, 0.0, (-2339.53438)}, doubleArray3, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(10, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-2159.678673));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-2159.678673)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.swap(shortArray0, 834, (-375));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)35);
      assertNotNull(bitSet0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      short[] shortArray0 = new short[1];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap(shortArray0, 8, 8, 8);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-110L);
      longArray0[1] = 123L;
      ArrayUtils.reverse(longArray0, (-1230), (-169));
      assertArrayEquals(new long[] {(-110L), 123L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3380.2), (-3380.2));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-684);
      doubleArray0[1] = (double) 0L;
      doubleArray0[3] = 0.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, Double.NaN, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-684.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {1711L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1973.41454483;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-409.8);
      doubleArray0[4] = (-1927.0);
      doubleArray0[5] = 1.0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-735.0), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-1.0), 1973.41454483, 0.0, (-409.8), (-1927.0), 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.0), 1973.41454483, 0.0, (-409.8), (-1927.0), 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), (-1L), (-1L)}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray1, booleanArray0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.contains(intArray0, (-760));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-1), (-1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) 2082);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(20, floatArray0.length);
      assertEquals(20, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '4');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray0, (-1), 550);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray2));
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray2.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '{');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '{', (-2145876672));
      assertNotNull(bitSet0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'f');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray2.length);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.swap(intArray0, 1191, 2146975364);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1711L;
      longArray0[1] = 0L;
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 1711L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-684);
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)4675;
      shortArray0[3] = (short)241;
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = '~';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'c');
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'~'}, charArray1);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', '~'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, '<');
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(charArray2);
      assertArrayEquals(new char[] {'~'}, charArray1);
      assertArrayEquals(new char[] {'<', '~'}, charArray2);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', '~'}, charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(2, charArray2.length);
      assertEquals(6, charArray0.length);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.contains(charArray0, 'Z');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      short short0 = (short) (-21);
      Short short1 = new Short((short) (-21));
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-21), (short)short1);
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[1];
      shortArray0[0] = short1;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-21)}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      Short short2 = new Short((short) (-21));
      assertTrue(short2.equals((Object)short1));
      assertTrue(short2.equals((Object)short0));
      assertEquals((short) (-21), (short)short2);
      assertNotNull(short2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      ArrayUtils.shift(charArray0, (int) (short) (-21));
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short) (-21);
      ArrayUtils.swap(intArray0, (int) (short) (-21), (-2854), (int) short0);
      assertArrayEquals(new int[] {(-21)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)7);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)7, (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertEquals((byte)2, (byte)byte2);
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      assertNull(object1);
      assertEquals(3, objectArray0.length);
      
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      assertEquals(3, objectArray0.length);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals(1, int0);
      assertEquals(3, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2357);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2357);
      intArray0[7] = 1;
      Object object3 = ArrayUtils.get(objectArray0, (-1));
      assertNull(object3);
      assertEquals(3, objectArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.7, 489.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 890.17931);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 796L;
      longArray0[1] = 796L;
      longArray0[2] = 796L;
      longArray0[3] = 796L;
      longArray0[4] = (long) (byte)2;
      BitSet bitSet1 = ArrayUtils.indexesOf(longArray0, 796L, 288);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new long[] {796L, 796L, 796L, 796L, 2L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.reverse((Object[]) byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      int[] intArray0 = new int[3];
      Byte byte0 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2146042382), Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0, (-239), (-239));
      assertEquals(0, objectArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(2049870754);
      assertEquals(2049870754, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf((String) null, 2559);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)0;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-31), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-83), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-31);
      intArray0[1] = (int) (byte) (-83);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 47, 47);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {(-31), (-83), 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-83), (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte) (-83);
      objectArray0[5] = (Object) (byte)0;
      objectArray0[6] = (Object) 0;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2178;
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-1871), (float) (-1871));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1871, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, true, false, false, true}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 5857L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 5857L;
      longArray2[1] = 5857L;
      longArray2[2] = 5857L;
      longArray2[3] = 5857L;
      longArray2[4] = 5857L;
      longArray2[5] = 5857L;
      longArray2[6] = 5857L;
      longArray2[7] = 454L;
      longArray2[8] = 5857L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray2, (-1727), (long) (-1727));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1727, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2178;
      shortArray0[2] = (short)726;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)170;
      shortArray0[5] = (short)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)2178, (short)726, (short)2, (short)170, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)726;
      doubleArray0[1] = (double) (short)170;
      doubleArray0[2] = (double) (short)2178;
      doubleArray0[3] = (double) (short)2178;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)726, (int) (short)726, 170.0);
      assertNotNull(bitSet0);
      assertArrayEquals(new double[] {726.0, 170.0, 2178.0, 2178.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray1, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-166);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, 93);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short) (-166)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray1, 121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 121, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[8];
      Byte byte0 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-73), object0);
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      int[] intArray0 = new int[5];
      intArray0[1] = (int) (byte) (-73);
      intArray0[3] = (int) (byte) (-73);
      intArray0[4] = (int) (byte) (-73);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -73, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-1174.8884F), (-4306));
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-2106374463));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((boolean[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      int int0 = (-2357);
      int[] intArray0 = null;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-3962), 9);
      assertNotNull(bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      
      BitSet bitSet1 = ArrayUtils.indexesOf((float[]) null, (float) (-2357), 0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertNotSame(bitSet1, bitSet0);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F);
      assertNotNull(bitSet0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 253;
      intArray0[1] = 2950;
      intArray0[2] = (-238);
      intArray0[3] = (-2248);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-238), 0);
      assertNotNull(bitSet0);
      assertArrayEquals(new int[] {253, 2950, (-238), (-2248)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      
      float[] floatArray0 = new float[0];
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, (float) 2950, (-3648));
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2950, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      
      short[] shortArray2 = ArrayUtils.insert(469, shortArray0, shortArray0);
      assertNotNull(shortArray2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte) (-78));
      assertNotNull(shortArray1);
      assertArrayEquals(new short[] {(short) (-78)}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      long[] longArray0 = new long[6];
      ArrayUtils.removeElements(longArray0, longArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = Integer.MAX_VALUE;
      ArrayUtils.swap(intArray0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      float[] floatArray0 = new float[22];
      floatArray0[2] = 0.0F;
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertEquals(22, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.removeElements(byteArray0, byteArray0);
      Byte byte0 = new Byte((byte)14);
      ArrayUtils.toString((Object) byte0, "");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      floatArray0[1] = 1353.72F;
      floatArray0[2] = (float) (byte)14;
      floatArray0[3] = (float) (byte)14;
      floatArray0[4] = (float) (byte)14;
      floatArray0[5] = (float) (byte)14;
      floatArray0[6] = 1.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(floatArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-124));
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-124);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1788.0F;
      floatArray0[1] = 1788.0F;
      floatArray0[2] = (-200.0F);
      ArrayUtils.indexesOf(floatArray0, (-200.0F));
      ArrayUtils.isSameLength(floatArray0, floatArray0);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-200.0F), 1788.0F, 1788.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      float[] floatArray0 = new float[7];
      char[] charArray0 = new char[6];
      charArray0[3] = 'T';
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer('T');
      integerArray0[0] = integer0;
      ArrayUtils.shift(byteArray1, (-681), 1, (-2145373292));
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, (-486));
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      float[] floatArray0 = new float[0];
      ArrayUtils.indexesOf(floatArray0, (-200.0F));
      ArrayUtils.reverse(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      float[] floatArray0 = new float[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-21.0F));
      assertTrue(bitSet0.isEmpty());
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-1));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, (-1), (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ArrayUtils.indexOf(doubleArray0, (-1.0), (double) (-1));
      Short short0 = new Short((short)3793);
      Short short1 = new Short((short) (-30746));
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'i');
      ArrayUtils.addFirst(charArray1, '\"');
      ArrayUtils.isEmpty((Object[]) shortArray1);
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "[;%H4:E(q";
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "[;%H4:E(q");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1369;
      shortArray0[2] = (short) (-300);
      shortArray0[3] = (short)3407;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short)2952;
      shortArray0[6] = (short) (-1730);
      shortArray0[7] = (short) (-2150);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3407);
      assertEquals(3, int0);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3407);
      assertArrayEquals(new short[] {(short)0, (short)1369, (short) (-300), (short)4, (short)2952, (short) (-1730), (short) (-2150)}, shortArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-300);
      longArray0[1] = (long) (short)4;
      longArray0[2] = (long) (short) (-1730);
      longArray0[3] = (long) (short) (-1730);
      longArray0[4] = (long) (short)4;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (short)4);
      assertEquals("{1, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2666.24475784);
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) 'r';
      doubleArray0[3] = (double) 'r';
      doubleArray0[4] = 4299.0;
      doubleArray0[5] = (-48.358667646859);
      doubleArray0[6] = (double) 'r';
      doubleArray0[7] = (double) '^';
      ArrayUtils.indexesOf(doubleArray0, 114.0, 73.0);
      double[] doubleArray1 = new double[0];
      ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 114.0;
      ArrayUtils.toStringArray(objectArray0, "");
      MockRandom mockRandom0 = new MockRandom(1L);
      long[] longArray0 = new long[5];
      longArray0[0] = 200L;
      longArray0[1] = 2147483647L;
      longArray0[2] = (long) 'r';
      longArray0[4] = (long) 'r';
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, longArray0);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      long[] longArray0 = new long[4];
      longArray0[0] = (-32L);
      longArray0[1] = (long) (short) (-166);
      longArray0[2] = (long) (short) (-166);
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.indexesOf(doubleArray0, 3189.0, 477.893878150126);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      ArrayUtils.toStringArray((Object[]) null, "*@M`?He+");
      MockRandom mockRandom0 = new MockRandom(1L);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      ArrayUtils.shift(booleanArray0, 3273);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      short[] shortArray0 = new short[5];
      doubleArray0[1] = (double) (short)64;
      shortArray0[4] = (short)64;
      ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      ArrayUtils.indexesOf(doubleArray0, 477.893878150126, (double) (short)0);
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)0;
      ArrayUtils.toStringArray(objectArray0, "");
      MockRandom mockRandom0 = new MockRandom(200L);
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-326.1077185047485);
      doubleArray0[1] = 0.0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertEquals(1, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      MockRandom mockRandom0 = new MockRandom((-1L));
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, "[H4:E(q");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)614;
      shortArray0[2] = (short)76;
      shortArray0[3] = (short)232;
      shortArray0[4] = (short)3378;
      shortArray0[5] = (short)4479;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)64);
      assertArrayEquals(new short[] {(short)0, (short)614, (short)76, (short)232, (short)3378, (short)4479}, shortArray1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)614;
      doubleArray0[1] = (double) (short)76;
      doubleArray0[2] = (double) (short)232;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short)76;
      doubleArray0[5] = (double) (short)76;
      doubleArray0[6] = (double) (short)232;
      doubleArray0[7] = (double) (short)64;
      doubleArray0[8] = (double) (short)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 614.0, 232.0);
      assertEquals(1, bitSet0.length());
      
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 76.0;
      objectArray0[1] = (Object) 232.0;
      ArrayUtils.toStringArray(objectArray0, "lO(be;Z<BvB&");
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      MockRandom mockRandom0 = new MockRandom(1L);
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      short[] shortArray0 = new short[14];
      ArrayUtils.shift(shortArray0, (-712), (int) (short)0, (int) (short)2449);
      assertEquals(14, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      float[] floatArray0 = new float[11];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 2604.99F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-122);
      ArrayUtils.shift(byteArray0, (-1906), (int) (byte) (-122), (-1906));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      mockRandom0.nextFloat();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-829);
      shortArray0[1] = (short) (-829);
      shortArray0[2] = (short) (byte)109;
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-829), (short)109, (short) (-829)}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      ArrayUtils.lastIndexOf((long[]) null, 867L, 0);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      ArrayUtils.indexOf(booleanArray0, true, (-1));
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      ArrayUtils.indexesOf(intArray0, 0);
      ArrayUtils.shift((long[]) null, 0);
      ArrayUtils.isEmpty(intArray0);
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, (long) 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ArrayUtils.clone(byteArray0);
      ArrayUtils.addFirst(longArray0, 0L);
      int[] intArray1 = new int[5];
      intArray1[0] = (int) (byte)7;
      intArray1[1] = (-1);
      intArray1[2] = (int) (byte)0;
      intArray1[3] = (int) (byte)7;
      intArray1[4] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), intArray1, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      byte byte0 = (byte)74;
      ArrayUtils.swap(intArray0, 68, 102, 1);
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte1 = new Byte((byte)74);
      byteArray0[0] = byte1;
      byte byte2 = (byte)123;
      Byte byte3 = new Byte((byte)123);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte) (-67));
      byteArray0[2] = byte4;
      byte byte5 = (byte)79;
      Byte byte6 = new Byte((byte)79);
      byteArray0[3] = byte6;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-68));
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)74, (byte)123, (byte) (-67), (byte)79}, byteArray2);
      
      boolean boolean1 = ArrayUtils.contains((char[]) null, 'Y');
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) (byte)79;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) byte0;
      floatArray0[5] = (float) 68;
      floatArray0[6] = (float) byte2;
      boolean boolean2 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean2 == boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-67);
      longArray0[1] = (long) (byte) (-67);
      longArray0[2] = (long) 102;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) byte5;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) byte2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-229.0F);
      floatArray0[4] = (-885.0F);
      floatArray0[5] = 1719.729F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertNotNull(floatArray1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertEquals(2, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      ArrayUtils.shift(byteArray0, 127, 1659, (-567));
      MockRandom mockRandom0 = new MockRandom();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-829);
      shortArray0[2] = (short) (-1476);
      shortArray0[3] = (short) (-829);
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short) (-829), (short) (-1476), (short) (-829), (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.shift(intArray0, 5487, 1080, 5487);
      ArrayUtils.toMap((Object[]) null);
      MockRandom mockRandom0 = new MockRandom();
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null, (java.util.Random) mockRandom1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.shift(shortArray0, (int) (short) (-2998), 2051, 2051);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-94);
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-94);
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (-2584);
      shortArray0[5] = (short) (byte) (-94);
      shortArray0[6] = (short) (byte) (-94);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-94), (short)0, (short) (-2584), (short) (-94), (short) (-94), (short) (-94)}, shortArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = 'W';
      charArray0[2] = 'x';
      charArray0[3] = 'S';
      charArray0[4] = '+';
      charArray0[5] = '~';
      charArray0[6] = 'Z';
      charArray0[7] = '%';
      ArrayUtils.isEmpty(charArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      boolean boolean1 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'Z');
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray1);
      
      ArrayUtils.clone((boolean[]) null);
      int int0 = ArrayUtils.lastIndexOf((float[]) null, Float.NaN);
      assertEquals((-1), int0);
      
      char[] charArray2 = ArrayUtils.addAll(charArray0, charArray0);
      assertArrayEquals(new char[] {'Z', 'Z'}, charArray2);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 278L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-5948L), 0);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-102);
      ArrayUtils.shift(shortArray0, (int) (short) (-102), 1073, 0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 1073;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 2);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      Character character0 = new Character('`');
      Character character1 = new Character('|');
      Character.valueOf('|');
      Character character2 = new Character('h');
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      ArrayUtils.toObject((boolean[]) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-809);
      doubleArray0[1] = 3193.08003;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (short) (-1567);
      doubleArray0[4] = (double) (short)2;
      doubleArray0[5] = (double) '|';
      doubleArray0[6] = (double) (short) (-809);
      doubleArray0[7] = (double) (short)91;
      int int0 = new Integer(0);
      Byte byte0 = new Byte((byte)1);
      int int1 = ArrayUtils.indexOf((Object[]) characterArray0, (Object) byte0, (-1983));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      float[] floatArray0 = new float[21];
      boolean[] booleanArray0 = new boolean[16];
      ArrayUtils.lastIndexOf(booleanArray0, false);
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-4485);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-4485));
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1654;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = (-3148);
      int[] intArray1 = ArrayUtils.remove(intArray0, 1);
      assertArrayEquals(new int[] {0, 1, 0, 0, 2, (-3148)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)2;
      byteArray0[1] = (byte) (-103);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1959;
      floatArray0[1] = (float) (byte) (-103);
      floatArray0[2] = (float) (byte)2;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)2, (int) (byte)2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1172);
      shortArray0[1] = (short)3551;
      shortArray0[2] = (short) (-1172);
      ArrayUtils.reverse(shortArray0, (int) (short) (-1172), (int) (short) (-1172));
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (int) (short) (-707), (int) (short) (-1172), (int) (short) (-1172));
      ArrayUtils.insert(0, doubleArray0, doubleArray0);
      ArrayUtils.lastIndexOf((float[]) null, (float) (short) (-1172), Integer.MAX_VALUE);
      ArrayUtils.add(doubleArray0, (double) 0);
      Byte byte0 = new Byte((byte) (-104));
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-104), object0);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      
      ArrayUtils.shift(floatArray0, (-2145482264), (-2145482264), (-2145482264));
      float[] floatArray1 = ArrayUtils.insert((-1256), floatArray0, floatArray0);
      assertNotNull(floatArray1);
      
      float[] floatArray2 = ArrayUtils.addFirst(floatArray0, (float) (-2145482264));
      assertArrayEquals(new float[] {(-2.14548224E9F)}, floatArray2, 0.01F);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      
      Byte byte0 = new Byte((byte) (-71));
      Byte byte1 = new Byte((byte) (-1));
      Byte byte2 = new Byte((byte)59);
      ArrayUtils.clone(floatArray1);
      assertNotSame(floatArray0, floatArray2);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1406);
      floatArray0[1] = (float) (-1406);
      floatArray0[2] = (float) (-1406);
      floatArray0[3] = (float) (-1406);
      floatArray0[4] = (float) (-1406);
      floatArray0[5] = (float) (-1406);
      floatArray0[6] = (float) (-1406);
      floatArray0[7] = (float) (-1406);
      floatArray0[8] = 1073.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1406), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1406, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      Integer integer0 = new Integer((-984));
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-984);
      doubleArray0[1] = (double) (-984);
      doubleArray0[2] = (double) (-984);
      doubleArray0[3] = (-2336.969459);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-984);
      ArrayUtils.removeElements(doubleArray0, doubleArray1);
      boolean[] booleanArray1 = ArrayUtils.removeElements((boolean[]) null, booleanArray0);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (short)0;
      Short short0 = new Short((short)0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      intArray0[2] = (int) (short)0;
      boolean boolean1 = ArrayUtils.contains(floatArray0, (float) 2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0, 51);
      ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      ArrayUtils.nullToEmpty(classArray0);
      ArrayUtils.clone((boolean[]) null);
      ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert((-367), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.clone(byteArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-14);
      floatArray0[1] = (float) (byte)77;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (short)0);
      ArrayUtils.insert((int) (short)0, (float[]) null, (float[]) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = 1390.9723F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 0.0F, 57);
      assertEquals(4, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-1.0));
      assertEquals((-1), int1);
      
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArrayUtils.shift(byteArray0, (int) (byte)0, 854, 7);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-110);
      ArrayUtils.shift(byteArray0, (-43), 3390, (int) (byte) (-110));
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-31), (byte)124}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-955L);
      longArray0[0] = 796L;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)13;
      byteArray0[1] = (byte) (-103);
      ArrayUtils.shift(byteArray0, (int) (byte)0, 1959, (int) (byte)13);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ArrayUtils.shift(byteArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (int) (byte)15, (int) (byte)15, (int) (byte)15);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.shift(byteArray0, (int) (byte)0, 854, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)2;
      ArrayUtils.shift(byteArray0, 0, 4832, (-1301));
      assertArrayEquals(new byte[] {(byte)13, (byte)29, (byte)0, (byte)2, (byte)5, (byte)0, (byte) (-40), (byte)59, (byte) (-120)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'K';
      charArray0[7] = 'K';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 1197);
      boolean boolean0 = ArrayUtils.contains(charArray1, 'K');
      assertNotSame(charArray1, charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'R';
      charArray0[1] = 'k';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 574, 574);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2849.0, 5, 2849.0);
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-2.139250727E9), (-2.139250727E9));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = '^';
      charArray0[2] = 'X';
      charArray0[3] = '~';
      charArray0[4] = 'E';
      ArrayUtils.subarray(charArray0, 0, 47);
      ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 47, (-1.0));
      assertEquals(64, bitSet0.size());
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2435);
      shortArray0[2] = (short)256;
      shortArray0[3] = (short) (-2088);
      shortArray0[4] = (short)99;
      shortArray0[5] = (short) (-1196);
      ArrayUtils.indexOf(shortArray0, (short) (-1654), 3909);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-2435);
      shortArray0[2] = (short)256;
      shortArray0[3] = (short) (-2088);
      shortArray0[4] = (short)99;
      shortArray0[5] = (short) (-1196);
      shortArray0[6] = (short)489;
      ArrayUtils.indexOf(shortArray0, (short) (-1654), 3909);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[17];
      intArray0[1] = 102;
      intArray0[4] = 102;
      byte byte0 = (byte)74;
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = (Byte) (byte)74;
      byteArray0[1] = (Byte) (byte)74;
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 68, (int) (byte)74);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      ArrayUtils.shuffle(doubleArray0, (java.util.Random) mockRandom0);
      Long[] longArray0 = new Long[5];
      Long long0 = new Long(byte0);
      longArray0[0] = long0;
      long long1 = (-1L);
      Long long2 = new Long((-1L));
      longArray0[1] = long2;
      Long long3 = new Long((-2219L));
      longArray0[2] = long3;
      Long long4 = new Long(long1);
      longArray0[3] = long4;
      ArrayUtils.reverse(booleanArray1);
      ArrayUtils.reverse(doubleArray0, 0, 416);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 6, (float) 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-2832));
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1103, (-1727));
      assertTrue(bitSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.isSorted(byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 748, (byte) (-36));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 748, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.indexOf(shortArray0, (short)167, (-78));
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 1, (byte)13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 6, (float) 6);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 6.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (-1));
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      ArrayUtils.indexOf((short[]) null, (short)5031, (-1));
      // Undeclared exception!
      try { 
        ArrayUtils.remove((long[]) null, (-533));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -533, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)15;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-955L);
      longArray0[1] = 796L;
      longArray0[2] = (-1040L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1040L));
      assertEquals(2, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      int int1 = ArrayUtils.indexOf(intArray0, (-1944));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      BitSet bitSet0 = new BitSet(6);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 63L, 1810);
      assertEquals((-1), int0);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 1810);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      Object object0 = new Object();
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, object0);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1056L);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1056L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1080;
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 1080, (int) (short)2);
      assertEquals(0, int0);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-140L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-159));
      assertNotNull(shortArray1);
      
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-24), 93);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte) (-21);
      longArray0[2] = (long) (byte) (-21);
      longArray0[3] = (long) (byte) (-24);
      longArray0[4] = (long) (byte)32;
      longArray0[5] = (long) (byte) (-21);
      longArray0[6] = (-1040L);
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), 52);
      assertEquals(6, int1);
      
      ArrayUtils.shift(byteArray0, 512, (-2995), (int) (byte)57);
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-118.59325312607254), (-1969.40484639));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-104);
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-104));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)318;
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)318);
      assertEquals(0, shortArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-21);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-5), (int) (byte)0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-24);
      longArray0[2] = (long) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1040L), (int) (byte)0);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-2467);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte) (-21);
      intArray0[4] = 2;
      intArray0[5] = (int) (byte)57;
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-21));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-51));
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      ArrayUtils.get(byteArray0, (-1761));
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = ArrayUtils.get(objectArray0, (-2357));
      objectArray0[1] = null;
      Object object2 = ArrayUtils.get(objectArray0, 1);
      assertNull(object2);
      
      objectArray0[2] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, object1);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2357);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-2357);
      intArray0[7] = 1;
      intArray0[8] = 1;
      int int1 = ArrayUtils.indexOf(intArray0, (-2357));
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)29;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-40);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)13;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 13.0, (-40.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-40);
      intArray0[1] = (int) (byte) (-120);
      intArray0[2] = (int) (byte) (-120);
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {(-120), (-120), (-40)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      ArrayUtils.get((Byte[]) null, 9);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      boolean boolean1 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArrayUtils.get(objectArray0, 1, (Object) null);
      objectArray0[0] = null;
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[1] = null;
      ArrayUtils.get(objectArray0, 1);
      objectArray0[2] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)47;
      Byte byte1 = new Byte((byte)47);
      byteArray0[0] = byte1;
      ArrayUtils.get(byteArray0, 0, byte1);
      char[] charArray0 = new char[0];
      ArrayUtils.isSorted(charArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)47;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)47;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) byte0;
      doubleArray0[8] = (double) (byte)47;
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 47.0, 0.0, 47.0, 0.0, 0.0, 47.0, 47.0, 47.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) byte0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {47, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)115;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)115);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      Integer[] integerArray0 = new Integer[7];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 92);
      int[] intArray1 = ArrayUtils.add(intArray0, 92);
      assertArrayEquals(new int[] {92, 92, 92, 92, 92, 92, 92, 92}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1354;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1354);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1354;
      floatArray0[1] = (float) (short)1354;
      floatArray0[2] = (float) (short)1354;
      float[] floatArray1 = ArrayUtils.add(floatArray0, (-2139.547F));
      assertArrayEquals(new float[] {1354.0F, 1354.0F, 1354.0F, (-2139.547F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-2517L));
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-2920L));
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      ArrayUtils.lastIndexOf(longArray0, (long) (byte)0, (-39));
      boolean boolean0 = ArrayUtils.contains(intArray0, (int) (byte) (-84));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 2849L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte) (-84);
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)90;
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (byte)90;
      longArray0[6] = (long) (byte)0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 4300L);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-34));
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2593.0;
      doubleArray0[1] = 519.891186486;
      doubleArray0[2] = 3614.9466444;
      ArrayUtils.indexOf(doubleArray0, 519.891186486, (-2145312905));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2145312905);
      ArrayUtils.swap(intArray0, (-2145312905), 1, (-2145312905));
      assertArrayEquals(new int[] {(-2145312905)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.insert(0, shortArray0, shortArray0);
      ArrayUtils.nullToEmpty(shortArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 446;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      ArrayUtils.swap(intArray0, 446, 1304, 3189);
      assertArrayEquals(new int[] {446, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      ArrayUtils.indexOf(byteArray0, (byte)8, (-742));
      int[] intArray0 = new int[5];
      intArray0[0] = 47;
      intArray0[1] = 72;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (-3339);
      intArray0[4] = (int) (byte) (-31);
      ArrayUtils.lastIndexOf(intArray0, (-2360), 2);
      ArrayUtils.shuffle(byteArray0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-31);
      objectArray0[1] = (Object) 47;
      objectArray0[2] = (Object) 47;
      ArrayUtils.reverse(objectArray0);
      ArrayUtils.swap(intArray0, 9, 0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 3982);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      ArrayUtils.lastIndexOf(doubleArray0, 2197.9932249098065, 93);
      int[] intArray0 = new int[17];
      ArrayUtils.shift(intArray0, 117);
      assertEquals(17, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)4);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2242.64335, 102);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 102;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 102;
      ArrayUtils.swap(intArray0, (-1), 102, (-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)30;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte) (-66));
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-207.0);
      doubleArray0[2] = (-4301.0);
      doubleArray0[3] = (-1807.29);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (-1586), 1509);
      assertArrayEquals(new double[] {0.0, (-4301.0), (-1807.29), 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      float[] floatArray0 = new float[21];
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 75);
      assertNotNull(intArray0);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-5207.0F));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(21, floatArray1.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 8);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertEquals(8, classArray1.length);
      
      ArrayUtils.nullToEmpty((Object[]) integerArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-5207.0F);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 75, 75);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      Double[] doubleArray1 = new Double[0];
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray0, 0, 0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1016.9;
      doubleArray0[2] = 1681.456655191493;
      doubleArray0[3] = (-620.6808209208);
      doubleArray0[4] = 4182.422;
      doubleArray0[5] = (-394.0);
      doubleArray0[6] = 501.330846;
      doubleArray0[7] = (-2123.0);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1, 25);
      assertArrayEquals(new double[] {1016.9, 1681.456655191493, (-620.6808209208), 4182.422, (-394.0), 501.330846, (-2123.0)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)1;
      ArrayUtils.subarray((char[]) null, (int) (byte)0, (int) (byte)0);
      ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)1;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.0, (-3094), 1425.3111);
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2754.3432383, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[1] = 0.0F;
      long[] longArray0 = new long[4];
      longArray0[0] = (-955L);
      longArray0[1] = (-955L);
      floatArray0[3] = (float) (-1040L);
      longArray0[3] = (-955L);
      ArrayUtils.reverse((byte[]) null);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1351;
      shortArray0[1] = (short)1351;
      shortArray0[2] = (short)1351;
      shortArray0[3] = (short)1351;
      shortArray0[4] = (short)1351;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)289);
      assertEquals((-1), int0);
      
      ArrayUtils.clone((double[]) null);
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 46.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'p');
      char[] charArray2 = ArrayUtils.removeElements(charArray1, charArray0);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray2.length);
      assertNotNull(charArray2);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (float) 2249L;
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      ArrayUtils.shift((int[]) null, 117);
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-116.496682);
      doubleArray0[1] = (-1.0);
      ArrayUtils.clone(doubleArray0);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1.0));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertEquals(6, longArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1.0);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) (-1L);
      objectArray0[3] = (Object) (-1L);
      objectArray0[4] = (Object) (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '');
      assertNotSame(charArray1, charArray0);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      ArrayUtils.removeElements((double[]) null, (double[]) null);
      Byte byte0 = new Byte((byte)88);
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      ArrayUtils.toPrimitive(integerArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1204.7832164607394);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2046.6261), 2628.101021751171);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray0, (-610), (-1), (int) (byte)90);
      assertArrayEquals(new double[] {(-1204.7832164607394), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object[] objectArray0 = new Object[13];
      Byte byte0 = new Byte((byte)50);
      ArrayUtils.toPrimitive((Object) null);
      objectArray0[0] = (Object) null;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte)50);
      assertEquals(12, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      int[] intArray0 = new int[5];
      intArray0[0] = 12;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertEquals(3, byteArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)50;
      floatArray0[1] = (float) (byte)50;
      floatArray0[2] = (float) (byte)77;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)77;
      doubleArray0[1] = (double) 50.0F;
      doubleArray0[2] = (double) (byte)50;
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) (byte)77;
      doubleArray0[5] = (double) 77.0F;
      doubleArray0[6] = (double) (byte)77;
      doubleArray0[7] = (double) 50.0F;
      doubleArray0[8] = (double) (byte)50;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) 50.0F);
      assertArrayEquals(new double[] {77.0, 12.0, 77.0, 77.0, 77.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1382.4), (-2497));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 251.028435;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, 0, 0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-82);
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap(doubleArray1, (-1), Integer.MAX_VALUE, 3407);
      assertArrayEquals(new double[] {251.028435}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[13] = (double) 0;
      doubleArray0[3] = (double) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, Double.NaN, 0);
      assertEquals(2, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1.5, 1);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 6.0);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArrayUtils.removeElements(byteArray0, byteArray0);
      Byte byte0 = new Byte((byte)14);
      ArrayUtils.toString((Object) byte0, "");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)14;
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = '*';
      charArray0[2] = '{';
      charArray0[3] = 'T';
      ArrayUtils.shift(charArray0, 0, (int) (byte)14, (-1816));
      Byte byte1 = new Byte((byte)0);
      ArrayUtils.toPrimitive((Object) null);
      ArrayUtils.toString((Object) null, "The Array must not be null");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.removeAll(intArray0, intArray0);
      Object object0 = new Object();
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, 286.0F);
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {286.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      ArrayUtils.removeElements((long[]) null, (long[]) null);
      ArrayUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 2620.589518;
      doubleArray0[3] = (-1.0);
      ArrayUtils.swap(doubleArray0, 0, 0, 0);
      byte byte0 = (byte) (-32);
      Byte byte1 = new Byte((byte) (-32));
      ArrayUtils.toString((Object) byte1, "");
      ArrayUtils.hashCode((Object) byte1);
      float[] floatArray0 = null;
      ArrayUtils.add((float[]) null, 469.27203F);
      ArrayUtils.indexesOf(doubleArray0, (-844.4930684839143));
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 1.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertNotNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-238), (-238));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-3648);
      floatArray0[2] = (float) (-238);
      BitSet bitSet1 = ArrayUtils.indexesOf(floatArray0, 650.0F, 2950);
      assertTrue(bitSet1.equals((Object)bitSet0));
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 650.0F);
      assertArrayEquals(new float[] {0.0F, (-3648.0F), (-238.0F), 650.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) 'g');
      assertEquals(0, bitSet0.cardinality());
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1677()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1678()  throws Throwable  {
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) 'q');
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1679()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 893);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
  }
}
