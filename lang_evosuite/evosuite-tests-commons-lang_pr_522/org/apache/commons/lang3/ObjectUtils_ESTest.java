/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 12:23:25 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.lang.reflect.Array;
import java.text.Collator;
import java.time.chrono.MinguoEra;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.function.Supplier;
import java.util.function.ToLongFunction;
import org.apache.commons.lang3.ObjectUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ObjectUtils_ESTest extends ObjectUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 15);
      Comparable<Object> comparable0 = ObjectUtils.min(comparableArray0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      integerArray0[1] = integerArray0[0];
      integerArray0[2] = integerArray0[1];
      integerArray0[3] = integerArray0[1];
      Integer integer1 = new Integer(1492);
      integerArray0[4] = integer1;
      integerArray0[5] = integerArray0[0];
      Integer integer2 = ObjectUtils.median(integerArray0);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer((-1828));
      Object object1 = ObjectUtils.defaultIfNull(object0, (Object) integer0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(32767);
      assertEquals((short)32767, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT((-32768));
      assertEquals((short) (-32768), short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE((-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(1901);
      Integer integer1 = ObjectUtils.cloneIfPossible(integer0);
      assertEquals(1901, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ObjectUtils.identityToString((Appendable) charArrayWriter0, (Object) arrayDeque0);
      assertEquals(22, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      arrayDequeArray0[4] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.mode(arrayDequeArray0);
      assertTrue(arrayDeque1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MinguoEra[] minguoEraArray0 = new MinguoEra[3];
      MinguoEra minguoEra0 = MinguoEra.ROC;
      minguoEraArray0[0] = minguoEra0;
      minguoEraArray0[1] = minguoEraArray0[0];
      minguoEraArray0[2] = minguoEraArray0[1];
      MinguoEra minguoEra1 = ObjectUtils.median(minguoEraArray0);
      assertSame(minguoEra1, minguoEra0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 957L, 957L).when(toLongFunction0).applyAsLong(any());
      Comparator<ArrayDeque<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super ArrayDeque<Object>>) toLongFunction0);
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 3);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      arrayDequeArray0[1] = arrayDeque0;
      arrayDequeArray0[2] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.median(comparator0, arrayDequeArray0);
      assertEquals(0, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 7);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDequeArray0[0] = arrayDeque0;
      int int0 = ObjectUtils.hashCodeMulti(arrayDequeArray0);
      assertEquals((-1664653280), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare(integer0, (Integer) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = ObjectUtils.CONST_SHORT(0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(127);
      assertEquals((byte)127, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)1824);
      assertEquals((short)1824, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short) (-1869));
      assertEquals((short) (-1869), short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = ObjectUtils.CONST((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = ObjectUtils.CONST(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = ObjectUtils.CONST((-9L));
      assertEquals((-9L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = ObjectUtils.CONST(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = ObjectUtils.CONST((-842));
      assertEquals((-842), int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = ObjectUtils.CONST(1754.1049F);
      assertEquals(1754.1049F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = ObjectUtils.CONST((-1575.0546F));
      assertEquals((-1575.0546F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = ObjectUtils.CONST((double) (byte)1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = ObjectUtils.CONST((-2009.307883279));
      assertEquals((-2009.307883279), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char char0 = ObjectUtils.CONST('(');
      assertEquals('(', char0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char char0 = ObjectUtils.CONST('y');
      assertEquals('y', char0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) linkedHashMap0;
      // Undeclared exception!
      try { 
        ObjectUtils.mode(objectArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 0);
      // Undeclared exception!
      try { 
        ObjectUtils.median(comparableArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated array is empty
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) null, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null/empty items
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) collator0;
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.RuleBasedCollator cannot be cast to java.lang.String
         //
         verifyException("java.text.Collator", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((StringBuilder) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 6);
      arrayDequeArray0[0] = arrayDeque0;
      ArrayDeque<Object> arrayDeque1 = ObjectUtils.mode(arrayDequeArray0);
      assertNull(arrayDeque1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectUtils.hashCode((Object) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = ObjectUtils.firstNonNull(objectArray0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = ObjectUtils.firstNonNull((Integer[]) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ObjectUtils.firstNonNull(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Supplier<Object> supplier0 = (Supplier<Object>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ObjectUtils.equals((Object) null, (Object) supplier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = ObjectUtils.equals((Object) arrayDeque0, (Object) arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(1311);
      int int0 = ObjectUtils.compare(integer0, (Integer) null, true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-1081));
      int int0 = ObjectUtils.compare(integer0, (Integer) null, false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = ObjectUtils.compare((Integer) null, integer0, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer((-1238));
      Integer integer1 = new Integer((-1238));
      int int0 = ObjectUtils.compare(integer0, integer1, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer(1059);
      int int0 = ObjectUtils.compare(integer0, integer0, false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[1] = object0;
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ObjectUtils.anyNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) integer0;
      objectArray0[1] = (Object) arrayDeque0;
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) arrayDeque0;
      objectArray0[4] = (Object) integer0;
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = ObjectUtils.allNotNull((Object[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = ObjectUtils.toString((Object) null, supplier0);
      //  // Unstable assertion: assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(1723);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = ObjectUtils.toString((Object) integer0, supplier0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      String string0 = ObjectUtils.toString(object0, "java.lang.Object@1");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = ObjectUtils.toString((Object) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      String string0 = ObjectUtils.toString((Object) arrayDeque0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayDeque0;
      Object object0 = ObjectUtils.mode(objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = ObjectUtils.mode((Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.min((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Comparable<Object> comparable0 = ObjectUtils.max((Comparable<Object>[]) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.isNotEmpty(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isNotEmpty((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      linkedHashMap0.put(linkedHashMap0, linkedHashMap0);
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.isEmpty(linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-2681));
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      arrayDeque0.addFirst(integer0);
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      boolean boolean0 = ObjectUtils.isEmpty(arrayDeque0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = ObjectUtils.isEmpty((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(1723);
      boolean boolean0 = ObjectUtils.isEmpty(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ObjectUtils.identityToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(1723);
      String string0 = ObjectUtils.identityToString((Object) integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = ObjectUtils.hashCodeMulti((Object[]) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(1723);
      ObjectUtils.hashCode((Object) integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Supplier<Comparable<Integer>> supplier0 = (Supplier<Comparable<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      Comparable<Integer> comparable0 = ObjectUtils.getIfNull((Comparable<Integer>) null, supplier0);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = ObjectUtils.getIfNull((Integer) null, (Supplier<Integer>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Supplier<ArrayDeque<Integer>>[] supplierArray0 = (Supplier<ArrayDeque<Integer>>[]) Array.newInstance(Supplier.class, 1);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Supplier<ArrayDeque<Integer>> supplier0 = (Supplier<ArrayDeque<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(arrayDeque0).when(supplier0).get();
      supplierArray0[0] = supplier0;
      ArrayDeque<Integer> arrayDeque1 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertEquals(0, arrayDeque1.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Supplier<ArrayDeque<Integer>>[] supplierArray0 = (Supplier<ArrayDeque<Integer>>[]) Array.newInstance(Supplier.class, 1);
      Supplier<ArrayDeque<Integer>> supplier0 = (Supplier<ArrayDeque<Integer>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      supplierArray0[0] = supplier0;
      ArrayDeque<Integer> arrayDeque0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Supplier<ArrayDeque<Integer>>[] supplierArray0 = (Supplier<ArrayDeque<Integer>>[]) Array.newInstance(Supplier.class, 1);
      ArrayDeque<Integer> arrayDeque0 = ObjectUtils.getFirstNonNull(supplierArray0);
      assertNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectUtils.getFirstNonNull((Supplier<ChronoField>[]) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 1);
      boolean boolean0 = ObjectUtils.allNull(comparableArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      Object object0 = new Object();
      boolean boolean0 = ObjectUtils.equals((Object) linkedHashMap0, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedHashMap<Object, Object> linkedHashMap0 = new LinkedHashMap<Object, Object>();
      boolean boolean0 = ObjectUtils.notEqual((Object) null, linkedHashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = ObjectUtils.notEqual((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      boolean boolean0 = ObjectUtils.equals((Object) arrayDeque0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = ObjectUtils.defaultIfNull((Object) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT(32782);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [32782]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_SHORT((-32790));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -32768 and 32767: [-32790]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST_BYTE(0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE(360);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [360]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.CONST_BYTE((-1781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [-1781]
         //
         verifyException("org.apache.commons.lang3.ObjectUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FormatStyle[] formatStyleArray0 = FormatStyle.values();
      FormatStyle formatStyle0 = ObjectUtils.min(formatStyleArray0);
      assertEquals(FormatStyle.FULL, formatStyle0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(7);
      Integer integer1 = new Integer(7);
      int int0 = ObjectUtils.compare(integer0, integer1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(1311);
      int int0 = ObjectUtils.compare((Integer) null, integer0, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MinguoEra minguoEra0 = MinguoEra.BEFORE_ROC;
      MinguoEra[] minguoEraArray0 = new MinguoEra[15];
      minguoEraArray0[2] = minguoEra0;
      MinguoEra minguoEra1 = ObjectUtils.max(minguoEraArray0);
      assertEquals(MinguoEra.BEFORE_ROC, minguoEra1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, ArrayDeque> hashMap0 = ObjectUtils.cloneIfPossible((HashMap<Integer, ArrayDeque>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      ArrayDeque<Integer> arrayDeque1 = ObjectUtils.clone(arrayDeque0);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comparable<Integer> comparable0 = ObjectUtils.clone((Comparable<Integer>) (-1));
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = ObjectUtils.anyNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = ObjectUtils.anyNull((Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      boolean boolean0 = ObjectUtils.allNotNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayDeque0;
      boolean boolean0 = ObjectUtils.allNull(objectArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectUtils.Null objectUtils_Null0 = new ObjectUtils.Null();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparator<Object>) collator0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null/empty items
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = ObjectUtils.CONST((float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectUtils objectUtils0 = new ObjectUtils();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer();
      ObjectUtils.identityToString(stringBuffer0, object0);
      assertEquals(18, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = ObjectUtils.CONST(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short short0 = ObjectUtils.CONST((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char char0 = ObjectUtils.CONST('7');
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte byte0 = ObjectUtils.CONST((byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ArrayDeque<Object>[] arrayDequeArray0 = (ArrayDeque<Object>[]) Array.newInstance(ArrayDeque.class, 2);
      // Undeclared exception!
      try { 
        ObjectUtils.identityToString((Appendable) charArrayWriter0, (Object) arrayDequeArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot get the toString of a null object
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(22);
      ObjectUtils.identityToString(stringBuilder0, (Object) stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        ObjectUtils.median((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The validated array is empty
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = ObjectUtils.CONST(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ObjectUtils.CONST(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = ObjectUtils.CONST(124);
      assertEquals(124, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      int int0 = ObjectUtils.compare((Integer) null, integer0);
      assertEquals((-1), int0);
  }
}
