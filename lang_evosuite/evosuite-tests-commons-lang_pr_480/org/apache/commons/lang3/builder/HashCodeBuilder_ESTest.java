/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 14:06:07 GMT 2025
 */

package org.apache.commons.lang3.builder;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.IDKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class HashCodeBuilder_ESTest extends HashCodeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(17, 17);
      HashCodeBuilder.reflectionHashCode((Object) "", (Collection<String>) linkedHashSet0);
      HashCodeBuilder.reflectionHashCode((Object) linkedHashSet0, false);
      linkedHashSet0.add((String) null);
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(36, (-1499), linkedHashSet0, false, (Class<? super LinkedHashSet<String>>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      //  // Unstable assertion: assertEquals(17, hashCodeBuilder0.toHashCode());
      
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode((-715), (-715), object0, false);
      hashCodeBuilder0.append((Object) "r1,vU5!;a?zs:/2:");
      //  // Unstable assertion: assertEquals(636, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Class<Integer> class0 = Integer.TYPE;
      String[] stringArray0 = new String[20];
      int int0 = HashCodeBuilder.reflectionHashCode((-281), (-281), integer0, true, (Class<? super Integer>) class0, stringArray0);
      assertEquals(78965, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[2];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      hashCodeBuilder1.append((byte)103);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder.reflectionHashCode((Object) "rskKBO_TS]x;PCw", false);
      double[] doubleArray0 = new double[1];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = '`';
      charArray0[2] = '4';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(0.0F);
      hashCodeBuilder0.append(charArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '`';
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 'u';
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) hashCodeBuilder1;
      objectArray0[4] = (Object) hashCodeBuilder1;
      objectArray0[5] = (Object) '4';
      objectArray0[6] = (Object) 96.0;
      objectArray0[7] = (Object) hashCodeBuilder2;
      hashCodeBuilder0.append(objectArray0);
      doubleArray0[1] = (double) 'u';
      doubleArray0[2] = (double) '`';
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(doubleArray0);
      Object object2 = new Object();
      HashCodeBuilder.reflectionHashCode((-1), (-1), object2);
      hashCodeBuilder3.append(false);
      hashCodeBuilder3.append((short[]) null);
      assertEquals((-211278353), (int)hashCodeBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      hashCodeBuilder0.append(byteArray0);
      //  // Unstable assertion: assertEquals(23222, hashCodeBuilder0.toHashCode());
      
      HashCodeBuilder.reflectionHashCode((Object) "HashCodeBuilder requires an odd initial value", false);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedHashSet0.removeAll(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedHashSet0);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "HashCodeBuilder requires an odd initial value", (Collection<String>) linkedList1);
      //  // Unstable assertion: assertEquals((-403045120), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(object0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(false);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)25;
      shortArray0[1] = (short) (-2234);
      hashCodeBuilder2.append(shortArray0);
      Integer integer0 = new Integer((-1));
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "W%nDAtl!W6*";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Failed to create default temp directory";
      stringArray0[5] = "";
      HashCodeBuilder.reflectionHashCode((-1), (-1), integer0, true, (Class<? super Integer>) class0, stringArray0);
      long[] longArray0 = new long[0];
      hashCodeBuilder0.append(longArray0);
      assertEquals(31962103, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((double[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(6);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_+~G|[S/o~>";
      stringArray0[1] = ";(9Aa}P2kel&+H";
      stringArray0[2] = "Unexpected IllegalAccessException";
      stringArray0[3] = ".DePuGK";
      stringArray0[4] = ".DePuGK";
      stringArray0[5] = "_+~G|[S/o~>";
      stringArray0[6] = ".{N($ 7g'Fey";
      stringArray0[7] = ".DePuGK";
      stringArray0[8] = "Unexpected IllegalAccessException";
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "Unexpected IllegalAccessException", stringArray0);
      //  // Unstable assertion: assertEquals((-657228334), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-6));
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[1];
      int int0 = HashCodeBuilder.reflectionHashCode((-281), (-281), integer0, true, (Class<? super Integer>) class0, stringArray0);
      //  // Unstable assertion: assertEquals(78966, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(3);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "mdO*(JSV%+K\"0~", false);
      assertEquals(1607499541, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-46);
      Integer integer0 = new Integer(724);
      HashCodeBuilder.reflectionHashCode(1, 785, (Object) integer0, true);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      hashCodeBuilder1.toHashCode();
      hashCodeBuilder1.append(true);
      assertEquals((-788739114), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((short[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-441);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(false);
      hashCodeBuilder1.append(floatArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-441);
      intArray0[1] = 3;
      intArray0[2] = (-441);
      intArray0[3] = 3;
      intArray0[5] = 3;
      intArray0[6] = (-441);
      hashCodeBuilder0.append(intArray0);
      hashCodeBuilder1.append((char[]) null);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append((short)3);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(booleanArray0);
      hashCodeBuilder4.toHashCode();
      Object object0 = new Object();
      hashCodeBuilder2.append(object0);
      assertEquals(8604529, (int)hashCodeBuilder2.build());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3);
      float[] floatArray0 = new float[1];
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(floatArray0);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-1015);
      shortArray0[3] = (short)967;
      hashCodeBuilder2.append(shortArray0);
      hashCodeBuilder1.append((byte)73);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((float) (byte)73);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short) (-1015);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)967;
      longArray0[3] = (long) (-441);
      longArray0[4] = (long) (-441);
      hashCodeBuilder3.append(longArray0);
      assertEquals(727697226, hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((long[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      Object object1 = new Object();
      HashCodeBuilder.reflectionHashCode(object1, true);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)17);
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'G';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'q';
      hashCodeBuilder2.append(charArray0);
      HashCodeBuilder.getRegistry();
      hashCodeBuilder2.appendSuper((-167));
      HashCodeBuilder.isRegistered(object1);
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals((-1138492326), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((boolean[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Set<IDKey> set0 = HashCodeBuilder.getRegistry();
      assertNull(set0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, false);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      hashCodeBuilder1.append((byte)17);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((-1446L));
      hashCodeBuilder2.append((byte[]) null);
      assertEquals(31988128, hashCodeBuilder2.toHashCode());
      
      HashCodeBuilder hashCodeBuilder3 = new HashCodeBuilder((byte)17, (byte)87);
      int int0 = hashCodeBuilder3.toHashCode();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, 37);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-10));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((short) (byte) (-10));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder1.append('G');
      hashCodeBuilder3.append(37);
      hashCodeBuilder3.append(0.0F);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      Integer integer0 = hashCodeBuilder1.build();
      hashCodeBuilder2.append((Object) integer0);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-10);
      hashCodeBuilder2.append(byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V|<A0";
      stringArray0[1] = "";
      stringArray0[2] = "vgaN&ll,xP_8'Q`+~u[";
      stringArray0[3] = "~~rS";
      stringArray0[4] = "";
      stringArray0[5] = ".DePuGK";
      stringArray0[6] = "_+~G|[S/o~>";
      stringArray0[7] = "";
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, stringArray0);
      assertEquals(705359211, hashCodeBuilder1.toHashCode());
      assertEquals(634, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-2678.0));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 446;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = 790;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(934L);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append('B');
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((byte)0);
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append((double) (-1));
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'M';
      charArray0[7] = 'B';
      hashCodeBuilder5.append(charArray0);
      hashCodeBuilder6.append(intArray0);
      hashCodeBuilder5.append(0.0);
      assertEquals(2137722306, (int)hashCodeBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3757;
      boolean boolean0 = true;
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ".v8g*:Rl";
      stringArray0[5] = ",XUC*Z$<Ivr=,";
      stringArray0[6] = "F^*@&`j66a";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(3757, 3757, (Integer) null, true, (Class<? super Integer>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-441);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1155;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-693);
      shortArray0[3] = (short)1183;
      shortArray0[4] = (short) (-1015);
      shortArray0[5] = (short) (-1691);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(shortArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((byte)73);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((float) (short)1155);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)1155;
      hashCodeBuilder5.append(longArray0);
      assertEquals((-247667449), hashCodeBuilder5.toHashCode());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 599;
      intArray0[2] = (-2744);
      intArray0[3] = 0;
      intArray0[4] = 229;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = (-2198);
      intArray0[8] = (-597);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-597);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(doubleArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2031;
      shortArray0[1] = (short)1666;
      shortArray0[2] = (short) (-1133);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(shortArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) hashCodeBuilder2;
      objectArray0[1] = (Object) 229;
      objectArray0[2] = (Object) 0;
      objectArray0[3] = (Object) (-597);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(objectArray0);
      Integer integer0 = new Integer((-1559));
      hashCodeBuilder5.append((Object) integer0);
      assertEquals((-187656103), (int)hashCodeBuilder4.build());
      assertEquals((-187656103), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(6, 6, "", false, (Class<? super String>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(1024.9495F);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      hashCodeBuilder1.append(longArray0);
      Integer integer0 = new Integer(2402);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "4!s";
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-899), 0, integer0, true, (Class<? super Integer>) class0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      hashCodeBuilder0.append(3);
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      HashCodeBuilder.reflectionHashCode((-441), 3, "", true, (Class<? super String>) class0, stringArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-441);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      hashCodeBuilder1.append((byte)48);
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = 'm';
      charArray0[2] = 'G';
      charArray0[3] = '\"';
      charArray0[4] = 'm';
      hashCodeBuilder1.append(charArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.appendSuper((-402));
      hashCodeBuilder2.append('{');
      assertEquals(1028776996, (int)hashCodeBuilder0.build());
      assertEquals(1028776996, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-860), (-860), object0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((-1848), 51, object0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(1.0F);
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '6';
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(charArray0);
      Integer integer0 = new Integer(398);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((Object) integer0);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((long) 398);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 841.3134F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 'F';
      floatArray0[3] = (float) '6';
      floatArray0[4] = (float) 'F';
      hashCodeBuilder5.append(floatArray0);
      assertEquals((-109818451), hashCodeBuilder3.toHashCode());
      assertEquals((-109818451), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((byte[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(booleanArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.appendSuper(0);
      hashCodeBuilder2.append(0L);
      hashCodeBuilder2.append(false);
      assertEquals((-708330859), hashCodeBuilder2.toHashCode());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[1];
      hashCodeBuilder0.append(longArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3);
      float[] floatArray0 = new float[1];
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-441);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) (-441);
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) (-441);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(doubleArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1183;
      shortArray0[1] = (short) (-693);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder1.append(shortArray0);
      hashCodeBuilder4.append((byte)73);
      hashCodeBuilder4.append((float) (-441));
      hashCodeBuilder3.append((long[]) null);
      assertEquals((-892274211), (int)hashCodeBuilder3.build());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((-121L));
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-121L);
      floatArray0[1] = (float) (-121L);
      floatArray0[2] = (float) (-121L);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((double) (-121L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-121L);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2245.8146902;
      doubleArray0[3] = (double) (-121.0F);
      doubleArray0[4] = (double) (-121.0F);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(doubleArray0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(booleanArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (-121L);
      hashCodeBuilder5.append(longArray0);
      assertEquals((-1175832290), (int)hashCodeBuilder4.build());
      assertEquals((-1175832290), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      long[] longArray0 = new long[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(longArray0);
      assertEquals(17, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((byte) (-78));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2052);
      shortArray0[1] = (short) (byte) (-78);
      shortArray0[2] = (short) (byte) (-78);
      shortArray0[3] = (short) (byte) (-78);
      shortArray0[4] = (short) (byte) (-78);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(shortArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(true);
      hashCodeBuilder3.append((float[]) null);
      assertEquals((-1447187697), hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)17;
      shortArray0[4] = (short)0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short)0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)17;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short) (-1);
      floatArray0[6] = (float) (short)0;
      floatArray0[7] = (float) (short)0;
      floatArray0[8] = (float) (short)17;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(floatArray0);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte) (-5));
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(booleanArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 17.0F;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(doubleArray0);
      hashCodeBuilder5.hashCode();
      assertEquals((-570172995), (int)hashCodeBuilder4.build());
      assertEquals((-570172995), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(floatArray0);
      assertEquals(17, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('w');
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'w';
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(intArray0);
      Integer integer0 = new Integer(119);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((Object) integer0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3087;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)37;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(shortArray0);
      hashCodeBuilder4.hashCode();
      assertEquals(1341636399, hashCodeBuilder3.toHashCode());
      assertEquals(1341636399, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(1731, 1731, object0);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-276));
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((long) (short) (-276));
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((byte)0);
      Integer integer0 = new Integer(0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((Object) integer0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1731;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(intArray0);
      hashCodeBuilder5.append(false);
      assertEquals((-775920418), (int)hashCodeBuilder5.build());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(0.0F);
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(charArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '{';
      floatArray0[1] = 0.0F;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(floatArray0);
      hashCodeBuilder3.append((Object) null);
      assertEquals(1546180948, hashCodeBuilder3.toHashCode());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = new Integer(1537);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashCodeBuilder.reflectionHashCode((Object) integer0, (Collection<String>) linkedList0);
      hashCodeBuilder0.append('4');
      assertEquals(681, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashCodeBuilder.getRegistry();
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      HashCodeBuilder.reflectionHashCode(object0, false);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      hashCodeBuilder1.append((byte)17);
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = 'm';
      charArray0[2] = 'G';
      hashCodeBuilder1.append(charArray0);
      hashCodeBuilder0.appendSuper((byte)17);
      boolean[] booleanArray0 = new boolean[0];
      hashCodeBuilder1.append(booleanArray0);
      assertEquals(774756341, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode((Object) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((float[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-51);
      hashCodeBuilder0.append(byteArray0);
      hashCodeBuilder0.append((short[]) null);
      assertEquals(859214, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte)93);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append((float[]) null);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)93;
      shortArray0[1] = (short) (-3002);
      shortArray0[2] = (short) (byte)93;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte)93;
      shortArray0[5] = (short) (byte)93;
      shortArray0[6] = (short) (byte)93;
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(shortArray0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = '8';
      charArray0[2] = 'X';
      charArray0[3] = 'M';
      charArray0[4] = 'v';
      charArray0[5] = '}';
      charArray0[6] = 'W';
      charArray0[7] = '=';
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(charArray0);
      hashCodeBuilder5.appendSuper((short) (-3002));
      assertEquals(1242133715, (int)hashCodeBuilder2.build());
      assertEquals(1242133715, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((-2412.887324321347));
      assertEquals((-1879226886), hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = HashCodeBuilder.isRegistered(object0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, 37);
      Object[] objectArray0 = new Object[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);
      hashCodeBuilder0.append('.');
      hashCodeBuilder1.append((double[]) null);
      //  // Unstable assertion: assertEquals(52355, (int)hashCodeBuilder1.build());
      
      Object object1 = new Object();
      Integer integer0 = new Integer(1);
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, false);
      //  // Unstable assertion: assertEquals(637, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[1];
      hashCodeBuilder0.append(doubleArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      double[] doubleArray0 = new double[2];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(false);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 215.69898487;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(doubleArray0);
      byte[] byteArray0 = new byte[0];
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder0.append(0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append(1.0);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder2.append(byteArray0);
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append('Q');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) hashCodeBuilder1;
      objectArray0[1] = (Object) hashCodeBuilder6;
      objectArray0[2] = (Object) hashCodeBuilder4;
      hashCodeBuilder6.append(objectArray0);
      hashCodeBuilder6.append((short) (-1533));
      hashCodeBuilder0.build();
      hashCodeBuilder4.append(doubleArray0);
      assertEquals(371843385, hashCodeBuilder0.toHashCode());
      assertEquals(371843385, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer((-2056));
      int int0 = HashCodeBuilder.reflectionHashCode((Object) integer0, false);
      assertEquals(633, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-851);
      int int1 = 0;
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder((-851), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(3, (-3100), object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd multiplier
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.appendSuper(29);
      assertEquals(658, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte) (-1);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(false);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.appendSuper(0);
      hashCodeBuilder3.append((int) (byte)53);
      assertEquals(1237734909, hashCodeBuilder2.toHashCode());
      assertEquals(1237734909, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "Failed to delete temp directory ", false);
      assertEquals((-1686603181), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = new Object();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      int int0 = HashCodeBuilder.reflectionHashCode(object0, (Collection<String>) linkedHashSet0);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = new Integer(2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "UN}*Z|a4c-Hw_*fA>";
      stringArray0[1] = "Q_A`kH";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "X";
      stringArray0[6] = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      HashCodeBuilder.reflectionHashCode((Object) integer0, stringArray0);
      hashCodeBuilder0.append((int[]) null);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append((Object) hashCodeBuilder0);
      assertEquals(630, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(0, 1229, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The object to build a hash code for must not be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        HashCodeBuilder.reflectionHashCode(0, 2344, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Integer integer0 = hashCodeBuilder0.build();
      assertEquals(17, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)0;
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(byteArray0);
      int int0 = hashCodeBuilder1.toHashCode();
      assertEquals((-1646440034), (int)hashCodeBuilder0.build());
      assertEquals((-1646440034), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(973, 973);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((float) 973);
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((byte[]) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2812;
      shortArray0[3] = (short) (-884);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)2505;
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(shortArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((short) (-884));
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short) (-884);
      floatArray0[2] = (float) (short)2505;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append(floatArray0);
      hashCodeBuilder5.append((int) (short)2);
      assertEquals(1536461494, hashCodeBuilder1.toHashCode());
      assertEquals(1536461494, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(true);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = HashCodeBuilder.reflectionHashCode((Object) "org.apache.commons.lang3.builder.HashCodeBuilder", true);
      assertEquals((-953259973), int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      byte[] byteArray0 = new byte[1];
      hashCodeBuilder0.append(byteArray0);
      assertEquals(629, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(charArray0);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append(booleanArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-79);
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(byteArray0);
      hashCodeBuilder3.append((byte) (-79));
      assertEquals((-316445754), hashCodeBuilder0.toHashCode());
      assertEquals((-316445754), (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 0;
      int int1 = (-2720);
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(0, (-2720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = null;
      try {
        hashCodeBuilder0 = new HashCodeBuilder(40, 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HashCodeBuilder requires an odd initial value
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, (-441));
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(3);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-441);
      hashCodeBuilder0.append(false);
      hashCodeBuilder1.append(floatArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1155;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-693);
      shortArray0[3] = (short)1183;
      hashCodeBuilder1.append((Object[]) null);
      assertEquals((-183140071), hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int[] intArray0 = new int[2];
      hashCodeBuilder0.append(intArray0);
      assertEquals(23273, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      Object[] objectArray0 = new Object[1];
      hashCodeBuilder0.append(objectArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append('9');
      assertEquals(686, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      hashCodeBuilder0.append(747);
      assertEquals(1376, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(shortArray0);
      hashCodeBuilder1.append((char[]) null);
      assertEquals(629, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      short[] shortArray0 = new short[5];
      hashCodeBuilder0.append(shortArray0);
      assertEquals(1178847269, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      int[] intArray0 = new int[0];
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(intArray0);
      assertEquals(17, hashCodeBuilder1.toHashCode());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      float[] floatArray0 = new float[1];
      hashCodeBuilder0.append(floatArray0);
      assertEquals(629, hashCodeBuilder0.toHashCode());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(3, Integer.MAX_VALUE);
      assertEquals(3, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();
      boolean[] booleanArray0 = new boolean[1];
      hashCodeBuilder0.append(booleanArray0);
      assertEquals(630, (int)hashCodeBuilder0.build());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Object object0 = new Object();
      HashCodeBuilder.isRegistered(object0);
      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, 37);
      Object[] objectArray0 = new Object[0];
      hashCodeBuilder0.append(objectArray0);
      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('.');
      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((float) 37);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '.';
      HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(intArray0);
      HashCodeBuilder hashCodeBuilder4 = hashCodeBuilder3.append((char[]) null);
      HashCodeBuilder hashCodeBuilder5 = hashCodeBuilder4.append((short)37);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      HashCodeBuilder hashCodeBuilder6 = hashCodeBuilder5.append(booleanArray0);
      assertEquals((-255089775), (int)hashCodeBuilder3.build());
      assertEquals((-255089775), hashCodeBuilder6.toHashCode());
  }
}
