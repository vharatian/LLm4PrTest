/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 15:23:58 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "gg";
      stringArray0[1] = "pZM6W=/";
      stringArray0[2] = "gg";
      stringArray0[3] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[4] = "gg";
      stringArray0[5] = "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "gg";
      stringArray1[2] = "org.apache.commons.lang3.ArrayUtils";
      stringArray1[3] = "pZM6W=/";
      stringArray1[4] = "";
      stringArray1[5] = "pZM6W=/";
      String string0 = StringUtils.replaceEach("gg", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1163;
      intArray0[1] = 9;
      intArray0[2] = (-2843);
      intArray0[3] = (-3118);
      intArray0[4] = (-660);
      intArray0[5] = (-859);
      intArray0[6] = (-216);
      intArray0[7] = 2;
      String string1 = StringUtils.join(intArray0, 'E', 6, (-660));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1163, 9, (-2843), (-3118), (-660), (-859), (-216), 2}, intArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("pZM6W=/", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.repeat("maxWith cannot be negative", "3G", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.truncate("", 70);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 't';
      charArray0[2] = '8';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 't', '8'}, charArray0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(70));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'W', Integer.MAX_VALUE, (-1893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-1893)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("()VLU}J-'(=", "()VLU}J-'(=");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", "Locale must not be null", (-1176));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "i", "i");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripEnd("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.repeat("/WD(d4", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " is not inthe ange '0'  9'";
      stringArray0[3] = " is not inthe ange '0'  9'";
      stringArray0[4] = " is not inthe ange '0'  9'";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(" ", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'T', (-421), (-421));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("F?", "F?", "F?", 64);
      assertEquals("F?", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(64);
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(64, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "F?", (CharSequence) charBuffer0, 64);
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(64, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(64, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(charBuffer0);
      assertEquals(64, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(64, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(64, charBuffer0.length());
      assertEquals(64, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("\n", 256);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                               \n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("                                                                                                                                                                                                                                                               \n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                               ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(". The following paths could not be deleted (see suppressed exceptions for details): ", ". The following paths could not be deleted (see suppressed exceptions for details): ", "The Character must not be null");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("The Character must not be null");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((List<?>) null, ". The following paths could not be deleted (see suppressed exceptions for details): ", 8, 8);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate(". The following paths could not be deleted (see suppressed exceptions for details): ", "...", 8, 8);
      assertEquals("...ll...", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Threshold must n", (CharSequence) " ");
      assertEquals(9, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2952L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'S', (-298), 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -298
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("bk[Q6Q!6~Vj9t", 65536, "pp+oHCY|_#kSV>~T");
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.stripAccents(".UAs1A= 1#siD5u^V'");
      assertEquals(".UAs1A= 1#siD5u^V'", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(".UAs1A= 1#siD5u^V'", ".UAs1A= 1#siD5u^V'");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replacePattern("", "", "?Hea;|@dtVGPC@]fi:");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?Hea;|@dtVGPC@]fi:", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh_CN", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance(string2, string2, locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(52, int0);
      assertNotSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.rotate("P}I(@wVgs1+Gns1'oR0", 9990);
      assertEquals("@wVgs1+Gns1'oR0P}I(", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("kk`:'Gkm3Z0}Nv(G{I<", 99, 'j');
      assertFalse(string1.equals((Object)string0));
      assertEquals("jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjkk`:'Gkm3Z0}Nv(G{I<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("kk`:'Gkm3Z0}Nv(G{I<", 9992, (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("kk`:'Gkm3Z0}Nv(G{I<", 9990, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("^c5]b))", "DD ", 5);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^DD )", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("", 3491, "");
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, "4]|JAFK#");
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "n", 31);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '*';
      charArray0[2] = 'I';
      charArray0[3] = '0';
      charArray0[4] = 'k';
      charArray0[5] = 'h';
      charArray0[6] = 'R';
      charArray0[7] = '3';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "n", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'T', '*', 'I', '0', 'k', 'h', 'R', '3'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "n";
      objectArray0[1] = (Object) 'T';
      objectArray0[2] = (Object) '0';
      objectArray0[3] = (Object) '*';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "n", 31, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", 10);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isWhitespace("\n");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.difference("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.abbreviateMiddle("M2aO^nToF_&#iQ", "\n", 10);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("M2aO^\n&#iQ", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = 'z';
      charArray0[2] = 'e';
      charArray0[3] = 'o';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals("%zeo", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', 'z', 'e', 'o'}, charArray0);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(321);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(321, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(321, charBuffer1.capacity());
      assertEquals(321, charBuffer1.remaining());
      assertEquals(321, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertEquals(0, charBuffer0.position());
      assertEquals("%zeo", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(321, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(321, charBuffer1.capacity());
      assertEquals(321, charBuffer1.remaining());
      assertEquals(321, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer2.hasArray());
      assertEquals(4, charBuffer2.length());
      assertEquals(4, charBuffer2.limit());
      assertEquals(4, charBuffer2.capacity());
      assertEquals(4, charBuffer2.remaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertEquals("%zeo", charBuffer2.toString());
      assertFalse(charBuffer2.isDirect());
      assertSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'%', 'z', 'e', 'o'}, charArray0);
      assertNotNull(charBuffer2);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", 10, 10);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance(charBuffer1, "M2aO^\n&#iQ", locale0);
      assertFalse(int1 == int0);
      assertFalse(charBuffer1.equals((Object)charBuffer2));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(321, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(321, charBuffer1.capacity());
      assertEquals(321, charBuffer1.remaining());
      assertEquals(321, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, int1);
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      
      String string3 = StringUtils.abbreviate("", "yt", (-854), 800);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = 2;
      intArray0[1] = (-21);
      String string0 = StringUtils.join(intArray0, 'r', 2, 4);
      assertEquals("0r0", string0);
      assertEquals(20, intArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(intArray0, 'r');
      assertFalse(string1.equals((Object)string0));
      assertEquals("2r-21r0r0r0r0r0r0r0r0r0r0r0r0r0r0r0r0r0r0", string1);
      assertEquals(20, intArray0.length);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "0r0";
      boolean boolean0 = StringUtils.equalsAny("0r0", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String string0 = "a}t_RNJ7eeqN47<O)";
      String string1 = StringUtils.repeat("a}t_RNJ7eeqN47<O)", 2064);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[1] = '#';
      charArray0[2] = 'y';
      charArray0[3] = '[';
      charArray0[4] = ':';
      charArray0[5] = '\'';
      charArray0[6] = '\\';
      charArray0[7] = '9';
      charArray0[8] = '(';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat('@', 65536);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ExpectedException", "p");
      assertEquals("ectedExce", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("ectedExce");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("ectedExce", "ectedExce");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "ExpectedException";
      charSequenceArray0[1] = (CharSequence) "ectedExce";
      charSequenceArray0[2] = (CharSequence) "p";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "p";
      charSequenceArray0[5] = (CharSequence) "p";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "ectedExce";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = 'R';
      charArray0[2] = '}';
      charArray0[3] = ' ';
      charArray0[4] = '9';
      charArray0[5] = 'R';
      charArray0[6] = 'm';
      charArray0[7] = '4';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'3', 'R', '}', ' ', '9', 'R', 'm', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.remove("G[Vd7v`cltIJm", 'd');
      assertEquals("G[V7v`cltIJm", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("M/1DGwMtA", "-g)", 11, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("Threshold must not be negative", 1359);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) "\r", (CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(42);
      assertEquals(42, charBuffer0.capacity());
      assertEquals(42, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(42, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(42, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(42);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(42, charBuffer1.capacity());
      assertEquals(42, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(42, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(42, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(42, charBuffer0.capacity());
      assertEquals(42, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(42, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(42, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(42, charBuffer1.capacity());
      assertEquals(42, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(42, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(42, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertTrue(boolean0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.stripToNull("M%KNU-qm1nQiz1Z");
      assertEquals("M%KNU-qm1nQiz1Z", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "M%KNU-qm1nQiz1Z";
      charSequenceArray0[1] = (CharSequence) "M%KNU-qm1nQiz1Z";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      // Undeclared exception!
      StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2147483645);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.substring("^(y3ZFx=c", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^(y3ZFx=c", (CharSequence) "", 10);
      assertEquals(10, int0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.leftPad("\r", 13);
      assertEquals("            \r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("            \r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("            ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 13, 56);
      assertEquals(0, int0);
      
      String string2 = StringUtils.difference("            \r", "\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "/J9uELJ=AzzzzzzzzzzzzzzzzzzzzzzG9qzzzzzzzzzzzzzzzzzzzzzzzz";
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(52, 52);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(52, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "ExpectedException", 571, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(571) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[6] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[2] = 'W';
      charArray0[7] = 'W';
      String string0 = StringUtils.repeat('=', 1150);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Arguments cannot both be null";
      stringArray0[1] = "Arguments cannot both be null";
      stringArray0[3] = "Arguments cannot both be null";
      String string1 = StringUtils.replaceEach("Arguments cannot both be null", stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("Arguments cannot both be null"));
      assertNotNull(stack0);
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("Arguments cannot both be null"));
      assertNotNull(iterator0);
      
      boolean boolean1 = stack0.add((Object) "Arguments cannot both be null");
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Arguments cannot both be null]", stack0.toString());
      assertTrue(boolean1);
      assertTrue(stack0.contains("Arguments cannot both be null"));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'M');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank(charSequenceArray0[0], (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "AYO}@b0e";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[3], 64, 64);
      assertEquals(4, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      char[] charArray0 = new char[3];
      String string0 = StringUtils.leftPad(stringArray0[1], (int) '\u0000', '\u0000');
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace(string0);
      assertEquals(3, stringArray0.length);
      assertNull(string1);
      
      short[] shortArray0 = new short[24];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)1336;
      shortArray0[3] = (short) (-4711);
      shortArray0[4] = (short) (-436);
      shortArray0[5] = (short)20;
      shortArray0[6] = (short)2908;
      shortArray0[7] = (short)7;
      shortArray0[8] = (short) (-436);
      String string2 = StringUtils.join(shortArray0, '4', 16, 22);
      assertEquals("04040404040", string2);
      assertEquals(24, shortArray0.length);
      assertNotNull(string2);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Charset.forName(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals("\u0000", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("\u0000");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("\u0000");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\u0000", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("\u0000", "Strings must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("M%KNU-qm1nQiz1Zorg.apache.commons.lang3.RegExUtils", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("M%KNU-qm1nQiz1Zorg.apache.commons.lang3.RegExUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.abbreviate("`D8R[pLc_Q\"uE^3wJ-", 7, 1305);
      assertEquals("`D8R[pLc_Q\"uE^3wJ-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("`D8R[pLc_Q\"uE^3wJ-", 7, 7);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...c...", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("`D8R[pLc_Q\"uE^3wJ-", "`D8R[pLc_Q\"uE^3wJ-", 1305);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("`D8R[pLc_Q\"uE^3wJ-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("lyoACJn8;Y");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("g~l)<=8tEch]m");
      assertFalse(string1.equals((Object)string0));
      assertEquals("G~l)<=8tEch]m", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.center("G~l)<=8tEch]m", 65536, "");
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.left("z':p'LMYR=", (-505344271));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("z':p'LMYR=", "", 1172);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ' ', (-505344271), 607);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(locale0));
      assertNotNull(priorityQueue0);
      
      String string0 = "`lzc^i3ee";
      String string1 = StringUtils.lowerCase("`lzc^i3ee", locale0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("`lzc^i3ee", string1);
      assertNotNull(string1);
      
      StringWriter stringWriter0 = new StringWriter(1192);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      String string2 = StringUtils.wrapIfMissing("`lzc^i3ee", "`lzc^i3ee");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("`lzc^i3ee", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("`lzc^i3ee", 1192);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.strip(string3, "`lzc^i3ee");
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals("\u0000", string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("\u0000");
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\u0000", 3235, "K]EPr!5kYdJ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) "\u0000");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1617, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\u0000", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 's');
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("", 8192);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("=S.k5jzGohC`7");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=S.k5jzGohC`", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("DefaultLocale");
      assertFalse(string1.equals((Object)string0));
      assertEquals("DEFAULTLOCALE", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "DefaultLocale";
      charSequenceArray0[1] = (CharSequence) "DEFAULTLOCALE";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("CQf`?inE`K ( ", '9');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap("C", ')');
      assertEquals("C", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.chop("fpg6=30'f`BvUn|U");
      assertFalse(string1.equals((Object)string0));
      assertEquals("fpg6=30'f`BvUn|", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "fpg6=30'f`BvUn|U", 102);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 11;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'v', 11, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.repeat(",K ", 8192);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 1644);
      assertEquals(0, int0);
      
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.strip("");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("4?.<Gbc9rRK.8}C", 15, (-4711));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("4?.<Gbc9rRK.8}C", "<", "");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat(" zBuZ$KqchnXx*h6xS", 1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" zBuZ$KqchnXx*h6xS", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string0 = StringUtils.rightPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("e`lzc^i3ee");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("&#1D0zuh%", ".UAs1A= 1#siD5u^V'");
      assertEquals("&#1D0zuh%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("a[>o:U?@");
      assertFalse(string1.equals((Object)string0));
      assertEquals("a[>o:U?@", string1);
      assertNotNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(60);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=60 cap=60]", byteBuffer0.toString());
      assertEquals(60, byteBuffer0.limit());
      assertEquals(60, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(60, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=60 cap=60]", byteBuffer0.toString());
      assertEquals(60, byteBuffer0.limit());
      assertEquals(60, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(60, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(30, charBuffer0.length());
      assertEquals(30, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(30, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(30, charBuffer0.capacity());
      assertTrue(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=60 lim=60 cap=60]", byteBuffer0.toString());
      assertEquals(60, byteBuffer0.limit());
      assertEquals(60, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(60, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(60, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(60, charBuffer1.capacity());
      assertEquals(60, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(60, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer1, charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=60 lim=60 cap=60]", byteBuffer0.toString());
      assertEquals(60, byteBuffer0.limit());
      assertEquals(60, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals(60, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(60, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(60, charBuffer1.capacity());
      assertEquals(60, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(60, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(60, charBuffer2.length());
      assertEquals(60, charBuffer2.limit());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertEquals(60, charBuffer2.capacity());
      assertEquals(60, charBuffer2.remaining());
      assertTrue(charBuffer2.hasArray());
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      
      // Undeclared exception!
      try { 
        StringUtils.contains((CharSequence) charBuffer2, (-4338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("()VLU}J-'(=", "()VLU}J-'(=");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", "Locale must not be null", 1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.toLanguageTag();
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko-KR", string0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'o');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("ko-KR", "< Sz.E}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("ko-KR");
      assertFalse(boolean0);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 8192, '7');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, 'g');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Minimum abbreviation width is %d", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviateMiddle("h7a#%I", "=~)~ZjczARlV8uZ@nt", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h7a#%I", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'N';
      charArray0[2] = '=';
      charArray0[3] = 'N';
      charArray0[4] = 'm';
      charArray0[5] = '~';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'B', 'N', '=', 'N', 'm', '~'}, charArray0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "=~)~ZjczARlV8uZ@nt", charArray0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'B', 'N', '=', 'N', 'm', '~'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.leftPad("\r", 10);
      assertEquals("         \r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("         \r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("         ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.leftPad("\r", 3);
      assertEquals("  \r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("  \r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("  ", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("  \r", "  \r");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Search and Replace array lengths don't match: ");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.rightPad("{}", 4, "{}");
      assertEquals("{}{}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      String string1 = "\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.";
      String string2 = StringUtils.capitalize(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("{}", 896, ";kx8<'<%o#.P~T[>SAr");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#{};kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#.P~T[>SAr;kx8<'<%o#", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.defaultString("temp.dir", "9clfB<\";>4fL");
      assertEquals("temp.dir", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "temp.dir";
      String string1 = StringUtils.join((long[]) null, 'W');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[1], 6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfterLast((String) null, "temp.dir");
      assertNull(string2);
      
      String string3 = StringUtils.difference("9clfB<\";>4fL", "9clfB<\";>4fL");
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "e", 6, 110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", 'F');
      assertEquals("FMinimum abbreviation width with offset is %dF", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Minimum abbreviation width with offset is %d");
      assertEquals(44, int0);
      
      String string1 = StringUtils.getDigits("FMinimum abbreviation width with offset is %dF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("SWL;$K`nWV&bK4", 44);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("SWL;$K`nWV&bK4", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "SWL;$K`nWV&bK4", (CharSequence) "SWL;$K`nWV&bK4");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "FMinimum abbreviation width with offset is %dF", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.equalsAny("Minimum abbreviation width with offset is %d", (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.stripToEmpty(", Length: ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(", Length:", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfAny(", Length: ", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.stripToEmpty("-tw)");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("-tw)", string6);
      assertNotNull(string6);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "-tw)", (CharSequence) ", Length: ");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("H}9S", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '~';
      charArray0[8] = '~';
      String string0 = StringUtils.join(charArray0, '~', 3, 5);
      assertEquals("~~~", string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'7', '~', '~', '~', '~', '~', '~', '~', '~'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("Locale must not be null", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("locale must not be null", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '^', Integer.MIN_VALUE, (-4739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.substring("^(y3ZFx=c", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^(y3ZFx=c", (CharSequence) "", 10);
      assertEquals(10, int0);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'O');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "", "Object varargs must not be null");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", 'W');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string5 = StringUtils.join((double[]) null, '.', (-1), (-1));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[7];
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Locale must not be null"));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Object) "Locale must not be null");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("Locale must not be null"));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("Locale must not be null"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '|');
      assertTrue(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Locale must not be null", string1);
      assertFalse(arrayList0.contains('|'));
      assertTrue(arrayList0.contains("Locale must not be null"));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(iterator0, '|');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", string2);
      assertFalse(arrayList0.contains('|'));
      assertTrue(arrayList0.contains("Locale must not be null"));
      assertNotNull(string2);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator1 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator1);
      
      String string3 = StringUtils.join(iterator1, '|');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING|EXTENDED_FILTERING|IGNORE_EXTENDED_RANGES|MAP_EXTENDED_RANGES|REJECT_EXTENDED_RANGES", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{94z^OGzPC{Ql!)y5<F", "{94z^OGzPC{Ql!)y5<F");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("{94z^OGzPC{Ql!)y5<F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("{94z^OGzPC{Ql!)y5<F", (-1528));
      assertEquals("{94z^OGzPC{Ql!)y5<F", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("{94z^OGzPC{Ql!)y5<F", "{94z^OGzPC{Ql!)y5<F", (-1528));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeStart("{94z^OGzPC{Ql!)y5<F", "{94z^OGzPC{Ql!)y5<F");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(20, stringArray0.length);
      
      char char0 = 'g';
      int int1 = 3361;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2233.33F);
      floatArray0[1] = (float) 'g';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '*', 3361, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'M');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = priorityQueue0.add(locale_FilteringMode0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(locale_FilteringMode0));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "Search and Replace array lengths don't match: ");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int int0 = 57;
      int int1 = StringUtils.ordinalIndexOf(", ", ", ", 57);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.repeat(" vs ", 8192);
      assertNotNull(string0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      StringUtils.splitByCharacterType(string0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.left("Expected exception %s was not thrown.", Integer.MAX_VALUE);
      assertEquals("Expected exception %s was not thrown.", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = 'e';
      int int0 = StringUtils.indexOfAny((CharSequence) "Expected exception %s was not thrown.", charArray0);
      assertEquals(3, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'C', 'e'}, charArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Expected exception %s was not thrown.", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'C', 'e'}, charArray0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Expected exception %s was not thrown.", 3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isNumeric("Expected exception %s was not thrown.");
      assertFalse(boolean0);
      
      String string1 = "\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.";
      String string2 = StringUtils.substringAfter("Expected exception %s was not thrown.", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) "Expected exception %s was not thrown.";
      charSequenceArray0[2] = (CharSequence) "Expected exception %s was not thrown.";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Expected exception %s was not thrown.", charSequenceArray0[0]);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("Expected exception %s was not thrown.", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "Expected exception %s was not thrown.";
      charSequenceArray0[4] = (CharSequence) "Expected exception %s was not thrown.";
      charSequenceArray0[5] = (CharSequence) string1;
      charSequenceArray0[6] = (CharSequence) string1;
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.chop("Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("Expected exception %s was not thrown", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("Expected exception %s was not thrown."));
      assertNotNull(stack0);
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("Expected exception %s was not thrown."));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "ExceptionWasThrown");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("", string5);
      assertFalse(stack0.contains("Expected exception %s was not thrown."));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Charset.forName("Expected exception %s was not thrown.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Expected exception %s was not thrown.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("o1C*", "jUk/Bvit|jUk/Bvit|");
      assertEquals("o1C*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Expected exception %s was not thrown.", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o1C*", (CharSequence) "o1C*");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = "Failed to create default temp directory";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Failed to create default temp directory", 'r');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Object varargs must not be null";
      stringArray1[1] = "jUk/Bvit|jUk/Bvit|";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Expected exception %s was not thrown.", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("e must not be null", "e must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-5), '=');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.";
      String string2 = StringUtils.stripEnd(string1, "org");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'h');
      assertEquals("0", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "0", (CharSequence) "0");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("rlaL=44", 5, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("\n", 0, 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.upperCase("Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("tcHxE;Whh!c^,", 16, "Minimum abbreviation width is %d");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("tcHxE;Whh!c^,Min", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "OBJECT VARARGS MUST NOT BE NULL", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.remove("Locale must not be null", 's');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Locale mut not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('s', (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("o1C*", "jUk/Bvit|jUk/Bvit|");
      assertEquals("o1C*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Expected exception %s was not thrown.", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o1C*", (CharSequence) "o1C*");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("o1C*"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "jUk/Bvit|jUk/Bvit|");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("jUk/Bvit|jUk/Bvit|"));
      assertFalse(linkedList0.contains("o1C*"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean1 = linkedList0.remove((Object) locale_FilteringMode0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertTrue(linkedList0.contains("jUk/Bvit|jUk/Bvit|"));
      assertFalse(linkedList0.contains("o1C*"));
      
      String string1 = StringUtils.repeat("Expected exception %s was not thrown.", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "jUk/Bvit|jUk/Bvit|";
      boolean boolean2 = StringUtils.containsAny((CharSequence) " ", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 3361;
      floatArray0[4] = (float) '5';
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '5', 0, 1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0", string2);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), 3361.0F, 53.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(" ", 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("  ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize(" ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("w&aD/~V% j,v\"}or", " ", 5);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = 'c';
      charArray0[2] = '0';
      charArray0[3] = '|';
      charArray0[4] = '=';
      charArray0[5] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'=', 'c', '0', '|', '=', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("()VLU}J-'(=", "()VLU}J-'(=");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("junit");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", "junit", 1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", ", ", ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("@DefaultLocale can only be used with language tag if language, country, and variant are not set", ", ", 412);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("\n", "\n", "\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\n", (CharSequence) "Object varargs must not be null");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.repeat("\n", 127);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.normalizeSpace("o");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("o", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("\n"));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.replaceAll("", "a5=uaSsg_T/N=`b", "}RO");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.chomp("DefaultLocale");
      assertEquals("DefaultLocale", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("DefaultLocale");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("DefaultLocale");
      assertEquals(13, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "DefaultLocale", (CharSequence) "DefaultLocale", (-2691));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "DefaultLocale", (CharSequence) "DefaultLocale", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("DefaultLocale");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join(intArray0, 'u', 0, Integer.MIN_VALUE);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(13, intArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString((String) null);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substringBetween("#", "DefaultLocale");
      assertNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 2303);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) null, 1704, 105);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)76;
      String string5 = StringUtils.join(byteArray0, 'u', 96, 64);
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)98, (byte)124, (byte)76, (byte) (-40), (byte)84, (byte)76}, byteArray0);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 1644);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.strip("Comparator should not be null.");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Comparator should not be null.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((char[]) null, '{');
      assertNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Comparator should not be null.", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = 'O';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'{', '{', 'O'}, charArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("4?.<Gbc9rRK.8}C");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.join((char[]) null, 'R', (-633), (-270));
      assertNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("o1C*", "jUk/Bvit|jUk/Bvit|");
      assertEquals("o1C*", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Expected exception %s was not thrown.", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o1C*", (CharSequence) "o1C*");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = linkedList0.add(locale_FilteringMode0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedList0.offerLast(locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(linkedList0.contains(locale_FilteringMode1));
      
      boolean boolean2 = linkedList0.add(locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(linkedList0.contains(locale_FilteringMode1));
      
      boolean boolean3 = linkedList0.add(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertTrue(linkedList0.contains(locale_FilteringMode1));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Expected exception %s was not thrown.", (CharSequence) "Expected exception %s was not thrown.", 0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string1 = StringUtils.substringAfter("Expected exception %s was not thrown.", "Failed to create custom temp directory");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("o1C*", "zf{SlA8");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = "o1C*";
      String string1 = StringUtils.substringBeforeLast("o1C*", "jUk/Bvit|jUk/Bvit|");
      assertTrue(string1.equals((Object)string0));
      assertEquals("o1C*", string1);
      assertNotNull(string1);
      
      String string2 = "Expected exception %s was not thrown.";
      int int0 = StringUtils.compareIgnoreCase("Expected exception %s was not thrown.", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "o1C*", (CharSequence) "o1C*");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int2 = 3933;
      LinkedList<Locale.FilteringMode> linkedList1 = new LinkedList<Locale.FilteringMode>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = linkedList1.add(locale_FilteringMode0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedList1.offerLast(locale_FilteringMode1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(linkedList1.contains(locale_FilteringMode1));
      
      boolean boolean2 = linkedList0.add(locale_FilteringMode0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(linkedList0.contains(locale_FilteringMode1));
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      boolean boolean3 = linkedList1.add(locale_FilteringMode1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, linkedList1.size());
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(linkedList1.contains(locale_FilteringMode1));
      
      boolean boolean4 = linkedList1.add(locale_FilteringMode0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(4, linkedList1.size());
      assertTrue(boolean4);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertTrue(linkedList1.contains(locale_FilteringMode1));
      
      // Undeclared exception!
      try { 
        linkedList0.addAll(3933, (Collection<? extends Locale.FilteringMode>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3933, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String string0 = "\\)070";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ")070", (CharSequence) ")070", 1644);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(")070");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = 65536;
      // Undeclared exception!
      StringUtils.repeat("org.junitpioneer.jupiter.DefaultLocaleExtension", "...", 65536);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The Array must not be nullThe Array must not be null");
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'd';
      charArray0[2] = '7';
      int int1 = StringUtils.ordinalIndexOf("offset cannot be negative", "Mn<PLh?2_", 24);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("offset cannot be negative", 4033);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(22, stringArray0.length);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.split(string1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) " in an array of ", " in an array of ");
      assertEquals(0, int0);
      
      // Undeclared exception!
      StringUtils.repeat(" in an array of ", 65536);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",N8M%x;XJ";
      stringArray0[1] = ",N8M%x;XJ";
      stringArray0[2] = ",N8M%x;XJ";
      stringArray0[3] = ",N8M%x;XJ";
      stringArray0[4] = ",N8M%x;XJ";
      String string0 = StringUtils.replaceEach(",N8M%x;XJ", stringArray0, stringArray0);
      assertEquals(",N8M%x;XJ", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ",N8M%x;XJ", (CharSequence) ",N8M%x;XJ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace(",N8M%x;XJ", "Minimum abbreviation width is %d", ",N8M%x;XJ", 48);
      assertTrue(string1.equals((Object)string0));
      assertEquals(",N8M%x;XJ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ",N8M%x;XJ", (CharSequence) ",N8M%x;XJ");
      assertEquals((-1), int0);
      
      String string2 = "4n6~U[8,]#S#mP ";
      String[] stringArray1 = StringUtils.substringsBetween(",N8M%x;XJ", "Minimum abbreviation width is %d", "4n6~U[8,]#S#mP ");
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)11;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("D}faultTim^Zonre4e*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // D}faultTim^Zonre4e*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " is not inthe ange '0'  9'", " ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " is not inthe ange '0'  9'";
      stringArray0[1] = " ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(" ", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(" is not inthe ange '0'  9'"));
      assertNotNull(priorityQueue0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(" is not inthe ange '0'  9'"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string1);
      assertFalse(priorityQueue0.contains(" is not inthe ange '0'  9'"));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.strip("t] >LD?nQ1{M|0|xq");
      assertEquals("t] >LD?nQ1{M|0|xq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("]v~=~1%$h7{H(.zH");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]v~=~1%$h7{H(.zH", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("|5ToE{Z1w1Q3", "sd0\"FnBs/");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|5ToE{Z1w1Q3", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("@Y@&Pvgvs/A6Xrj/", 'b');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("b@Y@&Pvgvs/A6Xrj/b", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "sd0\"FnBs/";
      stringArray0[1] = "|5ToE{Z1w1Q3";
      stringArray0[2] = "]v~=~1%$h7{H(.zH";
      stringArray0[3] = "sd0\"FnBs/";
      stringArray0[4] = "offset cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "]v~=~1%$h7{H(.zH");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = "Minimum abbreviation width is %d";
      String string5 = StringUtils.strip("@Y@&Pvgvs/A6Xrj/", "@Y@&Pvgvs/A6Xrj/");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("]v~=~1%$h7{H(.zH", (int) (short)2535, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '2', 1605, 1605);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.join((short[]) null, 'B', (-289), (-289));
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {13}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)21;
      String string2 = "A;$/P";
      // Undeclared exception!
      try { 
        Charset.forName("A;$/P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // A;$/P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "r");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("Expected exception %s was not thrown.", '\"', '\"');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('\"', 100);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Expected exception %s was not thrown.";
      charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"";
      charSequenceArray0[2] = (CharSequence) "Index: ";
      charSequenceArray0[4] = (CharSequence) "Index: ";
      charSequenceArray0[5] = (CharSequence) "r";
      boolean boolean0 = StringUtils.isNumeric("r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("r", "r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceChars("ha1E", "g", "-T(z_Sw+oit1ry^5");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ha1E", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", '<');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("<@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.<", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("Index: ", 7);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Index: ", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Expected exception %s was not thrown.";
      stringArray0[1] = "DefaultLocale7~?2SO>]q79(Re";
      stringArray0[2] = "ha1E";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "]5|Y,oLStEP2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("b");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("b");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.ordinalIndexOf("b", "b", 5092);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("Threshold must not be negative", 5092);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("b", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.splitPreserveAllTokens(string1, 'm');
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string0 = StringUtils.normalizeSpace("=~)~ZjczARlV8uZ@nt");
      assertEquals("=~)~ZjczARlV8uZ@nt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("uo{QGNT", "uo{QGNT");
      assertFalse(string1.equals((Object)string0));
      assertEquals("uo{QGNT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 65536, "=~)~ZjczARlV8uZ@nt");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "=~)~ZjczARlV8uZ@nt";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "=~)~ZjczARlV8uZ@nt";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      // Undeclared exception!
      StringUtils.center("=~)~ZjczARlV8uZ@nt", 65536);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad(" vs ", 65536, 'O');
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("IQ6wzzOj)1b`LB");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'O';
      charArray0[2] = 'E';
      charArray0[3] = '<';
      charArray0[4] = 'e';
      charArray0[5] = '|';
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'E', Integer.MIN_VALUE, (-1763));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.rightPad("K?:(p{l", 4045);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'L';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(""));
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean1 = stack0.add((Object) locale_FilteringMode0);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[MAP_EXTENDED_RANGES]", stack0.toString());
      assertTrue(boolean1);
      assertFalse(stack0.contains(""));
      
      boolean boolean2 = stack0.add((Object) "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("[MAP_EXTENDED_RANGES, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean2);
      assertTrue(stack0.contains(""));
      
      String string1 = StringUtils.chomp("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 342);
      assertEquals("-KUtX)Ij+'w7[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("'w7[-KUtX)Ij+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "~G&%N2VxN");
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("IJ+'W7[-KUTX)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("IJ+'W7[-KUTX)", ";#5lus.8sWNjB");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("IJ+'W7[-KUTX)", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("IJ+'W7[-KUTX)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToEmpty("'w7[-KUtX)Ij+");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("'w7[-KUtX)Ij+", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("QB7eqvOw", "QB7eqvOw");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("ExpectedExcep", ";#5lus.8sWNjB");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(";#5lus.8sWNjB", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("(", 1, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("(", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.equals((CharSequence) ". The following paths could not be deleted (see suppressed exceptions for details): ", (CharSequence) "IJ+'W7[-KUTX)");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", "^#y3ZFxqc");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("^(y3ZFx=c", 10, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^(y3ZFx=c", (CharSequence) "", 10);
      assertEquals(10, int0);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Search and Replace array lengths don't match: ", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("^(y3ZFx=c", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", "^(y3ZFx=c");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Object varargs must not be null");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertNotNull(charSequence0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = '_';
      charArray0[4] = 'L';
      String string3 = StringUtils.join(charArray0, 'j');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-j3j5j_jL", string3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'-', '3', '5', '_', 'L'}, charArray0);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "-j3j5j_jL", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("Object varargs must not be null"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '?';
      String string0 = StringUtils.join(intArray0, '_');
      assertEquals("63_0_0_0_0_0", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {63, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ">gcd3.", (CharSequence) ">gcd3.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.substring("63_0_0_0_0_0", 59, (-3682));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string2 = StringUtils.stripStart("Object varargs must not be null", "fabLx}T&");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) ">gcd3.", 15);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(20, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.chomp("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "`1lD/9<h^X`1lD/9<h^X");
      assertEquals((-20), int0);
      
      String string2 = StringUtils.defaultString((String) null);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "(@1vk[~7lUN.&zSvKQ;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.right("(@1vk[~7lUN.&zSvKQ;", (-20));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("a", 1, 1);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(0, charBufferArray0.length);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      char char0 = '/';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '/', (-3941), 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3941
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.wrap("org.apache.commons.lang3.StringUtils", '\'');
      assertEquals("'org.apache.commons.lang3.StringUtils'", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "'org.apache.commons.lang3.StringUtils'", (CharSequence) "org.apache.commons.lang3.StringUtils", (-2696));
      assertEquals(1, int0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = '\'';
      charArray0[2] = '%';
      charArray0[3] = '\'';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[7];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(7, charBufferArray0.length);
      assertNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("{`h$L3Zz~7", "{`h$L3Zz~7", "{`h$L3Zz~7");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[1] = 'U';
      charArray0[3] = 'n';
      String string0 = StringUtils.join(charArray0, 'h');
      assertEquals("whUh\u0000hn", string0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'w', 'U', '\u0000', 'n'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "whUh\u0000hn", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'n';
      charArray1[1] = 'U';
      charArray1[2] = 'h';
      charArray1[3] = 'h';
      charArray1[4] = 'w';
      charArray1[5] = 'b';
      charArray1[6] = 'b';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      assertNotSame(charArray1, charArray0);
      assertEquals(7, charArray1.length);
      assertArrayEquals(new char[] {'n', 'U', 'h', 'h', 'w', 'b', 'b'}, charArray1);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "{`h$L3Zz~7", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = "\\u";
      String string3 = StringUtils.substring("whUh\u0000hn", (-1), 251);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring(string2, 0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\\u", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Z0xj", "Z0xj");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("Z0xj");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale1.getDisplayName();
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("Chinese", string0);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("\u53F0\u6E7E\u5730\u533A", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.stripAccents("\u53F0\u6E7E\u5730\u533A");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("\u53F0\u6E7E\u5730\u533A", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("\r", "<*+", "\u53F0\u6E7E\u5730\u533A");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\r", "\r", "\r");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string1 = StringUtils.leftPad("\r", 49, '&');
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r", (-119));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&\r&&&&&&&&&&&&&&&&&&&&&", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("&&&&&&&&&&&&&&&&&&&&&&&&&&&\r&&&&&&&&&&&&&&&&&&&&&");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&\r&&&&&&&&&&&&&&&&&&&&", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("F2xB3>;qm4W0bE'G", 2535);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("F2xB3>;qm4W0bE'G", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("q.MF[pO$e<|uO_+-]p", 49, (-119));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[2], (CharSequence) "&&&&&&&&&&&&&&&&&&&&&&&&&&&\r&&&&&&&&&&&&&&&&&&&&&");
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("vX+MP3wn ,fw-XbSearch and Replace aray lengths don't match: vX+MP3wn ,fw-XbSearch and Replace aray lengths don't match: ");
      assertEquals("vX+MP3wn ,fw-XbSearch and Replace aray lengths don't match: vX+MP3wn ,fw-XbSearch and Replace aray lengths don't match:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'd';
      charArray0[5] = '7';
      int int1 = StringUtils.ordinalIndexOf("offset cannot be negative", "Mn<PLh?2_", 24);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("#", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'o');
      assertEquals("org.apache.commons.lang3.StringUtilso", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad("Arguments cannot both be null", 43, "vEMU0K+0nz[ 4P");
      assertFalse(string1.equals((Object)string0));
      assertEquals("vEMU0K+0nz[ 4PArguments cannot both be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("zTGX}k[$");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("t{4cWn|2R");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.rightPad("", 2150, "g~l)<=8tEch]m");
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "g~l)<=8tEch]m", (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.capitalize("zTGX}k[$");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZTGX}k[$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 4, "{}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}{}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-13);
      char char0 = '9';
      String string0 = StringUtils.join(byteArray0, '9', (int) (byte)98, (-1458));
      assertEquals("", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)98, (byte)0, (byte)0, (byte) (-13)}, byteArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (int) (byte)0);
      assertEquals(0, int0);
      
      String string1 = "The character must not be null";
      // Undeclared exception!
      try { 
        StringUtils.truncate("The character must not be null", 61, (-837));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 342);
      assertEquals("-KUtX)Ij+'w7[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("'w7[-KUtX)Ij+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = "~G&%N2VxN";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3120;
      short short0 = (short) (-203);
      shortArray0[1] = (short) (-203);
      shortArray0[2] = (short) (-1760);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, ',', 2531, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceFirst("\r", "\r", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\r", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(""));
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add((Object) "");
      assertFalse(boolean1 == boolean0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean1);
      assertTrue(stack0.contains(""));
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.leftPad("", 65536, "");
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "`1lD/9<h^X`1lD/9<h^X");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceEach("`1lD/9<h^X`1lD/9<h^X", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`1lD/9<h^X`1lD/9<h^X", string1);
      assertEquals(20, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(20, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = stringArray0[0];
      String string0 = StringUtils.rotate(stringArray0[1], (-415));
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      String string1 = "2";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("2"));
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = linkedList0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertNotSame(object1, object0);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains(object1));
      
      boolean boolean1 = linkedList0.add(object0);
      assertFalse(object0.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertNotSame(object0, object1);
      assertFalse(linkedList0.contains((-415)));
      assertTrue(linkedList0.contains(object0));
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      boolean boolean2 = linkedList0.remove(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(linkedList0.contains(object2));
      assertTrue(linkedList0.contains(object0));
      
      String string2 = StringUtils.substringBetween((String) null, (String) null, "2");
      assertNull(string2);
      
      String string3 = StringUtils.center("2", 18);
      assertFalse(string3.equals((Object)string1));
      assertEquals("        2         ", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "        2         ", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 3388;
      floatArray0[1] = (float) '5';
      floatArray0[2] = (float) 18;
      floatArray0[3] = (float) 3388;
      floatArray0[4] = (float) '5';
      floatArray0[5] = (float) (-415);
      floatArray0[6] = (float) 2;
      floatArray0[7] = (float) (-1);
      floatArray0[8] = (float) '5';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '{', 7, 1269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Threshold must not be negativeThreshold must not be negative", "maxWith canUot be negative");
      assertEquals("Threshold must not be negativeThreshold must not be negative", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '1';
      floatArray0[1] = (float) 'I';
      floatArray0[2] = (float) '1';
      floatArray0[3] = (float) '1';
      floatArray0[4] = (float) 'I';
      floatArray0[5] = (float) 'I';
      floatArray0[6] = (float) 'I';
      floatArray0[7] = (float) 'I';
      String string1 = StringUtils.join(floatArray0, 'd');
      assertFalse(string1.equals((Object)string0));
      assertEquals("49.0d73.0d49.0d49.0d73.0d73.0d73.0d73.0", string1);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {49.0F, 73.0F, 49.0F, 49.0F, 73.0F, 73.0F, 73.0F, 73.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "Threshold must not be negativeThreshold must not be negative", 0);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("Threshold must not be negativeThreshold must not be negative", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeFirst("ive", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ive", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "ive", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      String string3 = StringUtils.truncate((String) null, 0);
      assertNull(string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "Object varargs must not be null");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("Object varargs must not be null", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "maxWith canUot be negative");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", (-1), Integer.MIN_VALUE);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", ',');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(":(p{X7l", 4045);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("\r", "q>Oa@");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\r", 4045);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("%47D;c<']?>@^#sE;D");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string1));
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) stack0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(stack0.contains(string1));
      assertFalse(list0.contains(string1));
      assertNotNull(list0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale0, locale1);
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      
      int int1 = StringUtils.indexOf((CharSequence) string2, (CharSequence) "%47D;c<']?>@^#sE;D");
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "M%KNU-qm1nQiz1Z", 122);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("M%KNU-qm1nQiz1Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("%47D;c<']?>@^#sE;D");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((short[]) null, '/');
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("%47D;c<']?>@^#sE;D");
      assertFalse(string2.equals((Object)string1));
      assertEquals("D;Es#^@>?]'<c;D74%", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1514, 771);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[7];
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<Locale.FilteringMode> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "D;Es#^@>?]'<c;D74%";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-1), 771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'd');
      assertEquals("0", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'd', 110, (-192));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("0");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "0", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "`");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      int int0 = StringUtils.compare(", '", ", '");
      assertEquals(0, int0);
      
      String string0 = "\\]=`]";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("]=`]", "]=`]", "?$jX)_tP9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string0 = StringUtils.normalizeSpace("j(Gl'");
      assertEquals("j(Gl'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "i8", 1729, 1729);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "org", (-2248), (-1496));
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org", (-1496), (-2248));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("org", "org");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("org", "org", (-2248));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "org";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("h=81yDHe)iqP-Hm", (String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'x';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-606), (-606));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      String[] stringArray0 = StringUtils.splitByCharacterType("Can only resolve parameter of type ");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("Failed to create custom temp directory", "org.apache.commons.lang3.StringUtils", "DefaultTimeZone", 707);
      assertEquals("Failed to create custom temp directory", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("9aAJ]E", "Failed to create custom temp directory", (-3037));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("DefaultTimeZone", 6);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZone", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(13, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("3^jO3+k<(n}$q", 'q');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', 97, 0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PS)mUW3EE", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "PS)mUW3EE");
      assertEquals(10, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("PS)mUW3EE", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      SortedSet<CharBuffer> sortedSet0 = treeSet0.headSet(charBuffer0);
      assertEquals(10, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("PS)mUW3EE", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(sortedSet0.isEmpty());
      assertEquals(0, sortedSet0.size());
      assertFalse(treeSet0.contains(charBuffer0));
      assertFalse(sortedSet0.contains(charBuffer0));
      assertNotNull(sortedSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("PS)mUW3EE");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("PS)MUW3EE", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "PS)MUW3EE";
      charSequenceArray0[1] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "PS)MUW3EE";
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.remove("maxWith cannot be negative", 'Y');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", 97, 97);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "PS)MUW3EE";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) "PS)mUW3EE";
      charSequenceArray1[3] = (CharSequence) "";
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, charSequenceArray0[0], charSequenceArray1);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(4, charSequenceArray1.length);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'd';
      charArray0[2] = '7';
      int int1 = StringUtils.ordinalIndexOf("offset cannot be negative", "Mn<PLh?2_", 24);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("o", 4033);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, 'P');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '%');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 111);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 21);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", "");
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("j$*p\"py", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("j$*p\"py", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.substring((String) null, (-276), 111);
      assertNull(string5);
      
      String string6 = StringUtils.join((Iterator<?>) null, 'H');
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isAllLowerCase("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.indexOf((CharSequence) "j$*p\"py", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("j$*p\"py", (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1911));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.substringBetween("\r", "pbifvo5");
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "pbifvo5", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.substringBetween("9", "9");
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "9", (CharSequence) null);
      assertEquals("9", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "9";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("Threshold must not be negative(0.0a0.0a0.0a0.0a0.0a0.0JCD:1uLD27e");
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("Threshold must not be negative(0.0a0.0a0.0a0.0a0.0a0.0JCD:1uLD27e", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Threshold must not be negative(0.0a0.0a0.0a0.0a0.0a0.0JCD:1uLD27e", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " is not in the ange '0'  9'", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'S';
      charArray0[1] = 'R';
      charArray0[2] = 'C';
      charArray0[3] = '|';
      charArray0[4] = '.';
      charArray0[5] = '-';
      charArray0[6] = 'H';
      charArray0[7] = 'O';
      String string0 = StringUtils.join(charArray0, 'O');
      assertEquals("SOROCO|O.O-OHOO", string0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'S', 'R', 'C', '|', '.', '-', 'H', 'O'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "SOROCO|O.O-OHOO", (CharSequence) "SOROCO|O.O-OHOO");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "SOROCO|O.O-OHOO", charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'S', 'R', 'C', '|', '.', '-', 'H', 'O'}, charArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("SOROCO|O.O-OHOO");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "SOROCO|O.O-OHOO", (CharSequence) "SOROCO|O.O-OHOO", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 1644);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("Comparator should not be null.");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Comparator should not be null.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("4?.<Gbc9rRK.8}C", 15, (-4754));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("4?.<Gbc9rRK.8}C", "<", "");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Y2;x6O/%w|IjUHf+A", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.substringAfterLast("Comparator should not be null.", "p{InComb");
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((short[]) null, '[');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtension";
      charSequenceArray0[1] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", charSequence0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", (String) null, "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.difference("r", "fpv]-KeQ|R6");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("fpv]-KeQ|R6", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("g~l)<=8tch]m");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("G~l)<=8tch]m", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "g~l)<=8tch]m");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.defaultString("temp.dir", "9clfB<\";>4fL");
      assertEquals("temp.dir", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "temp.dir";
      String string1 = StringUtils.truncate("temp.dir", 4, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".dir", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ".dir";
      String string2 = StringUtils.uncapitalize("Failed to delete temp directory ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("failed to delete temp directory ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "failed to delete temp directory ";
      String string3 = StringUtils.wrapIfMissing("9clfB<\";>4fL", '/');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/9clfB<\";>4fL/", string3);
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "/9clfB<\";>4fL/";
      String string4 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "offset cannot be negativeoffset cannot be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string5 = StringUtils.rightPad((String) null, 4, '8');
      assertNull(string5);
      
      charSequenceArray0[5] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("temp.dir", charSequence0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("temp.dir");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(")070");
      assertEquals(")070", string0);
      assertNotNull(string0);
      
      String string1 = "9clfB<\";>4fL";
      String string2 = StringUtils.defaultString("rIndex: ", ">KwKcmz\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rIndex: ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate(")070", 4, 4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 4;
      longArray0[1] = (long) 'Q';
      longArray0[2] = (long) 'Q';
      String string4 = StringUtils.join(longArray0, '6');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("4681681", string4);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {4L, 81L, 81L}, longArray0);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9clfB<\";>4fL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ")070", 4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(")070", (-2272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.chop(")m/Zo`gShv=TuKKs");
      assertEquals(")m/Zo`gShv=TuKK", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(")m/Zo`gShv=TuKKs");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(")m/Zo`gShv=TuKK", '/');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("<_#>QaViTc<Mj<[4kP");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(14, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.removeIgnoreCase("<_#>QaViTc<Mj<[4kP", "F|bNpa__");
      assertFalse(string1.equals((Object)string0));
      assertEquals("<_#>QaViTc<Mj<[4kP", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing(" W8L", 'R');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("R W8LR", string2);
      assertNotNull(string2);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1, "x9D$OJ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip(" W8L", ")m/Zo`gShv=TuKKs");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" W8L", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", (-1), 2001);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'b';
      charArray0[2] = 'R';
      charArray0[3] = '/';
      charArray0[4] = 'R';
      charArray0[5] = 'b';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "$9AV!p,", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'R', 'b', 'R', '/', 'R', 'b'}, charArray0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "F|bNpa__", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.normalizeSpace("$9AV!p,");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("$9AV!p,", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-964));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("^(y3ZFx=c", 10, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("Object varargs must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^(y3ZFx=c", (CharSequence) "", 10);
      assertEquals(10, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Objectvarargsmustnotbenull");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceIgnoreCase("(YDPq{Vj", "=et$Oa?5q0", "Object varargs must not be null", 13);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("(YDPq{Vj", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("Object varargs must not be null", "", 13);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.repeat("XJx(wpL", 9);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("XJx(wpLXJx(wpLXJx(wpLXJx(wpLXJx(wpLXJx(wpLXJx(wpLXJx(wpLXJx(wpL", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.valueOf((char[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.normalizeSpace("NI_V#gQQ6");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("NI_V#gQQ6", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.deleteWhitespace("Failed to delete temp directory ");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Failedtodeletetempdirectory", string7);
      assertNotNull(string7);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "XJx(wpL", (char[]) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) "(YDPq{Vj", 80);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Minmum abbreviation widthwith offset is %d", 274);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize("b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("b");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate("b", (-1658));
      assertTrue(string1.equals((Object)string0));
      assertEquals("b", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Strings must not be null", 'W');
      assertEquals(0, int0);
      
      String string2 = StringUtils.uncapitalize("Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("strings must not be null", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "strings must not be null", (CharSequence) "strings must not be null", 1694);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.split("Minmum abbreviation widthwith offset is %d", "b");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-37);
      longArray0[1] = (long) 1694;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'W';
      longArray0[5] = (long) 11;
      longArray0[6] = (long) 11;
      longArray0[7] = (long) 11;
      String string3 = StringUtils.join(longArray0, 'l', 2962, (-4655));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertEquals(8, longArray0.length);
      assertArrayEquals(new long[] {(-37L), 1694L, 0L, 87L, 0L, 11L, 11L, 11L}, longArray0);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("R8QLm()o0V1@rPf*f/B[Mc", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("The String must not be empty", 0, "The String must not be empty");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("9H", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String must not be empty", (CharSequence) "9H", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceChars(" in an array of ", '_', '_');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" in an array of ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\r\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("\r\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.removeStart(", Length: 0", ", Length: 0");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 32);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", (-1), '*');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '*');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '';
      charArray0[7] = '*';
      String string2 = StringUtils.join(charArray0, '*', 42, (-1448));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '', '*'}, charArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Zj", "Zj");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("Zj");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("DefaultTimeZone", (-1528), "");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("DefaultTimeZone", "DefaultTimeZone", (-1528));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1528);
      String string1 = StringUtils.join(longArray0, 'Q');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1528", string1);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1528L)}, longArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("DefaultTimeZone");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "DefaultTimeZone", (-1528));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.truncate("-1528", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("+(_Aaq&Y49m^& &`M", 3, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("+(_Aaq&Y49m^& &`M", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("B!K@NJG#B=H'I]S$a", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.chomp("Gj&p{`^K=|lfysR7");
      assertEquals("Gj&p{`^K=|lfysR7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Gj&p{`^K=|lfysR7", (CharSequence) "Gj&p{`^K=|lfysR7");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("Gj&p{`^K=|lfysR7");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty("Gj&p{`^K=|lfysR7");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Gj&p{`^K=|lfysR7", (CharSequence) "Gj&p{`^K=|lfysR7", Integer.MAX_VALUE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      String string0 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, (String[]) null);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("P{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equalsAny("p{InCombiningDiacriticalMarks}+", stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Locale locale0 = Locale.forLanguageTag("A#2@JC\"Yh5,sS0q9o");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("und", string0);
      assertNotNull(string0);
      
      String string1 = locale0.getDisplayVariant();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", string1);
      assertNotNull(string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      char char0 = 'v';
      String string2 = locale1.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("und", string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string2);
      
      String string3 = locale0.getExtension('N');
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertSame(locale0, locale1);
      assertNull(string3);
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("A#2@JC\"Yh5,sS0q9o", "A#2@JC\"Yh5,sS0q9o", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String string0 = StringUtils.rightPad("offset cannot be negative", 32);
      assertEquals("offset cannot be negative       ", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("offset cannot be negative       ", "offset cannot be negative", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Ha=^*-Y$D=F5", "Ha=^*-Y$D=F5");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("Ha=^*-Y$D=F5", 'n');
      assertFalse(string1.equals((Object)string0));
      assertEquals("nHa=^*-Y$D=F5n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("Ha=^*-Y$D=F5");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Ha=^*-Y$D=F5", (CharSequence) "Ha=^*-Y$D=F5");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substring("The Character must not be null", 770);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-", 770, 770);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("-", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      Locale locale0 = new Locale("The Character must not be null", "", "");
      assertEquals("", locale0.getISO3Country());
      assertEquals("the character must not be null", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("the character must not be null", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("the character must not be null", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("the character must not be null", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((byte[]) null, 'P');
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.split("8-9K`B>qQ4", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.reverse("A");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("A", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("LaunchTime", "^02Sm%)I28");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("kKIA+A`T(Q", (-1528), "r^iR3");
      assertEquals("kKIA+A`T(Q", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("kKIA+A`T(Q", "lye~", "z{3,");
      assertNull(stringArray2);
      
      String string1 = StringUtils.mid("r^iR3", 19, 19);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("L");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int1 = StringUtils.indexOf((CharSequence) "^02Sm%)I28", 19);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.stripStart("\n", "-W:`");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray1, "-W:`", 32, 116);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("BS-W:`BT-W:`BV-W:`BW-W:`BY-W:`BZ-W:`CA-W:`CC-W:`CD-W:`CF-W:`CG-W:`CH-W:`CI-W:`CK-W:`CL-W:`CM-W:`CN-W:`CO-W:`CR-W:`CU-W:`CV-W:`CW-W:`CX-W:`CY-W:`CZ-W:`DE-W:`DJ-W:`DK-W:`DM-W:`DO-W:`DZ-W:`EC-W:`EE-W:`EG-W:`EH-W:`ER-W:`ES-W:`ET-W:`FI-W:`FJ-W:`FK-W:`FM-W:`FO-W:`FR-W:`GA-W:`GB-W:`GD-W:`GE-W:`GF-W:`GG-W:`GH-W:`GI-W:`GL-W:`GM-W:`GN-W:`GP-W:`GQ-W:`GR-W:`GS-W:`GT-W:`GU-W:`GW-W:`GY-W:`HK-W:`HM-W:`HN-W:`HR-W:`HT-W:`HU-W:`ID-W:`IE-W:`IL-W:`IM-W:`IN-W:`IO-W:`IQ-W:`IR-W:`IS-W:`IT-W:`JE-W:`JM-W:`JO-W:`JP-W:`KE", string3);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray3);
      assertEquals(250, stringArray1.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.abbreviate("&G\"zR-svHS]D~%", 1299, 11);
      assertEquals("...svHS]D~%", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "...svHS]D~%", (CharSequence) "G_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '?');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeIgnoreCase("$9AV!p,", "$9AV!p,");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'b');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "");
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)21;
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Minimum abbreviation width is %d", (int) (short)2270, (int) (short)21);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...iation width is %d", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'?'}, charArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.normalizeSpace("gk6");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("gk6", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("]");
      assertEquals("]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("@DefaultLocale can only be $sed with language tag if language, country, and variant are not set", 51, 51);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...ag if language, country, and variant are not set", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("", 'N');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("", 15);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("4?.<Gbc9rRK.8}C", (-898), 3467);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("4?.<Gbc9rRK.8}C", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("I", "HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBo", "");
      assertNull(string5);
      
      String string6 = StringUtils.normalizeSpace("HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBo");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBo", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("Arguments cannot both be null", "", (-3413));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[1], (CharSequence) null);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase("`1lD/9<h^X`1lD/9<h^X", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`1lD/9<h^X`1lD/9<h^X", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(111);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(111, charBuffer0.capacity());
      assertEquals(111, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(111, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(111, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.lastIndexOfAny(charBuffer0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(111, charBuffer0.capacity());
      assertEquals(111, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(111, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(111, charBuffer0.limit());
      assertEquals((-1), int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      
      String string2 = StringUtils.chop(".]U");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".]", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(".]", "{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "`1lD/9<h^X`1lD/9<h^X", (-98));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.overlay("", "0i?GU#3JA6", (-98), 108);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("0i?GU#3JA6", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "0i?GU#3JA6", (CharSequence) "`1lD/9<h^X`1lD/9<h^X");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.stripAccents("offset cannot be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center((String) null, (-1), "0i?GU#3JA6");
      assertNull(string5);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("offset cannot be negative");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(7, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.uncapitalize("`1lD/9<h^X`1lD/9<h^X");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("`1lD/9<h^X`1lD/9<h^X", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", 'q');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("*=o^vZ'P{u&cYTG");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("*=o^vZ'P{u&cYTG", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.leftPad("S7s
      assertEquals(".]U>\"1S7s", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("S7s", "'WW2D-5:U", 116);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = '.';
      charArray0[2] = 'd';
      charArray0[3] = 'W';
      charArray0[4] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".]U>\"1S7s", charArray0);
      assertTrue(boolean0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'M', '.', 'd', 'W', 't'}, charArray0);
      
      String string1 = StringUtils.trimToEmpty("S7s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("S7s", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = StringUtils.getDigits("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), (-308));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("offset cannot be negative", "", "\n");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("F", "F", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-928), 0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("\n", (String) null);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace("F");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("F", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1GZ`ac+:JHJAg4", 'B');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.center("/-N", (-928));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("/-N", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2803);
      intArray0[1] = 13;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4546.8);
      doubleArray0[3] = (double) (-2803);
      String string0 = StringUtils.join(doubleArray0, '?');
      assertEquals("-4546.8?0.0?0.0?-2803.0", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-4546.8), 0.0, 0.0, (-2803.0)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2'[c/", '\u008D');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.center((String) null, (-2803));
      assertNull(string1);
      
      String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "2'[c/");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("<HG|iP7", "p{InCombiningDiacriticalMarks}+", 16, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'M';
      String string3 = StringUtils.stripAccents("p{InCombiningDiacriticalMarks}+");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "<HG|iP7", (CharSequence) "p{InCombiningDiacriticalMarks}+", 3062);
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "Strings must not be null", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.remove((Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(31, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(31, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(31, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(31, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = stack0.add(charBuffer0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals("p{InCombiningDiacriticalMarks}+", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(31, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(31, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(31, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(31, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(boolean2);
      assertTrue(stack0.contains(charBuffer0));
      
      String string4 = StringUtils.join((List<?>) stack0, 'g', 307, 64);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[p{InCombiningDiacriticalMarks}+]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals("", string4);
      assertTrue(stack0.contains(charBuffer0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-0.5314845F);
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(73, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(73, charBuffer0.length());
      assertEquals(73, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(73, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(charBuffer0));
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList1.add(charBuffer0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(73, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(73, charBuffer0.length());
      assertEquals(73, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(73, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(charBuffer0));
      
      ArrayList<Locale.FilteringMode> arrayList2 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) charBuffer0, (char[]) null);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(73, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(73, charBuffer0.length());
      assertEquals(73, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(73, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.lastIndexOf(charSequenceArray0[3], (-2378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-964));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'G');
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("n7p.eykp|dxzY,5*ydg", 4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("n7p.", string4);
      assertNotNull(string4);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(locale_FilteringMode0));
      assertNotNull(arrayList1);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = arrayList1.add(locale_FilteringMode1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(arrayList1.contains(locale_FilteringMode1));
      assertFalse(arrayList1.contains(locale_FilteringMode0));
      
      String string5 = StringUtils.replaceIgnoreCase("", "P)>^w] xP-junit", "ER3@A`h>_p{2+A5%UE", 4);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("P)>^w] xP-junit");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("tinuj-Px ]w^>)P", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'h');
      assertEquals("org.apace.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.truncate((String) null, 6);
      assertNull(string0);
      
      String string1 = StringUtils.center("3L6crI;*'/:kyVf", 89, "\n");
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3L6crI;*'/:kyVf\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      char[] charArray0 = new char[2];
      String[] stringArray0 = StringUtils.split("g~l)<=8tch]", "g~l)<=8tch]");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "g~l)<=8tch]", charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("g~l)<=8tch]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.chomp("g~l)<=8tch]", "m");
      assertEquals("g~l)<=8tch]", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center((String) null, 4);
      assertNull(string1);
      
      String string2 = StringUtils.right("0@~h@1", (-509));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('>', 827);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEqualsstring3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCasem");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("blank_blank_blank_2014", "g~l)<=8tch]", 76);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("AK}(t@;xU)Q(.JR4n", ", Length: 0", 4);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean3 = StringUtils.isBlank("");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string4 = StringUtils.truncate((String) null, 4, 827);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", "Minmum abbreviation widthwith offset is %d", 274);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize("m");
      assertEquals("m", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "m", (CharSequence) "b", (-37));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("Strings must not be null", "m");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 18;
      longArray0[2] = (long) 18;
      longArray0[3] = (long) 11;
      longArray0[4] = (long) '%';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '%', 11, 2402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("< Sz.E}", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("< Sz.E}");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " ", " ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("junit-pioneer", "\n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.stripEnd("org.apache.commons.lang3.ArrayUtils", "");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("org.apache.commons.lang3.ArrayUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("3", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "3", 'F');
      assertEquals(0, int0);
      
      String string2 = "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 0);
      assertNull(stringArray0);
      
      String string3 = StringUtils.uncapitalize("b");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("b", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "b", (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("", "==('m'");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) '%';
      longArray0[1] = 4278L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'P', 18, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(")FX\"UDi9+TEtqADsV<");
      assertEquals(")FX\"UDi9+TEtqADsV<", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat(")FX\"UDi9+TEtqADsV<", ")FX\"UDi9+TEtqADsV<", 1219);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '?');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeIgnoreCase("$9AV!p,", "$9AV!p,");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'b');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "");
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)21;
      shortArray0[1] = (short) (-2793);
      shortArray0[2] = (short)21;
      shortArray0[3] = (short)2270;
      shortArray0[4] = (short)21;
      shortArray0[5] = (short) (-2793);
      String string3 = StringUtils.join(shortArray0, '\'');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("21'-2793'21'2270'21'-2793", string3);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)21, (short) (-2793), (short)21, (short)2270, (short)21, (short) (-2793)}, shortArray0);
      assertNotNull(string3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray2);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase("", ") 7o5.x~lj", "\r");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray2);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray1, stringArray3);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray3);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray3);
      
      String[] stringArray4 = new String[1];
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      
      stringArray4[0] = "";
      String string5 = StringUtils.getCommonPrefix(stringArray4);
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray0);
      assertEquals(1, stringArray4.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "]=`]", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'E'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("]=`]");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rotate("Mn<PLh?2_", 101);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2_Mn<PLh?", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string2 = StringUtils.removePattern("2_Mn<PLh?", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("2_Mn<PLh?", string2);
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "2_Mn<PLh?";
      charSequenceArray0[1] = (CharSequence) "]=`]";
      charSequenceArray0[2] = (CharSequence) "emv";
      charSequenceArray0[3] = (CharSequence) "2_Mn<PLh?";
      charSequenceArray0[4] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[5] = (CharSequence) "Mn<PLh?2_";
      charSequenceArray0[6] = (CharSequence) "2_Mn<PLh?";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("2_Mn<PLh?", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      boolean boolean2 = StringUtils.endsWithAny("2_Mn<PLh?", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'E', 101, 5);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = "Strings";
      String string2 = StringUtils.replaceIgnoreCase((String) null, "Strings", "offset cannot be negative", 1870);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)127;
      String string0 = null;
      int int0 = StringUtils.countMatches((CharSequence) null, 'h');
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object1;
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '_', 0, 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.unwrap("#YW`o+z", '\u0000');
      assertEquals("#YW`o+z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("DefaultTimeZone");
      assertEquals("defaultTimeZone", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.rotate("defaultTimeZone", '\u0000');
      assertTrue(string1.equals((Object)string0));
      assertEquals("defaultTimeZone", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'i');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap(" vs ", '\u0000');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      String string3 = StringUtils.uncapitalize("y.");
      assertFalse(string3.equals((Object)string1));
      assertEquals("y.", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split((String) null, "g,dOc 8yt|#");
      assertNull(stringArray0);
      
      String string4 = StringUtils.substringBetween("g,dOc 8yt|#", "org.apache.commons.lang3.StringUtils");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("The character ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase(">G8[f#>o=a3kr[", (String) null);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((float[]) null, 'G', 1, 5);
      assertNull(string1);
      
      String string2 = StringUtils.substringBetween("+k,", (String) null, " vs ");
      assertNull(string2);
      
      String string3 = StringUtils.center("Strings must not be null", 1, 'G');
      assertFalse(string3.equals((Object)string0));
      assertEquals("Strings must not be null", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "The character ", (CharSequence) "Strings must not be null", 335);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = "\\uw08}|,9`6XBCdN";
      String string5 = StringUtils.repeat(string4, 211);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string6 = StringUtils.replaceOnce((String) null, "Strings must not be null", "");
      assertNull(string6);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "X~r";
      charSequenceArray0[2] = (CharSequence) "g>b";
      charSequenceArray0[3] = (CharSequence) "Strings must not be null";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      charSequenceArray0[5] = (CharSequence) "Strings must not be null";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "+k,";
      charSequenceArray0[8] = (CharSequence) "vs";
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", (String) null);
      assertEquals("g,dOc 8yt|#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.995;
      doubleArray0[2] = (double) '(';
      byte byte0 = (byte)0;
      byte byte1 = (byte)85;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)85;
      String string3 = StringUtils.join(byteArray0, '(', 32, 10);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)85, (byte)0, (byte)0, (byte)85}, byteArray0);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 37);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "g,dOc 8yt|#", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[8];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "g,dOc 8yt|#");
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("g,dOc 8yt|#", charBuffer0.toString());
      assertEquals(11, charBuffer0.limit());
      assertEquals(11, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(11, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("LaunchTime", "^02Sm%)I28");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("kKIA+A`T(Q", (-1528), "r^iR3");
      assertEquals("kKIA+A`T(Q", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("kKIA+A`T(Q", "lye~", "z{3,");
      assertNull(stringArray2);
      
      String string1 = StringUtils.mid("r^iR3", 19, 19);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("kKIA+A`T(Q", "',>", 104);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "lye~", (CharSequence) "r^iR3");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.center("", 24, "");
      assertEquals("                        ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', 97, 0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PS)mUW3EE", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "PS)mUW3EE");
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("PS)mUW3EE", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      SortedSet<CharBuffer> sortedSet0 = treeSet0.headSet(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals("PS)mUW3EE", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, sortedSet0.size());
      assertTrue(sortedSet0.isEmpty());
      assertFalse(treeSet0.contains(charBuffer0));
      assertFalse(sortedSet0.contains(charBuffer0));
      assertNotNull(sortedSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("PS)mUW3EE");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("PS)MUW3EE", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "PS)MUW3EE";
      charSequenceArray0[1] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "PS)MUW3EE";
      String string4 = StringUtils.reverse("PS)MUW3EE");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("EE3WUM)SP", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string5 = StringUtils.abbreviateMiddle("EE3WUM)SP", "", 0);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("EE3WUM)SP", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("", "F,", 97);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.repeat("?$", 1032);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      stringArray0[2] = "LaunhTie";
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunhTie");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("LaunhTie");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringBefore("Locale must not be null", "mp2_^vWQ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("LaunhTie", "LaunhTie");
      assertNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("`1lD/9<h^X", "Locale must not be null", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "NjU`w&?^E", (-2062), 12);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("MinNjU`w&?^E", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("MinNjU`w&?^E", "l*@/ {2BkRo");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string0 = StringUtils.appendIfMissing("", charSequenceArray0[1], charSequenceArray0);
      assertEquals("", string0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "\r";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "\r";
      charSequenceArray1[7] = (CharSequence) "\r";
      charSequenceArray1[8] = (CharSequence) " ";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(9, charSequenceArray1.length);
      
      String string2 = StringUtils.wrap("", "\n");
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[8] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "\r");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("\n");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.center("s", (-1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("s", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isBlank(charSequenceArray1[7]);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(9, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "(", "(");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("P)>^w] xP-junit", 57, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("I7?F84}8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("I7?F84}8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("", "Object varargs must not be null");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("Exp", 8);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Exp", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "I7?F84}8");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeIgnoreCase("org.junitpioneer.jupiter.DefaultLocaleExtension", "<3");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "I7?F84}8", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      String string5 = StringUtils.abbreviateMiddle("I7?F84}8", "<3", 8);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("I7?F84}8", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = 'r';
      String string1 = StringUtils.rightPad("offset cannot be negative", 24, "E=-O9#]r;CBo");
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "offset cannot be negative", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(9, stringArray0.length);
      
      String string2 = StringUtils.capitalize("+t");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+t", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("c\"E=", 2, ">wpHA>tnK Z?o]");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c\"E=", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)80;
      String string0 = StringUtils.rotate("NfC+RL(!t", 18);
      assertEquals("NfC+RL(!t", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "NfC+RL(!t", 'N');
      assertEquals(1, int0);
      
      int[] intArray0 = new int[10];
      intArray0[0] = 53;
      intArray0[1] = (int) (short)80;
      intArray0[5] = 53;
      intArray0[3] = 1;
      intArray0[4] = (int) '[';
      intArray0[5] = (int) 'N';
      String string1 = StringUtils.join(intArray0, '[');
      assertFalse(string1.equals((Object)string0));
      assertEquals("53[80[0[1[91[78[0[0[0[0", string1);
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {53, 80, 0, 1, 91, 78, 0, 0, 0, 0}, intArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny("53[80[0[1[91[78[0[0[0[0", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate((String) null, 53, 53);
      assertNull(string3);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "53[80[0[1[91[78[0[0[0[0", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("NfC+RL(!t", "NfC+RL(!t", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("NfC+RL(!t", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.unwrap("Strings must not be null", '7');
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("Strings must not be null", "TKofM n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("TKofM nStrings must not be nullTKofM n", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be null", "TKofM nStrings must not be nullTKofM n");
      assertEquals(0.74, double0, 0.01);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '7';
      int int0 = StringUtils.lastIndexOf((CharSequence) "TKofM nStrings must not be nullTKofM n", (CharSequence) "TKofM n", 3344);
      assertEquals(31, int0);
      
      String string2 = StringUtils.stripAccents("Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", 31);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("W_$a(T\"PF#t&.QU~6R");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("]v~=~1%$h7{H(.zHFL", locale0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("]v~=~1%$h7{h(.zhfl", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      int int0 = StringUtils.indexOfDifference((CharSequence) "The String must not be empty", (CharSequence) "`1lD/9<h^X");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "`1lD/9<h^X", (CharSequence) "The String must not be empty");
      assertFalse(int1 == int0);
      assertEquals(28, int1);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'j');
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.replaceChars("e58(IZ2>S", "e58(IZ2>S", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("b", 5109, ',');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("7-", "b", 5109);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("b");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("b", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "b", (CharSequence) "b", 3585);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{)!06,,AJ;E)", ',');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(5109));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(5109));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "b");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertEquals("", string3);
      assertFalse(linkedList0.contains(5109));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("\n", 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.upperCase("Object varargs must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string4 = StringUtils.join((Iterable<?>) vector0, 'L');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "nTajxyG)>lye|{mqk~");
      assertNull(string5);
      
      String string6 = StringUtils.replaceChars("_9Wo\"Abl)>\"2", 'b', 'O');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("_9Wo\"AOl)>\"2", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "offset cannot be negative";
      stringArray0[1] = "offset cannot be negative";
      stringArray0[2] = "_9Wo\"Abl)>\"2";
      stringArray0[3] = "nTajxyG)>lye|{mqk~";
      stringArray0[4] = "nTajxyG)>lye|{mqk~";
      stringArray0[5] = "offset cannot be negative";
      stringArray0[6] = "offset cannot be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Strings must not be nullTKofM n");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 62, 10);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "`]`Q|:", (CharSequence) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("0q<mTHk%o`3", 292);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0q<mTHk%o`3                                                                                                                                                                                                                                                                                         ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("q>Oa@", "Failed to get parent directory from provider");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q>Oa@", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("!!9vcqRDLp+'y&;h:");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty("\n");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.replaceChars("", ']', '~');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, (-1949), "OMZ");
      assertNull(string5);
      
      String string6 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.rightPad("q>Oa@", 292, ">L]H<9YtW^");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("q>Oa@>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9YtW^>L]H<9Y", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.stripEnd("(SF.~K%", "(SF.~K%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("g,dOc 8yt|#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8", string1);
      assertNotNull(string1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.substring("g,dOc 8yt|#", (-398), (-342));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("(SF.~K%");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(SF.~K%", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 968);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceIgnoreCase("DefaultTimeZone", "', is neither of type Map.Entry nor an Array", ";", (-398));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("DefaultTimeZone", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("g,dOc 8yt|#", ";", 2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.repeat("4nMDHc~jDKn{5 T", 2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("4nMDHc~jDKn{5 T4nMDHc~jDKn{5 T", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("E=-O9#]r;CBo", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtilsE=-O9#]r;CBo", string6);
      assertEquals(20, stringArray0.length);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("lZIe9n'U[kJtj!", "Minimum abbreviation width with offset is %d", (-398));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.rightPad("", (-398), "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.capitalize("bKVL?u");
      assertEquals("BKVL?u", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("HiRJ;O2bd$\"Y", (-423), '\'');
      assertFalse(string1.equals((Object)string0));
      assertEquals("HiRJ;O2bd$\"Y", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("BKVL?u", (-1427), (-1427));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", "bKVL?u");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("y:@?6E=-O9#]r;CBo", "HiRJ;O2bd$\"Y");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBoHiRJ;O2bd$\"Y", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)22;
      String string4 = StringUtils.join(byteArray0, '4');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("22", string4);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("The type must not be null", "HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBoHiRJ;O2bd$\"Y");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("The type must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.deleteWhitespace("BKVL?u");
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("BKVL?u", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("BKVL?u", "[?[j3T");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertEquals("BKVL?u", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeStart("BKVL?u", "org.apache.commons.lang3.ArrayUtils");
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("BKVL?u", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.repeat("The type must not be null", (-3267));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("The type must not be null", "HiRJ;O2bd$\"Y", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(1, int0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(locale0));
      assertNotNull(arrayDeque0);
      
      Locale locale1 = Locale.lookup(vector0, arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertNull(locale1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (-3267);
      longArray0[2] = (long) '\'';
      String string10 = StringUtils.join(longArray0, '4', 9, (-3267));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertEquals("", string10);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, (-3267L), 39L}, longArray0);
      assertNotNull(string10);
      
      String string11 = StringUtils.join(longArray0, '2', 211, (int) (byte)22);
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertEquals("", string11);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {1L, (-3267L), 39L}, longArray0);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is %dThe character ");
      assertEquals("Minimum abbreviation width with offset is %dThe character", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is %dThe character ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %dThe character", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width with offset is %dThe character", "Minimum abbreviation width with offset is %dThe character");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(".]U", stringArray0);
      assertEquals(2, int0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.chop("cKK`3=-$7x! cJV|wWal");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("cKK`3=-$7x! cJV|wWa", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(".]U", "Minimum abbreviation width with offset is %dThe character");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.unwrap("o[K>]iW@LD", "Minimum abbreviation width with offset is %dThe character");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("o[K>]iW@LD", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chop("FW");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("F", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf("junit", "o[K>]iW@LD", 3);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.repeat("Minimum abbreviation width is %d", 4918);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNumericSpace("FW");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(48, 48);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(48, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(48));
      assertNotNull(vector0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(48, vector0.capacity());
      assertTrue(boolean0);
      assertFalse(vector0.contains(48));
      assertTrue(vector0.contains(object0));
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean1 = vector0.add(object1);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(48, vector0.capacity());
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(vector0.contains(48));
      assertTrue(vector0.contains(object0));
      
      boolean boolean2 = vector0.add((Object) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals(48, vector0.capacity());
      assertTrue(boolean2);
      assertFalse(vector0.contains(48));
      assertTrue(vector0.contains(object0));
      
      String string0 = StringUtils.join((Iterable<?>) vector0, '4');
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals(48, vector0.capacity());
      assertFalse(vector0.contains('4'));
      assertTrue(vector0.contains(object0));
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04", (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04");
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04", (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04", (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.uncapitalize("java.lang.Object@2b79cbe34java.lang.Object@4edc99d04");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04", (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04", 48);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      charSequenceArray0[4] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@2b79cbe34java.lang.Object@4edc99d04";
      String string2 = StringUtils.EMPTY;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("The type must not be null");
      assertEquals("the type must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "the type must not be null", 2308);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("\"W;xeVEJKf'I,jco*", (-1), "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"W;xeVEJKf'I,jco*", string1);
      assertNotNull(string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(""));
      assertNotNull(vector0);
      
      Vector vector1 = (Vector)vector0.clone();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertEquals(0, vector1.size());
      assertTrue(vector1.isEmpty());
      assertFalse(vector0.contains(""));
      assertNotNull(vector1);
      
      boolean boolean0 = vector0.add((Object) "\"W;xeVEJKf'I,jco*");
      assertEquals("[\"W;xeVEJKf'I,jco*]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("\"W;xeVEJKf'I,jco*"));
      
      boolean boolean1 = vector0.add((Object) "the type must not be null");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, vector0.size());
      assertEquals("[\"W;xeVEJKf'I,jco*, the type must not be null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("the type must not be null"));
      
      String string2 = StringUtils.join((Iterable<?>) vector0, '!');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, vector0.size());
      assertEquals("[\"W;xeVEJKf'I,jco*, the type must not be null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("\"W;xeVEJKf'I,jco*!the type must not be null", string2);
      assertFalse(vector0.contains(""));
      assertTrue(vector0.contains("the type must not be null"));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("\"W;xeVEJKf'I,jco*", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\"W;xeVEJKf'I,jco*", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Locale must not be null", 'F', '\'');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Locale must not be null", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Locale must not be null";
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = null;
      stringArray0[3] = "\"W;xeVEJKf'I,jco*";
      stringArray0[4] = "";
      stringArray0[5] = "the type must not be null";
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "b2~i!T+Y;aq3/)/IM$");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Object varargs must not be null";
      stringArray0[2] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string4 = StringUtils.replaceEachRepeatedly("OBJECT VARARGS MUST NOT BE NULL", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string4);
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Locale must not be null");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.stripAccents((String) null);
      assertNull(string5);
      
      double[] doubleArray0 = new double[1];
      String string6 = StringUtils.join(doubleArray0, '6', 42, (int) (short)0);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = StringUtils.trimToEmpty((String) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isAlphanumeric("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string8 = StringUtils.stripStart("\n", (String) null);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("\n", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("u", 83);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("u", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.repeat("nTajxyG)>lye|{mqk~", "ODw2", (-898));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceOnce(">(1r3.", ">(1r3.", "P)>^w] xP-junit");
      assertEquals("P)>^w] xP-junit", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "P)>^w] xP-junit", (CharSequence) ">(1r3.", 1176);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("DefaultTimeZone", "9aAJ]E", ">(1r3.", 116);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZone", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.StringUtils", "", 968);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.repeat("Dpr", 1176);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("P)>^w] xP-junit", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, stringArray0.length);
      
      String string4 = StringUtils.stripStart("E", "^^`Db2b&w-r|n)lZVS");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("E", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("Dpr");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Dpr", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) string3, (-1), 1839);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.chomp("hk");
      assertEquals("hk", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("hk");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("n)-^] xP0junit", 57, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) ">(1r3.", 1176);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("DefaultTimeZone", "9aAJ]E", ">(1r3.", 116);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DefaultTimeZone", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.StringUtils", "", 968);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.repeat("r", 1176);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("9aAJ]E", ">(1r3.", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(">(1r3.9aAJ]E", string4);
      assertEquals(12, stringArray0.length);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Failed to create default temp directory", "", 1739);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.rightPad("I", 6, "9aAJ]E");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("I9aAJ]", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 3737);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.endsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceOnce((String) null, "&1%iW@6w", "-/;A.,_yJ:8YIdySL");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null, (-1154));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.chomp("Object varargs must not be null", "Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compare("rxM>K", "}&s:3n");
      assertEquals((-11), int0);
      
      String string4 = StringUtils.defaultString("Object varargs must not be null");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "\n", (String) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.trimToNull("nTajxy0)>lye|{mqk~");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("nTajxy0)>lye|{mqk~", string5);
      assertNotNull(string5);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\n";
      String string6 = StringUtils.join(objectArray0, '%', (-5347), (-5347));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertEquals(2, objectArray0.length);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("maxWith cannot be negative", '%');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("%maxWith cannot be negative%", string7);
      assertNotNull(string7);
      
      String string8 = "w08}|,9`6XBCdN\\u";
      boolean boolean3 = StringUtils.containsNone((CharSequence) " +vs ", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int[] intArray0 = StringUtils.toCodePoints("rxM>K");
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {114, 120, 77, 62, 75}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-964));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'G');
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("n7p.eykp|dxzY,5*ydg", 4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("n7p.", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "n7p.", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-964));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.unwrap("^`8ZA-#Gu2Isb*~`", '\\');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("^`8ZA-#Gu2Isb*~`", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.prependIfMissingIgnoreCase("lYQ5{CTS", "lYQ5{CTS", stringArray0);
      assertEquals("lYQ5{CTS", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap((String) null, "b\"2xM{(1&x*");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("b\"2xM{(1&x*", '}');
      assertFalse(string2.equals((Object)string0));
      assertEquals("b\"2xM{(1&x*", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat((String) null, 15);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "b\"2xM{(1&x*", (CharSequence) "b\"2xM{(1&x*");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "/5{i?t@R&Z5Z", (CharSequence) null, (-421));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, stringArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte) (-95);
      try { 
        StringUtils.toString(byteArray0, ">'!w&HB");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`E`,%", "`E`,%");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("`E`,%");
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("Y5hAv9B |P,8?&", ", '", 9);
      assertEquals("Y5h, '8?&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("`E`,%", "xoGhu&");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`E`,%", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny("`E`,%", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      
      String string2 = StringUtils.left("Y5h, '8?&", 9);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Y5h, '8?&", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isEmpty("Y5h, '8?&");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`E`,%", (CharSequence) "xoGhu&", 687);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceChars("LZ", 'C', 'b');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("LZ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("Dg[<*D-AC!@\"*G", 'l', '0');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Dg[<*D-AC!@\"*G", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "`E`,%", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Array and element cannot both be null", ", '", 23);
      assertEquals("Array and , 'th be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(", '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.abbreviate("!to[Nk`r>hIC'zQ5L,", 25, 144);
      assertEquals("!to[Nk`r>hIC'zQ5L,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("Locale must not be null", "!to[Nk`r>hIC'zQ5L,");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Locale must not be null";
      objectArray0[1] = (Object) "Locale must not be null";
      objectArray0[2] = (Object) "!to[Nk`r>hIC'zQ5L,";
      objectArray0[3] = (Object) "!to[Nk`r>hIC'zQ5L,";
      objectArray0[4] = (Object) "!to[Nk`r>hIC'zQ5L,";
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (double) 25;
      doubleArray0[2] = (double) 144;
      doubleArray0[3] = (double) 144;
      doubleArray0[4] = (double) 42;
      String string3 = StringUtils.join(doubleArray0, '@', 1392, 42);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {25.0, 25.0, 144.0, 144.0, 42.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((long[]) null, 'F', (-1), (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      char[] charArray0 = new char[31];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(31, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("e", 'Y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceEachRepeatedly("...", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("...", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(3631);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3631, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(3631, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3631, charBuffer0.capacity());
      assertEquals(3631, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[9];
      charBufferArray0[0] = charBuffer0;
      charBufferArray0[1] = charBuffer0;
      charBufferArray0[2] = charBuffer0;
      charBufferArray0[3] = charBuffer0;
      charBufferArray0[4] = charBuffer0;
      charBufferArray0[5] = charBuffer0;
      charBufferArray0[6] = charBuffer0;
      charBufferArray0[7] = charBuffer0;
      charBufferArray0[8] = charBuffer0;
      CharBuffer charBuffer1 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(3631, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(3631, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(3631, charBuffer1.length());
      assertEquals(3631, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer1, charBuffer0);
      assertEquals(9, charBufferArray0.length);
      assertNotNull(charBuffer1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, 3631);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "The String must not be empty";
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("The String must not be empty", 0, stringArray0[0]);
      assertEquals("The String must not be empty", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(stringArray0[2], stringArray0[0], "The String must not be empty");
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("The String must not be empty");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("The String must not be empty", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = objectArray0[0];
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[5] = (Object) null;
      String string4 = StringUtils.join(objectArray0, 'P', (-5347), (-5347));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(6, objectArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing(string2, 'W');
      assertEquals(3, stringArray0.length);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'd');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("{;k");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.uncapitalize("offset cannot be negative");
      assertFalse(string3.equals((Object)string1));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right((String) null, 53);
      assertNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'a');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("{;k", string5);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("?6K#YSc{OM?czGb", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("?6K#YSc{OM?czGb", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("", (-1));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string8 = StringUtils.stripStart("?6K#YSc{OM?czGb", (String) null);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertEquals("?6K#YSc{OM?czGb", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.split("/5{i?t@R&Z5Z", "?6K#YSc{OM?czGb", 53);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(string9);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      String string10 = StringUtils.join(iterator0, '7');
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("P)>^w] xP-junit", 57, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) ">(1r3.", 1176);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceIgnoreCase("DefaultTimeZone", "9aAJ]E", ">(1r3.", 116);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DefaultTimeZone", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.StringUtils", "", 968);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.repeat("r", 1176);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(12, stringArray0.length);
      
      String string4 = StringUtils.stripStart("E", "^^`Db2b&w-r|n)lZVS");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("E", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("r");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("r", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) string3, (-1), 1839);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("\n", 1032);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = "\n";
      String string1 = "offset cannot be negative";
      String string2 = StringUtils.deleteWhitespace("offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offsetcannotbenegative", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "offset cannot be negative");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "offsetcannotbenegative";
      int int0 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("offsetcannotbenegative", charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("|e.G@Z");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: 0q:=h`00", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.strip("t] >LD?nQ1{M|0|xq");
      assertEquals("t] >LD?nQ1{M|0|xq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("]v~=~1%$h7{H(.zH");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]v~=~1%$h7{H(.zH", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "P5WuTbtDL");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("]v~=~1%$h7{H(.zH", stringArray0);
      assertEquals(13, int0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(".]U", ".]U");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "t] >LD?nQ1{M|0|xq", (-98));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "]v~=~1%$h7{H(.zH", (CharSequence) "cKK`3=-$7x@ cJV|wWal");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.stripAccents("t] >LD?nQ1{M|0|xq");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("t] >LD?nQ1{M|0|xq", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 347, ')');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string5);
      assertNotNull(string5);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ')';
      intArray0[1] = 13;
      intArray0[2] = (-98);
      String string6 = StringUtils.join(intArray0, ')');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("41)13)-98", string6);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {41, 13, (-98)}, intArray0);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter("41)13)-98", "r");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      String string8 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string8);
      assertNotNull(string8);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("41)13)-98", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, "Thr");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("", "Thr", "13");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", (CharSequence) null, (-1148));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(12);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      byte byte0 = byteBuffer0.get();
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=1 lim=12 cap=12]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(11, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals((byte)0, byte0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(11, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(11, charBuffer1.capacity());
      assertEquals(11, charBuffer1.limit());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charBuffer1);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(12, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=12 lim=12 cap=12]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(12, byteBuffer0.position());
      assertEquals(12, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(11, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(11, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(11, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(11, charBuffer1.capacity());
      assertEquals(11, charBuffer1.limit());
      assertFalse(boolean0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string0 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.abbreviate("$`Vva$_rpoCCc0h_$h", (int) (byte)0, 65536);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$`Vva$_rpoCCc0h_$h", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissingIgnoreCase("{I;+=I", "{I;+=I", charSequenceArray0);
      assertEquals("{I;+=I", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{I;+=I", (CharSequence) "{I;+=I", 355);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("{I;+=I");
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("_u^byx 3", "{I;+=I", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_u^byx 3{I;+=I", string1);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-910.6);
      String string2 = StringUtils.join(doubleArray0, 'Y', 372, 355);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-910.6)}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("_u^byx 3{I;+=I", "", 366);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_u^byx 3{I;+=I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("eecFSYesJ={n6$08", "", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("eecFSYesJ={n6$08", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEnd("org.apache.commons.lang3.CharSequenceUtils", "-l.~rvoYYbrhZbC\"MJ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "eecFSYesJ={n6$08", (CharSequence) "{I;+=I");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.deleteWhitespace("{I;+=I");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("{I;+=I", string6);
      assertNotNull(string6);
      
      float[] floatArray0 = new float[0];
      String string7 = StringUtils.join(floatArray0, 'Y');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string7);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Y';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "eecFSYesJ={n6$08", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Y'}, charArray0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "_u^byx 3{I;+=I", "-l.~rvoYYbrhZbC\"MJ");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.chomp("");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(">\"173.");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("8uE1", '/');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.normalizeSpace(", Length: 0q:=h`00");
      assertEquals(", Length: 0q:=h`00", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string3 = StringUtils.replaceChars((String) null, "junit", "FD@(!pZ/^1E");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) ", Length: 0q:=h`00", 1541);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`1lD/9<h^X", "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.uncapitalize("`1lD/9<h^X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 45);
      assertEquals(0, int0);
      
      String string2 = StringUtils.unwrap("", "LaunchTime");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.repeat("q3ZHLLW8<JBJ'nZ<", 1);
      assertEquals("q3ZHLLW8<JBJ'nZ<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = StringUtils.center("Timeout", 3, "Timeout");
      assertEquals("Timeout", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Timeout");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Zj", "Zj");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("Zj");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "LaunchTime", (-1158));
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("0F27*ONmY.)gB", 'V');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.prependIfMissing("\r", "\r", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertEquals("\r", string0);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("79p$JU;", "LaunchTime", (-1158));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string1 = StringUtils.rightPad("ExceptionWasThrown", 9, "79p$JU;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ExceptionWasThrown", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "79p$JU;", (CharSequence[]) stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      
      String string2 = StringUtils.capitalize("79p$JU;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("79p$JU;", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("Locale must not be null", 5, "\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      short short0 = (short)80;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)80;
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.leftPad("Object varargs must not be null", 27, "NT|KdTYqv0TE7");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Index: ", 3, (int) (short) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.chomp("r", "M%KNU-qm1nQiz1Z");
      assertEquals("r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removePattern("r", "r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = "b";
      String string1 = StringUtils.normalizeSpace("b");
      assertTrue(string1.equals((Object)string0));
      assertEquals("b", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("b");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) null, '6', 1424, 2);
      assertNull(string2);
      
      int int0 = 19;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "b", 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1047L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 249L;
      longArray0[5] = 2667L;
      String string1 = StringUtils.join(longArray0, '6');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1047606160624962667", string1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1047L), 0L, 1L, 0L, 249L, 2667L}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("UYw|y7sUR6pU@][");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("UYW|Y7SUR6PU@][", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("Index: ", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Index: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Index: ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" :xednI", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Index: ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.stripToEmpty("UYW|Y7SUR6PU@][");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("UYW|Y7SUR6PU@][", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("", '>');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.right("", 7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("'U$rG_z+ulV7", '}');
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals("'U$rG_z+ulV7", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.strip((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Comparator should not be null.", "Comparator should not be null.");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "Comparator should not be null.", 535, 1972);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '_');
      assertEquals("", string0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      String string1 = StringUtils.join(charArray0, '_', 507, (-1252));
      assertEquals("", string1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', '_', '_', '_'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(charArray0, '_');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("O______", string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', '_', '_', '_'}, charArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'O', '_', '_', '_'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("O______");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle("] xP-Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", (-1252));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("] xP-Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "a~Z6A%e:vWl";
      stringArray1[1] = "Arguments cannot both be null";
      stringArray1[2] = "a~Z6A%e:vWl";
      stringArray1[3] = "{*qsx[yNq~G";
      stringArray1[4] = "Zj";
      String string0 = StringUtils.replaceEachRepeatedly("qiK5;?uwP\"J7*xt", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("qiK5;?uwP\"J7*xt", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("{*qsx[yNq~G"));
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, (String) null, (-63), (-762));
      assertFalse(string1.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string1);
      assertFalse(arrayList0.contains((-762)));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString("IJjKCiyVg");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IJjKCiyVg", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Arguments cannot both be null", (CharSequence) "a~Z6A%e:vWl");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("IJjKCiyVg");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween((String) null, "Ff^\"[#QwPHJ", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, (String) null);
      assertNull(string2);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, Integer.MIN_VALUE, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "(0.0a0.0a0.0a0.0a0.0a0.0", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      int[] intArray0 = new int[17];
      String string0 = StringUtils.join(intArray0, '$');
      assertEquals("0$0$0$0$0$0$0$0$0$0$0$0$0$0$0$0$0", string0);
      assertEquals(17, intArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("0$0$0$0$0$0$0$0$0$0$0$0$0$0$0$0$0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Zj");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Zj", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Zj", (CharSequence) "Zj", 0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)50;
      boolean boolean1 = StringUtils.isMixedCase("Zj");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.appendIfMissing("Expected exception %s was not thrown.", "Zj", stringArray0);
      assertEquals("Expected exception %s was not thrown.Zj", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("<gHY4']TcwpNbb=,{6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("<gHY4']TcwpNbb=,{6", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left(", '", (-3019));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, 'j');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd(" but was: ", " ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" but was:", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`o?/X`yYG>SE!", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat((String) null, (String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.strip((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.normalizeSpace("Gy;");
      assertFalse(string3.equals((Object)string0));
      assertEquals("Gy;", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtension", "W@TE!apw*q-@|B'Ja");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Gy;", (CharSequence) "Y2;x6O/%w|IjUHf+A", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.substringAfter("?$", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverseDelimited((String) null, '8');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = null;
      String string3 = StringUtils.abbreviateMiddle((String) null, "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", 5);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 5);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.swapCase("`");
      assertEquals("`", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat((String) null, "h7$.w];", (-1));
      assertNull(string5);
      
      String string6 = ".]U.]U";
      String string7 = StringUtils.substringAfter(".]U.]U", (String) null);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.abbreviate((String) null, "?|o|sl]B*1sz", 5, (-1047));
      assertNull(string8);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("", "`", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("_`_org.junitpioneer.jupiter.TempDirectory$CloseablePath", locale1.toString());
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", locale1.getVariant());
      assertEquals("`", locale1.getCountry());
      assertNotNull(locale1);
      
      String string9 = locale0.getDisplayCountry(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("_`_org.junitpioneer.jupiter.TempDirectory$CloseablePath", locale1.toString());
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", locale1.getVariant());
      assertEquals("`", locale1.getCountry());
      assertEquals("", string9);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string9);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("org.junitpioneer.jupiter.TempDirectory$CloseablePath"));
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("\n", 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.upperCase("Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Object varargs must not be null";
      stringArray0[1] = "";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string5 = StringUtils.replaceEachRepeatedly("OBJECT VARARGS MUST NOT BE NULL", stringArray0, stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string5);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Locale must not be null");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.unwrap("\n", '6');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\n", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripAccents((String) null);
      assertNull(string7);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      String string8 = StringUtils.join(doubleArray0, '6', 42, (int) (short)0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "\n");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.strip("t] >LD?nQ1{M|0|xq");
      assertEquals("t] >LD?nQ1{M|0|xq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("]v~=~1%$h7{H(.zH");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]v~=~1%$h7{H(.zH", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "P5WuTbtDL");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("]v~=~1%$h7{H(.zH", stringArray0);
      assertEquals(13, int0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(".]U", ".]U");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "t] >LD?nQ1{M|0|xq", (-98));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "]v~=~1%$h7{H(.zH", (CharSequence) "cKK`3=-$7x@ cJV|wWal");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.stripAccents("t] >LD?nQ1{M|0|xq");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("t] >LD?nQ1{M|0|xq", string4);
      assertNotNull(string4);
      
      char char0 = ')';
      String string5 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 347, ')');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("8c5\"Iqn", "", "cKK`3=-$7x@ cJV|wWal", 0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("8c5\"Iqn", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.joinWith("t] >LD?nQ1{M|0|xq", stringArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals(".t] >LD?nQ1{M|0|xq]t] >LD?nQ1{M|0|xqU", string7);
      assertEquals(3, stringArray0.length);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("P5WuTbtDL", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("t] >LD?nQ1{M|0|xq", (String) null, 3088);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 42;
      char char1 = ';';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ';', (-1909), (-98));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1909
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("The character ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase(">G8[f#>o=a3kr[", (String) null);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("',>", "G-9/lLX=):`<2xyV0U", 2395);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("72=i^<hoa;38>`a/", '5');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "u7>RLoZMh\"i");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-2555));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 2138);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string1, string1);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      stringArray0[2] = "LaunhTie";
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunhTie");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("LaunhTie");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringBefore("Locale must not be null", "mp2_^vWQ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("LaunhTie", "LaunhTie");
      assertNull(string2);
      
      String string3 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string4 = StringUtils.abbreviateMiddle("LaunhTie", ")MTNd/cAw|#os]Tj^|~", 1);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("LaunhTie", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("LaunhTie", "Locale must not be null", 1);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("LaunhTie", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substring("P)>^w] xP-junit", 57, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("I7?F84}8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("I7?F84}8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("I7?F84}8", "I7?F84}8");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I7?F84}8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ">(1r3.", (CharSequence) "Locale must not be null", 968);
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Locale must not be null");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceIgnoreCase(",yz5y0ZjOb-;n?k#", "org.apache.commons.lang3.StringUtils", "LaunchTimeLaunchTime", 101);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(",yz5y0ZjOb-;n?k#", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.ordinalIndexOf("", ",yz5y0ZjOb-;n?k#", 110);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.repeat("", 110);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNumericSpace(",yz5y0ZjOb-;n?k#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(10, stringArray0.length);
      
      String string6 = StringUtils.stripStart("LaunchTimeLaunchTime", "HLy%Eefi'QT");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("aunchTimeLaunchTime", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("Threshold must not be negative");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Threshold must not be negative", string7);
      assertNotNull(string7);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[9];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "I7?F84}8", 101, 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("", ".]U", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".]U", string2);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("%47D;c<']?>@^#sE;D", 971, (-936));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "offset cannot be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".]U", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = " vs ";
      String string5 = "HW";
      String string6 = StringUtils.appendIfMissingIgnoreCase("HW", " vs ", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("HW vs ", string6);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("%47D;c<']?>@^#sE;D"));
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = linkedList0.offerLast(object0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2);
      assertFalse(linkedList0.contains("%47D;c<']?>@^#sE;D"));
      assertTrue(linkedList0.contains(object0));
      
      String string7 = StringUtils.abbreviate("HW vs ", "", 971, (-1));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("HW vs ", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("%47D;c<']?>@^#sE;D", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.join(doubleArray0, '[', (int) '[', 10);
      assertEquals("", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1763.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate("The Array must not be null", 321);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("t be nullThe Array must no", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "inimum abbreviation width with offset is %d", '[');
      assertEquals(0, int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'k';
      intArray0[1] = 13;
      intArray0[2] = 0;
      intArray0[3] = (int) '[';
      intArray0[4] = 321;
      String string3 = StringUtils.join(intArray0, 'P');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("107P13P0P91P321", string3);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {107, 13, 0, 91, 321}, intArray0);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "K[<Z@/@", (CharSequence) "107P13P0P91P321");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "t be nullThe Array must no");
      assertEquals(0.55, double0, 0.01);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.center("L6]N01", 0, "t be nullThe Array must no");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("L6]N01", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "L6]N01", false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "t be nullThe Array must no");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("", '[');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("", 15);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("4?.<Gbc9rRK.8}C", 15, 3467);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("I", "HiRJ;O2bd$\"Yy:@?6E=-O9#]r;CBo", "");
      assertNull(string5);
      
      String string6 = StringUtils.uncapitalize("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.center("", (-556), "");
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "4?.<Gbc9rRK.8}C", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(boolean0);
      assertTrue(stack0.contains(charBuffer0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'R', 98, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 100
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{8enM$.h 0[n^#", "The String must not be empty");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", "{8enM$.h 0[n^#", (-1845826123));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, "The String must not be empty", "%Eyt#'7:%-&Te", 101);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 101);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("dbt-oM+(-Gb", "dbt-oM+(-Gb", "dbt-oM+(-Gb");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 11
         // dbt-oM+(-Gb
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-315), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.LF;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-20);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string5 = StringUtils.replaceIgnoreCase("Object varargs must not be null", "offset cannot be negative", "nTajxyG)>lye|{mqk~", (-315));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Locale must not be null");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.join((Object[]) stringArray0, '(');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("(Object varargs must not be null(\n((offset cannot be negative", string6);
      assertEquals(5, stringArray0.length);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNumericSpace("Locale must not be null");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty("Locale must not be null");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string7 = StringUtils.difference("qCFs(%X-oS*h %6DiS~", ">4`j#W%/TJ");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(">4`j#W%/TJ", string7);
      assertNotNull(string7);
      
      int int0 = StringUtils.length("Object varargs must not be null");
      assertEquals(31, int0);
      
      String string8 = StringUtils.chop("\n");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("\n"));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "nTajxyG)>lye|{mqk~", (-1892), 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1892
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ilv!W=wbZGFeFE";
      stringArray0[1] = "ilv!W=wbZGFeFE";
      stringArray0[2] = "ilv!W=wbZGFeFE";
      stringArray0[3] = "ilv!W=wbZGFeFE";
      stringArray0[4] = "ilv!W=wbZGFeFE";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("ilv!W=wbZGFeFE");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("ilv!W=wbZGFeFE");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String string0 = StringUtils.trimToNull("ilv!W=wbZGFeFE");
      assertEquals("ilv!W=wbZGFeFE", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isMixedCase("ilv!W=wbZGFeFE");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left("<gHY4']TcwpNbb=,{6", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.strip((String) null, "tdk");
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, "ilv!W=wbZGFeFE");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)51;
      String string0 = StringUtils.join(byteArray0, 'r');
      assertEquals("1r55r48r64r2r32r73r51", string0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)55, (byte)48, (byte)64, (byte)2, (byte)32, (byte)73, (byte)51}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1r55r48r64r2r32r73r51";
      stringArray0[1] = "1r55r48r64r2r32r73r51";
      stringArray0[2] = ">\"173.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substringAfterLast("1r55r48r64r2r32r73r51", "Q\"K(o.42$YU3>_~z");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(818);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("1r55r48r64r2r32r73r51"));
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((Iterable<?>) null, 'r');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("1r55r48r64r2r32r73r51");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("1r55r48r64r2r32r73r51", (String) null);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1r55r48r64r2r32r73r51", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "1r55r48r64r2r32r73r51", (CharSequence) "1r55r48r64r2r32r73r51", (int) (byte)32);
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) ">\"173.", 'r');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'h');
      assertEquals("0", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'd';
      intArray0[1] = (int) '_';
      intArray0[2] = (int) 'd';
      intArray0[3] = (int) (byte) (-22);
      intArray0[4] = 4046;
      intArray0[5] = (int) 'd';
      intArray0[6] = (int) 'd';
      intArray0[7] = (int) '_';
      intArray0[8] = (int) 'd';
      String string0 = StringUtils.abbreviate((String) null, ".]U", 2204, 693);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      String string0 = "P)>^w] xP-junit";
      String string1 = StringUtils.substring("P)>^w] xP-junit", 57, 57);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("I7?F84}8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I7?F84}8", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '7', (int) (byte)0, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1;
      String string0 = StringUtils.join(shortArray0, 'C', 108, 1);
      assertEquals("", string0);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)1}, shortArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("LaunhTie", "", (short)1);
      assertEquals(8, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("`1lD/9<h^X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)80;
      shortArray0[1] = (short)217;
      String string0 = StringUtils.join(shortArray0, 'q', 54, (int) (short) (-3));
      assertEquals("", string0);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)80, (short)217}, shortArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (short)217);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      String string0 = StringUtils.removeEnd("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Locale must not be null";
      objectArray0[1] = (Object) "] xP-";
      objectArray0[2] = (Object) "Locale must not be null";
      objectArray0[3] = (Object) (byte)127;
      objectArray0[4] = (Object) (byte)127;
      String string1 = StringUtils.join(objectArray0, "Minimum abbreviation width with offsmt isj%d", 53, 53);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      String string0 = "org.junitpioneer.vintage.TimeoutExtension";
      String string1 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = "L6]N01";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1);
      String string3 = StringUtils.join(doubleArray0, 'y', 6, 13);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0.0y0.0y0.0y0.0y0.0y0.0y0.0", string3);
      assertEquals(24, doubleArray0.length);
      assertNotNull(string3);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'Y', (-1), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[2] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[3] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[4] = (Object) "', is neither of type Map.Entry nor an Array";
      objectArray0[5] = (Object) "Minimum abbreviation width with offset is %d";
      String string0 = StringUtils.join(objectArray0, ",gQ*pf_,t1", 2428, 99);
      assertEquals("", string0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width with offset is %d", "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("0q<mTHk%o`3", 110);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0q<mTHk%o`3", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string3 = StringUtils.stripStart("TY]o2~", "0q<mTHk%o`3");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y]o2~", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("Array and element cannot both be null", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "', is neither of type Map.Entry nor an Array");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.chomp("R$**FWHZ^8<dE7A");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("R$**FWHZ^8<dE7A", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad("1](F^o9n!~", 0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1](F^o9n!~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("_^%X{/a&[?+blNTbV_]", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_^%X{/a&[?+blNTbV_]", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("\n", "1](F^o9n!~", (CharSequence[]) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1](F^o9n!~\n", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Locale must not be null", "Locale must not be null", (-3093));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.rightPad("Array and element cannot both be null", (-3093), "_^%X{/a&[?+blNTbV_]");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1](F^o9n!~", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("S");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("S", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "}v'aFrH1~3";
      stringArray1[1] = "S";
      stringArray1[2] = "K FQ~3-'jJcD0AnYPn:";
      stringArray1[3] = "org.junitpioneer.vintage.TimeoutExtension";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'A', (int) 'A', 3930);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3930
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      short short0 = (short)80;
      String string0 = "The String must not be empty";
      String string1 = "y33|)Cz-zZ-6[JggJ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("~,f", "y33|)Cz-zZ-6[JggJ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'A', (-701), (int) (short)65);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -701
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "offset cannot be negative", (CharSequence) "F");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("offset cannot be negative", charSequence0);
      assertNotNull(charSequence0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("offset cannot be negative");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.chomp((String) null, "offset cannot be negative");
      assertNull(string2);
      
      int int0 = StringUtils.compare((String) null, "Object varargs must not be null");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultString("DefaultTimeZoneDefaultTimeZone");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("DefaultTimeZoneDefaultTimeZone", string3);
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "\n", "HpKo?2\"os[R");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.trimToNull("4)3e");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("4)3e", string4);
      assertNotNull(string4);
      
      char char0 = 'P';
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "HpKo?2\"os[R";
      objectArray0[1] = (Object) "HpKo?2\"os[R";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '&', (-1), 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.join((CharBuffer[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("i8", 'r');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      arrayList1.trimToSize();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = arrayList1.add(locale_FilteringMode0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean1);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(locale_FilteringMode0));
      
      boolean boolean2 = arrayList1.add(locale_FilteringMode0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertTrue(boolean2);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(locale_FilteringMode0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '^';
      String string1 = StringUtils.valueOf(charArray0);
      assertEquals("r^", string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', '^'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("r^");
      assertTrue(string2.equals((Object)string1));
      assertEquals("r^", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string3);
      assertNotNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "r^", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'r', '^'}, charArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "junit-pioneer", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", 'G');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      String string4 = StringUtils.valueOf(charArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("GG", string4);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G'}, charArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("offset cannot be negative");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("offset cannot be negative", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "GG");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 128);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.stripToEmpty("maxWith cannot be negative");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("maxWith cannot be negative", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "F", (-1), 731);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[0] = 'Z';
      String string0 = StringUtils.replaceFirst("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals("U~CKh1Zw8zjGJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'd', (int) 'Z', (int) 'Z');
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("U~CKh1Zw8zjGJ");
      assertTrue(string2.equals((Object)string0));
      assertEquals("U~CKh1Zw8zjGJ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "@9+B)#eW{YI");
      assertEquals(45, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("U~CKh1Zw8zjGJ", '~');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("h1Zw8zjGJU~CK", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "h1Zw8zjGJU~CK", 'C');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = StringUtils.isNumericSpace("Minimum abbreviation width is %d");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceChars((String) null, 'Z', '~');
      assertNull(string5);
      
      String string6 = StringUtils.rightPad((String) null, 10, "Expected exception %s was not thrown.");
      assertNull(string6);
      
      String string7 = StringUtils.stripStart("U~CKh1Zw8zjGJ", "9(C C0-Rco1+B;#$'");
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("U~CKh1Zw8zjGJ", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.rightPad((String) null, (-1439), (String) null);
      assertNull(string8);
      
      String string9 = StringUtils.wrap("9(C C0-Rco1+B;#$'", '~');
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertEquals("~9(C C0-Rco1+B;#$'~", string9);
      assertNotNull(string9);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "U~CKh1Zw8zjGJ");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string10 = StringUtils.center("U~CKh1Zw8zjGJ", (-463), 'n');
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertEquals("U~CKh1Zw8zjGJ", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 4);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charSequenceArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = "9{,8";
      String string1 = StringUtils.trimToEmpty("9{,8");
      assertTrue(string1.equals((Object)string0));
      assertEquals("9{,8", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "9{,8", (CharSequence) "9{,8");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      charArray0[2] = 'o';
      charArray0[3] = '_';
      charArray0[4] = '\'';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '2', 0, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      String string0 = StringUtils.join(charArray0, 'E', (-1252), (-1252));
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(charArray0, 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PlllE", string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "PlllE", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("_`6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.center("_`6", (-1252), "PlllE");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_`6", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      String string0 = StringUtils.replaceFirst("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals("U~CKh1Zw8zjGJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'd', (int) 'Z', (int) 'Z');
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("U~CKh1Zw8zjGJ");
      assertTrue(string2.equals((Object)string0));
      assertEquals("U~CKh1Zw8zjGJ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "@9+B)#eW{YI");
      assertEquals(45, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("U~CKh1Zw8zjGJ", '~');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("h1Zw8zjGJU~CK", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "h1Zw8zjGJU~CK", 'C');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) '~';
      String string4 = StringUtils.join(intArray0, 'Z');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("107Z126", string4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {107, 126}, intArray0);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "&%Cf", (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals(1.0, double0, 0.01);
      
      String string5 = StringUtils.abbreviateMiddle("P8JE%u\r'Uy5n", (String) null, 91);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("P8JE%u\r'Uy5n", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Threshold must n", (String) null, 21);
      assertEquals("Threshold must n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '?';
      longArray0[2] = (long) 'A';
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      
      String string1 = StringUtils.rotate("", 1773);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'X');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringBetween("", "\n");
      assertNull(string2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 's';
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (-1);
      intArray0[4] = (int) '?';
      intArray0[5] = (int) 'A';
      intArray0[6] = 0;
      intArray0[7] = (int) 'A';
      String string3 = StringUtils.join(intArray0, 'X');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("115X88X88X-1X63X65X0X65", string3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {115, 88, 88, (-1), 63, 65, 0, 65}, intArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("", "115X88X88X-1X63X65X0X65");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap((String) null, 'X');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'Z', 1596, 510);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("h<z'8!u2A", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Zj");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Zj", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("Zj");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Zj", "DefaultTimeZone");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("DefaultTimeZone");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.split("Zj");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize("Mwni=um abbreviatisn widtE with offset is %dThe character ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("mwni=um abbreviatisn widtE with offset is %dThe character ", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = ']';
      String string3 = StringUtils.right("%47D;c<']?>@^#sE;D", 292);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%47D;c<']?>@^#sE;D", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, ']');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("Zj", string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("!!9vcqRDLp+'y&;h:", "q>Oa@");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("!!9vcqRDLp+'y&;h:", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumericSpace("!!9vcqRDLp+'y&;h:");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty("mwni=um abbreviatisn widtE with offset is %dThe character ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string6 = StringUtils.replaceChars("Mwni=um abbreviatisn widtE with offset is %dThe character ", '=', ']');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Mwni]um abbreviatisn widtE with offset is %dThe character ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad((String) null, 2308, "%47D;c<']?>@^#sE;D");
      assertNull(string7);
      
      String string8 = StringUtils.stripStart("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "]~G+OWgBH;7");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.rightPad(">L]H<9YtW^", 292, (String) null);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertEquals(">L]H<9YtW^                                                                                                                                                                                                                                                                                          ", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 523, "");
      assertEqualsstring0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 38, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 17L;
      String string0 = StringUtils.join(longArray0, '\"', 321, 321);
      assertEquals("", string0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, (-1L), 0L, 0L, 17L}, longArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 321, (-1254));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      String string1 = StringUtils.leftPad("", 647, '\"');
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Y> {H@08=CROMZ", '\"');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Y> {H@08=CROMZ", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, ' ', 42, 42);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, ' ');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      List<Object> list0 = null;
      char char0 = '&';
      int int0 = 1186;
      int int1 = (-338);
      String string0 = StringUtils.join((List<?>) null, '&', 1186, (-338));
      assertNull(string0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>((-611));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -611
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, 'M');
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("java.lang.Object@70232dcMjava.lang.Object@62a90eddMjava.lang.Object@3ff01606Mjava.lang.Object@61f398baMjava.lang.Object@77f1c28aMjava.lang.Object@5d04f54fMjava.lang.Object@627b98cf", "java.lang.Object@70232dcMjava.lang.Object@62a90eddMjava.lang.Object@3ff01606Mjava.lang.Object@61f398baMjava.lang.Object@77f1c28aMjava.lang.Object@5d04f54fMjava.lang.Object@627b98cf");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@70232dcMjava.lang.Object@62a90eddMjava.lang.Object@3ff01606Mjava.lang.Object@61f398baMjava.lang.Object@77f1c28aMjava.lang.Object@5d04f54fMjava.lang.Object@627b98cf";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@70232dcMjava.lang.Object@62a90eddMjava.lang.Object@3ff01606Mjava.lang.Object@61f398baMjava.lang.Object@77f1c28aMjava.lang.Object@5d04f54fMjava.lang.Object@627b98cf";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat("org.junitpioneer.vintage.TimeoutExtensionL6]N01", 8);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01org.junitpioneer.vintage.TimeoutExtensionL6]N01", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("org.junitpioneer.vintage.TimeoutExtensionL6]N01", 114, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensionorg.junitpioneerorg.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd((String) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      boolean boolean2 = StringUtils.containsOnly(charSequenceArray0[1], charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(arrayList0);
      
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(""));
      assertNotNull(hashSet0);
      
      boolean boolean3 = arrayList0.removeAll(hashSet0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean3);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertFalse(hashSet0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean4 = arrayList0.add(locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, ",CRYmN*=i8");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("AUTOSELECT_FILTERING,CRYmN*=i8REJECT_EXTENDED_RANGES", string3);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("", ",CRYmN*=i8");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("5O0:Fq63#W.T2.so", '|');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("|5O0:Fq63#W.T2.so|", string5);
      assertNotNull(string5);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray1, "");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray3);
      
      String string6 = StringUtils.abbreviate((String) null, "', is neither of type Map.Entry nor an Array", (-786));
      assertNull(string6);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray4);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray1, stringArray3);
      assertSame(stringArray1, stringArray4);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
      assertSame(stringArray4, stringArray3);
      assertSame(stringArray4, stringArray1);
      assertSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray0);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray4.length);
      assertNotNull(stringArray4);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("O+ueed");
      assertEquals("O+ueed", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("O+ueed");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("O+ueed");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'U');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeIgnoreCase("O+ueed", "O+ueed");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("O+ueed", '|');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|O+ueed|", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, ",CRYmN*=i8");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ",CRYmN*=i8";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2793);
      shortArray0[1] = (short)2270;
      shortArray0[1] = (short)21;
      String string3 = StringUtils.join(shortArray0, '^');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-2793^21^0", string3);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2793), (short)21, (short)0}, shortArray0);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "-2793^21^0";
      charSequenceArray0[2] = (CharSequence) "O+ueed";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNull(charSequence0);
      
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "|O+ueed|";
      charSequenceArray0[5] = (CharSequence) "O+ueed";
      charSequenceArray0[6] = (CharSequence) ",CRYmN*=i8";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) ",CRYmN*=i8";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("O+ueed", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase("\r", "-2793^21^0", "O+ueed");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("_{V$To&``(.j@R", (-1373), 360);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("_{V$To&``(.j@R", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lf`";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "lf`";
      stringArray1[1] = "lf`";
      stringArray1[2] = "lf`";
      stringArray1[3] = "ngs must not be null";
      stringArray1[4] = "lf`";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("lf`", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringBetween("%47D;c<']?>@^#sE;D", "Index: Index: ");
      assertNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF", 160);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = ')';
      String string3 = StringUtils.join(charArray0, ')', 160, 160);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'P', ')'}, charArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.trimToEmpty("ZjY> {H@08=CROMZ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll((String) null, "acI%/={xiIx");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.trimToEmpty("ZjY> {H@08=CROMZ");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Zj");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Zj", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Zj", "DefaultTimeZone");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("DefaultTimeZone");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.split("Zj");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize("Mwni=um abbreviatisn widtE with offset is %dThe character ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("mwni=um abbreviatisn widtE with offset is %dThe character ", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[3] = '=';
      String string3 = StringUtils.wrapIfMissing("DefaultTimeZone", "DefaultTimeZone");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DefaultTimeZone", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Zj", (CharSequence) "");
      assertEquals(3, int0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("Zj", "DefaultTimeZone", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Zj", string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("m-Iy~U\"*mx}W", "m-Iy~U\"*mx}W", "m-Iy~U\"*mx}W");
      assertEquals("m-Iy~U\"*mx}W", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("m-Iy~U\"*mx}W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '`');
      assertNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string1);
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(objectArray0);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = "io";
      String string4 = StringUtils.wrap("io", "I^!*jqZ#Eud]h");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("I^!*jqZ#Eud]hioI^!*jqZ#Eud]h", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.split("");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)24;
      // Undeclared exception!
      try { 
        Charset.forName("i;wsjM|(X27!;({:,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // i;wsjM|(X27!;({:,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("junit");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", "@dG'}\"", 97, 3188);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("LaunchTmime", 97, "The String must not be empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be emptyThe String must not be emptyThe String must not be emptyThLaunchTmime", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", " vs ", Integer.MAX_VALUE);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("junit", "7cGJlLv1|$", "junit");
      assertNull(stringArray2);
      
      String string2 = StringUtils.repeat('~', 3188);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("Zj", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.repeat('4', (-3230));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Zj", 36);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZj", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlpha("ZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZjZj");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ka{>V";
      charSequenceArray0[2] = (CharSequence) "v\":;,O0";
      charSequenceArray0[3] = (CharSequence) ">\"173.";
      charSequenceArray0[4] = (CharSequence) ">\"173.";
      charSequenceArray0[5] = (CharSequence) "ka{>V";
      String string0 = StringUtils.stripEnd("v\":;,O0", ">\"173.");
      assertEquals("v\":;,O0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "v\":;,O0";
      String string1 = StringUtils.appendIfMissing("ka{>V", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ka{>V", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ka{>V", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ka{>V", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.center("", (-1), "v\":;,O0");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ka{>V";
      String string4 = StringUtils.replaceEach("b@NQ/&,Rv{;A0aj6d&", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("b@NQ/&,Rv{;A0aj6d&", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("b@NQ/&,Rv{;A0aj6d&", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.chomp(stringArray0[2]);
      assertEquals(3, stringArray0.length);
      assertNull(string5);
      
      String string6 = StringUtils.left((String) null, (-1));
      assertNull(string6);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-56);
      String string7 = StringUtils.join(byteArray0, 'i');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("2i87i0i-7i32i-65i-35i-56", string7);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)87, (byte)0, (byte) (-7), (byte)32, (byte) (-65), (byte) (-35), (byte) (-56)}, byteArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 95);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Q!LeQ *", "Q!LeQ *");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ExpectedException");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Q!LeQ *", 1396);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, stringArray0.length);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.replaceEach("n", (String[]) null, (String[]) null);
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '%');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", ",CRYmN*=i8");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.center("AmQB<y#VI%*wX#/S", 3553);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isEmpty(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.leftPad("", 71, "L6]N01");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N0", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Object varargs must not be null", ",CRYmN*=i8", 672);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split(",CRYmN*=i8", ' ');
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray0, "L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N01L6]N0");
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray4.length);
      assertNotNull(stringArray4);
      
      int int0 = StringUtils.indexOf((CharSequence) ",CRYmN*=i8", 672);
      assertEquals((-1), int0);
      
      String[] stringArray5 = StringUtils.splitPreserveAllTokens("]v~=~1%$h7{H(.zHFL");
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray0);
      assertNotSame(stringArray5, stringArray1);
      assertEquals(1, stringArray5.length);
      assertNotNull(stringArray5);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 71;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 536.223842232861;
      doubleArray0[3] = (-274.81345);
      doubleArray0[4] = (double) 672;
      doubleArray0[5] = (double) ' ';
      doubleArray0[6] = (double) ' ';
      doubleArray0[7] = (-1019.2214);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'Y', 127, 2287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("Object varargs must not be null", "\n", "\n");
      assertNull(string4);
      
      String string5 = StringUtils.normalizeSpace("F");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("F", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1GZ`ac+:JHJAg4", 'B');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.endsWith((CharSequence) null, "F");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "',>", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      
      String string0 = StringUtils.mid("`1lD/9<h^X", 377, 2664);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("',>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "`1lD/9<h^X", (CharSequence) "',>", 1284);
      assertEquals(10, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("2");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.right("',>", 48);
      assertFalse(string1.equals((Object)string0));
      assertEquals("',>", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      int int1 = StringUtils.indexOf((CharSequence) "bJSajm", 10, 723);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.defaultString("',>");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("',>", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.defaultString("blank_blank_blank_2014", "!:b#{e9KK*C&Bz{");
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("blank_blank_blank_2014", (-10), (-10));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "blank_blank_blank_2014";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      String string2 = StringUtils.join(objectArray0, "blank_blank_blank_2014");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("!:b#{e9KK*C&Bz{");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "blank_blank_blank_2014", 0, (-10));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014java.lang.Object@48c51c0d");
      assertEquals(41, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceAll("blank_blank_blank_2014", "XVik", "blank_blank_blank_2014");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("blank_blank_blank_2014", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "!:b#{e9KK*C&Bz{", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'c', 'c', 'c', 'c', 'c', 'c', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "XVik", (CharSequence) null, 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.abbreviate("blank_blank_blank_2014", "ZjY> {H@08=CROMZ", (-711), 65536);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("blank_blank_blank_2014", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("!:b#{e9KK*C&Bz{", "blank_blank_blank_2014");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("!:b#{e9KK*C&Bz{", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "The String must not be empty");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("`1lD/9<h^X", (String) null, 40);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String must not be empty", (CharSequence) null, 1152);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate((String) null, 196);
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'Y');
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBetween(",CRYmN*=i8", "");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'X';
      String string5 = StringUtils.join(intArray0, '6');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("88", string5);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {88}, intArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter(",_P*OFkpM\"KuQ5<", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals(",_P*OFkpM\"KuQ5<", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.SPACE;
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals(" ", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ",_P*OFkpM\"KuQ5<";
      charSequenceArray0[1] = (CharSequence) ",_P*OFkpM\"KuQ5<";
      charSequenceArray0[2] = (CharSequence) "88";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) ",CRYmN*=i8";
      charSequenceArray0[5] = (CharSequence) " ";
      boolean boolean2 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(6, charSequenceArray0.length);
      
      String string8 = StringUtils.capitalize("");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 335);
      assertEquals("j+'w7[-KUtX)I", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("KUtX)Ij+'w7[-", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      assertNotNull(string3);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string4 = StringUtils.join((Object[]) null, '(');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("Ij+'w7[-KUtX)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "und", "Ij+'w7[-KUtX)");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.repeat('(', 29);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("(((((((((((((((((((((((((((((", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equalsAny("org.junitpioneer.jupiter.DefaultLocaleExtension", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      String string6 = StringUtils.trimToNull(", '");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(", '", string6);
      assertNotNull(string6);
      
      String string7 = "\\u";
      String string8 = StringUtils.substring(string7, 29, 33);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.countMatches((CharSequence) "g,dOc 8yt|", (CharSequence) ", '");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.leftPad("D7TGz@qKDFxp", 5132, 'q');
      assertNotNull(string0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertFalse(string1.equals((Object)string0));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it-IT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.stripToEmpty("Strings must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Nq)!%&", '&');
      assertEquals("&Nq)!%&", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "&Nq)!%&");
      assertFalse(charBuffer0.hasArray());
      assertEquals("&Nq)!%&", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isBlank(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals("&Nq)!%&", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lm/98h^o";
      stringArray0[1] = "`1lm/98h^o";
      stringArray0[2] = "LaunchTime";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-1.0);
      String string0 = StringUtils.join(doubleArray0, '1', 10, 0);
      assertEquals("", string0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0, 10.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("p{InCombiningDiacriticalMarks}+", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("arks}+Mp{InCombiningDiacritical", string1);
      assertNotNull(string1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.wrapIfMissing(">$: ?x[K?6$M", 'M');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("M>$: ?x[K?6$M", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ".jrH(dd_,");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '9', 0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">Rz96dNYu", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "LaunhTie", (char[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.mid("e must not be null", 3144, 84);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("LaunhTie");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.chomp("Y> {H@08=CROMZ", "',>");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("(@1vk[~7lUN.zSvKQ;", "Y> {H@08=CROMZ");
      assertEquals((-49), int0);
      
      String string2 = StringUtils.defaultString((String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "',>", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.trim((String) null);
      assertNull(string4);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "LaunhTie";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '>', (-71), 1290);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -71
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 2706, '=');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(13, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string0 = StringUtils.deleteWhitespace("LA WTW");
      assertEquals("LAWTW", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "LA WTW");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("The String must not be empty", 0, "");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace(stringArray0[2], "`1lD/9<h^X", "The String must not be empty");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("`1lD/9<h^X", "", 0, 139);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("The String must not be empty", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("The String must not be empty", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "zd9AjT+1G|c)w", "`1lD/9<h^X");
      assertNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "The String must not be empty");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`1lD/9<h^X", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[2] = (Object) "ilv!W=wbZGFeFE";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ilv!W=wbZGFeFE";
      stringArray0[1] = "ilv!W=wbZGFeFE";
      stringArray0[2] = "ilv!W=wbZGFeFE";
      stringArray0[3] = "ilv!W=wbZGFeFE";
      stringArray0[4] = "ilv!W=wbZGFeFE";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("ilv!W=wbZGFeFE");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("ilv!W=wbZGFeFE");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      
      String string0 = StringUtils.trimToNull("ilv!W=wbZGFeFE");
      assertEquals("ilv!W=wbZGFeFE", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isMixedCase("ilv!W=wbZGFeFE");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = StringUtils.substringBefore("ilv!W=wbZGFeFE", ", '");
      assertTrue(string1.equals((Object)string0));
      assertEquals("ilv!W=wbZGFeFE", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "]1'W!}//95G=l>]{n", '8');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean3 = StringUtils.isEmpty("ilv!W=wbZGFeFE");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("u]On]5kG%", "ilv!W=wbZGFeFE", (-1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean4 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean4);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",F-J@p6ZHYSu/Xoz");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("MU!83");
      assertEquals("mU!83", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "mU!83", (CharSequence) "MU!83");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("MU!83");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((byte[]) null, '7', 37, 93);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "maxWith cannot be negative", (int) (byte)85);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.rightPad("Object varargs must not be null", (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Object varargs must not be null", (CharSequence) "\n");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.stripEnd("(SF.~K%", "(SF.~K%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("g,dOc 8yt|#");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8", string1);
      assertNotNull(string1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      ArrayList<Locale.FilteringMode> arrayList2 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.mid("g,dOc 8yt|#", 73, 73);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "(SF.~K%", 2065);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      longArray0[2] = (long) 'A';
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '?'}, charArray0);
      
      String string1 = StringUtils.rotate("", 1773);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'X');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringBetween("", "\n");
      assertNull(string2);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 's';
      intArray0[1] = (int) 'X';
      intArray0[2] = (int) 'X';
      intArray0[3] = (-1);
      intArray0[4] = (int) '?';
      intArray0[5] = (int) 'A';
      intArray0[6] = 0;
      intArray0[7] = (int) 'A';
      String string3 = StringUtils.join(intArray0, 'X');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("115X88X88X-1X63X65X0X65", string3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {115, 88, 88, (-1), 63, 65, 0, 65}, intArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("", "115X88X88X-1X63X65X0X65");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      int[] intArray0 = new int[6];
      intArray0[0] = 1534;
      String string0 = StringUtils.rotate(">\"173.", (-621));
      assertEquals("73.>\"1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ">\"173.", '?');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(">\"173.", " ");
      assertNull(string1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '?';
      intArray1[1] = (int) '/';
      intArray1[2] = (-621);
      intArray1[3] = (-621);
      intArray1[4] = (int) 's';
      intArray1[5] = (int) 's';
      intArray1[7] = (int) '?';
      String string2 = StringUtils.join(intArray1, 'e');
      assertFalse(string2.equals((Object)string0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("63e47e-621e-621e115e115e0e63", string2);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {63, 47, (-621), (-621), 115, 115, 0, 63}, intArray1);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(">\"173.", "63e47e-621e-621e115e115e0e63");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("] WT,k`B*9CEWOw/");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("9", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.stripAccents("] xP-");
      assertEquals("] xP-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("_:T7[J-/?x@PC,", "mR3Vp4nEGXx");
      assertNull(string2);
      
      String string3 = StringUtils.replaceAll((String) null, "", (String) null);
      assertNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'n';
      charArray0[2] = ']';
      charArray0[3] = '#';
      charArray0[4] = '@';
      charArray0[5] = '$';
      charArray0[6] = 'm';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 65536, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, ' ', 'a');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("*]_keqSOxRtp~", ", '");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("*]_keqSOxRtp~");
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("Y5hAv9B |P,8?&", "Y5hAv9B |P,8?&", 9);
      assertEquals("Y5hAv9B |P,8?&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Y5hAv9B |P,8?&", ", '");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Y5hAv9B |P,8?&", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAny(", '", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.left("Y5hAv9B |P,8?&", 9);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y5hAv9B |", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isEmpty("Y5hAv9B |");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Y5hAv9B |P,8?&", (CharSequence) "Y5hAv9B |P,8?&", 64);
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceChars((String) null, 'L', '\'');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("9", "9", "9");
      assertEquals("9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("9", "9");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ">Rz9dNY";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(">Rz9dNY", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.rotate("-T(z_Sw+oit1ry^5", (-119));
      assertEquals("+oit1ry^5-T(z_Sw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(".]U"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "-T(z_Sw+oit1ry^5");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(".]U"));
      assertTrue(linkedList0.contains("-T(z_Sw+oit1ry^5"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.remove((Object) "-T(z_Sw+oit1ry^5");
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(object0));
      
      String string1 = StringUtils.substringBetween("The character ", "na\"o3<'!l31d", "na\"o3<'!l31d");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) ">G8[f#>o=a3kr[", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(object0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "-T(z_Sw+oit1ry^5", (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string2 = " vs ";
      String string3 = StringUtils.appendIfMissingIgnoreCase(" vs ", "te'O-eNp:H>tmwu", stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs te'O-eNp:H>tmwu", string3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(3, stringArray0.length);
      
      boolean boolean5 = linkedList0.offerLast("+oit1ry^5-T(z_Sw");
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean5);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains("+oit1ry^5-T(z_Sw"));
      
      String string4 = null;
      String string5 = StringUtils.defaultString(" vs ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.compare("', is neither of type Map.Entry nor an Array", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "+oit1ry^5-T(z_Sw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+'-(-x<~P<Ek{b", "+'-(-x<~P<Ek{b", (-3486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[2] = (Object) "ilv!W=wbZGFeFE";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ilv!W=wbZGFeFE";
      stringArray0[1] = "ilv!W=wbZGFeFE";
      stringArray0[2] = "ilv!W=wbZGFeFE";
      stringArray0[3] = "ilv!W=wbZGFeFE";
      stringArray0[4] = "ilv!W=wbZGFeFE";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ilv!W=wbZGFeFE");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("ilv!W=wbZGFeFE");
      assertFalse(boolean0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = StringUtils.appendIfMissing("ilv!W=wbZGFeFE", "ilv!W=wbZGFeFE", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("ilv!W=wbZGFeFE", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(string0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayLanguage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("Italian", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-1);
      longArray0[1] = 139L;
      longArray0[2] = (long) 222;
      longArray0[3] = (long) 'h';
      longArray0[4] = (long) (-1);
      longArray0[5] = 0L;
      longArray0[6] = (long) 222;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'f', (-1340), 4747);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y> {H@08=CROMZ9MJ0S|";
      stringArray0[1] = "Y> {H@08=CROMZ9MJ0S|";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '', 37, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, ",CRYmN*=i8");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ",CRYmN*=i8";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2793);
      shortArray0[1] = (short)2270;
      shortArray0[2] = (short)21;
      String string3 = StringUtils.join(shortArray0, '^');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("-2793^2270^21", string3);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-2793), (short)2270, (short)21}, shortArray0);
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "-2793^2270^21";
      charSequenceArray0[2] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNull(charSequence0);
      
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) ",CRYmN*=i8";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) ",CRYmN*=i8";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase("\r", "-2793^2270^21", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "LaunhTie", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      
      String string0 = StringUtils.mid("`1lD/9<h^X", 377, 2664);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("',>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("',>", '>');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">>>>", string1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("',>");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("',>", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("junit-pioneer");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("junit-pioneer", string3);
      assertNotNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "',>", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "',>", (CharSequence) "',>", (-1957));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "'>";
      char[] charArray0 = new char[4];
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "LaunhTie", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '>', '>', '>'}, charArray0);
      
      String string0 = StringUtils.mid("`1lD/9<h^X", 377, 2659);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("'>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.split("'>", '>');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("`1lD/9<h^X", " ", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`1lD/9<h^X", string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("'>"));
      assertNotNull(hashSet0);
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("'>"));
      assertNotNull(iterator0);
      
      int int0 = StringUtils.length("`1lD/9<h^X");
      assertEquals(10, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase(" ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.defaultString("`1lD/9<h^X");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("_6LK\"(!\u0003", "_6LK\"(!\u0003", "_6LK\"(!\u0003");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 8
         // _6LK\"(!\u0003
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 48, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      String string1 = StringUtils.leftPad("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 48, '$');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("rwfnqy", "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 47
         // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[
         //                                                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("\n", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("F");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("F", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1GZ`ac+:JHJAg4", 'B');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.center("org", (-898));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string7 = StringUtils.deleteWhitespace("M2B*");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("M2B*", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.substringAfter("2VsnV6<}gz`Cq>1Sp6", "2VsnV6<}gz`Cq>1Sp6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2VsnV6<}gz`Cq>1Sp6", 54);
      assertEquals(5, int0);
      
      String string1 = StringUtils.trimToEmpty("2VsnV6<}gz`Cq>1Sp6");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2VsnV6<}gz`Cq>1Sp6", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "2VsnV6<}gz`Cq>1Sp6";
      charSequenceArray0[2] = (CharSequence) "2VsnV6<}gz`Cq>1Sp6";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("2VsnV6<}gz`Cq>1Sp6", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceChars("junit-pioneer", '^', 'F');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("junit-pioneer", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[2], charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'^', '^'}, charArray0);
      
      String string3 = StringUtils.substringAfterLast("", "2VsnV6<}gz`Cq>1Sp6");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "Junit";
      String string5 = StringUtils.normalizeSpace("Junit");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Junit", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, charSequenceArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      boolean boolean3 = StringUtils.isAsciiPrintable(charBuffer0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "junit-pioneer";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)118;
      // Undeclared exception!
      try { 
        Charset.forName("junit-pioneer");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // junit-pioneer
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = "lb\"cG;f";
      String string1 = StringUtils.strip("lb\"cG;f", "The Array must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"cG;f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("The Array must not be null", "The String must not be empty");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The Array must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("] xP-", 'P');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("P] xP-P", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = 'E';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "P] xP-P", charArray0);
      assertFalse(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P', 'P', 'E'}, charArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'P';
      intArray0[1] = (int) 'P';
      intArray0[2] = (int) 'P';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '0', 67, 65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("{94z^O1zPC{Ql!)y5<F");
      assertEquals("{94z^O1zPC{Ql!)y5<F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("{94z^O1zPC{Ql!)y5<F", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{94z^O1zPC{Ql!)y5<F", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      short[] shortArray0 = new short[11];
      String string0 = StringUtils.join(shortArray0, 'C');
      assertEquals("0C0C0C0C0C0C0C0C0C0C0", string0);
      assertEquals(11, shortArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "0C0C0C0C0C0C0C0C0C0C0", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Locale must not be null");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.join((Object[]) stringArray0, '(');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("(Object varargs must not be null(\n((offset cannot be negative", string6);
      assertEquals(5, stringArray0.length);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNumericSpace("Locale must not be null");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty("Locale must not be null");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string7 = StringUtils.difference("qCFs(%X-oS*h %6DiS~", ">4`j#W%/TJ");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals(">4`j#W%/TJ", string7);
      assertNotNull(string7);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string8 = StringUtils.chop("\n");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Locale must not be null"));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "nTajxyG)>lye|{mqk~", (-1892), 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1892
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.RegExUtils", (CharSequence) "", 1543);
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      String string0 = StringUtils.join(charArray0, '3', 1415, 4);
      assertEquals("", string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 2250);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "]v~=~1%$h7{H(.zHFL", (CharSequence) "", 76);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("W_$a(T\"PFt&.QU~6R");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("io");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("io", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap(",yz5y0ZjOb-;n?k#", ':');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(",yz5y0ZjOb-;n?k#", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("^(y3ZFx=c", "^(y3ZFx=c");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 10
         // ^(y3ZFx=c
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      int[] intArray0 = new int[6];
      intArray0[0] = 1534;
      String string0 = StringUtils.rotate(">\"173.", (-621));
      assertEquals("73.>\"1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ">\"173.", '?');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(">\"173.", " ");
      assertNull(string1);
      
      String string2 = StringUtils.removePattern("#", " @");
      assertFalse(string2.equals((Object)string0));
      assertEquals("#", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("#");
      assertTrue(boolean0);
      
      String string3 = StringUtils.difference(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL", "] xP-");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("] xP-", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("maxWith cannot be negative", "Array element ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("maxWith cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce(", Length: ", " @", " @");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(", Length: ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToEmpty((String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " @", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("cS");
      assertEquals("c", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "c", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("P-JJfF3j0", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("P-JJfF3j0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.replaceIgnoreCase("<svG\"`UA/", "I", "<svG\"`UA/");
      assertEquals("<svG\"`UA/", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "<svG\"`UA/";
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '(');
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.removeEndIgnoreCase("<svG\"`UA/", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<svG\"`UA/", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "<svG\"`UA/";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("pMm/", "pMm/", "pMm/", 136);
      assertEquals("pMm/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is %dThe character ");
      assertEquals("Minimum abbreviation width with offset is %dThe character", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is %dThe character ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %dThe character", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width with offset is %dThe character", "Minimum abbreviation width with offset is %dThe character");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(".]U", stringArray0);
      assertEquals(2, int0);
      assertEquals(3, stringArray0.length);
      
      String string3 = StringUtils.chop("cKK`3=-$7x@ cJVwWal");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("cKK`3=-$7x@ cJVwWa", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(".]U", "Minimum abbreviation width with offset is %dThe character");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Minimum abbreviation width with offset is %dThe character ", (-2440));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "cKK`3=-$7x@ cJVwWa", (CharSequence) "cKK`3=-$7x@ cJVwWal");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.stripAccents("Xe\"0=pgC0BYi");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Xe\"0=pgC0BYi", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad(".]U", 3088, 'R');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.replace("cKK`3=-$7x@ cJVwWal", "cKK`3=-$7x@ cJVwWal", "Minimum abbreviation width is %d", 3088);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.joinWith(".]U", stringArray0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("..]U].]UU", string7);
      assertEquals(3, stringArray0.length);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("Xe\"0=pgC0BYi", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      int int2 = StringUtils.indexOfDifference((CharSequence) "Minimum abbreviation width with offset is %dThe character ", (CharSequence) "cKK`3=-$7x@ cJVwWal");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string8 = StringUtils.abbreviate("", 6);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[14];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(14, charBufferArray0.length);
      assertNull(charBuffer0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) charBufferArray0);
      assertEquals((-1), int0);
      assertEquals(14, charBufferArray0.length);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">(1r3.", ">(1r3.", 1176, 1176);
      assertEquals(">(1r3.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">(1r3.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1176.0A0.0A1176.0A-1.0", string1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1176.0F, 0.0F, 1176.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1176.0A0.0A1176.0A-1.0", "", "", 1176);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1176.0A0.0A1176.0A-1.0", string2);
      assertNotNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) null, "1176.0A0.0A1176.0A-1.0");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("`1lD/9<h^X`1lD/9<h^X", 'M');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.removeFirst("xgM", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("xgM", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase(">(1r3.");
      assertFalse(boolean0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) ">(1r3.", 48);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "l==f4Y/bloj:5/7gI", ">(1r3.");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', 97, 0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PS)mUW3EE", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("PS)mUW3EE");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("PS)MUW3EE", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("", (String) null);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[14];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(14, charBufferArray0.length);
      assertNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "PS)mUW3EE";
      String string0 = StringUtils.substringBefore("<\"y $ohKpwW,X", "Expected exception %s was not thrown.");
      assertEquals("<\"y $ohKpwW,X", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "<\"y $ohKpwW,X";
      charSequenceArray0[2] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[3] = (CharSequence) "PS)mUW3EE";
      String string1 = StringUtils.wrap("Failed to create default temp directory", 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("SFailed to create default temp directoryS", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "SFailed to create default temp directoryS";
      charSequenceArray0[5] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[6] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[7] = (CharSequence) "PS)mUW3EE";
      charSequenceArray0[8] = (CharSequence) "PS)mUW3EE";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("PS)mUW3EE", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.rightPad("Expected exception %s was not thrown.", (-468), 'S');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("<\"y $ohKpwW,X");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<\"y $ohKpwW,X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("maxWith cannot be negative", 105);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "<\"y $ohKpwW,X", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.defaultString("Expected exception %s was not thrown.");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("Expected exception %s was not thrown.", 8192, 8192);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Expected exception %s was not thrown.", charSequenceArray0[5], 8192);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center("", 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("-E ", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("-E ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern((String) null, "ExpectedException", "Arguments cannot both be null.u2_6&mH+y.w");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.joinWith("offset cannot be negative", charSequenceArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", string7);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", (CharSequence) "-E ");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "ExpectedException", charSequenceArray0[0]);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(7, charSequenceArray0.length);
      
      String string8 = StringUtils.uncapitalize("The character must not be null");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("the character must not be null", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "the character must not be null", (CharSequence) "-E ", 45);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (-1), "");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string9);
      assertNotNull(string9);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[3], 2, 8192);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("UP::(6_hUeD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 54, 54);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceOnce("LaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTime", "LaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTime", ",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL");
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("Canada", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("7[nZ$?_p-", locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("7[NZ$?_P-", string2);
      assertNotNull(string2);
      
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.setDefault(locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotSame(locale0, locale1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertNotNull(arrayDeque0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      String string3 = StringUtils.stripToEmpty("pPac8Zz&Hp:#e$,");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("pPac8Zz&Hp:#e$,", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("'Ckv@C,a4E{|w|LW", "pPac8Zz&Hp:#e$,", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("'Ckv@C,a4E{|w|LWpPac8Zz&Hp:#e$,", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      Locale locale2 = Locale.ENGLISH;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string5 = locale2.getDisplayLanguage();
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.toString());
      assertEquals("English", string5);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 222;
      longArray0[1] = 0L;
      longArray0[2] = (long) 'h';
      longArray0[3] = (long) 'h';
      longArray0[4] = (long) 'h';
      longArray0[5] = (long) 222;
      longArray0[6] = (long) 'h';
      longArray0[7] = (long) 'h';
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny("offset cannot be negative", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = "emv";
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string1 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", (-1749));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "Locale must not be null");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ca<bNp5y-La(", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "-");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("(0[c;g:8O59G)nc&p", (String) null, (String) null);
      assertEquals("(0[c;g:8O59G)nc&p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("`;M2J>45_kD~", 'z');
      assertFalse(string3.equals((Object)string2));
      assertEquals("z`;M2J>45_kD~z", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right((String) null, 7);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "offset cannot be negative");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBefore("offset cannot be negative", "...");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("\n", 114);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("\n", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "...");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String string0 = StringUtils.rotate("[?[j3T", (-621));
      assertEquals("j3T[?[", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "[?[j3T", 'y');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween("LaunchTime", "j3T[?[");
      assertNull(string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'y');
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("The String must not be empty", " ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("String must not be empty", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.reverseDelimited("`1lD/9<h^X", 'M');
      assertEquals("`1lD/9<h^X", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("XDJ>X'", "XDJ>X'", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XDJ>X'", string1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("LaunchTime", 377, 1075);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.chomp("\n", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "`1lD/9<h^X");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripToEmpty("LaunchTime");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LaunchTime", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("", "OD@", (-4125));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width with offset is %d", "`1lD/9<h^X");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[2] = 'P';
      String string0 = StringUtils.join(charArray0, '3', 4, 4);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', '\u0000', 'P'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 84);
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", ",yz5y0ZjOb-;n?k#");
      assertFalse(string1.equals((Object)string0));
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("]v~=~1%$h7{H(.zHFL");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]v~=~1%$h7{H(.zHFL", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ",yz5y0ZjOb-;n?k#", (CharSequence) ",yz5y0ZjOb-;n?k#", 4);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Locale must not be null");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.right("]v~=~1%$h7{H(.zHFL", 0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.uncapitalize("r/]f6R1");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("r/]f6R1", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("", 0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("", 'P');
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.substringBefore("1z.iQiNFmAGo=7", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(807);
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(807, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(807, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(807, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(807, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals(807, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(807, charBuffer1.limit());
      assertEquals(807, charBuffer1.capacity());
      assertEquals(807, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertNotNull(charBuffer1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[7];
      charBufferArray0[0] = charBuffer0;
      charBufferArray0[1] = charBuffer1;
      CharBuffer charBuffer2 = CharBuffer.allocate(53);
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(53, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertEquals(53, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertTrue(charBuffer2.hasRemaining());
      assertTrue(charBuffer2.hasArray());
      assertEquals(53, charBuffer2.remaining());
      assertEquals(53, charBuffer2.capacity());
      assertFalse(charBuffer2.isDirect());
      assertNotSame(charBuffer2, charBuffer0);
      assertNotNull(charBuffer2);
      
      charBufferArray0[2] = charBuffer2;
      charBufferArray0[3] = charBuffer1;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(53);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(53, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(53, byteBuffer0.limit());
      assertEquals(53, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=53 cap=53]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer3 = charset0.decode(byteBuffer0);
      assertTrue(charBuffer3.equals((Object)charBuffer2));
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=53 lim=53 cap=53]", byteBuffer0.toString());
      assertEquals(53, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(53, byteBuffer0.limit());
      assertEquals(53, byteBuffer0.capacity());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(53, charBuffer3.limit());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals(53, charBuffer3.remaining());
      assertFalse(charBuffer3.isDirect());
      assertEquals(0, charBuffer3.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer3.toString());
      assertEquals(53, charBuffer3.length());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(53, charBuffer3.capacity());
      assertTrue(charBuffer3.hasArray());
      assertNotSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer0);
      assertNotNull(charBuffer3);
      
      charBufferArray0[4] = charBuffer3;
      charBufferArray0[5] = charBuffer1;
      charBufferArray0[6] = charBuffer0;
      CharBuffer charBuffer4 = StringUtils.firstNonBlank(charBufferArray0);
      assertFalse(charBuffer4.equals((Object)charBuffer2));
      assertFalse(charBuffer4.equals((Object)charBuffer3));
      assertTrue(charBuffer4.equals((Object)charBuffer1));
      assertFalse(charBuffer4.isReadOnly());
      assertEquals(807, charBuffer4.length());
      assertEquals(0, charBuffer4.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer4.toString());
      assertTrue(charBuffer4.hasArray());
      assertEquals(807, charBuffer4.capacity());
      assertEquals(807, charBuffer4.remaining());
      assertFalse(charBuffer4.isDirect());
      assertEquals(807, charBuffer4.limit());
      assertEquals(0, charBuffer4.position());
      assertTrue(charBuffer4.hasRemaining());
      assertNotSame(charBuffer4, charBuffer2);
      assertSame(charBuffer4, charBuffer0);
      assertNotSame(charBuffer4, charBuffer3);
      assertEquals(7, charBufferArray0.length);
      assertNotNull(charBuffer4);
      
      String string3 = StringUtils.joinWith("", charBufferArray0);
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, charBufferArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("YC>^>j1F.}UAtX1J", 4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Y...", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.rotate("", (-964));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, 'R');
      assertNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-964));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.right(" in an array of ", 32);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" in an array of ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("", (String) null);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-964));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'K';
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 32;
      longArray0[3] = (long) 127;
      longArray0[4] = (long) (-964);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'J', (-1649), (-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1649
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Index: ";
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '>';
      charArray0[7] = 'n';
      charArray0[8] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "kNu=m}G{zurUq0.Z:", charArray0);
      assertTrue(boolean0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>', '>', '>', 'n', '>'}, charArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("kNu=m}G{zurUq0.Z:");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substringBetween("kNu=m}G{zurUq0.Z:", "ptXwN|&cT8R.3aB");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("6&)aTPd;", "12H} s9", "`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be empty`1lD/9<h^XThe String must not be emptyThe String must not be empty");
      assertNull(stringArray0);
      
      int int0 = StringUtils.length("')4WD3-.5N#2]PR4`t");
      assertEquals(18, int0);
      
      String string2 = StringUtils.chomp((String) null, "kNu=m}G{zurUq0.Z:");
      assertNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 679, 254);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[2] = 'P';
      String string0 = StringUtils.join(charArray0, '3', 4, 4);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', '\u0000', 'P'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 84);
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", ",yz5y0ZjOb-;n?k#");
      assertFalse(string1.equals((Object)string0));
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("]v~=~1%$h7{H(.zHFL");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]v~=~1%$h7{H(.zHFL", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Lvcale must not be null", "Bycf#L'\"$27mKt?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ",yz5y0ZjOb-;n?k#", (CharSequence) ",yz5y0ZjOb-;n?k#", 4);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Lvcale must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.right(",yz5y0ZjOb-;n?k#", 0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray1, 'W');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LWvcaleW WmustW WnotW WbeW Wnull", string4);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray1.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("Zj");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.difference("U|N", "]v~=~1%$h7{H(.zHFL");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("]v~=~1%$h7{H(.zHFL", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.length("Bycf#L'\"$27mKt?");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(15, int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Zj", 84);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("Lvcale must not be null", string6);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z]!w,\"0m-) ]hk]rn", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2145, 'A');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(string3, "%47D;c<']?>@^#sE;D", 2145);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145;
      String string4 = "\r";
      int int1 = 99;
      String string5 = StringUtils.mid("%Uzey<.h", (-488), 99);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("%Uzey<.h", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Junitjunit");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "z]!w,\"0m-) ]hk]rn", (CharSequence) "%Uzey<.h", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("DefaultTimeZone");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.trimToNull("DefaultTimeZone");
      assertTrue(string1.equals((Object)string0));
      assertEquals("DefaultTimeZone", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it-IT", string2);
      assertSame(locale0, locale1);
      assertNotNull(string2);
      
      String string3 = locale1.getDisplayCountry(locale0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("Italia", string3);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string4 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "_]3J:/M2X(", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("_]3J:/M2X(offset cannot be negative", string4);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("jK64fz. /{ gC+!'sj", "Italia", charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("jK64fz. /{ gC+!'sjItalia", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.join(intArray0, 'V');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("68V101V102V97V117V108V116V84V105V109V101V90V111V110V101", string6);
      assertEquals(15, intArray0.length);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd("_f'^X5EgIcjp", "jK64fz. /{ gC+!'sj");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("_f'^X5EgIcjp", string7);
      assertNotNull(string7);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Zj"));
      assertNotNull(stack0);
      
      String string8 = StringUtils.join((List<?>) stack0, "_]3J:/M2X(", (-1), (-1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("", string8);
      assertFalse(stack0.contains("jK64fz. /{ gC+!'sj"));
      assertNotNull(string8);
      
      String string9 = StringUtils.wrap(",am1JKK4jYj{z;", 'V');
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertEquals("V,am1JKK4jYj{z;V", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.wrap("Zj", 'm');
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertEquals("mZjm", string10);
      assertNotNull(string10);
      
      Locale locale2 = Locale.PRC;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("zh_CN", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string11 = StringUtils.lowerCase("Italia", locale1);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("italia", string11);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotNull(string11);
      
      String string12 = StringUtils.abbreviate("_]3J:/M2X(offset cannot be negative", 828);
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertTrue(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string8));
      assertEquals("_]3J:/M2X(offset cannot be negative", string12);
      assertNotNull(string12);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringBetween("%47D;c<']?>@^#sE;D", "Index: Index: ");
      assertNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF", 160);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '1';
      String string3 = StringUtils.join(charArray0, '1', 160, 160);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'P', '1'}, charArray0);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "%47D;c<']?>@^#sE;D", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '8';
      charArray0[2] = 'l';
      charArray0[5] = 'w';
      charArray0[6] = 'j';
      String string0 = StringUtils.replaceFirst("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.truncate("", 121, 121);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-2362), (-3465));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      String string0 = "ygK: (oh";
      String string1 = StringUtils.replaceOnce("The Character must not be null", "ygK: (oh", "The Character must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Character must not be null", string1);
      assertNotNull(string1);
      
      String string2 = "d%&kC'1";
      String string3 = StringUtils.substringAfter("The Character must not be null", "d%&kC'1");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("d%&kC'1", "The Character must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("d%&kC'1", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "d%&kC'1", (-3700));
      assertFalse(boolean0);
      
      String string5 = StringUtils.deleteWhitespace("The Character must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("TheCharactermustnotbenull", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlpha("ygK: (oh");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = null;
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.stripToEmpty("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "The Character must not be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      String string7 = "Expected exception %s was not thrown.";
      int int0 = 3;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Expected exception %s was not thrown.", (-2383), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2383
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+YYsxf=}@b");
      assertEquals("+YYsxf=}@b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("+YYsxf=}@b", "?wVIm?Rb;yHuywl'u}");
      assertTrue(string1.equals((Object)string0));
      assertEquals("+YYsxf=}@b", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 195, 195);
      assertNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRANCE;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(locale1));
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityQueue0.contains(locale1));
      assertFalse(list0.contains(locale1));
      assertNotNull(list0);
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("allemand", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "~Lj,qAE`HOr[k";
      charSequenceArray0[1] = (CharSequence) "~Lj,qAE`HOr[k";
      charSequenceArray0[2] = (CharSequence) "~Lj,qAE`HOr[k";
      charSequenceArray0[3] = (CharSequence) "~Lj,qAE`HOr[k";
      charSequenceArray0[4] = (CharSequence) "~Lj,qAE`HOr[k";
      String string0 = StringUtils.replaceChars("~Lj,qAE`HOr[k", "~Lj,qAE`HOr[k", "~Lj,qAE`HOr[k");
      assertEquals("~Lj,qAE`HOr[k", string0);
      assertNotNull(string0);
      
      charSequenceArray0[5] = (CharSequence) "~Lj,qAE`HOr[k";
      charSequenceArray0[6] = (CharSequence) "~Lj,qAE`HOr[k";
      String string1 = StringUtils.appendIfMissingIgnoreCase("~Lj,qAE`HOr[k", "~Lj,qAE`HOr[k", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("~Lj,qAE`HOr[k", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~Lj,qAE`HOr[k", charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.stripToEmpty("~Lj,qAE`HOr[k");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("~Lj,qAE`HOr[k", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("~Lj,qAE`HOr[k", "~Lj,qAE`HOr[k", 0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("~Lj,qAE`HOr[k", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("wEKIq,NI:%Cg", charSequenceArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[kwEKIq,NI:%Cg~Lj,qAE`HOr[k", string4);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("P)>^w] xP-junit", 2819);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("P)>^w] xP-junit", string5);
      assertNotNull(string5);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>(arrayList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(linkedList0);
      
      String string6 = StringUtils.join((Iterable<?>) linkedList0, '2');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string7 = StringUtils.lowerCase("wEKIq,NI:%Cg", locale0);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("wekiq,ni:%cg", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEndIgnoreCase("wekiq,ni:%cg", "-AIB#-enf+");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("wekiq,ni:%cg", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.lastOrdinalIndexOf("~Lj,qAE`HOr[k", charSequenceArray0[1], 2733);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charSequenceArray0.length);
      
      String string9 = StringUtils.trim("wekiq,ni:%cg");
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("wekiq,ni:%cg", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.overlay((String) null, "wekiq,ni:%cg", (-1), (-1266));
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.rotate("", (-964));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", 'G');
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("P)>^w] xP-junit");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p)>^w] xp-junit", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("n7p.eykp|dxzY,5*ydg", 4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("n7p.", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "n7p.", (char[]) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "n7p.";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string5 = StringUtils.removePattern("P)>^w] xP-junit", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("P)>^w] xP-junit", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "n7p.");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string6 = StringUtils.stripStart("z:?Z99", "p)>^w] xp-junit");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("z:?Z99", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("n7p.", string7);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("n7p.", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string8 = StringUtils.normalizeSpace("p)>^w] xp-junit");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("p)>^w] xp-junit", string8);
      assertNotNull(string8);
      
      charSequenceArray1[0] = (CharSequence) "p)>^w] xp-junit";
      charSequenceArray1[1] = (CharSequence) "p)>^w] xp-junit";
      charSequenceArray1[2] = (CharSequence) "n7p.";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) null;
      charSequenceArray1[5] = (CharSequence) "";
      String string9 = StringUtils.stripToEmpty("z:?Z99");
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertEquals("z:?Z99", string9);
      assertNotNull(string9);
      
      charSequenceArray1[6] = (CharSequence) "z:?Z99";
      charSequenceArray1[7] = (CharSequence) "n7p.eykp|dxzY,5*ydg";
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean2);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(8, charSequenceArray1.length);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(charSequenceArray1[3], "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean3);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(8, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', 97, 0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PS)mUW3EE", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = (Object) "PS)mUW3EE";
      String string2 = StringUtils.join(objectArray0, "PS)mUW3EE");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("PS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EE", string2);
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", ')');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "PS)mUW3EE", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.removeFirst((String) null, "PS)mUW3EE");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("PS)mUW3EE");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.substringsBetween("", ", Length: ", "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "p@V$p$", ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Failed to create default temp directory", "Minimum abbreviation width with offset is %d");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.defaultString("Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Arguments cannot both be null.u2_6&mH+y.w");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(":J`pFyNQS:^ab", 1070);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize(":J`pFyNQS:^ab");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":J`pFyNQS:^ab", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.substringsBetween("Minimum abbreviation width with offset is %d", "", "Object varargs must not be null");
      assertNull(stringArray2);
      
      String string4 = StringUtils.rightPad(string2, 0, ":J`pFyNQS:^ab");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 36);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)52;
      byteArray0[3] = (byte)66;
      String string1 = StringUtils.join(byteArray0, '>');
      assertFalse(string1.equals((Object)string0));
      assertEquals("108>52>0>66", string1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)108, (byte)52, (byte)0, (byte)66}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("108>52>0>66");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("108>52>0>66");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.substringBetween("", "5AOz_)3}S:Y&g");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Q@e{%m[6", ":Et(~", "zRssK_");
      assertNull(stringArray0);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.replaceFirst("Q@e{%m[6", "org.junitpioneer.jupiter.TempDirectory$CloseablePath", "ghmsb)pg6)QK*YE6!XT");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "Q@e{%m[6", (int) (byte)108, 76);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.removeAll(":Et(~", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(":Et(~", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Y> {H@08=CROMZ", "l=f4Y/bloj:5/7gI");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.equals((CharSequence) " ", (CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 48, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set", '2');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 48);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = '6';
      charArray0[2] = '2';
      String string1 = StringUtils.join(charArray0, 'M', 429, 5);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', '6', '2'}, charArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 42);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      String string2 = StringUtils.join(byteArray0, '^');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("14", string2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "1`Xkn1e9J]");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substringAfterLast((String) null, "o8TC5Uw");
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(93);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("%47D;c<']?>@^#sE;D"));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string4);
      assertFalse(arrayList0.contains("%47D;c<']?>@^#sE;D"));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("%47D;c<']?>@^#sE;D");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("%47D;c<']?>@^#sE;D");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.unwrap("Qs;/75C-!@6p", ".]U");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Qs;/75C-!@6p", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("~[~fBn}'`&IICd");
      assertEquals("~[~fBn}'`&IICd", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      String string0 = StringUtils.stripToNull("`1lD/9<h^X");
      assertEquals("`1lD/9<h^X", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("`1lD/9<h^X");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`1lD/9<h^X", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("`1lD/9<h^X");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "`1lD/9<h^X", (CharSequence) "`1lD/9<h^X", (-3191));
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("uqG&h\"|=]Re]NZbF#0");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(15, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.uncapitalize("Index: Index: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("index: Index: ", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[13];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = ']';
      charArray0[4] = 'Q';
      charArray0[5] = 'n';
      charArray0[6] = ']';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(13, charArray0.length);
      
      String string2 = StringUtils.substringAfterLast("[?[j3T0q<mTH%o`3", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1951);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("H]qZ@Qk<I-(#]+", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      String string0 = StringUtils.join(objectArray0, 'Q');
      assertEquals(4, objectArray0.length);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "java.lang.Object@768ca087Qjava.lang.Object@5e551364Qjava.lang.Object@bdf86aQjava.lang.Object@131ab782";
      charSequenceArray0[1] = (CharSequence) "java.lang.Object@768ca087Qjava.lang.Object@5e551364Qjava.lang.Object@bdf86aQjava.lang.Object@131ab782";
      charSequenceArray0[2] = (CharSequence) "java.lang.Object@768ca087Qjava.lang.Object@5e551364Qjava.lang.Object@bdf86aQjava.lang.Object@131ab782";
      charSequenceArray0[3] = (CharSequence) "java.lang.Object@768ca087Qjava.lang.Object@5e551364Qjava.lang.Object@bdf86aQjava.lang.Object@131ab782";
      boolean boolean0 = StringUtils.endsWithAny("java.lang.Object@768ca087Qjava.lang.Object@5e551364Qjava.lang.Object@bdf86aQjava.lang.Object@131ab782", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("rVyIWGu%(&)YaY}fl");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '3', 1961, 1356);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[3]);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.abbreviateMiddle("rVyIWGu%(&)YaY}fl", "Wh*g;g<H3N>$xP_S+[$", 8192);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("rVyIWGu%(&)YaY}fl", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",yz5y0ZjOb-;n?k#", "LaunchTimep{InCombiningDiacriticalMarks}+", "LaunchTimep{InCombiningDiacriticalMarks}+", 3);
      assertEquals(",yz5y0ZjOb-;n?k#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("DefaultTimeZone", "*fL>JWO($D");
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf(",yz5y0ZjOb-;n?k#", "DefaultTimeZone", 2);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = '1';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '~';
      String string2 = StringUtils.stripStart("+3Mis[n'u)Rd2]Wr", "LaunchTimep{InCombiningDiacriticalMarks}+");
      assertFalse(string2.equals((Object)string0));
      assertEquals("3Mis[n'u)Rd2]Wr", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(",yz5y0ZjOb-;n?k#", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.stripEnd("*fL>JWO($D", "S07&_.q");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("*fL>JWO($D", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllLowerCase("+3Mis[n'u)Rd2]Wr");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("CQuUf`?inE`K ( ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = "";
      int int0 = (-964);
      String string1 = StringUtils.rotate("", (-964));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      char char0 = 'G';
      String string3 = StringUtils.wrapIfMissing("", 'G');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("n7p.eykp|dxzY,5*ydg", (-964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("_ow|6BTf");
      assertEquals("_ow|6BTf", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "_ow|6BTf", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.rotate("_ow|6BTf", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ow|6BTf_", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "_ow|6BTf", '=');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringAfter((String) null, "ow|6BTf_");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWithAny("_ow|6BTf", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "_ow|6BTf", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "CQuUf`?inE`K ( ", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.chomp("AYO}@b0e");
      assertEquals("AYO}@b0e", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "AYO}@b0e", "AYO}@b0e");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String[] stringArray0 = new String[3];
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "`1lD/9<h^X", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      
      String string0 = StringUtils.mid("Lau!wTie", 2664, 2664);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("`1lD/9<h^X");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.chomp("Zj", "Y> {H@08=CROMZ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Zj", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("ew$zqq", "4)3e");
      assertEquals(49, int0);
      
      String string2 = StringUtils.defaultString("`1lD/9<h^X");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "na)h#VGV2As)+");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.trimToNull("Lau!wTie");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Lau!wTie", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("7@87!E6vx");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'P', 377, 377);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("(E{*UTiOXY2/B9P", 'w');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("w(E{*UTiOXY2/B9Pw", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "`1lD/9<h^X", "w(E{*UTiOXY2/B9Pw");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.reverseDelimited("Object varargs must not be null", 'M');
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) arrayDeque0, locale_FilteringMode0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(list0);
      
      String string1 = StringUtils.appendIfMissing((String) null, charSequenceArray0[0], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayLanguage();
      assertFalse(string2.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Chinese", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'h';
      longArray0[1] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '#', 0, 359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("\n", (String) null);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("F");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("F", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1GZ`ac+:JHJAg4", 'B');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.center("org", (-898));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.ordinalIndexOf("1GZ`ac+:JHJAg4", "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = "va";
      String string1 = StringUtils.replaceChars("va", "va", "va");
      assertTrue(string1.equals((Object)string0));
      assertEquals("va", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-40);
      byteArray0[0] = (byte) (-40);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("\uFFFD", string2);
      assertSame(charset0, charset1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-40)}, byteArray0);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'c';
      charArray0[2] = '%';
      charArray0[3] = '\\';
      charArray0[4] = 'u';
      charArray0[5] = 'e';
      charArray0[6] = 'Q';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (int) (byte) (-40), 52);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.truncate("R<m&rzbImX`qYC-(1", 13);
      assertEquals("R<m&rzbImX`qY", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 13;
      String string1 = StringUtils.join(doubleArray0, 'H');
      assertFalse(string1.equals((Object)string0));
      assertEquals("13.0", string1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {13.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      Locale locale0 = new Locale("R<m&rzbImX`qY", "R<m&rzbImX`qY");
      assertEquals("r<m&rzbimx`qy", locale0.getLanguage());
      assertEquals("R<M&RZBIMX`QY", locale0.getCountry());
      assertEquals("r<m&rzbimx`qy_R<M&RZBIMX`QY", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("R<m&rzbImX`qY", "13.0", locale0);
      assertEquals("r<m&rzbimx`qy", locale0.getLanguage());
      assertEquals("R<M&RZBIMX`QY", locale0.getCountry());
      assertEquals("r<m&rzbimx`qy_R<M&RZBIMX`QY", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      intArray0[2] = 45;
      intArray0[4] = 0;
      intArray0[5] = 45;
      String string1 = StringUtils.join(intArray0, 'o', 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 45, 45, 0, 0, 45}, intArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Bw/b-|u-", (-3898));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Bw/b-|u-", string2);
      assertNotNull(string2);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("", "zRh$Y!!(IZvq*O");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.wrap("^(y3ZFx=c", "^(y3ZFx=c");
      assertEquals("^(y3ZFx=c^(y3ZFx=c^(y3ZFx=c", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^(y3ZFx=c", (CharSequence) "^(y3ZFx=c^(y3ZFx=c^(y3ZFx=c", 10);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("^(y3ZFx=c^(y3ZFx=c^(y3ZFx=c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.capitalize("junit");
      assertEquals("Junit", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '>';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "G?43pS", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', '>'}, charArray0);
      
      String string1 = StringUtils.mid("Junit", 377, 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("junit");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.chomp("P)>^w] xP-", "junit");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P)>^w] xP-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("0@~h@1", 377);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("1a48J", "Zj");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G?43pS", (CharSequence) "                                                                                                                                                                                         0@~h@1                                                                                                                                                                                          ", 21);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("junit");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.right("", (-53));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'l');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(0, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isNumericSpace("P)>^w] xP-");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNotEmpty("junit");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string6 = StringUtils.difference(",>.9]dO)T.-QZ", "1a48J");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("1a48J", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "M%KNU-qm1nQiz1Z", (CharSequence) "M%KNU-qm1nQiz1Z");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace(">\"173.");
      assertTrue(string1.equals((Object)string0));
      assertEquals(">\"173.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric(">\"173.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(">\"173.", ">\"173.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("Minimum abbreviation width is %d", ">\"173.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate(">\"173.", (-1), 1176);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(">\"173.", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Minimum abbreviation width is %d");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.stripAccents("^(:y3ZFx=c");
      assertEquals("^(:y3ZFx=c", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "^(:y3ZFx=c", (CharSequence) "^(:y3ZFx=c");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'h', 16, 2070787803);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.stripEnd("org.junitpioneer.jupiter.TempDirectory", "F`q");
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.TempDirectory", (CharSequence) "F`q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.stripEnd("=", "=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ka{>V";
      charSequenceArray0[2] = (CharSequence) "v\":;,O0";
      charSequenceArray0[3] = (CharSequence) ">\"173.";
      charSequenceArray0[4] = (CharSequence) ">\"173.";
      charSequenceArray0[5] = (CharSequence) "";
      String string0 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", ">\"173.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.appendIfMissing("ka{>V", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ka{>V", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.center("", (-1), "v\":;,O0");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ka{>V";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.replaceEach("b@NQ/&,Rv{;A0aj6d&", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("b@NQ/&,Rv{;A0aj6d&", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("b@NQ/&,Rv{;A0aj6d&", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.chomp("S");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("S", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "ka{>V");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripEnd("S~jNq2HML", "'k9qoX\"'>a{");
      assertEquals("S~jNq2HML", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("LaunchTime");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(52);
      assertEquals(52, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(52, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(52, charBuffer0.length());
      assertEquals(52, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(charBuffer0));
      assertNotNull(arrayList1);
      
      ArrayList<CharBuffer> arrayList2 = new ArrayList<CharBuffer>();
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains(charBuffer0));
      assertNotNull(arrayList2);
      
      boolean boolean1 = arrayList2.add(charBuffer0);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertFalse(arrayList2.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(52, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(52, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(52, charBuffer0.length());
      assertEquals(52, charBuffer0.capacity());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertTrue(boolean1);
      assertNotSame(arrayList2, arrayList1);
      assertNotSame(arrayList2, arrayList0);
      assertTrue(arrayList2.contains(charBuffer0));
      
      ArrayList<Locale.FilteringMode> arrayList3 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertNotNull(arrayList3);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean2 = arrayList3.add(locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertTrue(boolean2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(arrayList3.contains(locale_FilteringMode0));
      assertTrue(arrayList3.contains(locale_FilteringMode1));
      
      ArrayList<Locale.FilteringMode> arrayList4 = new ArrayList<Locale.FilteringMode>();
      assertFalse(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertFalse(arrayList4.contains(locale_FilteringMode0));
      assertNotNull(arrayList4);
      
      boolean boolean3 = arrayList4.add(locale_FilteringMode0);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(arrayList4.equals((Object)arrayList3));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, arrayList4.size());
      assertFalse(arrayList4.isEmpty());
      assertTrue(boolean3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(arrayList4, arrayList3);
      assertFalse(arrayList4.contains(locale_FilteringMode1));
      assertTrue(arrayList4.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.stripStart("to[Nk`r>hIC'zQ5L,[", "AS1I($oi0{4{0NR=");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("to[Nk`r>hIC'zQ5L,[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("S~jNq2HML");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("S~jNq2HML", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "S~jNq2HML");
      assertNull(stringArray1);
      
      String string4 = StringUtils.join((Iterable<?>) arrayList4, "AS1I($oi0{4{0NR=");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(arrayList4.equals((Object)arrayList3));
      assertEquals(1, arrayList4.size());
      assertFalse(arrayList4.isEmpty());
      assertEquals("EXTENDED_FILTERING", string4);
      assertNotSame(arrayList4, arrayList3);
      assertFalse(arrayList4.contains(locale_FilteringMode1));
      assertTrue(arrayList4.contains(locale_FilteringMode0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("P/S)mUW3EEP/S)mUW3EE", "MIwe(?=+STb7NMIwe(?=+STb7N");
      assertEquals(0.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = "\n";
      String string1 = "offset cannot be negative";
      String string2 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("offset cannot be negative", 2, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "Object varargs must not be null";
      String string5 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)98;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)85;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'u', (int) (byte)66, (int) (byte)85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.substring("Search and Replace array lengths don't match: ", 1828, 1828);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String string0 = StringUtils.removeStart("Failed to get parent directory from provider", "|h<g1 RvL|");
      assertEquals("Failed to get parent directory from provider", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 1145);
      assertNull(string2);
      
      char[] charArray0 = null;
      int int0 = 100;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 100, 1145);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.abbreviate("t00lVBr>9Q3@g,1", "t00lVBr>9Q3@g,1", 2327);
      assertEquals("t00lVBr>9Q3@g,1", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("t00lVBr>9Q3@g,1"));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int int0 = 1114111;
      String string0 = StringUtils.abbreviate("Xx", "Y> {H@08=CROMZ', is neither of type Map.Entry nor an Array", 1114111);
      assertEquals("Xx", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Xx";
      charSequenceArray0[1] = (CharSequence) "Xx";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Xx", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "Xx");
      assertFalse(string1.equals((Object)string0));
      assertEquals("XxXxXx", string1);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("Y> {H@08=CROMZ', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf(charSequenceArray0[0], 1114111);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.repeat('~', (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "XxXxXx");
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("XxXxXx", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '~';
      charArray0[1] = '~';
      Buffer buffer0 = charBuffer0.flip();
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.isReadOnly());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertEquals(6, buffer0.capacity());
      assertNotNull(buffer0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), 1114111);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("(y3Z[Fx=c", (String[]) null, (String[]) null);
      assertEquals("(y3Z[Fx=c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = "offset cannot be negative";
      String string1 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("", "");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string6 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertEquals(5, stringArray0.length);
      assertNotNull(string6);
      
      String string7 = "The Character must not be null";
      String[] stringArray1 = StringUtils.substringsBetween("Locale must not be null", "The Character must not be null", "LaunchTime");
      assertNull(stringArray1);
      
      String string8 = StringUtils.mid("", 7, 0);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.repeat("mKg}V@AwNA}", (-308));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertEquals("", string9);
      assertNotNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("b9", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = "junit";
      String string1 = StringUtils.capitalize("junit");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Junit", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Threshold must not be negative");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.trimToNull("!jRj5XJ-i;hTlBb{it");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!jRj5XJ-i;hTlBb{it", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase(" is not in the range '0' - '9'", "Threshold must not be negative");
      assertEquals((-84), int0);
      
      boolean boolean2 = StringUtils.isMixedCase(" is not in the range '0' - '9'");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.substringBefore("The String must not be empty", "junit");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("The String must not be empty", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "The String must not be empty", '_');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.substringBetween((String) null, "The String must not be empty");
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, '4');
      assertNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!jRj5XJ-i;hTlBb{it", (CharSequence) "Locale must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("junit", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.capitalize("ThY Strinc must not be empty");
      assertEquals("ThY Strinc must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.removeEnd("[?[j3T", "0q<mTHk%o`3");
      assertEquals("[?[j3T", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("[?[j3T", "Minimum abbreviation width with offset is %d", true);
      assertEquals((-18), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0q<mTHk%o`3";
      charSequenceArray0[1] = (CharSequence) "[?[j3T";
      charSequenceArray0[2] = (CharSequence) "0q<mTHk%o`3";
      charSequenceArray0[3] = (CharSequence) "[?[j3T";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "[?[j3T";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("[?[j3T", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.rightPad("[?[j3T", (-468), 'G');
      assertTrue(string1.equals((Object)string0));
      assertEquals("[?[j3T", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("-/y8yIAk@JS5yiR^_");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-/y8yIAk@JS5yiR^_", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("S`pyW pi\">*FJv", 21);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[4], (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("The type must not be null", "[?[j3T");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The type must not be null", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.replaceAll("PSmU3EE", "PSmU3EE", "PSmU3EE");
      assertEquals("PSmU3EE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1046L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 249L;
      longArray0[5] = 2667L;
      String string1 = StringUtils.substringBefore("Threshold must not be negative", "Minimum abbreviation width with offset is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Index: ", '8');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBetween("Index: ", " is not in the range '0' - '9'");
      assertNull(string2);
      
      String string3 = StringUtils.join((int[]) null, 'p');
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Index: ", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.overlay("", "", (-1), 0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("g,dOc 8yt|#");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("g,dOc8yt|#", string5);
      assertNotNull(string5);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string6 = StringUtils.replaceAll("W(", (String) null, "v#~");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("W(", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      stringArray0[2] = "LaunhTie";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunhTie");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("LaunhTie");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringBefore("Locale must not be null", "mp2_^vWQ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "LaunhTie", '_');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringBetween("LaunhTie", "LaunhTie");
      assertNull(string2);
      
      String string3 = StringUtils.join((int[]) null, '+');
      assertNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "*7%Cjf", (CharSequence) "Locale must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.stripStart((String) null, "mp2_^vWQ");
      assertNull(string4);
      
      String string5 = StringUtils.stripToNull("Locale must not be null");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "mp2_^vWQ");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(3, stringArray2.length);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray2);
      
      long[] longArray0 = new long[0];
      String string6 = StringUtils.join(longArray0, '_');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string6);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("',>");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(2, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 48, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set", '2');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeFirst("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string2 = StringUtils.repeat('\"', (int) '2');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringBetween("", "N5Z<{D0");
      assertNull(string3);
      
      String string4 = StringUtils.remove("(,f-U$Tue:v:6R", '[');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("(,f-U$Tue:v:6R", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "(,f-U$Tue:v:6R", 5);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.repeat("hz'8!qu2A", (String) null, 2);
      assertEquals("hz'8!qu2Ahz'8!qu2A", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "hz'8!qu2Ahz'8!qu2A", "hz'8!qu2Ahz'8!qu2A");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 5571);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'W');
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "%hZ{!<F}(CBd";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      stringArray0[3] = "!to[Nk`r>hIC'zQ5L,[";
      stringArray0[4] = null;
      stringArray0[5] = " /s ";
      stringArray0[6] = " /s ";
      stringArray0[7] = "%hZ{!<F}(CBd";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Minimum abbreviation width with offset is %d", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("vs", (-2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.center("vs", 87, "DefaultTimeZone");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultTimeZvsDefaultTimeZoneDefaultTimeZoneDefaultTimeZo", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("DefaultTimeZoneDefaultTimeZoneDefaultTimeZvsDefaultTimeZoneDefaultTimeZoneDefaultTimeZo", "LaunchTime");
      assertFalse(boolean0);
      
      String string3 = StringUtils.uncapitalize("hKbBn` f");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("hKbBn` f", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad(", '", 87, ',');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, '", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String must not be empty", (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, '");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, ".]U", 3, 28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 28
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("z]!w,\"0m-) ]hk]rn", string3);
      assertNotNull(string3);
      
      int int0 = 2145;
      char char0 = 'A';
      String string4 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2145, 'A');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf(string4, "%47D;c<']?>@^#sE;D", 2145);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145;
      String string5 = StringUtils.join(intArray0, '@');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("2145", string5);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2145}, intArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("%]", "%]");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(2145));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "", 160, 2145);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2145
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = StringUtils.stripEnd("", "uZ;i`g+{03.k NE,G?");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[1] = (CharSequence) "ka{>V";
      charSequenceArray0[2] = (CharSequence) "v\":;,O0";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "v\":;,O0";
      charSequenceArray0[5] = (CharSequence) ")Vnodw,/.HlN5\".q";
      charSequenceArray0[6] = (CharSequence) ")Vnodw,/.HlN5\".q";
      charSequenceArray0[7] = (CharSequence) ")Vnodw,/.HlN5\".q";
      String string1 = StringUtils.appendIfMissing(")Vnodw,/.HlN5\".q", "uZ;i`g+{03.k NE,G?", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")Vnodw,/.HlN5\".q", string1);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("';4b", charSequenceArray0[5], charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(")Vnodw,/.HlN5\".q';4b", string2);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[4], charArray0);
      assertEquals(0, int0);
      assertEquals(7, charArray0.length);
      assertEquals(8, charSequenceArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string3 = StringUtils.center(")Vnodw,/.HlN5\".q';4b", 0, "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")Vnodw,/.HlN5\".q';4b", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "';4b";
      String string4 = StringUtils.replaceEach("!}QGS+B", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("!}QGS+B", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.chomp("b@NQ/&,Rv{;A0aj6d&");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("b@NQ/&,Rv{;A0aj6d&", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase(".u2_6&mH+y.w.u2_6&mH+y.w", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "]v~=~1%$h7{H(.zHFLKQ(f},dMi:/Ul~<;", 0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(".u2_6&mH+y.w.u2_6&mH+y.w", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToEmpty(")Vnodw,/.HlN5\".q';4b");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertEquals(")Vnodw,/.HlN5\".q';4b", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("PS)mUW3EE");
      assertEquals("PS)mUW3EE", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("PS)mUW3EE", "PS)mUW3EE");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("PS)mUW3EE");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("PS)mUW3EE", stringArray0);
      assertEquals(8, int0);
      assertEquals(8, stringArray0.length);
      
      String string2 = StringUtils.chop("cKK`3=-$7x! cJV|wWal");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("cKK`3=-$7x! cJV|wWa", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("PS)mUW3EE", "PS)mUW3EE");
      assertTrue(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "cKK`3=-$7x! cJV|wWa", (CharSequence) "cKK`3=-$7x! cJV|wWa");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.stripAccents(".]U");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".]U", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("tn}/", 2371, 'C');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replace(" vs ", "", "", 8);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.joinWith(" vs ", stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("P vs  vs S vs ) vs m vs UW vs 3 vs EE", string6);
      assertEquals(8, stringArray0.length);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " vs ";
      boolean boolean1 = StringUtils.startsWithAny("Xe\"0=pgC0BYi", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("DefaultTimeZone", ".]U", 5);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray1[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray1[2] = (CharSequence) ".]U";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) " vs ";
      charSequenceArray1[5] = (CharSequence) "Xe\"0=pgC0BYi";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean2);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '?';
      String string0 = StringUtils.join(intArray0, '_');
      assertEquals("63_0_0_0_0_0", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {63, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "63_0_0_0_0_0", (CharSequence) ">\"173.");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'l';
      charArray0[3] = '?';
      String string1 = StringUtils.join(charArray0, '@');
      assertFalse(string1.equals((Object)string0));
      assertEquals("+@+@l@?@\u0000@\u0000@\u0000@\u0000@\u0000@\u0000@\u0000@\u0000", string1);
      assertEquals(12, charArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("63_0_0_0_0_0", (-1), (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)77;
      String string3 = StringUtils.join(byteArray0, 'B', (int) (byte)77, (-2730));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-118), (byte)77}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("W!8Pk?2M3pG,BC9+", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("W!8Pk?2M3pG,BC9+", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.chop("tA");
      assertEquals("t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " H");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", 2511);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.countMatches((CharSequence) "B*yNu8~?%Tjfc", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripAccents("B*yNu8~?%Tjfc");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B*yNu8~?%Tjfc", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("YEHZ?@4%<Gsy'Ci", 3088, 'R');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("YEHZ?@4%<Gsy'Ci", "9'M", "BN", (-2440));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("YEHZ?@4%<Gsy'Ci", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("@#W", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.startsWithAny("", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("B*yNu8~?%Tjfc", "_(_S@,cwB", 15);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
      
      boolean boolean5 = StringUtils.isAnyEmpty(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray2.length);
      
      String string5 = StringUtils.substringBetween("@#W", " H");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.join(doubleArray0, '[', (int) '[', 10);
      assertEquals("", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1763.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "inimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "inimum abbreviation width with offset is %d";
      String string2 = StringUtils.appendIfMissing("inimum abbreviation width with offset is %d", "inimum abbreviation width with offset is %d", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("inimum abbreviation width with offset is %d", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '[';
      String string3 = StringUtils.join(charArray0, 'p', 1763, (-1319));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'[', '['}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("aL", "jPU`vzPKQZ)$oQcEK");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("aL", string5);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("inimum abbreviation width with offset is %d", charSequenceArray0[3]);
      assertEquals(1.0, double0, 0.01);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "CQuUf`?inE`K ( ", 5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.chop("i");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "7", (CharSequence) "7");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("D}faultTim^Zonre");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("D}faultTim^Zonre", "");
      assertEquals(16, int0);
      
      String string1 = StringUtils.substringBefore(" vs ", "FF,Pav/*4,A]+S#V0");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vs ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(" vs ", 87);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("FF,Pav/*4,A]+S#V0", " vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removeIgnoreCase("", "D}faultTim^Zonre");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Mn<PLh?2_");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("emv");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.overlay("offset cannot be negative", (String) null, (-2058), Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "]=`]", charArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '7', 1610, (-1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("PS)mUW3EE");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {80, 127, 83, 41, 109, 85, 87, 51, 69, 69}, intArray0);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.trimToNull("PS)mUW3EE");
      assertEquals("PS)mUW3EE", string0);
      assertNotNull(string0);
      
      String string1 = "jK64fz. /{ gC+!'sj";
      String string2 = "org.apache.commons.lang3.ArrayUtils";
      int int1 = StringUtils.compareIgnoreCase("PS)mUW3EE", "org.apache.commons.lang3.ArrayUtils");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.rotate("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.ArrayUtils", 'b');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#";
      objectArray0[1] = (Object) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.commons.lang3.ArrayUtils";
      objectArray0[4] = (Object) "org.apache.commons.lang3.ArrayUtils";
      objectArray0[5] = (Object) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#";
      objectArray0[6] = (Object) "jK64fz. /{ gC+!'sj";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      objectArray0[8] = (Object) "PS)mUW3EE";
      String string4 = StringUtils.join(objectArray0, 'q', 1, 6);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(9, objectArray0.length);
      assertNotNull(string4);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", (CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#qjava.lang.Object@6d28d4c5qorg.apache.commons.lang3.ArrayUtilsqorg.apache.commons.lang3.ArrayUtilsq]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      double double0 = StringUtils.getJaroWinklerDistance("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#qjava.lang.Object@6d28d4c5qorg.apache.commons.lang3.ArrayUtilsqorg.apache.commons.lang3.ArrayUtilsq]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertEquals(0.79, double0, 0.01);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", (CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ICS.PWUv9>Zj|ws", (-809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[1] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[2] = (Object) "ilv!W=wbZGFeFE";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "ilv!W=wbZGFeFE";
      String string0 = StringUtils.joinWith("ilv!W=wbZGFeFE", objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertNotNull(string2);
      
      String string3 = "!to[Nk`r>hIC'zQ5L,[";
      String string4 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!to[Nk`r>hIC'zQ5L,[";
      String string5 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string5);
      
      char char0 = 'T';
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'T';
      intArray0[2] = (int) 'T';
      intArray0[3] = (int) 'T';
      String string6 = StringUtils.join(intArray0, 'T');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("84T84T84T84", string6);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {84, 84, 84, 84}, intArray0);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("!to[Nk`r>hIC'zQ5L,[", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      String string0 = StringUtils.join((int[]) null, '_');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "`1lD/9<h^X", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("`1lD/9<h^X", (-953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = "%hZ{!<F}(CBd";
      String string1 = StringUtils.abbreviate("%hZ{!<F}(CBd", 5571);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%hZ{!<F}(CBd", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("%hZ{!<F}(CBd");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "%hZ{!<F}(CBd", 'W');
      assertEquals(0, int0);
      
      String string2 = " /s ";
      String[] stringArray0 = new String[8];
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      
      String string3 = StringUtils.wrap("%hZ{!<F}(CBd", 'W');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W%hZ{!<F}(CBdW", string3);
      assertNotNull(string3);
      
      String string4 = "A&7s[1T6sd";
      String string5 = StringUtils.stripToEmpty("o!s=~l/J13");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("o!s=~l/J13", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "W%hZ{!<F}(CBdW", 5571, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, ':');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      String string0 = StringUtils.rotate(">\"173.", (-621));
      assertEquals("73.>\"1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ">\"173.", '?');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(">\"173.", " ");
      assertNull(string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) '/';
      intArray0[2] = (-621);
      intArray0[3] = (-621);
      intArray0[4] = (int) 's';
      intArray0[5] = (int) 's';
      intArray0[7] = (int) '?';
      String string2 = StringUtils.join(intArray0, 'e');
      assertFalse(string2.equals((Object)string0));
      assertEquals("63e47e-621e-621e115e115e0e63", string2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {63, 47, (-621), (-621), 115, 115, 0, 63}, intArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(">\"173.", "63e47e-621e-621e115e115e0e63");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("73.>\"1", "o!s=~l/J13", (-24), (-24));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("o!s=~l/J1373.>\"1", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("org.apache.commons.lang3.CharSequenceUtils", 63, 1534);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.substringBetween("1>ms~Fz", "9@y;w85L", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9@y;w85L");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference((String) null, "acj}");
      assertEquals("acj}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      String string0 = StringUtils.join(charArray0, 'E', (-1252), (-1252));
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(charArray0, 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PlllE", string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("PlllE", "...", (-1252));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceChars("{}", "PlllE", "...");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, 'G', 114, 114);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("X~r", "...", "c");
      assertNull(string4);
      
      String string5 = StringUtils.center("{K8[A+e", 211, 'l');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll{K8[A+ellllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 335);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat("g>b", 211);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("g>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>b", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", (-1585));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.substringAfter("", "PlllE");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)0;
      String string1 = StringUtils.join(shortArray0, '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-79.-49.0", string1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-49), (short)0}, shortArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-79.-49.0", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultString("Q,XY@o<C+{");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Q,XY@o<C+{", "Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToNull("Q,XY@o<C+{");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("Q,XY@o<C+{");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("Q,XY@o<C+{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'H', 995, (int) (byte) (-37));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isNumericSpace("{}");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty("Q,XY@o<C+{");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string6 = StringUtils.difference(" ", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.length("Q,XY@o<C+{");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.difference("~%f", (String) null);
      assertEquals("~%f", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.repeat(";6^ts%yWWG", ";6^ts%yWWG", 3);
      assertEquals(";6^ts%yWWG;6^ts%yWWG;6^ts%yWWG;6^ts%yWWG;6^ts%yWWG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(";6^ts%yWWG;6^ts%yWWG;6^ts%yWWG;6^ts%yWWG;6^ts%yWWG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "`1lD/9<h^X");
      assertEquals(0.38, double0, 0.01);
      
      char[] charArray0 = new char[18];
      charArray0[0] = 'A';
      charArray0[1] = '';
      String string0 = StringUtils.swapCase("LaunchTime");
      assertEquals("lAUNCHtIME", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.isNumeric("lAUNCHtIME");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = StringUtils.center("`1lD/9<h^X", 2257);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("o!s=~l/J13", "LaunchTime");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "o!s=~l/J13", 21);
      assertEquals((-1), int0);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("LaunchTime");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(4, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string2 = StringUtils.repeat("LaunchTime", "LaunchTime", 8);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTimeLaunchTime", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray1, '');
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertEquals("The String must not be emptyLaunchTime", string3);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace("");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("LaunchTime");
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
      
      String string4 = StringUtils.difference("", "`1lD/9<h^X");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("`1lD/9<h^X", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.length("The String must not be empty");
      assertFalse(int1 == int0);
      assertEquals(28, int1);
      
      String string5 = StringUtils.replaceOnce("KQ(f},dMi:/Ul~<;]v~=~1%$h7{H(.zHFL", "org.apache.commons.lang3.RegExUtils", "Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("KQ(f},dMi:/Ul~<;]v~=~1%$h7{H(.zHFL", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Q,XY@o<C+{", 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("Q,XY@o<C+{");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Q,XY@o<C+{", " in an array of ");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.swapCase("Q,XY@o<C+{");
      assertFalse(string1.equals((Object)string0));
      assertEquals("q,xy@O<c+{", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isNumeric("Q,XY@o<C+{");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.center("Q,XY@o<C+{", 5);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Q,XY@o<C+{", " in an array of ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "Q,XY@o<C+{", (CharSequence) " in an array of ", 21);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, int2);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Q,XY@o<C+{");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.repeat(" in an array of ", (String) null, 2257);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace("Q,XY@o<C+{");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string4 = StringUtils.difference("q,xy@O<c+{", "...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removePattern("blank_blank_blank_2014", "q%z_Q&~xz.\"!q%z_Q&~xz.\"!");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("blank_blank_blank_2014", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnce(">jP8", "', is neither of type Map.Entry nor an Array", "Minimum abbreviation width is %d");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(">jP8", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToEmpty("");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean3 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("AUTOSELECT_FILTERINGAUTOSELECT_FILTERING", string1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, ",CRYmN*=i8");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.rotate("Minimum abbreviation width is %d", 1131);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("width is %dMinimum abbreviation ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("", 1131, 1131);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("k1$`R,wa)[9.*B", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("G&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'W';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "i8", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'W'}, charArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "i8", '|');
      assertEquals(0, int0);
      
      String string0 = StringUtils.replaceIgnoreCase(":uW", "Minimum abbreviation width is %d`^", "junit-pioneer", 0);
      assertEquals(":uW", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat(":uW", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) ":uW", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.join(doubleArray0, '[', (int) '[', 10);
      assertEquals("", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1763.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "inimum abbreviation width with offset is %d";
      String string2 = StringUtils.appendIfMissing("inimum abbreviation width with offset is %d", "inimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("Object varargs must not be null", 32, 377);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "", (String) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains('M'));
      assertNotNull(linkedHashSet0);
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains('M'));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", string4);
      assertFalse(linkedHashSet0.contains('M'));
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("}6,W]@=aq5n0Es", 32);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lm/98h^o";
      stringArray0[1] = "The String must not be empy";
      stringArray0[2] = "LaunchTime";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-1.0);
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, ')');
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((Iterable<?>) vector0, ')');
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", "", 10, 10);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(807);
      assertEquals(807, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = arrayList0.add(charBuffer0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(807, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(charBuffer0));
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '(');
      assertFalse(string3.equals((Object)string1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(string3);
      
      boolean boolean1 = arrayList0.add(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(807, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(charBuffer0));
      
      String string4 = StringUtils.trimToEmpty("Ya)Tvr@6!$2*hxi");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("Wa0y}Y~Sg9^{I", "!O'[(cmv_C)_mie");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Wa0y}Y~Sg9^{I", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase((String) null, "Ya)Tvr@6!$2*hxi", "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Wa0y}Y~Sg9^{I", (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank("g,dOc 8yt|#");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#YW`o+z", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, "w.Ih=Dq");
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripToEmpty("w.Ih=Dq");
      assertEquals("w.Ih=Dq", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "w.Ih=Dq", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("rlaL44", "rlaL44", "rlaL44");
      assertEquals("rlaL44", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "rlaL44", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = StringUtils.join(byteArray0, 'h');
      assertEquals("0h0", string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0h0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("0h0");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "0h0", (CharSequence) "0h0");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)10;
      byte byte1 = (byte)69;
      byteArray0[5] = (byte)69;
      String string0 = StringUtils.join(byteArray0, 'E');
      assertEquals("-56E77E124E-98E10E69", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56), (byte)77, (byte)124, (byte) (-98), (byte)10, (byte)69}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-56E77E124E-98E10E69", "-56E77E124E-98E10E69");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("-56E77E124E-98E10E69", "Strings must not be null", (int) (byte)69, (int) (byte) (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 25
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      String string0 = "uZ;i`g+{03.k NE,G?8{>)Dj?!J1ZB}\"P|<^p";
      int int0 = StringUtils.compareIgnoreCase("uZ;i`g+{03.k NE,G?8{>)Dj?!J1ZB}\"P|<^p", "%;IV`VnU$9>.Q:H", true);
      assertEquals((-10), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-10);
      floatArray0[1] = (float) (-10);
      floatArray0[2] = (float) (-10);
      floatArray0[3] = 1528.921F;
      floatArray0[4] = (float) (-10);
      floatArray0[5] = (float) (-10);
      floatArray0[6] = (float) (-10);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) (-10);
      String string1 = StringUtils.join(floatArray0, 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-10.0S-10.0S-10.0S1528.921S-10.0S-10.0S-10.0S0.0S-10.0", string1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-10.0F), (-10.0F), (-10.0F), 1528.921F, (-10.0F), (-10.0F), (-10.0F), 0.0F, (-10.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("4}Kfj+%XHupxB-", 'S');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4}Kfj+%XHupxB-", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("%;IV`VnU$9>.Q:H", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%;IV`VnU$9>.Q:H", string3);
      assertNotNull(string3);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-10), 1834);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.chomp("q%z_Q&~xz.\"!", "q%z_Q&~xz.\"!");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("KQ(f},dMi:/Ul~<;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("KQ(f},dMi:/Ul~<;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "hz'8!u2A", (-1398));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The String mus}6[ot be empty", '.', '<');
      assertEquals("The String mus}6[ot be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("1", "The String mus}6[ot be empty", "The String mus}6[ot be empty");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String mus}6[ot be empty", (CharSequence) "1");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviateMiddle("", "", 38);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", 'P');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.compare("to[Nk`r>hIC'zQ5L,[", "1", false);
      assertFalse(int1 == int0);
      assertEquals(67, int1);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertEquals("7zS1rf@\"J f)5t2E", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(")5t2E7zS1rf@\"J f", 'j');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray2);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = arrayList1.add(locale_FilteringMode0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertTrue(boolean0);
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = arrayList0.add(locale_FilteringMode1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      assertFalse(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      assertFalse(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("^");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.chomp(";", "DefaultTimeZone");
      assertFalse(string1.equals((Object)string0));
      assertEquals(";", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("ExpectedException", "ExpectedException");
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.isWhitespace(";");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase(";", "8{>)Dj?!J1ZB}\"P|<^p", (CharSequence[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";8{>)Dj?!J1ZB}\"P|<^p", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = "PS)mUW3EE";
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string1 = StringUtils.join(byteArray0, '=', 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-111)}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("PS)mUW3EE", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) "PS)mUW3EE", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("x{8.}.KSYUtEw]sgM\"");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(14, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize("x{8.}.KSYUtEw]sgM\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x{8.}.KSYUtEw]sgM\"", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "PS)mUW3EE", charArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '='}, charArray0);
      
      String[] stringArray2 = new String[5];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "9AmqZZ~6V-HN";
      stringArray2[1] = "jH0P+'sJaePoWp";
      stringArray2[2] = "x{8.}.KSYUtEw]sgM\"";
      stringArray2[3] = "PS)mUW3EE";
      stringArray2[4] = "x{8.}.KSYUtEw]sgM\"";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("x{8.}.KSYUtEw]sgM\"", stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 14 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "42p-S;5b!";
      stringArray0[1] = "42p-S;5b!";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "42p-S;5b!";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("42p-S;5b!", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("\n", (-1352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      String string0 = StringUtils.replaceFirst("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals("U~CKh1Zw8zjGJ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "U~CKh1Zw8zjGJ";
      boolean boolean0 = StringUtils.equalsAny("U~CKh1Zw8zjGJ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      Locale locale0 = new Locale("U~CKh1Zw8zjGJ", "C.MlSEJXO3u11ztg&", "C:uPi0Ks");
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertEquals("C.MLSEJXO3U11ZTG&", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      Locale locale1 = Locale.UK;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = locale1.getDisplayVariant();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("", string3);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      
      Locale locale2 = locale0.stripExtensions();
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertEquals("u~ckh1zw8zjgj", locale2.getLanguage());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale2.toString());
      assertEquals("C:uPi0Ks", locale2.getVariant());
      assertEquals("C.MLSEJXO3U11ZTG&", locale2.getCountry());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string4 = locale0.getExtension('v');
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNull(string4);
      
      Locale locale3 = Locale.CANADA_FRENCH;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotNull(locale3);
      
      String string5 = locale1.getDisplayCountry(locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("u~ckh1zw8zjgj", locale0.getLanguage());
      assertEquals("C.MLSEJXO3U11ZTG&", locale0.getCountry());
      assertEquals("C:uPi0Ks", locale0.getVariant());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("u~ckh1zw8zjgj", locale2.getLanguage());
      assertEquals("u~ckh1zw8zjgj_C.MLSEJXO3U11ZTG&_C:uPi0Ks", locale2.toString());
      assertEquals("C:uPi0Ks", locale2.getVariant());
      assertEquals("C.MLSEJXO3U11ZTG&", locale2.getCountry());
      assertEquals("United Kingdom", string5);
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale3);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotNull(string5);
      
      String string6 = StringUtils.truncate("U~CKh1Zw8zjGJ", 2792);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("U~CKh1Zw8zjGJ", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.getFuzzyDistance("U~CKh1Zw8zjGJ", charSequenceArray0[0], locale1);
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals(37, int0);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals(1, charSequenceArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string7 = StringUtils.removeStart("\n", "");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\n", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'v', (-308), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -308
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.stripStart("%hZ{!<F}(CBd", "");
      assertEquals("%hZ{!<F}(CBd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%hZ{!<F}(CBd", "%hZ{!<F}(CBd");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'A';
      floatArray0[5] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1.0Z0.0Z-1.0Z0.0Z65.0Z0.0", string1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 65.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      Iterator<CharBuffer> iterator0 = treeSet1.descendingIterator();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(iterator0);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("", (-4816));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 65.0F;
      String string5 = StringUtils.join(objectArray0, 'Z');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("65.0", string5);
      assertEquals(1, objectArray0.length);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.difference("%hZ{!<F}(CBd", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[0];
      String string7 = StringUtils.valueOf(charArray0);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string7);
      
      int int2 = StringUtils.length("");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ka{>V";
      charSequenceArray0[2] = (CharSequence) "v\":;,O0";
      charSequenceArray0[3] = (CharSequence) ">\"173.";
      charSequenceArray0[4] = (CharSequence) ">\"173.";
      charSequenceArray0[5] = (CharSequence) "ka{>V";
      String string0 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", ">\"173.");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.appendIfMissing("ka{>V", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ka{>V", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ka{>V", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ka{>V", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.CR;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ka{>V";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.replaceEach("b@NQ/&,Rv{;A0aj6d&", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("b@NQ/&,Rv{;A0aj6d&", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("b@NQ/&,Rv{;A0aj6d&", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.chomp("S");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("S", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("", (-2301), '?');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string7 = StringUtils.strip(" vs ");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("vs", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.replaceChars(">G8[f#>o=a3kr[", '=', '=');
      assertEquals(">G8[f#>o=a3kr[", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", "1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ">G8[f#>o=a3kr[");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviateMiddle("uzY802g}@5~", "gKR'", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("uzY802g}@5~", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.RegExUtils", '=');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceFirst((String) null, "gKR'", "A$kI;Rp(");
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) ">G8[f#>o=a3kr[", (CharSequence) "1");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.replaceChars("uzY802g}@5~", '(', 't');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("uzY802g}@5~", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.capitalize("junit");
      assertEquals("Junit", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '>';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "G?43pS", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', '>'}, charArray0);
      
      String string1 = StringUtils.mid("Junit", 377, 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("junit");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.chomp("P)>^w] xP-", "junit");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P)>^w] xP-", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("Junit", "org.apache.commons.lang3.StringUtils");
      assertEquals((-37), int0);
      
      boolean boolean3 = StringUtils.isWhitespace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissingIgnoreCase("+QFL~ffjR3L", "P)>^w] xP-", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("+QFL~ffjR3LP)>^w] xP-", string3);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string3);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "Junit";
      charSequenceArray1[3] = (CharSequence) "G?43pS";
      charSequenceArray1[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray1[5] = (CharSequence) "junit";
      charSequenceArray1[6] = (CharSequence) "";
      charSequenceArray1[7] = (CharSequence) "P)>^w] xP-";
      boolean boolean4 = StringUtils.endsWithAny("", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(8, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("LaunchTmime");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("LaunchTmime", 23, "junit");
      assertEquals("junitjunitjuLaunchTmime", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", "", 23);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("", "@dG'}\"", "");
      assertNull(stringArray2);
      
      String string1 = StringUtils.repeat('?', (int) '?');
      assertFalse(string1.equals((Object)string0));
      assertEquals("???????????????????????????????????????????????????????????????", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "LaunchTmime";
      charSequenceArray0[1] = (CharSequence) "???????????????????????????????????????????????????????????????";
      charSequenceArray0[2] = (CharSequence) "???????????????????????????????????????????????????????????????";
      charSequenceArray0[3] = (CharSequence) "junitjunitjuLaunchTmime";
      charSequenceArray0[4] = (CharSequence) "junitjunitjuLaunchTmime";
      boolean boolean1 = StringUtils.equalsAny("junit", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.endsWithAny(charSequenceArray0[1], (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.abbreviate("!to[Nk`r>hIC'zQ5L,", 5, 145);
      assertEquals("!to[Nk`r>hIC'zQ5L,", string0);
      assertNotNull(string0);
      
      String string1 = "Locale must not be null";
      String string2 = StringUtils.removeEnd("Locale must not be null", "!to[Nk`r>hIC'zQ5L,");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Locale must not be null";
      objectArray0[1] = (Object) "Locale must not be null";
      objectArray0[2] = (Object) "!to[Nk`r>hIC'zQ5L,";
      objectArray0[3] = (Object) "!to[Nk`r>hIC'zQ5L,";
      objectArray0[4] = (Object) "!to[Nk`r>hIC'zQ5L,";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Minimum abbreviation width with offset is %d", 18, 145);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'l';
      charArray0[4] = '$';
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '?');
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = "^ydq+";
      String string2 = "\\p{InCombiningDiacriticalMarks}+";
      String string3 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      int int0 = (-870);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.getDigits("KA4");
      assertEquals("4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Q,XY@o<C+{", 5);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.stripEnd(" in an array of ", "g,dOc 8yt|#");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("g,dOc 8yt|#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8", string2);
      assertNotNull(string2);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = arrayList0.add(charBuffer0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(charBuffer0));
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<Object> iterator1 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertNotNull(iterator1);
      
      String string3 = StringUtils.join(iterator1, 'q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("o:gXo2");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("o:gXo2", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("LaunchTimeLaunchTime", "9H");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("LaunchTimeLaunchTime", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("V-HN", "LaunchTimeLaunchTime", 2);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "=dd", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "0^A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      String string0 = StringUtils.replaceFirst("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals("U~CKh1Zw8zjGJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'd', (int) 'Z', (int) 'Z');
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("U~CKh1Zw8zjGJ");
      assertTrue(string2.equals((Object)string0));
      assertEquals("U~CKh1Zw8zjGJ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "@9+B)#eW{YI");
      assertEquals(45, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("U~CKh1Zw8zjGJ", '~');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("h1Zw8zjGJU~CK", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "h1Zw8zjGJU~CK", 'C');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) '~';
      String string4 = StringUtils.join(intArray0, 'Z');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("107Z126", string4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {107, 126}, intArray0);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "&%Cf", (CharSequence) "Minimum abbreviation width is %d");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("U~CKh1Zw8zjGJ", "U~CKh1Zw8zjGJ");
      assertEquals(1.0, double0, 0.01);
      
      String string5 = StringUtils.center("L6]N01", 45, "Minimum abbreviation width is %d");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Minimum abbreviatioL6]N01Minimum abbreviation", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.compareIgnoreCase("K[<Z@/@", "&%Cf", true);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(69, int3);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", "!to[Nk`r>hIC'zQ5L,[");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("!to[Nk`r>hIC'zQ5L,[]v~=~1%$h7{H(.zHFL!to[Nk`r>hIC'zQ5L,[", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("Minimum abbreviation width with offset is %d", '+');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("]v~=~1%$h7{H(.zHFL");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("]v~=~1%$h7{H(.zHFL", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("]v~=~1%$h7{H(.zHFL");
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("]v~=~1%$h7{H(.zHFL", string3);
      assertNotNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1070);
      assertEquals(1070, charBuffer0.capacity());
      assertEquals(1070, charBuffer0.length());
      assertEquals(1070, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1070, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) charBuffer0, (CharSequence) "Object varargs must not be null", 112);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1070, charBuffer0.capacity());
      assertEquals(1070, charBuffer0.length());
      assertEquals(1070, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1070, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(">\"173.");
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(">\"173.");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.right(">\"173.", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, 1946);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.join(doubleArray0, '[', (int) '[', 10);
      assertEquals("", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1763.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "inimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "inimum abbreviation width with offset is %d";
      String string2 = StringUtils.appendIfMissing("inimum abbreviation width with offset is %d", "inimum abbreviation width with offset is %d", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("inimum abbreviation width with offset is %d", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("Object varargs must not be null", 32, 377);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.chomp("uZ;i`g+{03.k NE,G?", "8{>)Dj?!J1ZB}\"P|<^p");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("uZ;i`g+{03.k NE,G?", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.compare("", "Failed to create custom temp directory");
      assertEquals((-38), int0);
      
      boolean boolean1 = StringUtils.isWhitespace("inimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("inimum abbreviation width with offset is %d", charSequenceArray0[1], charSequenceArray0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("inimum abbreviation width with offset is %d", string5);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("}>#1LBz?g7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.trimToNull("The String must not be empty");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "The String must not be empty");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = StringUtils.mid("%Y(", 418, 1058);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(4, charSequenceArray0.length);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '}', 222, 32);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("The String must not be empty", "mp2_^vWQ");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray1 = StringUtils.split("h;)_WHSBs^2t l");
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeEnd("", "%Y(");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '@');
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) "h;)_WHSBs^2t l";
      String string4 = StringUtils.replaceChars("8{>)Dj?!J1ZB}\"P|<^p", 'E', 'Z');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("8{>)Dj?!J1ZB}\"P|<^p", string4);
      assertNotNull(string4);
      
      charSequenceArray1[3] = (CharSequence) "8{>)Dj?!J1ZB}\"P|<^p";
      charSequenceArray1[4] = (CharSequence) "The String must not be empty";
      charSequenceArray1[5] = (CharSequence) "The String must not be empty";
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(6, charSequenceArray1.length);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 334);
      assertEquals("+'w7[-KUtX)Ij", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("UtX)Ij+'w7[-K", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("IJ+'W7[-KUTX)", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      assertNotNull(string3);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string4 = locale1.toLanguageTag();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("und", string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string4);
      
      String string5 = locale0.getDisplayCountry(locale1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("IJ+'W7[-KUTX)", string5);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string5);
      
      int int0 = StringUtils.getFuzzyDistance("Ij+'w7[-KUtX)", "UtX)Ij+'w7[-K", locale1);
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals(10, int0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string6 = StringUtils.removeStart("und", "");
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("und", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("t802^H`S*0", 10);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0t802^H`S*0", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isWhitespace("IJ+'W7[-KUTX)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)122;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, ' ', (int) (byte)106, (int) (byte)122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 106
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      String string0 = StringUtils.join(charArray0, 'E', (-1252), (-1252));
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(charArray0, 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PlllE", string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "PlllE", charArray0);
      assertTrue(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("_`6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle("PlllE", "PlllE", 16);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("PlllE", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase(".u2_6&mH+y.w.u2_6&mH+y.w");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".u2_6&mh+y.w.u2_6&mh+y.w", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'A', (-1308), 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1308
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is %d";
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBefore("offset cannot be negative", "Array and element cannot both be null");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("offset cannot be negative", 22);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'K');
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = ",4Drh\\sh?:%{I[7";
      String string4 = StringUtils.substringBetween(",4Drhsh?:%{I[7", "offset cannot be negative");
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'y');
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) ",4Drhsh?:%{I[7");
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.rightPad("9LhH-z( qN]N|4+\"_", 53, 'y');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("9LhH-z( qN]N|4+\"_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("9LhH-z( qN]N|4+\"_yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("7x8?Ak[&5", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("7x8?Ak[&5", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "4N!");
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate("7x8?Ak[&5", "e\"", 65536, 97);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("7x8?Ak[&5", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "4N!", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      int[] intArray0 = new int[6];
      intArray0[0] = 1534;
      String string0 = StringUtils.rotate(">\"173.", (-621));
      assertEquals("73.>\"1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ">\"173.", '?');
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringBetween(">\"173.", " ");
      assertNull(string1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) '?';
      intArray1[1] = (int) '/';
      intArray1[2] = (-621);
      intArray1[3] = (-621);
      intArray1[4] = (int) 's';
      intArray1[5] = (int) 's';
      intArray1[6] = 0;
      intArray1[7] = (int) '?';
      String string2 = StringUtils.join(intArray1, 'e');
      assertFalse(string2.equals((Object)string0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals("63e47e-621e-621e115e115e0e63", string2);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {63, 47, (-621), (-621), 115, 115, 0, 63}, intArray1);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(">\"173.", "63e47e-621e-621e115e115e0e63");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.substringAfter("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", "\"ZW4b+P2iU\"!StgO");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: (", "Search and Replace array lengths don't match: (");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("xoGhu&");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(109);
      assertEquals(109, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(109, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(109, charBuffer0.capacity());
      assertEquals(109, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.replaceOnce("", "o!s=~l/J13", "{F~b44ARb[hOe");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "xoGhu&", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {','}, charArray0);
      
      String string2 = StringUtils.stripToEmpty("{R6n-\"l");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{R6n-\"l", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceFirst("DefaultTimeZone", "o!s=~l/J13", "{F~b44ARb[hOe");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("DefaultTimeZone", string3);
      assertNotNull(string3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ',';
      intArray0[1] = 109;
      intArray0[2] = (int) ',';
      String string4 = StringUtils.join(intArray0, 'q', 109, 109);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {44, 109, 44}, intArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("(0.0a0.0a0.0a0.0a0.0a0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("(0.0a0.0a0.0a0.0a0.0a0.0", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)0;
      String string1 = StringUtils.join(shortArray0, '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-79.-49.0", string1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-49), (short)0}, shortArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-79.-49.0", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultString("Q,XY@o<C+{");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Q,XY@o<C+{", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Q,XY@o<C+{", "Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToNull("Q,XY@o<C+{");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("Q,XY@o<C+{");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Q,XY@o<C+{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'H', 995, (int) (byte) (-37));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("{}", '.');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(".{}.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertEquals("-79.-49.0", string7);
      assertEquals(1, stringArray0.length);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceFirst("{}", "\r", "Q,XY@o<C+{");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("{}", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.rightPad(">y'fHW/^-|Jm!", 128, ">y'fHW/^-|Jm!");
      assertEquals(">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">y'fHW/^-|Jm!");
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(">y'fHW/^-|Jm!", charBuffer0.toString());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.remaining());
      assertEquals(13, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=13 cap=14]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(14, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(13, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, byteBuffer0.position());
      assertEquals(13, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=13 lim=13 cap=14]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(14, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(13, charBuffer1.length());
      assertEquals(13, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(13, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(">y'fHW/^-|Jm!", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(13, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer1, charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(13, byteBuffer0.position());
      assertEquals(13, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=13 lim=13 cap=14]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(14, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(13, charBuffer1.length());
      assertEquals(13, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(13, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals(">y'fHW/^-|Jm!", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(13, charBuffer1.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(13, charBuffer2.length());
      assertEquals(13, charBuffer2.capacity());
      assertEquals(13, charBuffer2.remaining());
      assertEquals(0, charBuffer2.position());
      assertEquals(13, charBuffer2.limit());
      assertFalse(charBuffer2.isDirect());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(">y'fHW/^-|Jm!", charBuffer2.toString());
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) charBuffer2;
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer2;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J";
      stringArray0[1] = ">y'fHW/^-|Jm!";
      stringArray0[2] = ">y'fHW/^-|Jm!";
      stringArray0[3] = ">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J";
      stringArray0[4] = ">y'fHW/^-|Jm!";
      stringArray0[5] = ">y'fHW/^-|Jm!";
      stringArray0[6] = ">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J";
      stringArray0[7] = ">y'fHW/^-|Jm!";
      stringArray0[8] = ">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">y'fHW/^-|Jm!", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) ">y'fHW/^-|Jm!";
      charSequenceArray0[4] = (CharSequence) ">y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|Jm!>y'fHW/^-|J";
      charSequenceArray0[5] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.join((CharBuffer[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      short short0 = (short)1711;
      shortArray0[0] = (short)1711;
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("France", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr-FR", string2);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      char char0 = 'v';
      String string4 = locale1.toLanguageTag();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr-FR", string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string4);
      
      String string5 = locale0.getExtension('v');
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertSame(locale0, locale1);
      assertNull(string5);
      
      String string6 = locale0.getDisplayCountry(locale1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("France", string6);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("France", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.replace("", "", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL", "'@^j)1g~@It");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("DefaultTimeZone");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.trimToNull("DefaultTimeZone");
      assertTrue(string1.equals((Object)string0));
      assertEquals("DefaultTimeZone", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it-IT", string2);
      assertSame(locale0, locale1);
      assertNotNull(string2);
      
      String string3 = locale1.getDisplayCountry(locale0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("Italia", string3);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string4 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "_]3J:/M2X(", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_]3J:/M2X(offset cannot be negative", string4);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissing("jK64fz. /{ gC+!'sj", "Italia", charSequenceArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("jK64fz. /{ gC+!'sjItalia", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      
      String string6 = "<gHY4']TcwpNbb=,{6";
      String string7 = StringUtils.mid("\r", 2065, 2065);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Italia", "DefaultTimeZone");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative", 0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("DefaultTimeZone");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.right("~=~1%$h7{H(.zHFL", 0);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      Locale locale2 = Locale.PRC;
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("zh_CN", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("CN", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("CHN", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.leftPad("temp.dir", (-638), "maxWith cannot be negative");
      assertEquals("temp.dir", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "temp.dir";
      objectArray0[1] = (Object) "temp.dir";
      objectArray0[2] = (Object) "temp.dir";
      objectArray0[3] = (Object) "temp.dir";
      objectArray0[4] = (Object) "maxWith cannot be negative";
      String string1 = StringUtils.join(objectArray0, "Threshold must not be negative", (-638), (-638));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("Array and element cannot both be null", '.', '$');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("temp.dir", "io", "{R6n-\"l");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("temp.dir", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'g';
      charArray0[2] = '$';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '$';
      charArray0[6] = '.';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "temp.dir", charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'.', 'g', '$', '.', '.', '$', '.'}, charArray0);
      
      String string4 = StringUtils.stripToEmpty("LaunchTimep{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("LaunchTimep{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("temp.dir");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceFirst("Strings must not be null", "lu0147", "Threshold must not be negative");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "vs";
      objectArray0[2] = (Object) " vs ";
      objectArray0[3] = (Object) "maxWith cannot be negative";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      String string1 = StringUtils.join(objectArray0, '\'');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("g,dOc 8yt|", "uK", "vs");
      assertNull(stringArray0);
      
      String string2 = StringUtils.repeat('\'', 9987);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " vs ";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) " vs ";
      boolean boolean1 = StringUtils.equalsAny("vs", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.trimToNull("vs");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("vs", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("vs", (-2913), (int) '\'');
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("vs", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) "maxWith cannot be negative");
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Thr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.replaceChars("bTexv0elIf:5Np+vJag", '(', '(');
      assertEquals("bTexv0elIf:5Np+vJag", string0);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("bTexv0elIf:5Np+vJag"));
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("bTexv0elIf:5Np+vJag"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "{'");
      assertFalse(string1.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string1);
      assertFalse(arrayList0.contains("bTexv0elIf:5Np+vJag"));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bTexv0elIf:5Np+vJag";
      stringArray0[1] = "bTexv0elIf:5Np+vJag";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "{'";
      stringArray0[6] = "";
      stringArray0[7] = "bTexv0elIf:5Np+vJag";
      stringArray0[8] = "bTexv0elIf:5Np+vJag";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      String string0 = StringUtils.lowerCase("~R+&VrIX,Q4Lo`Fm");
      assertEquals("~r+&vrix,q4lo`fm", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("~R+&VrIX,Q4Lo`Fm", "\"ItWdva3HrD1a7", "");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("~R+&VrIX,Q4Lo`Fm");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("\"ItWdva3HrD1a7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.endsWith("\"ItWdva3HrD1a7", "~r+&vrix,q4lo`fm");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripToEmpty("O[!Ck|J-v`98!");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("O[!Ck|J-v`98!", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("O[!Ck|J-v`98!", 1112);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "O[!Ck|J-v`98!", (CharSequence) string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.length("org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertEquals(52, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "~R+&VrIX,Q4Lo`Fm", 52);
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "O[!Ck|J-v`98!", (CharSequence[]) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'O';
      charArray0[2] = 'Q';
      boolean boolean4 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath", charArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', 'O', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String string0 = StringUtils.trim("Gqg/#dC\"DXGiF");
      assertEquals("Gqg/#dC\"DXGiF", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Gqg/#dC\"DXGiF", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("Qs;/75C-!@6p", 160);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z]!w,\"0m-) ]hk]rn", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2174, 'M');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(string4, "Qs;/75C-!@6p", 2174);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      String string5 = StringUtils.join(intArray0, '@');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("160", string5);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {160}, intArray0);
      assertNotNull(string5);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short) (-641);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-609);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-641);
      shortArray0[6] = (short) (-641);
      String string6 = StringUtils.join(shortArray0, '`');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0`0`0`-609`0`-641`-641", string6);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-609), (short)0, (short) (-641), (short) (-641)}, shortArray0);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "Qs;/75C-!@6p", (CharSequence) "0`0`0`-609`0`-641`-641");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.unwrap("]v~=~1%$h7{H(.zH", "Minimum abbreviation width is %d");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("]v~=~1%$h7{H(.zH", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceChars("06H>t_LGj", ".]U", "aCOuC\"|G");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("06H>t_LGj", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.unwrap("The String must not be empty", ",fIuG;VUwa=D\"GzsBL");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("(", "(", (-2920));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "U`:Vvf(g<O.wTaa", "(");
      assertNull(stringArray1);
      
      String string0 = StringUtils.unwrap(" T'zPL04e", " ");
      assertEquals(" T'zPL04e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[0] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(int1 == int0);
      assertEquals(24, int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'.', 'M', 'E', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.right("<HG|iP7", 180323055);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<HG|iP7", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 180323055;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 25;
      doubleArray0[4] = (double) '.';
      doubleArray0[5] = (double) 16;
      String string4 = StringUtils.join(doubleArray0, 'E');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("16.0E1.80323055E8E25.0E25.0E46.0E16.0", string4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {16.0, 1.80323055E8, 25.0, 25.0, 46.0, 16.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("The type must not be null", "The type must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1763;
      String string0 = StringUtils.join(doubleArray0, '[', (int) '[', 10);
      assertEquals("", string0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 1763.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Minimum abbreviation width with offset is %d", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("inimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "inimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "inimum abbreviation width with offset is %d";
      String string2 = StringUtils.appendIfMissing("inimum abbreviation width with offset is %d", "inimum abbreviation width with offset is %d", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("inimum abbreviation width with offset is %d", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("Object varargs must not be null", 32, 377);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      charArray0[6] = 'M';
      charArray0[7] = 'M';
      String string4 = StringUtils.join(charArray0, 'M');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("MMMMMMMMMMMMMMM", string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'}, charArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("The Array must not be null", 'r');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.truncate("Threshold must not be negative", 113);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("ClF+dRihh!}v+L", 0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ClF+dRihh!}v+L", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null4=0p--pZ;^S+<2v9_7", 96, "org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null4=0p--pZ;^S+<2v9_7");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null4=0p--pZ;^S+<2v9_7org.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negative");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", 'U');
      assertEquals(0, int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("maxWith cannot be negative", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'A';
      String string0 = StringUtils.join(longArray0, 'A', 1230, 1230);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {73L, 73L, 65L, 0L}, longArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      
      String string1 = StringUtils.join((double[]) null, 'U', (-1), 1230);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("", '+');
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("The Character must not be null", "", (CharSequence[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("The Character must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid((String) null, 35, 35);
      assertNull(string4);
      
      String string5 = StringUtils.join(charArray0, 'v');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("IvI", string5);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("The Character must not be null");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The Character must not be null";
      stringArray0[1] = "IvI";
      stringArray0[2] = ".]U";
      stringArray0[3] = "The Character must not be null";
      stringArray0[4] = "The Character must not be null";
      stringArray0[5] = null;
      stringArray0[6] = "IvI";
      String string6 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertEquals(7, stringArray0.length);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int int0 = StringUtils.compare("b", "Array and element cannot both be null", false);
      assertEquals(33, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("b");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', (int) (byte) (-111), (int) (byte) (-111));
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, '@');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chomp("O)mCimmr;T9H=B@ZR", "Array and element cannot both be null");
      assertFalse(string2.equals((Object)string0));
      assertEquals("O)mCimmr;T9H=B@ZR", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("-sTK)>0!mFAH4J@C?rG");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-sTK)>0!mFAH4J@C?rG", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("(7'j-l)^N*", 2, "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("(7'j-l)^N*", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      Locale locale0 = new Locale(";%|&~FKX'myS([");
      assertEquals(";%|&~fkx'mys([", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(";%|&~fkx'mys([", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ";%|&~FKX'myS([";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(";%|&~FKX'myS([", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.chomp(";%|&~FKX'myS([", "");
      assertEquals(";%|&~FKX'myS([", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.wrap("rc", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("rc", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("rc", "rc");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.stripStart("", "id5\"Jr8$W$N)~T<");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("id5\"Jr8$W$N)~T<", 2774);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("id5\"Jr8$W$N)~T<", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string4 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(";%|&~FKX'myS([", string4);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("|)hh%", "rc");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("|)hh%", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverseDelimited("rc", 'l');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("rc", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.ordinalIndexOf("rc", "|)hh%", 2340);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.removeStartIgnoreCase(".u2_6&mH+y.w", "");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals(".u2_6&mH+y.w", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      int int1 = StringUtils.indexOfAny((CharSequence) ".u2_6&mH+y.w", charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'l', 'l'}, charArray0);
      
      boolean boolean3 = StringUtils.isAlphaSpace("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string8 = StringUtils.chomp("LaunchTime", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertEquals("LaunchTime", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String string0 = StringUtils.chomp("ke|sl9Rqkewsl9>i!Rq", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertEquals("ke|sl9Rqkewsl9>i!Rq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.difference("ry", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.center("I><G!_\"0", 1655, "offset cannot be negative");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny(string0, (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("org.apache.commons.lang3.ArrayUtils", string0, "org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.ArrayUtils", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.ArrayUtils", locale0.getVariant());
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.ArrayUtils", locale0.getVariant());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      Locale locale1 = Locale.UK;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = locale1.getDisplayVariant();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", string3);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      
      Locale locale2 = locale1.stripExtensions();
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale2.getISO3Country());
      assertEquals("en_GB", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("GB", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string4 = locale0.getExtension('v');
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals("org.apache.commons.lang3.arrayutils", locale0.getLanguage());
      assertEquals("org.apache.commons.lang3.ArrayUtils", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNull(string4);
      
      Locale locale3 = Locale.CANADA_FRENCH;
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertEquals("fr", locale3.getLanguage());
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotNull(locale3);
      
      String string5 = locale3.getDisplayCountry(locale2);
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale2.getISO3Country());
      assertEquals("en_GB", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("GB", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale3.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("Canada", string5);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotNull(string5);
      
      int int0 = StringUtils.getFuzzyDistance("", string0, locale1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(locale1.equals((Object)locale3));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals(0, int0);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertNotSame(locale1, locale0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string6 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string6);
      
      char[] charArray0 = new char[0];
      String string7 = StringUtils.join(charArray0, '[', (-1), (-591));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "The String must not be empty";
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, "n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(stringArray0[2], stringArray0[0], "");
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "Arguments cannot both be null", 3089);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[4] = '?';
      String string3 = StringUtils.replaceChars("c", (String) null, "Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("c", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((float[]) null, 'G', 114, 139);
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("The Array must not be null", (String) null, "X~r");
      assertNull(string5);
      
      String string6 = StringUtils.center(" ", 256, '?');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????? ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????? ????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????", (CharSequence) null, (-412));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lm/98h^o";
      stringArray0[1] = "The String must not be empy";
      stringArray0[2] = "LaunchTime";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = (double) 10;
      doubleArray0[3] = (double) 10;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 10;
      String string0 = StringUtils.join(doubleArray0, '1', 10, 0);
      assertEquals("", string0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, 10.0, 10.0, 10.0, 10.0, (-1.0), 10.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("p{InCombiningDiacriticalMarks}+", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("arks}+Mp{InCombiningDiacritical", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("LaunchTime", "LaunchTime", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LaunchTime", string2);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("`1lm/98h^o", 32, (-1920));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = 'M';
      charArray0[3] = '1';
      charArray0[4] = 'M';
      String string4 = StringUtils.join(charArray0, '\"');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1\"1\"M\"1\"M", string4);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', '1', 'M', '1', 'M'}, charArray0);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("LaunchTime");
      assertTrue(boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.stripStart("%hZ{!<F}(CBd", "");
      assertEquals("%hZ{!<F}(CBd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%hZ{!<F}(CBd", "%hZ{!<F}(CBd");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'A';
      floatArray0[5] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1.0Z0.0Z-1.0Z0.0Z65.0Z0.0", string1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 65.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      Iterator<CharBuffer> iterator0 = treeSet1.descendingIterator();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(iterator0);
      
      String string3 = StringUtils.removeStartIgnoreCase("%hZ{!<F}(CBd", "Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%hZ{!<F}(CBd", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ARGUMENTS CANNOT BOTH BE NULL.U2_6&MH+Y.W", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removePattern("WTA'QVrC", "Object varargs must not be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("WTA'QVrC", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "%hZ{!<F}(CBd", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("Object varargs must not be null");
      assertEquals(31, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.replaceChars("-1.0Z0.0Z-1.0Z0.0Z65.0Z0.0", 'Z', '0');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("-1.000.00-1.000.0065.000.0", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.length("-1.0Z0.0Z-1.0Z0.0Z65.0Z0.0");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(26, int3);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "%hZ{!<F}(CBd", (CharSequence) "%hZ{!<F}(CBd");
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertEquals("7zS1rf@\"J f)5t2E", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-3413)));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "7zS1rf@\"J f)5t2E");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains((-3413)));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.remove(object0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertFalse(linkedList0.contains((-3413)));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      String string1 = StringUtils.substringBetween("te'O-eNp:H>tmwu", "6g/{]?\"lq", ")5t2E7zS1rf@\"J f");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = linkedList0.offerLast((Object) null);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean5);
      assertFalse(linkedList0.contains((-3413)));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      String string2 = StringUtils.defaultString((String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("7zS1rf@\"J f)5t2E", ")5t2E7zS1rf@\"J f");
      assertEquals(0.79, double0, 0.01);
      
      String string3 = StringUtils.left("blank_blank_blank_2014", 1122);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("blank_blank_blank_2014", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 't');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("',>");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("',>", "',>", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[1] = (Object) "ilv!W=wbZGFeFE";
      objectArray0[2] = (Object) "ilv!W=wbZGFeFE";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "ilv!W=wbZGFeFE";
      String string0 = StringUtils.joinWith("ilv!W=wbZGFeFE", objectArray0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("Search and Replace array lengths don't match: ", "ilv!W=wbZGFeFE", false);
      assertEquals((-22), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.wrap("ilv!W=wbZGFeFEilv!W=wbZGFeFEilv!W=wbZGFeFEilv!W=wbZGFeFEilv!W=wbZGFeFEilv!W=wbZGFeFEjava.lang.Object@5c703105ilv!W=wbZGFeFEilv!W=wbZGFeFE", '*');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[3];
      String string3 = StringUtils.stripToEmpty("A&7s[1T6sd");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("A&7s[1T6sd", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "A&7s[1T6sd", (-22), (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4908.1435070001835;
      doubleArray0[1] = (-400.172852450504);
      doubleArray0[2] = 441.14807178223;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 0.7;
      doubleArray0[5] = 0.7916666666666666;
      doubleArray0[6] = (-2464.4754376);
      String string0 = StringUtils.join(doubleArray0, 'o');
      assertEquals("4908.1435070001835o-400.172852450504o441.14807178223o1.5o0.7o0.7916666666666666o-2464.4754376", string0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {4908.1435070001835, (-400.172852450504), 441.14807178223, 1.5, 0.7, 0.7916666666666666, (-2464.4754376)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "4908.1435070001835o-400.172852450504o441.14807178223o1.5o0.7o0.7916666666666666o-2464.4754376", 54, 54);
      assertEquals(66, int0);
      
      String string1 = StringUtils.trim("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Comparator should not be null.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '/');
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.stripStart("%hZ{!<F}(CBd", "");
      assertEquals("%hZ{!<F}(CBd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%hZ{!<F}(CBd", "%hZ{!<F}(CBd");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 'A';
      floatArray0[5] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 'Z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1.0Z0.0Z-1.0Z0.0Z65.0Z0.0", string1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, (-1.0F), 0.0F, 65.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      Iterator<CharBuffer> iterator0 = treeSet1.descendingIterator();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(iterator0);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.left("", 885);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", 'A');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "*a77F5HGK");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      String string0 = StringUtils.rightPad("z':p'LMYR=", 2121, "8{>)Dj?!J1ZB}\"P|<^p");
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "z':p'LMYR=", (CharSequence) "8{>)Dj?!J1ZB}\"P|<^p");
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("z':p'LMYR=", charSequence0);
      assertNotNull(charSequence0);
      
      String string1 = StringUtils.substringAfterLast(string0, "z':p'LMYR=");
      assertFalse(string0.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Y', 13, 2121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.difference(".QHfx0sa&Eqw.(F", (String) null);
      assertEquals(".QHfx0sa&Eqw.(F", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      char char0 = '|';
      String string0 = StringUtils.join((byte[]) null, '|', (-1354), (-1354));
      assertNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("", "");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Object>((-1324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1324
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      String string0 = StringUtils.join(charArray0, '3', 4, 4);
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 84);
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", "KQ(f},dMi:/Ul~<;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("KQ(f},dMi:/Ul~<;]v~=~1%$h7{H(.zHFLKQ(f},dMi:/Ul~<;", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("]v~=~1%$h7{H(.zHFL");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]v~=~1%$h7{H(.zHFL", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("3AXW@ELu4{Pr}", "maxWith cannot be negative", 84);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "F} >kh9JYNww%";
      stringArray1[1] = "KQ(f},dMi:/Ul~<;]v~=~1%$h7{H(.zHFLKQ(f},dMi:/Ul~<;";
      stringArray1[2] = "KQ(f},dMi:/Ul~<;]v~=~1%$h7{H(.zHFLKQ(f},dMi:/Ul~<;";
      stringArray1[3] = "KQ(f},dMi:/Ul~<;";
      stringArray1[4] = "]v~=~1%$h7{H(.zHFL";
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "F} >kh9JYNww%");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(5, stringArray2.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.substringAfterLast("]v~=~1%$h7{H(.zHFL", "]v~=~1%$h7{H(.zHFL");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(11);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("3AXW@ELu4{Pr}"));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, ';');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string4);
      assertFalse(arrayList0.contains("]v~=~1%$h7{H(.zHFL"));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '~', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, objectArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      String[] stringArray0 = StringUtils.split("offset cannot be negative", ')');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.removeFirst("Minimum abbreviation width is %d", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.removePattern("offset cannot be negative", "V4 |=5iR<kK/");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("offset cannot be negative", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "WTA'QVrC");
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      String string7 = StringUtils.stripStart(".u2_6&mH+y.w", "'");
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals(".u2_6&mH+y.w", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("'", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      
      String string8 = StringUtils.center((String) null, (-2250), "");
      assertNull(string8);
      
      int int2 = StringUtils.compare("WTA'QVrC", "}G+B'xp\u0007TMx''0");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-38), int2);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 19, "MIwe(?=+STb7N");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("MIwe(?=+STb7N", (String) null, (String) null);
      assertEquals("MIwe(?=+STb7N", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "MIwe(?=+STb7N", (CharSequence) "MIwe(?=+STb7N");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("The Stringmust not be empty", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-308), 0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      String string5 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("", 116, 90);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "Y?I.-e|t\n/,'!");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.wrapIfMissing("The character ", "Minimum abbreviation width with offset is %d");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Minimum abbreviation width with offset is %dThe character Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
      
      String string8 = StringUtils.substringBeforeLast("}m]", "Be>=,~iOH1!_-2($P");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("}m]", string8);
      assertNotNull(string8);
      
      boolean boolean3 = StringUtils.containsIgnoreCase((CharSequence) null, "}m]");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string9 = StringUtils.substring("", (-308));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[2] = (long) '?';
      String string0 = StringUtils.stripEnd("g,dOc 8yt|#", "&'t7XOtqR0+");
      assertEquals("g,dOc 8yt|#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("&'t7XOtqR0+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("70", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("{;k", "&'t7XOtqR0+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{;k", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.replaceChars((String) null, "g,dOc 8yt|#", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.mid((String) null, (-1), 3);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.rotate("{;k", Integer.MAX_VALUE);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("k{;", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string0);
      
      String string1 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      String string2 = StringUtils.mid((String) null, 321, 90);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y?I.-e|t\n/,'!", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrapIfMissing(".u2_6&mH+y.w", "Arguments cannot both be null");
      assertFalse(string3.equals((Object)string1));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBeforeLast("", "Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "Y?I.-e|t\n/,'!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      String string0 = StringUtils.difference("", "-u`=%7E<nsGRx&`");
      assertEquals("-u`=%7E<nsGRx&`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.repeat("8{>)Dj?!J1ZB}\"P|<^p", 2121);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = "The String must not be empty";
      String[] stringArray0 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("The character ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character", string1);
      assertNotNull(string1);
      
      String string2 = "mp2_^vWQ";
      int int0 = StringUtils.compareIgnoreCase((String) null, "The character ");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.substringBefore((String) null, "mp2_^vWQ");
      assertNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "The character ", 'K');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.substringBetween((String) null, "Locale must not be null");
      assertNull(string4);
      
      String string5 = StringUtils.join((int[]) null, '}');
      assertNull(string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "mp2_^vWQ");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "uXvL}>(.`", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ArrayUtils";
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '4', (int) (short) (-4711), (int) (short) (-459));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4711
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)80;
      shortArray0[1] = (short)65;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)65;
      shortArray0[4] = (short) (-3);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'q', 2, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains('('));
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[[]]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertTrue(boolean0);
      assertFalse(vector0.contains('('));
      
      String string3 = StringUtils.join((List<?>) vector0, '(', 97, (-514));
      assertTrue(string3.equals((Object)string1));
      assertEquals(10, vector0.capacity());
      assertEquals("[[]]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("", string3);
      assertFalse(vector0.contains('('));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      String string4 = StringUtils.join(objectArray0, 'F', 53, (-514));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(3, objectArray0.length);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.removePattern("M>n", "M>n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("M>n");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {77, 62, 110}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", ';');
      assertEquals(0, int0);
      
      String string1 = "Euwd.eQSJ|?F?d0}";
      String string2 = StringUtils.trimToNull("Euwd.eQSJ|?F?d0}");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Euwd.eQSJ|?F?d0}", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compareIgnoreCase("", "M>n");
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "M>n", (char[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("", "g,dOc 8yt|#", "!to[Nk`r>hIC'zQ5L,");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Euwd.eQSJ|?F?d0}", 'Z');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "Failed to delete temp directory ");
      assertNull(stringArray1);
      
      String string5 = StringUtils.mid("Minimum abbreviation width with offset is %d", 369, 418);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-3);
      longArray0[1] = 1632L;
      longArray0[2] = (long) (-3);
      longArray0[3] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ';', (-3), 222);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.chomp("K");
      assertEquals("K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "ka{>V";
      charSequenceArray0[1] = (CharSequence) "ka{>V";
      charSequenceArray0[2] = (CharSequence) "v\":;,O0";
      charSequenceArray0[3] = (CharSequence) ">\"173.";
      charSequenceArray0[4] = (CharSequence) ">\"173.";
      charSequenceArray0[5] = (CharSequence) "ka{>V";
      String string0 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "Minimum abbreviation width with offset is %d");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.appendIfMissing("ka{>V", "", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ka{>V", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing("Minimum abbreviation width with offset is %d", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ka{>VMinimum abbreviation width with offset is %d", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ka{>VMinimum abbreviation width with offset is %d", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string3 = StringUtils.center("", (-1), "v\":;,O0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "ka{>V";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      String string4 = StringUtils.replaceEach("b@NQ/&,Rv{;A0aj6d&", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("b@NQ/&,Rv{;A0aj6d&", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("b@NQ/&,Rv{;A0aj6d&", stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string5 = StringUtils.chomp("S");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("S", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.center("Is\"2@g\t`/EP^f%@6", (-273), "Is\"2@g\t`/EP^f%@6");
      assertEquals("Is\"2@g\t`/EP^f%@6", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Is\"2@g\t`/EP^f%@6", (CharSequence) "Is\"2@g\t`/EP^f%@6");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("The String must not be empty");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "`1lD/9<h^X");
      assertEquals(0.38, double0, 0.01);
      
      char[] charArray0 = new char[18];
      charArray0[0] = 'A';
      charArray0[1] = '';
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("aA,", stringArray0, stringArray0);
      assertEquals("aA,", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("aA,");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultString("aA,");
      assertTrue(string1.equals((Object)string0));
      assertEquals("aA,", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "aA,", (CharSequence) "aA,");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("`1lD/9<h^X", "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      intArray0[2] = 45;
      intArray0[3] = 45;
      intArray0[4] = 0;
      intArray0[5] = 45;
      String[] stringArray3 = StringUtils.substringsBetween(" but was: ", (String) null, "org.junitpioneer.jupiter.TempDirectory");
      assertNull(stringArray3);
      
      String string1 = StringUtils.mid("`1lD/9<h^X", 1226, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.defaultString("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "`o?/X`yYG>SE!");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '|', (int) '0', 321);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, '|');
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing((String) null, ".u2_6&mH+y.w", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.mid("$h", 321, 90);
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y?I.-e|t\n/,'!", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing(".u2_6&mH+y.w", "Arguments cannot both be null");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.substringBeforeLast("$h", "Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("$h", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("$h", "Y?I.-e|t\n/,'!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.wrapIfMissing((String) null, '0');
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      String string0 = StringUtils.stripToNull("{");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 73;
      intArray0[1] = 73;
      intArray0[2] = 73;
      intArray0[3] = 73;
      intArray0[4] = 73;
      intArray0[5] = 73;
      intArray0[6] = 73;
      intArray0[7] = 73;
      String string1 = StringUtils.join(intArray0, 'Z', 73, (-683));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {73, 73, 73, 73, 73, 73, 73, 73}, intArray0);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.center("E)*|", 1114111);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "-");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("(0[c;g:8O59G)nc&p", (String) null, (String) null);
      assertEquals("(0[c;g:8O59G)nc&p", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("`;M2J>45_kD~", 'z');
      assertFalse(string3.equals((Object)string2));
      assertEquals("z`;M2J>45_kD~z", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", 7, (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("       ", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.leftPad("e*W", 8192, "e*W");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.abbreviate("rlaL44", 5, 5);
      assertEquals("rl...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "rl...", (CharSequence) "rlaL44");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((float[]) null, 'x', 5, 5);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.center("Threshold must not be negative", 68, "Threshold must not be negative");
      assertEquals("Threshold must not Threshold must not be negativeThreshold must not ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Threshold must not Threshold must not be negativeThreshold must not ", (CharSequence) "Threshold must not Threshold must not be negativeThreshold must not ", 68);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(".u2_6&mH+y.w", ".u2_6&mH+y.w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".u2_6&mH+y.w";
      String string2 = StringUtils.join(objectArray0, "', is neither of type Map.Entry nor an Array", 0, 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1549);
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1549);
      shortArray0[6] = (short) (-1549);
      shortArray0[7] = (short)98;
      String string3 = StringUtils.join(shortArray0, ' ');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0 0 0 -1549 0 -1549 -1549 98", string3);
      assertEquals(8, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1549), (short)0, (short) (-1549), (short) (-1549), (short)98}, shortArray0);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray1 = new Object[0];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      String string4 = StringUtils.join(objectArray1, '_', (int) (short)98, (int) (short)0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("TLPZ=(~f>E", "L6]N01");
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string6 = StringUtils.wrapIfMissing((String) null, '0');
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("7UT9qMoe", ".#7ukQMS f&DJX!S", "', is neither of type Map.Entry nor an Array");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[14];
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charBufferArray0);
      assertTrue(boolean0);
      assertEquals(14, charBufferArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("<HG|iP7", "p{InCombiningDiacriticalMarks}+", 16, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[0] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(int1 == int0);
      assertEquals(24, int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'.', 'M', 'E', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.isBlank("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.right("<HG|iP7", 180323055);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<HG|iP7", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 180323055;
      doubleArray0[2] = (double) 25;
      doubleArray0[3] = (double) 25;
      doubleArray0[4] = (double) '.';
      doubleArray0[5] = (double) 16;
      String string4 = StringUtils.join(doubleArray0, 'E');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("16.0E1.80323055E8E25.0E25.0E46.0E16.0", string4);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {16.0, 1.80323055E8, 25.0, 25.0, 46.0, 16.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean2 = StringUtils.equalsAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)65;
      shortArray0[1] = (short)2173;
      shortArray0[2] = (short) (-3);
      shortArray0[3] = (short)4930;
      shortArray0[4] = (short)56;
      shortArray0[5] = (short)80;
      String string0 = StringUtils.join(shortArray0, 'F', (int) (short)65, 2);
      assertEquals("", string0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)65, (short)2173, (short) (-3), (short)4930, (short)56, (short)80}, shortArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '2');
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.unwrap("FLG", 'r');
      assertEquals("FLG", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String string0 = StringUtils.rightPad("z':p'LMYR=", 2121, "8{>)Dj?!J1ZB}\"P|<^p");
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string1 = StringUtils.join((List<?>) stack0, '\\', 2896, 2896);
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'S', (int) 'S', (int) 'S');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("a=*K)*MJ x1");
      assertEquals("a=*K)*MJ x1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("LaunchTime", "L6]N01", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L6]N01LaunchTime", string1);
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)321;
      String string2 = StringUtils.join(shortArray0, '!');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("321", string2);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)321}, shortArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("", "q3m*D");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'E', 77, 0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring((String) null, 77);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "<}{31'~_@.!", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.difference("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) charSequenceArray0[1]);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(linkedList0.contains(""));
      
      String string2 = StringUtils.substringBetween("", "6g/{]?\"lq", "");
      assertNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "te'O-eNp:H>tmwu", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, charSequenceArray1.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals((-1), int0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, charSequenceArray1.length);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "te'O-eNp:H>tmwu", charSequenceArray0);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isBlank("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("<HG|P7", "p{InCombiningDiacriticalMarks}+", 16, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[0] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(int1 == int0);
      assertEquals(24, int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'.', 'M', 'E', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.isBlank("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.overlay("{M\"4Z vs ", (String) null, 109, 109);
      assertEquals("{M\"4Z vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("{M\"4Z vs ");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 109, 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart(".u2_6&mH+y.w", ".u2_6&mH+y.w");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".u2_6&mH+y.w";
      String string2 = StringUtils.join(objectArray0, "', is neither of type Map.Entry nor an Array", 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase(".u2_6&mH+y.w", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(".u2_6&mH+y.w", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.right("Array and element cannot both be null", 2774);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string4);
      assertNotNull(string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string5 = StringUtils.stripStart("Array and element cannot both be null", "Array and element cannot both be null");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripStart("org.junitpioneer.jupiter.DefaultTimeZoneExtension", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.reverseDelimited("C2!,K1E9^zU58ej", 'l');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("C2!,K1E9^zU58ej", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("junit", "@dG'}\"");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("LaunchTmime", 23, "junit");
      assertEquals("junitjunitjuLaunchTmime", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", "", 23);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("", "@dG'}\"", "");
      assertNull(stringArray2);
      
      String string1 = StringUtils.join((double[]) null, '?');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "LaunchTmime";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "junitjunitjuLaunchTmime";
      charSequenceArray0[4] = (CharSequence) "junitjunitjuLaunchTmime";
      boolean boolean1 = StringUtils.equalsAny("junit", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.stripEnd("=", "=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.uncapitalize("_%3g7k~/,,]:R");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("_%3g7k~/,,]:R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, "_%3g7k~/,,]:R");
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is %d");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.remove("kZZnf:AdjulY%AV;6", "LaunchTime");
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("kZZnf:AdjulY%AV;6", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat((String) null, 237);
      assertNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", (CharSequence) "_%3g7k~/,,]:R", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("O$df[Lmk", "LaunchTime");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.stripAccents("dT$DLs{ANV");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("dT$DLs{ANV", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("Z", '');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Z", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.stripEnd("=", "=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(26);
      assertEquals(26, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(26, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(26, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(26, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(26);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(26, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(26, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(26, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(26, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer1, (CharSequence) charBuffer0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(26, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(26, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(26, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(26, charBuffer0.remaining());
      assertEquals(26, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(26, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(26, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(26, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(boolean0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("sX>xJ?k=7aw-R", "sX>xJ?k=7aw-R", "Thr");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "sX>xJ?k=7aw-R", (CharSequence) "Thr");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare(" ", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.defaultString("sX>xJ?k=7aw-R");
      assertEquals("sX>xJ?k=7aw-R", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "h", " ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToNull("sX>xJ?k=7aw-R");
      assertTrue(string1.equals((Object)string0));
      assertEquals("sX>xJ?k=7aw-R", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("heo_ffvjK0iEC");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("heo_ffvjK0iEC", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.endsWithAny("heo_ffvjK0iEC", (CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("sX>xJ?k=7aw-R", "sX>xJ?k=7aw-R", "Thr");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "sX>xJ?k=7aw-R", (CharSequence) "Thr");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBetween("sX>xJ?k=7aw-R", "Thr", "Thr");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(42);
      assertEquals(42, charBuffer0.capacity());
      assertEquals(42, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(42, charBuffer0.limit());
      assertEquals(42, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(42);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(42, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(42, charBuffer1.capacity());
      assertEquals(42, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(42, charBuffer1.length());
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = charBuffer1.put(32, '4');
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(42, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(42, charBuffer1.capacity());
      assertEquals(42, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(42, charBuffer1.length());
      assertEquals(42, charBuffer2.length());
      assertEquals(42, charBuffer2.remaining());
      assertEquals(42, charBuffer2.capacity());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(42, charBuffer2.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(42, charBuffer0.capacity());
      assertEquals(42, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(42, charBuffer0.limit());
      assertEquals(42, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(42, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(42, charBuffer1.capacity());
      assertEquals(42, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(42, charBuffer1.length());
      assertFalse(boolean0);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.center("", 0);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("-E ", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("-E ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern((String) null, "ExpectedException", "Arguments cannot both be null.u2_6&mH+y.w");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.joinWith("offset cannot be negative", charSequenceArray0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", string7);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", (CharSequence) "-E ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "ExpectedException", charSequenceArray0[0]);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.compare("Index: ", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>(0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string8 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string0 = StringUtils.replaceOnce("~?~JLZPb{2E", "org.junitpioneer.jupiter.TempDirectory", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("~?~JLZPb{2E", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "~?~JLZPb{2E";
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Canada", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("org.junitpioneer.jupiter.TempDirectory", locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY", string2);
      assertNotNull(string2);
      
      charSequenceArray0[5] = (CharSequence) "ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY";
      charSequenceArray0[6] = (CharSequence) "\r";
      String string3 = locale0.getExtension('P');
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertNull(string3);
      
      charSequenceArray0[7] = (CharSequence) "\r";
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.setDefault(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      charSequenceArray0[8] = (CharSequence) "\r";
      String string4 = StringUtils.appendIfMissing("\r", "\r", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\r", string4);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = locale0.getDisplayLanguage();
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("inglese", string5);
      assertNotSame(locale0, locale1);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = StringUtils.contains(charSequenceArray0[6], (CharSequence) null);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'h', 0, 222);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("\r");
      assertFalse(boolean0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("\r"));
      assertNotNull(linkedHashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", string1);
      assertFalse(linkedHashSet0.contains("\r"));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("9", "9", "9");
      assertEquals("9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "9", (CharSequence) "9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.center("", 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("-E ", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("-E ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern((String) null, "ExpectedException", "Arguments cannot both be null.u2_6&mH+y.w");
      assertNull(string6);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.joinWith("offset cannot be negative", charSequenceArray0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", string7);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", (CharSequence) "-E ");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "ExpectedException", charSequenceArray0[0]);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.compare("Index: ", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>(0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string8 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, ',');
      assertEquals("", string0);
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.joinWith("0pl<;E8qA-F", objectArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((double[]) null, 'x', 0, 119);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("0pl<;E8qA-F", ',');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("0pl<;E8qA-F", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(objectArray0, "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertEquals(1, objectArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = 'x';
      charArray0[2] = ',';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'x';
      charArray0[6] = 'x';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "0pl<;E8qA-F", charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'~', 'x', ',', 'C', 'C', 'x', 'x'}, charArray0);
      
      String string5 = StringUtils.replaceChars("", (String) null, "");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("", 'x');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("d", " ", (CharSequence[]) null);
      assertEquals(" d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 342);
      assertEquals("-KUtX)Ij+'w7[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("'w7[-KUtX)Ij+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("IJ+'W7[-KUTX)", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      assertNotNull(string3);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string4 = locale1.toLanguageTag();
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("und", string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string4);
      
      String string5 = locale0.getDisplayCountry(locale1);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale1.toString());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("IJ+'W7[-KUTX)", string5);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("_]3J:/M2X(", "org.junitpioneer.jupiter.DefaultLocaleExtension", (CharSequence[]) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension_]3J:/M2X(", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing("'w7[-KUtX)Ij+", "org.junitpioneer.jupiter.DefaultLocaleExtension_]3J:/M2X(", (CharSequence[]) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("'w7[-KUtX)Ij+org.junitpioneer.jupiter.DefaultLocaleExtension_]3J:/M2X(", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.mid("_]3J:/M2X(", (-1100), 2065);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals("_]3J:/M2X(", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "<gHY4']TcwpNbb=,{6");
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Ij+'w7[-KUtX)", (CharSequence) "_]3J:/M2X(", 2065);
      assertEquals(13, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("'w7[-KUtX)Ij+");
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.right("oWUuP-=yD\"", (-1833));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Locale locale2 = Locale.PRC;
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("CHN", locale2.getISO3Country());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_CN", locale2.toString());
      assertEquals("CN", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string10 = StringUtils.lowerCase("oWUuP-=yD\"", locale0);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("owuup-=yd\"", string10);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotNull(string10);
      
      String string11 = StringUtils.reverse("<gHY4']TcwpNbb=,{6");
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertEquals("6{,=bbNpwcT]'4YHg<", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",yz5y0ZjOb-;n?k#", "LaunchTimep{InCombiningDiacriticalMarks}+", "LaunchTimep{InCombiningDiacriticalMarks}+", 3);
      assertEquals(",yz5y0ZjOb-;n?k#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("j'U>OotS:wZv:d#Z", ",yz5y0ZjOb-;n?k#", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j'U>OotS:wZv:d#Z,yz5y0ZjOb-;n?k#", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Failed to delete temp directory ");
      assertEquals("Failed to delete temp directory", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("z]!w,\"0m-) ]hk]rn", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2145, 'A');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(string3, "Qs;/75C-!@6p", 2145);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145;
      String string4 = StringUtils.join(intArray0, '@');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("2145", string4);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2145}, intArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("%]", "%]");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(""));
      assertNotNull(stack0);
      
      String string6 = StringUtils.join((List<?>) stack0, "", 160, 1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("", string6);
      assertFalse(stack0.contains(""));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrap("%47D;c<']?>@^#sE;D", 'z');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("z%47D;c<']?>@^#sE;Dz", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("", 'z');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'z';
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string9 = StringUtils.lowerCase("", locale0);
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.reverse("\r");
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertEquals("\r", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("<gHY4']TcwpNbb=,{6", 6, (-1100));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "<gHY4']TcwpNbb=,{6", (CharSequence) "<gHY4']TcwpNbb=,{6", 36);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("2");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.right("bJSajm", (-1457));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray3 = new String[0];
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      String string5 = StringUtils.replaceEachRepeatedly(". The following paths could not be deleted (see suppressed exceptions for details): ", stringArray3, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string5);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray1.length);
      assertEquals(0, stringArray3.length);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isWhitespace("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.defaultString("aA,");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("aA,", string6);
      assertNotNull(string6);
      
      StringWriter stringWriter0 = new StringWriter(76);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      boolean boolean3 = StringUtils.containsWhitespace(stringBuffer0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r");
      assertEquals(100, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", 1204);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.right("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "", 1204);
      assertFalse(int1 == int0);
      assertEquals(99, int1);
      
      long[] longArray0 = new long[0];
      String[] stringArray1 = StringUtils.split((String) null, 'K');
      assertNull(stringArray1);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, 'K');
      assertNull(stringArray2);
      
      String string3 = StringUtils.center("Arguments cannot both be null.u2_6&mH+y.w", (-541));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.w", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '!';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      String string0 = StringUtils.join(charArray0, 'y');
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("yy!y>y>yy", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'y', '!', '>', '>', 'y'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("yy!y>y>yy", 0);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "yy!y>y>yy", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, int2);
      
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "`1lD/9<h^X", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("`1lD/9<h^X");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.chomp("Zj", "Y> {H@08=CROMZ");
      assertEquals("Zj", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("ew$zqq", "4)3e");
      assertEquals(49, int0);
      
      String string1 = StringUtils.defaultString("`1lD/9<h^X");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Lau!wTie");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Lau!wTie", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("7@87!E6vx");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Zj", charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'>', '>', '>', '>'}, charArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Zj", (CharSequence) "na)h#VGV2As)+");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string4 = StringUtils.substringAfter("`1lD/9<h^X", "`1lD/9<h^X");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.countMatches((CharSequence) "Lau!wTie", (CharSequence) "Y> {H@08=CROMZ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(807);
      assertEquals(807, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(807, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = arrayList0.add(charBuffer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(807, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(807, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(charBuffer0));
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '(');
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("Ya)Tvr@6!$2*hxi");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited((String) null, '(');
      assertNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("blank_blank_blank_2014");
      assertEquals(22, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.wrap("", "Ya)Tvr@6!$2*hxi");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter((String) null, ")xt:](&:");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r");
      assertEquals(100, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", 1204);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.right("", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "", 1204);
      assertFalse(int1 == int0);
      assertEquals(99, int1);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'K', 127, (int) 'K');
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", "f(", "!to[Nk`r>hIC'zQ5L,[]v~=~1%$h7{H(.zHFL");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 2
         // f(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.center("&gF'^WLmE<^)1=", 4, '#');
      assertEquals("&gF'^WLmE<^)1=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "&gF'^WLmE<^)1=", (CharSequence) "&gF'^WLmE<^)1=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "junit", 321);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.stripAccents("Strings must not be null");
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 3528, '^');
      assertNull(string1);
      
      String string2 = StringUtils.replace("Xe\"0=pgC0BYi", "l<t'A", (String) null, (-653));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Xe\"0=pgC0BYi", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "A?'2(K", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = "DS!o";
      // Undeclared exception!
      StringUtils.rightPad("DS!o", 65536, '[');
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = "8{;lD*^w5v<7D";
      String string1 = StringUtils.substring("8{;lD*^w5v<7D", 23);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 23);
      assertEquals((-1), int0);
      
      int int1 = 1860;
      String string2 = StringUtils.rightPad("", 1860, '?');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(locale0));
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("[en_CA]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      assertTrue(vector0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) vector0);
      assertEquals(0, linkedList0.size());
      assertEquals("[en_CA]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: (
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace(stringArray0[2], "`1lD/9<h^X", "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("`1lD/9<h^X", "", 0, 139);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)297;
      shortArray0[1] = (short)297;
      String string5 = StringUtils.join(shortArray0, '/');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("297/297", string5);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)297, (short)297}, shortArray0);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "Arguments cannot both be null", 3089);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-95);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string6 = StringUtils.toEncodedString(byteArray0, charset0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("AA\uFFFD", string6);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte) (-95)}, byteArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(", Length: ");
      assertEquals(",Length:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.getDigits("q3ZHLLW8<JBJ'nZ<");
      assertEquals("38", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "q3ZHLLW8<JBJ'nZ<", (CharSequence) "38", 2944);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.right(">\"173.", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "", "", 1176);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '9');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase(">\"173.", ">\"173.");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("[ @EuyhF\">)FE/");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("[ @EUYHF\">)FE/", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("[ @EUYHF\">)FE/", (-2355));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat('=', (-1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "[ @EuyhF\">)FE/", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank(">\"173.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.replaceIgnoreCase("&`Ct>7yjwfVS=-", "", "");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("&`Ct>7yjwfVS=-", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", (String) null, "9");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((float[]) null, 'R', 114, Integer.MAX_VALUE);
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("", "blank_blank_blank_2014", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.center((String) null, 4, ' ');
      assertNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "blank_blank_blank_2014", 211);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.removeStart("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", "e");
      assertEquals("]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", (CharSequence) "e");
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String string0 = StringUtils.lowerCase("=/kiZae?%|DOCBPx");
      assertEquals("=/kizae?%|docbpx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("n7p.eykp|dxzY,5*ydg", 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals("n7p.", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Y> {H@08=CROMZ', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "=/kiZae?%|DOCBPx";
      charSequenceArray0[2] = (CharSequence) "=/kizae?%|docbpx";
      charSequenceArray0[3] = (CharSequence) "n7p.eykp|dxzY,5*ydg";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.removePattern((String) null, " ");
      assertNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=/kizae?%|docbpx", (CharSequence) "n7p.eykp|dxzY,5*ydg");
      assertEquals(18, int0);
      
      String string3 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'I');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("n7p.", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string5 = StringUtils.normalizeSpace("Y> {H@08=CROMZ', is neither of type Map.Entry nor an ArrayI=/kiZae?%|DOCBPxI=/kizae?%|docbpxIn7p.eykp|dxzY,5*ydg");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToEmpty("Arguments cannot both be null");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("Y> {H@08=CROMZ', is neither of type Map.Entry nor an ArrayI=/kiZae?%|DOCBPxI=/kizae?%|docbpxIn7p.eykp|dxzY,5*ydg", "Arguments cannot both be null");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\r", "\r", "\r");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[8], "\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = StringUtils.overlay("\r", "\r", (-871), (-871));
      assertEquals("\r\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("          ", (-871), (-871));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string3 = StringUtils.wrap("Arguments cannot both be null", 'o');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("oArguments cannot both be nullo", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.replaceChars("A(uOo0yDg", 'I', 'I');
      assertEquals("A(uOo0yDg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("ADY", 3, 3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("A(uOo0yDg", "The character ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The character ", "r-98cjbGjcEj");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)", 'G');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)G", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)", "");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)0;
      String string1 = StringUtils.join(shortArray0, '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-79.-49.0", string1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-49), (short)0}, shortArray0);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "-79.-49.0", (CharSequence) "Q,XY@o<C+{");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gMqj";
      stringArray0[1] = "Q,XY@o<C+{";
      String string2 = StringUtils.replaceEachRepeatedly("Array element ", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array element ", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, " in an array of ", (int) (short) (-79));
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "=");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'l';
      short short0 = (short)0;
      char char0 = 'X';
      String string0 = StringUtils.join((short[]) null, 'X');
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, (int) (short)0);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "U`[;GAX8eY7:=;[BOf6");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.join((CharBuffer[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1711;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2416;
      shortArray0[4] = (short) (-1549);
      shortArray0[5] = (short)0;
      String string1 = StringUtils.join(shortArray0, '_');
      assertEquals("1711_3_0_2416_-1549_0", string1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1711, (short)3, (short)0, (short)2416, (short) (-1549), (short)0}, shortArray0);
      assertNotNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string2 = StringUtils.join((Object[]) null, '_', (-2944), 1);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween("]v~=~1%$h7{H(.zHFL!to[Nk`r>hIC'zQ5L,[", "L6]N01");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("]v~=~1%$h7{H(.zH");
      assertEquals("]v~=~1%$h7{H(.zH", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "]v~=~1%$h7{H(.zH");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(".]U", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chop(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(".]U", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "]v~=~1%$h7{H(.zH", (-1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.countMatches((CharSequence) "]v~=~1%$h7{H(.zH", (CharSequence) ".]U");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "", (-3642));
      assertNull(stringArray1);
      
      String string3 = StringUtils.stripToNull("offset cannot be negative");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Object varargs must not be null", (-1239));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.swapCase("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\r");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 45;
      intArray0[1] = 45;
      intArray0[2] = 45;
      intArray0[3] = 45;
      intArray0[4] = 0;
      intArray0[5] = 45;
      String string1 = StringUtils.trim("LaunchTime");
      assertFalse(string1.equals((Object)string0));
      assertEquals("LaunchTime", string1);
      assertNotNull(string1);
      
      String[] stringArray3 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertEquals(3, stringArray3.length);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray3);
      
      String string2 = StringUtils.center("Bw/b-|u-", (-3898));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Bw/b-|u-", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String string0 = StringUtils.chomp("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, ':', (-1), 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'y', 321, (int) (short)80);
      assertNull(string0);
      
      String string1 = StringUtils.join((char[]) null, 'Z');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle("QaPe>XFKd?", "QaPe>XFKd?", 3021);
      assertEquals("QaPe>XFKd?", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "The String must not be empty";
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, "n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(stringArray0[2], stringArray0[0], "");
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "Arguments cannot both be null", 3089);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.wrap(")\"m@)!z':)B+", ',');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",)\"m@)!z':)B+,", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = '?';
      charArray0[5] = 'o';
      charArray0[6] = 'O';
      charArray0[7] = ',';
      charArray0[8] = ',';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '[', (-6172), 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6172
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      int[] intArray0 = new int[6];
      intArray0[0] = 1534;
      intArray0[1] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[3] = (int) '?';
      intArray0[5] = (int) '/';
      String string0 = StringUtils.join(intArray0, '_');
      assertEquals("1534_47_47_63_0_47", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1534, 47, 47, 63, 0, 47}, intArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1534_47_47_63_0_47", (CharSequence) "");
      assertEquals(18, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.abbreviate(">\"173.", 5);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">\"...", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '|', (int) '0', 321);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", ".u2_6&mH+y.w", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("offset cannot be negative", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("$h", 321, 90);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y?I.-e|t\n/,'!", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing(".u2_6&mH+y.w", "Arguments cannot both be null");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.substringBeforeLast("$h", "Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("$h", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("$h", "Y?I.-e|t\n/,'!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.substring((String) null, 4);
      assertNull(string8);
      
      String string9 = StringUtils.join((double[]) null, '0', 0, 926);
      assertNull(string9);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase(".u2_6&mH+y.w", "Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z]!w,\"0m-) ]hk]rn", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2145, 'A');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.ordinalIndexOf(string3, "Qs;/75C-!@6p", 2145);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      String string4 = StringUtils.right("Gqg/#dC\"DXGiF", 2145);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Gqg/#dC\"DXGiF", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("Gqg/#dC\"DXGiF", (int) 'A', 160);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Gqg/#dC\"DXGiF", string5);
      assertNotNull(string5);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string6 = StringUtils.wrap("%47D;c<']?>@^#sE;D", 'z');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("z%47D;c<']?>@^#sE;Dz", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrap("", 'z');
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'z';
      charArray0[2] = 'A';
      charArray0[3] = '@';
      charArray0[4] = 'A';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = 'A';
      charArray0[8] = '@';
      String string8 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string8);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '~', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("@9+B)#eW{YI");
      assertFalse(string3.equals((Object)string0));
      assertEquals("@9+B)#eW{YI", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("@9+B)#eW{YI");
      assertTrue(boolean0);
      
      String string4 = StringUtils.rotate("Locale must not be null", 32);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("t be nullLocale must no", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "offset cannot be negative", 'C');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = "Wmf#LqZRmz";
      String string6 = StringUtils.substringBetween("Wmf#LqZRmz", "gKaWO");
      assertNull(string6);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (int) 'C';
      intArray0[2] = 4;
      intArray0[3] = (int) '~';
      intArray0[4] = (int) '~';
      intArray0[5] = 1;
      String string7 = StringUtils.join(intArray0, 'k');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("0k67k4k126k126k1", string7);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 67, 4, 126, 126, 1}, intArray0);
      assertNotNull(string7);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ".u2_6&mH+y.w", (CharSequence) "xBu@VrG\"D9tS");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("*7%Cjf", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty(">G8[f#>o=a3kr[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase(">G8[f#>o=a3kr[", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.substringBefore("vs", ">G8[f#>o=a3kr[");
      assertTrue(string1.equals((Object)string0));
      assertEquals("vs", string1);
      assertNotNull(string1);
      
      String string2 = "\\uw08}|,9`6XBCdN";
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) " vs ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("%hZ{!<F}(CBd", 'x');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'x';
      intArray0[1] = (int) '$';
      intArray0[2] = (int) 'x';
      intArray0[3] = (int) '$';
      intArray0[4] = (int) 'x';
      intArray0[5] = (int) 'x';
      intArray0[6] = (int) 'x';
      intArray0[7] = (-2896);
      String string1 = StringUtils.join(intArray0, '$');
      assertEquals("120$36$120$36$120$120$120$-2896", string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {120, 36, 120, 36, 120, 120, 120, (-2896)}, intArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "`1lD/9<h^X");
      assertEquals(0.38, double0, 0.01);
      
      char[] charArray0 = new char[18];
      charArray0[0] = 'A';
      charArray0[1] = '';
      String string0 = StringUtils.swapCase("LaunchTime");
      assertEquals("lAUNCHtIME", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.isNumeric("lAUNCHtIME");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = StringUtils.center("`1lD/9<h^X", 2257);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("o!s=~l/J13", "LaunchTime");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "o!s=~l/J13", 21);
      assertEquals((-1), int0);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("LaunchTime");
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(4, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string2 = StringUtils.right("", 8);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray1, '');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("The String must not be emptyLaunchTime", string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumericSpace("");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("LaunchTime");
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string4 = StringUtils.substringBeforeLast("`v>S{)w|", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("`v>S{)w|", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("LaunchTime", 2257, "The Array must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "Locale must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Locale must not be null", 'C');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing("Locale must not be null", ".u2_6&mH+y.w", charSequenceArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Locale must not be null", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("$h", 321, 90);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Locale must not be null");
      assertNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing(".u2_6&mH+y.w", "Arguments cannot both be null");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string7 = StringUtils.substringBeforeLast("$h", "Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("$h", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("$h", "Y?I.-e|t\n/,'!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.substring("", 4);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.trim("");
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Locale must not be null";
      objectArray0[1] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Arguments cannot both be null";
      String string10 = StringUtils.join(objectArray0, "Locale must not be null", 321, (-643));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertEquals("", string10);
      assertEquals(4, objectArray0.length);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '\'');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substringBefore("] xP-", "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.difference("maxWith cannot be negative", "\r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\r", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.length("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(int1 == int0);
      assertEquals(41, int1);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.swapCase("blank_blank_blank_2014");
      assertEquals("BLANK_BLANK_BLANK_2014", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("blank_blank_blank_2014", (-839));
      assertFalse(string1.equals((Object)string0));
      assertEquals("blank_blank_blank_2014", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("blank_blank_blank_2014", "BLANK_BLANK_BLANK_2014");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "blank_blank_blank_2014", (-839));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("blank_blank_blank_2014", "blank_blank_blank_2014");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotEmpty("BLANK_BLANK_BLANK_2014");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.trimToEmpty("i($tR]DkguM#~%wJ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("i($tR]DkguM#~%wJ", string3);
      assertNotNull(string3);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, '');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = 'w';
      charArray0[5] = '&';
      charArray0[6] = '';
      charArray0[7] = '';
      charArray0[8] = '';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'', '', '', '', 'w', '&', '', '', ''}, charArray0);
      
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<CharBuffer> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, 'w');
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.substringBetween("jN", "jN");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("jN");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "jN", (-1087));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, "I", 37, 37);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("", string0);
      assertFalse(stack0.contains("I"));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((Object) null);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      String string0 = "L6]N01";
      int int0 = 24;
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      int int1 = (-2460);
      String string1 = StringUtils.join((List<?>) stack0, "L6]N01", 24, (-2460));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals("", string1);
      assertFalse(stack0.contains("L6]N01"));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("66H~");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = "=rasWl[;";
      // Undeclared exception!
      try { 
        stack0.remove(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 24
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\"ZW4b+P2iU\"!StgO", "org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 75
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "DefaultLocale";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("DefaultLocale", "DefaultLocale", 3, (-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.unwrap(" vs Locale must not be null", '&');
      assertEquals(" vs Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int1 = (-881);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '1', Integer.MAX_VALUE, (-881));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("Qs;/75C-!@6p", 160);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("z]!w,\"0m-) ]hk]rn", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2174, 'A');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      String string5 = StringUtils.join(intArray0, 'A');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("160", string5);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {160}, intArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("%]", "%]");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string7 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'z');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("zSearch and Replace array lengths don't match: z", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("", 'z');
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'z';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'A';
      charArray0[5] = 'A';
      charArray0[6] = 'A';
      charArray0[7] = 'A';
      charArray0[8] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) ".]U", (char[]) null);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string9);
      
      String string10 = StringUtils.prependIfMissing("", "\r", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertEquals("\r", string10);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "D7TGz@qKDFx2", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.capitalize("D7TGz@qKDFx2");
      assertEquals("D7TGz@qKDFx2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">(1b3.", ">(1b3.");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substring("P)>^w] xP-junit", 57, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("I7?F84}8");
      assertFalse(string1.equals((Object)string0));
      assertEquals("I7?F84}8", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      String string2 = StringUtils.substring("vh%'H<,@", (-2055));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vh%'H<,@", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>(comparator0);
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, 'L');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "ke-?$M8<9{w39");
      assertNull(string3);
      
      String string4 = StringUtils.repeat('m', 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("The String must not be empty", "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substring("G?43pS", (-609));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("G?43pS", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '$');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '|', (int) '0', 321);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", ".u2_6&mH+y.w", charSequenceArray0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negative", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.removeFirst("Object varargs must not be null", "offset cannot be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("Array and element cannot both be null", 126);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Array and element cannot both be null", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat('0', 0);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0[4]);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.replaceIgnoreCase("", "", (String) null);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-502), (-502));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.defaultString("E^KF_Ftg?t");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertEquals("E^KF_Ftg?t", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1449), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.left("K]EPr!5kYdJ", 'Q');
      assertEquals("K]EPr!5kYdJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.lastIndexOfAny("\r", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "IvL_-5Yd)C,h et$T";
      charSequenceArray0[1] = (CharSequence) "IvL_-5Yd)C,h et$T";
      charSequenceArray0[3] = (CharSequence) "IvL_-5Yd)C,h et$T";
      charSequenceArray0[4] = (CharSequence) "IvL_-5Yd)C,h et$T";
      String string0 = StringUtils.prependIfMissingIgnoreCase("IvL_-5Yd)C,h et$T", "IvL_-5Yd)C,h et$T", charSequenceArray0);
      assertEquals("IvL_-5Yd)C,h et$T", string0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "IvL_-5Yd)C,h et$T", (CharSequence) "IvL_-5Yd)C,h et$T");
      assertEquals((-1), int0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      String string1 = StringUtils.stripToNull("IvL_-5Yd)C,h et$T");
      assertTrue(string1.equals((Object)string0));
      assertEquals("IvL_-5Yd)C,h et$T", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[1], "IvL_-5Yd)C,h et$T");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.substring((String) null, (-1));
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[4], charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{94z^O1zPC{Ql!)y5<F", "{94z^O1zPC{Ql!)y5<F");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("{94z^O1zPC{Ql!)y5<F", stringArray0);
      assertEquals(19, int0);
      assertEquals(20, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace(stringArray0[2], "`1lD/9<h^X", "");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("`1lD/9<h^X", "", 0, 139);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)292;
      shortArray0[1] = (short)292;
      String string5 = StringUtils.join(shortArray0, '/');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("292/292", string5);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)292, (short)292}, shortArray0);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "Arguments cannot both be null", 3089);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.remove("^b\"~s9~>XNZo {", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("^b\"~s9~>XNZo {", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissingIgnoreCase("0DbG0,^d3,%A&n6A", "Arguments cannot both be null", stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("0DbG0,^d3,%A&n6AArguments cannot both be null", string7);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '!';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'u';
      String string0 = StringUtils.join(charArray0, 'u');
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("uu!u>u>uu", string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'u', '!', '>', '>', 'u'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Minimum abbreviation width with offset is %d", "uu!u>u>uu");
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Minimum abbreviation width with offset is %d", 1070);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Buffer buffer0 = byteBuffer0.mark();
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.capacity());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.hasRemaining());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.position());
      assertNotNull(buffer0);
      
      String string0 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 0);
      assertTrue(string0.equals((Object)charSequence0));
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("Object varargs must not be null");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)297;
      shortArray0[1] = (short)297;
      shortArray0[2] = (short)45;
      shortArray0[3] = (short)297;
      shortArray0[4] = (short)297;
      shortArray0[5] = (short)297;
      shortArray0[6] = (short)297;
      shortArray0[7] = (short)297;
      shortArray0[8] = (short)50;
      String string1 = StringUtils.join(shortArray0, '>');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("297>297>45>297>297>297>297>297>50", string1);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)297, (short)297, (short)45, (short)297, (short)297, (short)297, (short)297, (short)297, (short)50}, shortArray0);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Locale must not be null", "Arguments cannot both be null", (-1435));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(23, stringArray1.length);
      assertNotNull(stringArray1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) byteBuffer0;
      objectArray0[1] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[2] = (Object) (short)45;
      objectArray0[3] = (Object) (short)297;
      objectArray0[4] = (Object) (short)45;
      objectArray0[5] = (Object) (short)297;
      String string2 = StringUtils.join(objectArray0, 'K');
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]KMinimum abbreviation width with offset is %dK45K297K45K297", string2);
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '~', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(0, objectArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      String[] stringArray0 = StringUtils.split("offset cannot be negative", ')');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.removeFirst("Minimum abbreviation width is %d", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left(":!JoO8FGb?[", 10);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(":!JoO8FGb?", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat('k', (-1332));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ".u2_6&mH+y.w", (CharSequence) ".u2_6&mH+y.w");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.replaceIgnoreCase("offset cannot be negative", "Array and element cannot both be null", ", ");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("offset cannot be negative", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 672, "");
      assertEqualsstring0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("LaunchTime", 'y');
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[1] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[2] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "The String must not be empty";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "The String must not be empty";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst
      assertTrue(string1.equals((Object)string0));
      assertEqualsstring1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Array and element cannot both be null", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('&', 0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[6], (CharSequence) "The String must not be empty");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replaceIgnoreCase("`1lD/9<h^X", (String) null, "The String must not be empty");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("`1lD/9<h^X", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("The String must not be empty", (String) null, "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("The String must not be empty", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'A';
      String string0 = StringUtils.join(longArray0, 'A', 1230, 1230);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {73L, 73L, 65L, 0L}, longArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) 65L;
      objectArray0[3] = (Object) 73L;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string1 = StringUtils.replaceEachRepeatedly("aA,", stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aA,", string1);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.defaultString(", '");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", '", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.remove("R,*>", "");
      assertEquals("R,*>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("R,*>");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("R,*>", "R,*>", (-184));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String string0 = StringUtils.removePattern("M>n", "M>n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("M>n");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {77, 62, 110}, intArray0);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = 'K';
      charArray0[2] = 'd';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'2', 'K', 'd'}, charArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.trimToSize();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      String string1 = locale0.getDisplayLanguage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("Japanese", string1);
      assertNotNull(string1);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains('d'));
      assertNotNull(set0);
      
      String string2 = StringUtils.remove("Locale must not be null", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      String string4 = StringUtils.join((Object[]) null, 'Y', (-1141), (-4568));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("N}KQ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("N}KQ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("\r", "[iLO?", (-3801), 122);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[iLO?", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("[iLO?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 108, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '+');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "r^?zPGr|", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.stripEnd("d=", "d=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "d=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r");
      assertEquals(100, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", 1204);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.right("", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)\r", (CharSequence) "", 1204);
      assertFalse(int1 == int0);
      assertEquals(99, int1);
      
      long[] longArray0 = new long[0];
      char char0 = 'K';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'K', 127, 3545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      String string0 = StringUtils.rightPad("UF", 3019, "UF");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.rightPad("PS)mUW3EE", (-901), "PS)mUW3EE");
      assertEquals("PS)mUW3EE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Zj");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Zj", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Zj", (CharSequence) "Zj", 0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)50;
      shortArray0[2] = (short)700;
      shortArray0[3] = (short)99;
      String string0 = StringUtils.join(shortArray0, 'u');
      assertEquals("0u50u700u99", string0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)50, (short)700, (short)99}, shortArray0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("0u50u700u99");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'i');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '|', (int) '0', 321);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.trimToEmpty(".u2_6&mH+y.w");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(".u2_6&mH+y.w", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("E^KF_Ftg?t", "7N l_TcOI![a");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("E^KF_Ftg?t", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing((String) null, ".u2_6&mH+y.w", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "Minimum abbreviation width with offset is %d", 321);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "SNX", (CharSequence) "SNX", (-10));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Z}umc8!D");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Z}umc8!D", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Z}umc8!D", (CharSequence) "Z}umc8!D", (-386));
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[21];
      shortArray0[0] = (short)50;
      shortArray0[1] = (short)50;
      shortArray0[2] = (short)700;
      shortArray0[3] = (short)700;
      shortArray0[4] = (short)50;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)700;
      String string0 = StringUtils.join(shortArray0, '+');
      assertEquals("50+50+700+700+50+16+700+0+0+0+0+0+0+0+0+0+0+0+0+0+0", string0);
      assertEquals(21, shortArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (int) '_';
      String string0 = StringUtils.join(intArray0, '_');
      assertEquals("0_95", string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 95}, intArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("R Sk/cf|hi", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '?';
      String string0 = StringUtils.join(intArray0, '?');
      assertEquals("63?0?0?0?0?0", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {63, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("63?0?0?0?0?0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("63?0?0?0?0?0", ">\"173.", 63);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "#Hz^zu%`Q4S,_K_D9?";
      charSequenceArray0[2] = (CharSequence) ">\"173.";
      charSequenceArray0[3] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) string1;
      charSequenceArray0[5] = (CharSequence) ">\"173.";
      charSequenceArray0[7] = (CharSequence) ">\"173.";
      charSequenceArray0[8] = (CharSequence) "63?0?0?0?0?0";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "63?0?0?0?0?0";
      stringArray0[2] = "63?0?0?0?0?0";
      stringArray0[3] = "'X)6x3n>";
      stringArray0[4] = ">\"173.";
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("{}");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Y]6.Zj~iA)g$,q93UcY]6+Zj~#A)g$,q93Uc";
      stringArray0[2] = "Failed to delete temp directory ";
      stringArray0[3] = "Y]6.Zj~iA)g$,q93UcY]6+Zj~#A)g$,q93Uc";
      stringArray0[4] = "Y]6.Zj~iA)g$,q93UcY]6+Zj~#A)g$,q93Uc";
      String string0 = StringUtils.replaceEach("Y]6.Zj~iA)g$,q93UcY]6+Zj~#A)g$,q93Uc", stringArray0, stringArray0);
      assertEquals("Y]6.Zj~iA)g$,q93UcY]6+Zj~#A)g$,q93Uc", string0);
      assertEquals(23, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("A\"O}@.0e", "D}faultTim^Zonre");
      assertEquals("A\"O}@.0e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(">\"173.");
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric(">\"173.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ">\"173.", (CharSequence) ">\"173.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ">\"173.", 5);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd(">\"173.", "Cannot store ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(">\"173.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits(">\"173.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("173", string2);
      assertNotNull(string2);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      String string3 = StringUtils.join(byteArray0, '9', 351, (int) (byte)0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "173", (CharSequence) ">\"173.", (int) (byte)0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("2mhFK4nz{bU");
      assertEquals("2mhFK4nz{bU", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      String string1 = StringUtils.join(charArray0, 'Z', 2359, 2359);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'C'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring((String) null, 319);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast(" vs IGTA'UQx4", " vs IGTA'UQx4");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("{`h$L3Zz~7", "{`h$L3Zz~7", "{`h$L3Zz~7");
      assertNull(stringArray0);
      
      String string0 = StringUtils.chomp("[r.");
      assertEquals("[r.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("{`h$L3Zz~7", (-1259));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("[r.", "{`h$L3Zz~7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeIgnoreCase("O#x,2ZW", "w0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("O#x,2ZW", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1176.0F, (-2697.325F), 1176.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1176.0A-2697.325A1176.0A-1.0", "", "", 1176);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '9');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("offset cannot be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase(">\"173.", "");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(">\"173.", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('S', (-1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replacePattern("", "offset cannot be negative", "");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("LaunchTime", "Locale must not be null", 1176);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.capitalize("junit");
      assertEquals("Junit", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '>';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "G?43pS", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', '>'}, charArray0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("G?43pS");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("junit");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L6", "G?43pS");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.replacePattern(".]U", "Object varargs must not be null", "Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertEquals(".]U", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("TX.x", "LaunchTime", 1970);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = StringUtils.toCodePoints("Object varargs must not be null");
      assertEquals(31, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.join(intArray0, '>', 1970, 1970);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(31, intArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence[]) null);
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substring("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 17, (-1979));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'm';
      boolean boolean4 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'m'}, charArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 17);
      assertEquals(0, int0);
      
      String string2 = StringUtils.swapCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("tEST '%S' WAS SUPPOSED TO RUN NO LONGER THAN %D MS BUT RAN %D MS.", string2);
      assertNotNull(string2);
      
      boolean boolean5 = StringUtils.isAllUpperCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean6 = StringUtils.isAsciiPrintable("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6);
      
      boolean boolean7 = StringUtils.contains((CharSequence) "", (CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
      
      boolean boolean8 = StringUtils.isAlpha("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8);
      
      boolean boolean9 = StringUtils.isWhitespace("Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean3);
      assertTrue(boolean9 == boolean0);
      assertFalse(boolean9);
      
      String string3 = StringUtils.substringAfter("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean10 = StringUtils.endsWithAny("tEST '%S' WAS SUPPOSED TO RUN NO LONGER THAN %D MS BUT RAN %D MS.", (CharSequence[]) null);
      assertTrue(boolean10 == boolean7);
      assertTrue(boolean10 == boolean1);
      assertFalse(boolean10 == boolean6);
      assertTrue(boolean10 == boolean4);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean8);
      assertFalse(boolean10 == boolean3);
      assertTrue(boolean10 == boolean9);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean0);
      assertFalse(boolean10);
      
      boolean boolean11 = StringUtils.containsOnly((CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", charArray0);
      assertFalse(boolean11 == boolean6);
      assertTrue(boolean11 == boolean0);
      assertFalse(boolean11 == boolean3);
      assertTrue(boolean11 == boolean10);
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean5);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean8);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'m'}, charArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)0;
      String string1 = StringUtils.join(shortArray0, '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-79.-49.0", string1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-49), (short)0}, shortArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-79.-49.0", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultString("Q,XY@o<C+{");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Q,XY@o<C+{", "Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToNull("Q,XY@o<C+{");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Q,XY@o<C+{", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("Q,XY@o<C+{");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q,XY@o<C+{", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("offset cannot be negative", 3);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("offset cannot be negative", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("pCNt", (String) null, (-2920));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'd');
      assertEquals("0", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0";
      charSequenceArray0[1] = (CharSequence) "0";
      String string1 = StringUtils.wrap("0", "0");
      assertFalse(string1.equals((Object)string0));
      assertEquals("000", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "000";
      charSequenceArray0[3] = (CharSequence) "0";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'M');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0M0M000M0MM", string2);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      
      charSequenceArray0[5] = (CharSequence) "0";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("0", charSequence0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      stringArray0[2] = "LaunhTie";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunhTie");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("LaunhTie");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((int[]) null, 'o');
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "`1lD/9<h^X", (CharSequence) "Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "mp2_^vWQ", (CharSequence) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.abbreviate("LaunhTie", 16);
      assertFalse(string2.equals((Object)string0));
      assertEquals("LaunhTie", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "`1lD/9<h^X");
      assertEquals(0.38, double0, 0.01);
      
      int int0 = StringUtils.length("LaunchTime");
      assertEquals(10, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = '';
      String string0 = StringUtils.swapCase("LaunchTime");
      assertEquals("lAUNCHtIME", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(".u2_6&mH+y.wArguments cannot both be null", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".u2_6&m...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(".u2_6&m...", (int) '');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(".u2_6&m...                                                                                                                     ", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumeric("lAUNCHtIME");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.center("`1lD/9<h^X", 2257);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("o!s=~l/J13", "LaunchTime");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "o!s=~l/J13", 21);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("LaunchTime");
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(4, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string4 = StringUtils.right("", 8);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, '');
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("The String must not be emptyLaunchTime", string5);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.normalizeSpace((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'w', 11, 11);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = 'r';
      String string1 = StringUtils.join((int[]) null, 'D', 14, 24);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      char char0 = '.';
      String string1 = StringUtils.join((short[]) null, '.');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Arguments cannot both be null.u2_6&mH+y.w");
      assertNull(stringArray0);
      
      String string2 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToNull("JDllSS|x-|*A0}Y@^Ln");
      assertFalse(string3.equals((Object)string2));
      assertEquals("JDllSS|x-|*A0}Y@^Ln", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '.', (int) (byte) (-49), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -49
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.remove("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", charArray0);
      assertFalse(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayLanguage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("Japanese", string1);
      assertNotNull(string1);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string2 = StringUtils.remove("Object varargs must not be null", "Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("eM");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eM", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "eM";
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertNotNull(object3);
      
      objectArray0[1] = object3;
      String string4 = StringUtils.join(objectArray0, ':', (-1141), (-1141));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(2, objectArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">Ii'0z_bxCY\"i'/57/d");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.deleteWhitespace("Arguments cannot both be null.u2_6&mH+y.w");
      assertEquals("Argumentscannotbothbenull.u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Argumentscannotbothbenull.u2_6&mH+y.w", ">Ii'0z_bxCY\"i'/57/d");
      assertEquals(0.36, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOfAny("Arguments cannot both be null.u2_6&mH+y.w", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Arguments cannot both be null.u2_6&mH+y.w", "Arguments cannot both be null.u2_6&mH+y.w");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Argumentscannotbothbenull.u2_6&mH+y.w");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Threshold must not be negative", (-1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('f', (-7032));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Threshold must not be negative", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "blank_blank_blank_2014", (-1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("", ", Length: 0", 1707);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertEquals(0, stringArray3.length);
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      int int0 = StringUtils.compare("fYZIY`", "Minimum abbreviation width is %d", false);
      assertEquals(25, int0);
      
      boolean boolean0 = StringUtils.isNumeric("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2803);
      intArray0[1] = 13;
      intArray0[2] = 25;
      intArray0[3] = 25;
      String string2 = StringUtils.join(intArray0, 'M', 25, 0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-2803), 13, 25, 25}, intArray0);
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4546.8);
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 'M';
      doubleArray0[3] = (double) (-2803);
      String string3 = StringUtils.join(doubleArray0, '?');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-4546.8?13.0?77.0?-2803.0", string3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-4546.8), 13.0, 77.0, (-2803.0)}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("^ydq+");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("^ydq+", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("~");
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("D7TGz@qKDF2+/,_", "D7TGz@qKDF2+/,_", 14);
      assertEquals("D7TGz@qKDF2+/,_", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("D7TGz@qKDF2+/,_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("|YG67!mv+Uji`", "|YG67!mv+Uji`", 321);
      assertEquals("|YG67!mv+Uji`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.rotate("dS.7u/MAmx/@</95", 2697);
      assertEquals("Amx/@</95dS.7u/M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, '@', 72, 72);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string0 = StringUtils.replaceOnce("~?~JLZPb{2E", "org.junitpioneer.jupiter.TempDirectory", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("~?~JLZPb{2E", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "~?~JLZPb{2E";
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("org.junitpioneer.jupiter.TempDirectory", locale0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY", string1);
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY";
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      Locale locale1 = Locale.ITALIAN;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale.setDefault(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      charSequenceArray0[8] = (CharSequence) "\r";
      String string2 = StringUtils.appendIfMissing("\r", "\r", charSequenceArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayLanguage();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("inglese", string3);
      assertNotSame(locale0, locale1);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("\r", charSequenceArray0[7]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("org.apache.commons.lang3.CharUtils", "\r", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\rorg.apache.commons.lang3.CharUtils", string4);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("u~()#=\"1", "\r");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("u~()#=\"1", string5);
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "~?~JLZPb{2E");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOf((CharSequence) "~?~JLZPb{2E", 2200);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\n");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\n");
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\n", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("M  ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "M  ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 672, "");
      assertEqualsstring0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("LaunchTime", 'y');
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[1] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[2] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "The String must not be empty";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "The String must not be empty";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("66%C)", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("66%C)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Array and element cannot both be null", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('&', 0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[6], (CharSequence) "The String must not be empty");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replaceIgnoreCase("`1lD/9<h^X", (String) null, "The String must not be empty");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "", 51, 0);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst((String) null, ", '");
      assertNull(string3);
      
      String string4 = StringUtils.wrap("maxWith cannot be negative", "Minimum abbreviation width is %d");
      assertFalse(string4.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removePattern("Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d", "Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("", 0);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      String string8 = StringUtils.substringBetween("", ".u2_6&mH+y.wArguments cannot both be null");
      assertNull(string8);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'e';
      intArray0[1] = 51;
      intArray0[2] = 0;
      String string9 = StringUtils.join(intArray0, '-');
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertEquals("101-51-0", string9);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {101, 51, 0}, intArray0);
      assertNotNull(string9);
      
      String string10 = StringUtils.remove("", (String) null);
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string6));
      assertEquals("", string10);
      assertNotNull(string10);
      
      Locale locale0 = Locale.forLanguageTag("101-51-0");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string11 = StringUtils.upperCase("", locale0);
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string7));
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      String string2 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "%&Qxl2[dke0");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'A';
      String string0 = StringUtils.join(longArray0, 'A', 1230, 1230);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {73L, 73L, 65L, 0L}, longArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) 65L;
      objectArray0[3] = (Object) 73L;
      String string1 = "The character ";
      byte[] byteArray0 = new byte[0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "The character ";
      stringArray0[4] = "Search and Replace array lengths don't match: ";
      stringArray0[5] = "";
      stringArray0[6] = "Search and Replace array lengths don't match: ";
      stringArray0[7] = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "n+)C7tO";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("n+)C7tO", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("mD[}o bz}_. ,x", "P)cFe~l{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // P)cFe~l{
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Zj");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Zj", "Zj");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Zj", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (-2697.325F);
      floatArray0[3] = (float) 'A';
      floatArray0[4] = (float) (-1);
      String string0 = StringUtils.join(floatArray0, 'A');
      assertEquals("0.0A0.0A-2697.325A65.0A-1.0", string0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2697.325F), 65.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.replace("", "0.0A0.0A-2697.325A65.0A-1.0", (String) null, (-1202));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      Iterator<CharBuffer> iterator0 = treeSet1.descendingIterator();
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '9');
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotSame(treeSet1, treeSet0);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("Zj", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Zj", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("Zj");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ZJ", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string6 = "WTA'QVrC";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("org.junitpioneer.jupiter.DefaultLocaleExtension", "[ @EuyhF\">)FE/");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // [ @EuyhF\">)FE/
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '9');
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.capitalize("offset cannot be negative");
      assertEquals("Offset cannot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.left("The type must not be null", 13);
      assertEquals("The type must", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "The type must", 13, 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "...", "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("laL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("\n\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String string0 = StringUtils.removePattern("YnV+", "DefaultTimeZone");
      assertEquals("YnV+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("&E;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("&E;", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("YnV+");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("DefaultTimeZone", "Y> {H@08=CROMZ', is neither of type Map.Entry nor an Array");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "DefaultTimeZone", (CharSequence) "&E;", (-2556));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.uncapitalize(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '3';
      charArray0[4] = '\'';
      charArray0[5] = 'Q';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "YnV+", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'=', '=', '=', '3', '\'', 'Q'}, charArray0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "YnV+", (CharSequence) "YnV+", 13);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.center("", 0);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("E ", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("E ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replacePattern("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "ExpectedException", "Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], (CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.joinWith("offset cannot be negative", charSequenceArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("offset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negative", string7);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string7);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null.u2_6&mH+y.w", charArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace("Arguments cannot both be null.u2_6&mH+y.w");
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      String string0 = StringUtils.join(doubleArray0, 'a');
      assertEquals("0.0a0.0a0.0a0.0a0.0a0.0", string0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = 202;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'a', 32, 202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = "";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = 321;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '|';
      doubleArray0[1] = (double) '|';
      doubleArray0[2] = (double) 321;
      int int1 = (-581);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '|', (-581), 1763);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -581
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String string0 = ")";
      String string1 = StringUtils.normalizeSpace(")");
      assertTrue(string1.equals((Object)string0));
      assertEquals(")", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(")", ")", ")");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-1829));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = "/J-gW";
      int int0 = (-1360);
      String string1 = StringUtils.center("/J-gW", (-1360));
      assertTrue(string1.equals((Object)string0));
      assertEquals("/J-gW", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("/J-gW");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[2] = '`';
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("/J-gW");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("/J-gW", "/J-gW");
      assertEquals(1.0, double0, 0.01);
      
      int int1 = StringUtils.length("/J-gW");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string2 = StringUtils.valueOf(charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y\u0000`\u0000", string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', '\u0000', '`', '\u0000'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", 108);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("|oKZy[hBUryYdI");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("|oKZy[hBUryYdI", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isNumeric("Search and Replace array lengths don't match: ");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.center("|oKZy[hBUryYdI", (-1360));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("|oKZy[hBUryYdI", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("|oKZy[hBUryYdI", "|oKZy[hBUryYdI");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "/J-gW", 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = '_';
      charArray0[6] = 'Q';
      charArray0[7] = 'Q';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\'', 'Q', 'Q', 'Q', 'Q', '_', 'Q', 'Q'}, charArray0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayLanguage();
      assertFalse(string1.equals((Object)string0));
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("Japanese", string1);
      assertNotNull(string1);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains('Q'));
      assertNotNull(set0);
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripAccents("");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, '5', 0, 0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String string0 = StringUtils.abbreviate("rlaL44", 5, 5);
      assertEquals("rl...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("rl...");
      assertTrue(string1.equals((Object)string0));
      assertEquals("rl...", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The Stringmust not be empty", (CharSequence) "The Stringmust not be empty", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("~oU", stringArray0, stringArray0);
      assertEquals("~oU", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("O+L;=?;b<a}f", "r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("rO+L;=?;b<a}fr", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("<:wDN\"5R ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" R5\"NDw:<", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " R5\"NDw:<", (CharSequence) "<:wDN\"5R ", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M%KNU-qm1nQiz1Z", (CharSequence) "ry", 1521);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("O3j0c", "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertEquals(0.41, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase("The String must not be empty");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double double0 = StringUtils.getJaroWinklerDistance("The String must not be empty", "`1lD/9<h^X");
      assertEquals(0.38, double0, 0.01);
      
      int int0 = StringUtils.length("LaunchTime");
      assertEquals(10, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '';
      String string0 = StringUtils.swapCase("LaunchTime");
      assertEquals("lAUNCHtIME", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(".u2_6&mH+y.wArguments cannot both be null", 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".u2_6&m...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(".u2_6&m...", (int) '');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".u2_6&m...                                                                                                                     ", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isNumeric("lAUNCHtIME");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.center("`1lD/9<h^X", 2257);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("o!s=~l/J13", "LaunchTime");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "o!s=~l/J13", 21);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("LaunchTime");
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(4, stringArray3.length);
      assertNotNull(stringArray3);
      
      String string4 = StringUtils.right("", 8);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, '');
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("The String must not be emptyLaunchTime", string5);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'o';
      intArray0[1] = (-3911);
      intArray0[2] = 57;
      intArray0[3] = 0;
      intArray0[4] = (int) 'o';
      intArray0[5] = 0;
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String string0 = StringUtils.chomp(", Length: ");
      assertEquals(", Length: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      String string2 = StringUtils.join(charArray0, '!');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\u0000!\u0000!\u0000!\u0000!\u0000", string2);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("o!s=~l/J13", 2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("o!s=~l/J13o!s=~l/J13", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " ");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("o!s=~l/J13");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.repeat("CF',EM", (-1737));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Threshold must n", "Threshold must n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Threshold must n", stringArray0, stringArray0);
      assertEquals("Threshold must n", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must n", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", 1032);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("Locale must not be null", "The Character must not be null", "LaunchTime");
      assertNull(stringArray1);
      
      String string6 = StringUtils.mid("", 7, 0);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("mKg}V@AwNA}", (-308));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string8 = StringUtils.replaceEach("L,XDs<&'", stringArray0, stringArray0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertEquals("L,XDs<&'", string8);
      assertEquals(5, stringArray0.length);
      assertNotNull(string8);
      
      charSequenceArray0[3] = (CharSequence) "L,XDs<&'";
      charSequenceArray0[4] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_bQmfjym%'f`\"xl#f", "e6PL_:c\"Sz\u0007PSJ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" IrrnO%#");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Object varargs must not be null";
      stringArray0[2] = "\n";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      String string5 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("Locale must not be null", "The Character must not be null", "LaunchTime");
      assertNull(stringArray1);
      
      String string6 = StringUtils.mid("", 7, 0);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an arr1ay of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an arr1ay of ", (CharSequence) " in an arr1ay of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      String string1 = StringUtils.stripAccents(" in an arr1ay of ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an arr1ay of ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Jr|dH[", " in an arr1ay of ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) "Jr|dH[");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("Locale must not be null");
      assertEquals(23, intArray0.length);
      assertNotNull(intArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " in an arr1ay of ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringAfterLast("Q,XY@o<C+{", ",yz5y0ZjOb-;n?k#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(6);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Q,XY@o<C+{"));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.join((Iterable<?>) arrayList0, ';');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string3);
      assertFalse(arrayList0.contains("Q,XY@o<C+{"));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("Jr|dH[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int3 = StringUtils.compare("p{InCombiningDiacriticalMarks}+", "bi?", false);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(14, int3);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "maxWith cannot be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ry", (CharSequence) "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1176.0F, (-2697.325F), 1176.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1176.0A-2697.325A1176.0A-1.0", "", "", 1176);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase(">\"173.", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">\"173.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("[ @EuyhF\">)FE/");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("[ @EUYHF\">)FE/", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "junit-pioneer";
      charSequenceArray0[1] = (CharSequence) "1176.0A-2697.325A1176.0A-1.0";
      charSequenceArray0[2] = (CharSequence) "1176.0A-2697.325A1176.0A-1.0";
      charSequenceArray0[3] = (CharSequence) "1176.0A-2697.325A1176.0A-1.0";
      charSequenceArray0[4] = (CharSequence) ">\"173.";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string6 = StringUtils.removePattern("WTA'QVrC", "junit-pioneer");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("WTA'QVrC", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "1176.0A-2697.325A1176.0A-1.0", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(28, int2);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "P-JJfF3j0", (CharSequence) "P/S)mUW3EUP/S)MUW3EE");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an arr1ay of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an arr1ay of ", (CharSequence) " in an arr1ay of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      String string1 = StringUtils.stripAccents(" in an arr1ay of ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an arr1ay of ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Jr|dH[", " in an arr1ay of ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) "Jr|dH[");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(2, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("Locale must not be null");
      assertEquals(23, intArray0.length);
      assertNotNull(intArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " in an arr1ay of ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringAfterLast("Q,XY@o<C+{", ",yz5y0ZjOb-;n?k#");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("Jr|dH[", "Q,XY@o<C+{", " in an arr1ay of ", 321);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Jr|dH[", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith(" in an arr1ay of ", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("J in an arr1ay of |dH[", string4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWithAny("Q,XY@o<C+{", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("J", charSequence0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertNotNull(charSequence0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "J", (CharSequence) "J in an arr1ay of |dH[");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Jr|dH[", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '~', 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertEquals(0, objectArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '~';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'0', '0', '~'}, charArray0);
      
      String string5 = StringUtils.replaceChars(".u2_6&mH+y.w", (String) null, "");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(".u2_6&mH+y.w", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split(".u2_6&mH+y.w", 'Z');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string6);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string6);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat(" ", 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("  ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "  ", 1700);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("#\"H%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      intArray0[2] = 45;
      intArray0[3] = 45;
      intArray0[4] = 0;
      intArray0[5] = 45;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'o', 0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd((String) null, "L6]N01");
      assertNull(string2);
      
      String string3 = StringUtils.upperCase("L6]N01");
      assertFalse(string3.equals((Object)string0));
      assertEquals("L6]N01", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", "L6]N01", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negativeL6]N01", string4);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("offset cannot be negative", charSequenceArray0[0], charSequenceArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(".u2_6&mH+y.woffset cannot be negative", string5);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ".u2_6&mH+y.w", charArray0);
      assertEquals(0, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      
      String string6 = StringUtils.center("/6", 0, "L6]N01");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("/6", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceEach("/6", (String[]) null, (String[]) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertEquals("/6", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string8 = StringUtils.chomp("");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("The Character must not be null", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Character must not be null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      charArray0[1] = '3';
      String string0 = StringUtils.mid("xoGhu&", (-10), (-10));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "offset cannot be negative", (CharSequence) "xoGhu&", Integer.MAX_VALUE);
      assertEquals(24, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("<gHY4'.]TcwpNbb=,{6");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.right("xoGhu&", 900);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xoGhu&", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("<gHY4'.]TcwpNbb=,{6");
      assertEquals(19, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.defaultString("Ik4E-up=Chc");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Ik4E-up=Chc", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("xoGhu&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.mid("<gHY4']TcwpNbb=,{6", 6, (-1100));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "<gHY4']TcwpNbb=,{6", (CharSequence) "<gHY4']TcwpNbb=,{6", 36);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("2");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.right("bJSajm", (-1457));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string5 = StringUtils.lowerCase("K FQ~3-'jJcD0AnYPn:", locale0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("k fq~3-'jjcd0anypn:", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "M%KNU-qm1nQiz1Z", (CharSequence) "M%KNU-qm1nQiz1Z", 621);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1047L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      String string1 = StringUtils.stripAccents("Index: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Index: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 76);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Index: ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.uncapitalize("Minim");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("minim", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", ':');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Threshold mustn", stringArray0, stringArray0);
      assertEquals("Threshold mustn", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Threshold must n");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Threshold must n", stringArray0, stringArray0);
      assertEquals("Threshold must n", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9";
      stringArray0[1] = "9";
      stringArray0[2] = "9";
      stringArray0[3] = "9";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "9";
      stringArray1[2] = "9";
      stringArray1[3] = "9";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte) (-79);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)0;
      String string1 = StringUtils.join(shortArray0, '.');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-79.-49.0", string1);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-79), (short) (-49), (short)0}, shortArray0);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "-79.-49.0", (CharSequence) "Q,XY@o<C+{");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gMqj";
      stringArray0[1] = "Q,XY@o<C+{";
      String string2 = StringUtils.replaceEachRepeatedly("Array element ", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array element ", string2);
      assertEquals(2, stringArray0.length);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.join(objectArray0, ',');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("0pl<;E8qA-F", objectArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertEquals(1, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("cJqzL");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("cjqzl", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "Cannot store ", "");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[0];
      String string6 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string6);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      String string7 = StringUtils.stripStart("kmn7NHQwo6H:@", (String) null);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("kmn7NHQwo6H:@", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("", 37);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string9 = StringUtils.joinWith("L6]N01", objectArray0);
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertEquals("", string9);
      assertEquals(1, objectArray0.length);
      assertNotNull(string9);
      
      String string10 = StringUtils.stripStart("Cannot store ", "");
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertEquals("Cannot store ", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.reverseDelimited("io", 'M');
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertEquals("io", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = enumSet0.add(locale_FilteringMode1);
      assertEquals(1, enumSet0.size());
      assertFalse(boolean0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      
      String string0 = StringUtils.join(iterator0, '%');
      assertEquals(1, enumSet0.size());
      assertEquals("MAP_EXTENDED_RANGES", string0);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertTrue(enumSet0.contains(locale_FilteringMode1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(807);
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(807, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = arrayList0.add(charBuffer0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(807, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(807, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(807, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(807, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(charBuffer0));
      
      Iterator<CharBuffer> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '(');
      assertFalse(string3.equals((Object)string1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertTrue(arrayList0.contains(charBuffer0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("7N l_TcOI![a");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("7N l_TcOI![a", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("g,dOc 8yt|#", "\r");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("g,dOc 8yt|#", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "7N l_TcOI![a";
      charSequenceArray0[2] = (CharSequence) null;
      String string6 = StringUtils.prependIfMissing("\r", (CharSequence) null, charSequenceArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\r", string6);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("E^KF_Ftg?t", "E^KF_Ftg?t", 3165);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '%');
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING%EXTENDED_FILTERING%IGNORE_EXTENDED_RANGES%MAP_EXTENDED_RANGES%REJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~PfQT;EW`^", "~PfQT;EW`^", 1437);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1176.0F, (-2697.325F), 1176.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1176.0A-2697.325A1176.0A-1.0", "", "", 1176);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join((double[]) null, '9');
      assertNull(string3);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'a');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.mid("", 1360, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short short0 = (short)1368;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1368;
      shortArray0[1] = (short) (-641);
      shortArray0[2] = (short)1368;
      short short1 = (short)55;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short) (-641);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-641);
      String string3 = StringUtils.join(shortArray0, 'Y');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1368Y-641Y1368Y55Y-641Y0Y-641", string3);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)1368, (short) (-641), (short)1368, (short)55, (short) (-641), (short)0, (short) (-641)}, shortArray0);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[9];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      charArray0[8] = 'Y';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(9, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(9, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("YYYYYYYYY", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(9, charBuffer1.limit());
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertNotNull(charBuffer1);
      
      charBufferArray0[1] = charBuffer1;
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) "1368Y-641Y1368Y55Y-641Y0Y-641");
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("1368Y-641Y1368Y55Y-641Y0Y-641", charBuffer2.toString());
      assertTrue(charBuffer2.isReadOnly());
      assertEquals(29, charBuffer2.capacity());
      assertEquals(29, charBuffer2.remaining());
      assertEquals(29, charBuffer2.length());
      assertFalse(charBuffer2.hasArray());
      assertEquals(29, charBuffer2.limit());
      assertEquals(0, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertNotNull(charBuffer2);
      
      charBufferArray0[2] = charBuffer2;
      CharBuffer charBuffer3 = CharBuffer.allocate((short)1368);
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertEquals(1368, charBuffer3.limit());
      assertEquals(0, charBuffer3.arrayOffset());
      assertFalse(charBuffer3.isDirect());
      assertEquals(1368, charBuffer3.remaining());
      assertEquals(1368, charBuffer3.length());
      assertEquals(0, charBuffer3.position());
      assertEquals(1368, charBuffer3.capacity());
      assertFalse(charBuffer3.isReadOnly());
      assertTrue(charBuffer3.hasArray());
      assertTrue(charBuffer3.hasRemaining());
      assertNotSame(charBuffer3, charBuffer1);
      assertNotSame(charBuffer3, charBuffer0);
      assertNotNull(charBuffer3);
      
      charBufferArray0[3] = charBuffer3;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) charBuffer2, (int) (short)0, (int) (short)1368);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("r^iR3", (-1528), "maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("r^iR3", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("W4Ls~Lo7E,Q3QR(`", "W4Ls~Lo7E,Q3QR(`", "?|H");
      assertNull(stringArray1);
      
      String string2 = StringUtils.mid("r^iR3", 60, 4857);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("b");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.length("b");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = StringUtils.length("lye~");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("17D,:kP%", ". The following paths could not be deleted (see suppressed exceptions for details): ", "(");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("I ze6&AGChA3)8ZV", "I ze6&AGChA3)8ZV", "p@V$p$");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      char[] charArray0 = new char[4];
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "i", "i");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Failed to get parent directory from provider", "Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEachRepeatedly("zsP&z7@N,Sj", stringArray0, stringArray0);
      assertEquals("zsP&z7@N,Sj", string0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("junit", "@dG'}\"");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("LaunchTime", 23, "junit");
      assertEquals("junitjunitjunLaunchTime", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", "", 23);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("", "@dG'}\"", "");
      assertNull(stringArray2);
      
      String string1 = StringUtils.mid("@dG'}\"", 9, (-766));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToNull("!d.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!d.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1230;
      longArray0[3] = (-1799L);
      longArray0[5] = (long) 1230;
      String string0 = StringUtils.join(longArray0, '4', 3265, 1230);
      assertEquals("", string0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1230L, 0L, 0L, (-1799L), 0L, 1230L}, longArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = '4';
      charArray0[2] = '4';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'W', '4', '4'}, charArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("a~Z6A%e:vWl");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultString("PS)mUW3EE");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("PS)mUW3EE", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.defaultString("blank_blank_blank_2014", "!:b#{e9KK*C&Bz{");
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("blank_blank_blank_2014", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "blank_blank_blank_2014";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)108;
      String string2 = StringUtils.join(byteArray0, '=', (int) (byte)108, 16);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-112), (byte)27, (byte)108}, byteArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(".u2_6&mH+y.w", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "blank_blank_blank_2014", (CharSequence) "", (int) (byte)108);
      assertEquals(22, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("T?4zleBc}Pn#VI8o");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.uncapitalize("");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "x{8.}.KSYUtEw]sgM\"", charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.join((CharBuffer[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) ']';
      intArray0[1] = (int) '_';
      String string1 = StringUtils.join(intArray0, '_');
      assertEquals("93_95", string1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {93, 95}, intArray0);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "93_95", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.abbreviate("R Sk/cf|hi", 93);
      assertFalse(string2.equals((Object)string1));
      assertEquals("R Sk/cf|hi", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("D", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", 'P');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Zj");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Zj", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Zj", (CharSequence) "Zj", 0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short)50;
      shortArray0[2] = (short)700;
      shortArray0[3] = (short)99;
      String string0 = StringUtils.join(shortArray0, 'u');
      assertEquals("0u50u700u99", string0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)50, (short)700, (short)99}, shortArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("0u50u700u99", "Zj");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0u50u700u99", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "0u50u700u99", (CharSequence) "Zj");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.remove("The typ' must not be null", 'c');
      assertEquals("The typ' must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The typ' must not be null", (CharSequence) "The typ' must not be null");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("The typ' must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'v';
      intArray0[1] = (int) 'v';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'v', 0, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.swapCase("Can only resolve parameter of type ");
      assertEquals("cAN ONLY RESOLVE PARAMETER OF TYPE ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      Locale locale0 = new Locale(";%|&~FKX'myS([");
      assertEquals("", locale0.getISO3Country());
      assertEquals(";%|&~fkx'mys([", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(";%|&~fkx'mys([", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.swapCase(";%|&~FKX'myS([");
      assertEquals(";%|&~fkx'MYs([", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 13;
      intArray0[1] = (int) 'M';
      intArray0[2] = 13;
      intArray0[3] = (int) 'M';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'M', 13, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("\n", 1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '7');
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = "Minimum abbreviation width with offset is %d";
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("0.0", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "0.0", "0.0");
      assertEquals(0, int0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = "/$j_";
      String string3 = StringUtils.wrap("/$j_", '}');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("}/$j_}", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[0];
      int int2 = 1571;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, 0, 1571);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      String string0 = StringUtils.right("The character ", 1);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "The character ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.truncate("", 0, 2893);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace("LaunchTime", "`1lD/9<h^X", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LaunchTime", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.upperCase("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", 0, 0);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("`;M2J>45_kD~", 2561);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("5_kD~`;M2J>4", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.stripToEmpty("");
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("", 'V');
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.right("Object varargs must not be null", 0);
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.replace("9YX)YkNegy~x~Q*~3", "}i-S9NCL0c", "hdN=&DvoN0h\"~t[@N`z", 4212);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertEquals("9YX)YkNegy~x~Q*~3", string10);
      assertNotNull(string10);
      
      boolean boolean2 = StringUtils.endsWith("Object varargs must not be null", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.defaultString("blank_blank_blank_2014", "!:b#{e9KK*C&Bz{");
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("blank_blank_blank_2014", (-10), (-10));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "blank_blank_blank_2014";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      String string2 = StringUtils.join(objectArray0, "blank_blank_blank_2014");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("!:b#{e9KK*C&Bz{");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "blank_blank_blank_2014", 0, (-10));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-10));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split("\r", "", Integer.MAX_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.upperCase("`;M2J>45_kD~");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`;M2J>45_KD~", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", (-10), 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("", Integer.MAX_VALUE);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("!:b#{e9KK*C&Bz{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.stripToEmpty("blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014java.lang.Object@36bfe167");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("<j%$xQz<b)c>", 'V');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("V<j%$xQz<b)c>V", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.right("AmouMm'PcGe", (-1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The String must not be empty", "The String must not be empty");
      assertEquals(29, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The String must not be empty", "The String must not be empty", 127);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(29, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", 127, 1202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 127
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeStart("Index: ", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Index: ", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Index: ";
      objectArray0[1] = (Object) "Index: ";
      objectArray0[2] = (Object) "kNu=m}G{zurUq0.Z:";
      objectArray0[3] = (Object) "Index: ";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "Index: ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "kNu=m}G{zurUq0.Z:", 0, 1706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.chomp("keBsl9Rq", "keBsl9Rq");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("keBsl9Rq");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("maxWith cannot be negative", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string0 = StringUtils.appendIfMissing("", charSequenceArray0[1], charSequenceArray0);
      assertEquals("", string0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase("~@D/zM\"5J/NDk}It,+y", locale0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("~@D/ZM\"5J/NDK}IT,+Y", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean0);
      
      String string3 = StringUtils.remove("", ",");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      String string0 = StringUtils.join(charArray0, 'E', (-1252), (-1252));
      assertEquals("", string0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join(charArray0, 'l');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PlllE", string1);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', 'l', 'E'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("PlllE", "PlllE", (-1252));
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceChars("{}", "PlllE", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((float[]) null, 'G', 114, 114);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("X~r", "PlllE", "c");
      assertNull(string4);
      
      String string5 = StringUtils.center("{K8[A+e", 211, 'l');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll{K8[A+ellllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 335);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat("g>b", 211);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("g>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>bg>b", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.replaceChars("r", "M%KNU-qm1nQiz1Z", "r");
      assertEquals("r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Threshold must not be negativer", "1:(cUp*z|-rmSpMU", "Threshold must not be negativer");
      assertEquals("Thmeshold uust not be negativem", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ">\"173.";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) ">\"173.";
      charSequenceArray0[4] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("v\":;,O0", charSequenceArray0[3], charSequenceArray0);
      assertEquals("v\":;,O0", string0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string0);
      
      charSequenceArray0[5] = (CharSequence) "v\":;,O0";
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[0], 0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, shortArray0.length);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("CQuUf`?inE`K ( ", ' ');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissing("Fh;Z^PM+?9Z%tRmoII", "CQuUf`?inE`K ( ", stringArray0);
      assertEquals("Fh;Z^PM+?9Z%tRmoII", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("ry", "e]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertEquals("e]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#rye]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Arguments cannot both be null", "Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '|', (int) '0', 321);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ".u2_6&mH+y.w";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) ".u2_6&mH+y.w";
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", ".u2_6&mH+y.w", charSequenceArray0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("offset cannot be negative", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("$h", 321, 90);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y?I.-e|t\n/,'!", "offset cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing(".u2_6&mH+y.w", "Arguments cannot both be null");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Arguments cannot both be null.u2_6&mH+y.wArguments cannot both be null", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replacePattern((String) null, "!.", "offset cannot be negative");
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Ard*}-)1", "Object varargs must not be null", 96);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Search and Replace array lengths don't match: _C1`{`B+!z^i", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("P/S)mUW3EEP/S)mUW3EE", "7");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.rotate("-T(z_Sw+oit1ry^5", (-119));
      assertEquals("+oit1ry^5-T(z_Sw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-119)));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "-T(z_Sw+oit1ry^5");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains((-119)));
      assertTrue(linkedList0.contains("-T(z_Sw+oit1ry^5"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.remove((Object) "-T(z_Sw+oit1ry^5");
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(object0));
      
      String string1 = StringUtils.substringBetween("The character ", "na\"o3<'!l31d", "na\"o3<'!l31d");
      assertNull(string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) ">G8[f#>o=a3kr[", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "-T(z_Sw+oit1ry^5", (CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string2 = " vs ";
      String string3 = StringUtils.appendIfMissingIgnoreCase(" vs ", "te'O-eNp:H>tmwu", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs te'O-eNp:H>tmwu", string3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isBlank(" vs te'O-eNp:H>tmwu");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = linkedList0.offerLast("+oit1ry^5-T(z_Sw");
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean5);
      assertFalse(linkedList0.contains((-119)));
      assertTrue(linkedList0.contains("+oit1ry^5-T(z_Sw"));
      
      String string4 = null;
      String string5 = StringUtils.defaultString(" vs ");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" vs ", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "+oit1ry^5-T(z_Sw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", "!to[Nk`r>hIC'zQ5L,[");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("!to[Nk`r>hIC'zQ5L,[]v~=~1%$h7{H(.zHFL!to[Nk`r>hIC'zQ5L,[", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("qmeFq.F6xUPS*", "Object varargs must not be null", "\rThe extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("qmeFq.F6xUPS*", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("offset cannot be negative", "Minimum abbreviation width with offset is %d", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "qmeFq.F6xUPS*", (CharSequence) "offset cannot be negative");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(0, charBufferArray0.length);
      assertNull(charBuffer0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) charBufferArray0);
      assertFalse(boolean0);
      assertEquals(0, charBufferArray0.length);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertEquals("7zS1rf@\"J f)5t2E", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-3413)));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-3413)));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(linkedList0.contains((-3413)));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("te'O-eNp:H>tmwu", "6g/{]?\"lq", ")5t2E7zS1rf@\"J f");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.offerLast((Object) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(""));
      
      String string3 = null;
      String string4 = StringUtils.defaultString((String) null);
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("7zS1rf@\"J f)5t2E", ")5t2E7zS1rf@\"J f");
      assertEquals(0.79, double0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)48;
      try { 
        StringUtils.toString(byteArray0, "kJ4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '?';
      longArray0[1] = (long) '?';
      String string0 = StringUtils.join((long[]) null, '\u001C', 321, 321);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 102, 102);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = 'm';
      charArray0[2] = '\u001C';
      charArray0[3] = 'A';
      charArray0[4] = 'G';
      charArray0[5] = '|';
      charArray0[6] = 'K';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'>', 'm', '\u001C', 'A', 'G', '|', 'K'}, charArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-1254), 'K');
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("p@F", '#');
      assertEquals("p@F", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.deleteWhitespace("egative");
      assertFalse(string3.equals((Object)string2));
      assertEquals("egative", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("egative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.trimToNull((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("", 48, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set", '2');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeFirst("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("", (-1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string3 = StringUtils.repeat('\"', 109);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("AUTOSELECT_FILTERING", string1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, ",CRYmN*=i8");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '|';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'|', '|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      Locale locale0 = new Locale("Strings must not be null");
      assertEquals("strings must not be null", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("strings must not be null", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("strings must not be null", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("strings must not be null", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("Strings must not be null", locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("strings must not be null", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("strings must not be null", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("STRINGS MUST NOT BE NULL", string1);
      assertNotSame(locale0, locale1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("Strings must not be null", "Index: ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("Index: ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeIgnoreCase("STRINGS MUST NOT BE NULL", "");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("STRINGS MUST NOT BE NULL", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("Strings must not be null", (String[]) null, (String[]) null);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("l(G0;mFv~/XDyEQ", "l(G0;mFv~/XDyEQ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Can only resolve parameter of type ", ']', '\'');
      assertEquals("Can only resolve parameter of type ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('F', 100);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("g-W<5", 10, (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 10, (-1906));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">\"173.";
      String string4 = StringUtils.replaceEachRepeatedly("Can only resolve parameter of type ", stringArray0, stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Can only resolve parameter of type ", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(">Rz9dNY");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) ">Rz9dNY", (CharSequence) ">Rz9dNY");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.substring("offset cannot be negative", (-308), 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      String string3 = StringUtils.stripEnd((String) null, "Arguments cannot both be null");
      assertNull(string3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.wrap("org.junitpioneer.vintage.TimeoutExtensionL6]N01", 'z');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zorg.junitpioneer.vintage.TimeoutExtensionL6]N01z", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "]%b0k(p8d_H/";
      String string5 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('z', 0);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay(", '", "`1lD/9<h^X", (-2), 866);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.center("`1lD/9<h^X", 87, "DefaultTimeZone");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultT`1lD/9<h^XDefaultTimeZoneDefaultTimeZoneDefaultTi", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("DefaultTimeZoneDefaultTimeZoneDefaultT`1lD/9<h^XDefaultTimeZoneDefaultTimeZoneDefaultTi", "LaunchTime");
      assertFalse(boolean0);
      
      String string3 = StringUtils.uncapitalize("hKbBn` f");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("hKbBn` f", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad(", '", 87, ',');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, '", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String must not be empty", (CharSequence) ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, '");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replace("", "", "", (-172));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("io", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "io");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("q3ZHLLW8<JBJ'nZ<", "", 112);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("q3ZHLLW8<JBJ'nZ<", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("q3ZHLLW8<JBJ'nZ<", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      assertEquals(">\"173.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {1176.0F, (-2697.325F), 1176.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1176.0A-2697.325A1176.0A-1.0", "", "", 1176);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string2);
      assertNotNull(string2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '9');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("offset cannot be negative");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase(">\"173.", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals(">\"173.", string5);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string6 = StringUtils.repeat('S', (-1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.substring("", 17);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'A';
      longArray0[3] = (long) 'I';
      String string0 = StringUtils.join(longArray0, 'A', 1230, 1230);
      assertEquals("", string0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {73L, 73L, 65L, 73L}, longArray0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'I', 'I'}, charArray0);
      
      String string1 = "";
      String string2 = StringUtils.removeEnd("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-250));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) 65L;
      objectArray0[3] = (Object) 73L;
      String string4 = "The character ";
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "The character ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-1kX\u0002E:i%9 >";
      String string0 = StringUtils.prependIfMissingIgnoreCase("-1kX\u0002E:i%9 >", "Object varargs must not be null", charSequenceArray0);
      assertEquals("-1kX\u0002E:i%9 >", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substring("Qs;/75C-!@6p", 160);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("z]!w,\"0m-) ]hk]rn", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2174, 'H');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(string4, "Qs;/75C-!@6p", 2174);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      String string5 = StringUtils.join(intArray0, '@');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("160", string5);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {160}, intArray0);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("%]", "%]");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string7 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'z');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("zSearch and Replace array lengths don't match: z", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("", 'z');
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'z';
      charArray0[2] = 'H';
      charArray0[3] = '@';
      charArray0[4] = 'H';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = 'H';
      charArray0[8] = 'z';
      int int1 = StringUtils.indexOfAny((CharSequence) "\r", charArray0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'H', 'z', 'H', '@', 'H', '@', '@', 'H', 'z'}, charArray0);
      
      String string9 = StringUtils.replaceEach("", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertEquals("", string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(string9);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string10 = StringUtils.prependIfMissing("", "\r", charSequenceArray0);
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertEquals("", string10);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("M%KNU-qm1nQiz1Zorg.apache.commons.lang3.RegExUtils", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("M%KNU-qm1nQiz1Zorg.apache.commons.lang3.RegExUtils", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.unwrap("", 'x');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left("{1_", (-653));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", 'b');
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      int int0 = StringUtils.compare("emv", "Mn<PLh?2_");
      assertEquals(24, int0);
      
      String string0 = StringUtils.replaceFirst("offset cannot be negative", "Mn<PLh?2_", "]=`]");
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Threshold must not be negative");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = 'r';
      charArray0[4] = 'D';
      charArray0[5] = '';
      charArray0[6] = '4';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'0', 'd', '4', 'r', 'D', '', '4'}, charArray0);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
      
      String string1 = StringUtils.substring("Mn<PLh?2_", (-206));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mn<PLh?2_", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(10, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(10, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.wrap("org.apache.commons.lang3.RegExUtils", '.');
      assertEquals(".org.apache.commons.lang3.RegExUtils.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      char char0 = 'P';
      String string0 = StringUtils.wrap("Z36r0fkl?HMj,*QcJAN", 'P');
      assertEquals("PZ36r0fkl?HMj,*QcJANP", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Z36r0fkl?HMj,*QcJAN");
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(19, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(19, charBuffer0.length());
      assertEquals("Z36r0fkl?HMj,*QcJAN", charBuffer0.toString());
      assertEquals(19, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      CharBuffer charBuffer1 = charBuffer0.get(charArray0);
      assertEquals(19, charBuffer0.limit());
      assertEquals("36r0fkl?HMj,*QcJAN", charBuffer0.toString());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(18, charBuffer0.length());
      assertEquals(19, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(18, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(19, charBuffer1.limit());
      assertEquals("36r0fkl?HMj,*QcJAN", charBuffer1.toString());
      assertEquals(19, charBuffer1.capacity());
      assertFalse(charBuffer1.hasArray());
      assertEquals(1, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(18, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(19, charBuffer0.limit());
      assertEquals("36r0fkl?HMj,*QcJAN", charBuffer0.toString());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(18, charBuffer0.length());
      assertEquals(19, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(18, charBuffer2.length());
      assertEquals(1, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasArray());
      assertEquals(19, charBuffer2.limit());
      assertEquals("36r0fkl?HMj,*QcJAN", charBuffer2.toString());
      assertEquals(18, charBuffer2.remaining());
      assertEquals(19, charBuffer2.capacity());
      assertTrue(charBuffer2.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer0, charBuffer2);
      assertSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      assertNotNull(charBuffer2);
      
      // Undeclared exception!
      try { 
        charBuffer2.append('V');
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.startsWithAny("\r", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("D7TGz@qKDF2+/,_", "D7TGz@qKDF2+/,_");
      assertEquals(17, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+'-(-x<~P<Ek{b");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("+'-(-x<~P<Ek{b", stringArray0);
      assertTrue(boolean0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.replaceChars(")5t2E7zS1rf@\"J f", 'm', '6');
      assertEquals(")5t2E7zS1rf@\"J f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", ")5t2E7zS1rf@\"J f", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "1");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviateMiddle("gKR'", "to[Nk`r>hIC'zQ5L,[", (-3413));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("gKR'", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'm');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("<HG|P7", "p{InCombiningDiacriticalMarks}+", 16, 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'M';
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) " ");
      assertEquals((-1), int0);
      
      charArray0[2] = 'E';
      charArray0[3] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'C', 'M', 'E', '.'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("<HG|P7", (-1), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("9", "9", "9");
      assertEquals("9", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "9", (CharSequence) "9");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("9", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 54);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "{?Zu<");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.leftPad("mXgNk!2u:xKnZii$==", (-1047), "mXgNk!2u:xKnZii$==");
      assertEquals("mXgNk!2u:xKnZii$==", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 2327, "");
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(2327));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '(');
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("g,dOc 8yt|#", "g,dOc 8yt|#");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = 352.9954717;
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) '(';
      String string3 = StringUtils.join(doubleArray0, 'M');
      assertFalse(string3.equals((Object)string1));
      assertEquals("40.0M352.9954717M40.0M-1.0M40.0", string3);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {40.0, 352.9954717, 40.0, (-1.0), 40.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("|!<?9i>", locale0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("|!<?9I>", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeIgnoreCase(".u2_6&mH+y.w", "|!<?9I>");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(".u2_6&mH+y.w", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase("Object varargs must not be null");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("object varargs must not be null", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.abbreviate("q'6rs", (String) null, 64, 103);
      assertEquals("q'6rs", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.leftPad("R2jN`>;sZ@$O:O", 3);
      assertEquals("R2jN`>;sZ@$O:O", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("R2jN`>;sZ@$O:O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.leftPad(" ", 33, " ");
      assertEquals("                                 ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.truncate("e*W", 2882, 2882);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("G?xJJCQ{[7", "zsP&zj@N,Sj", "zsP&zj@N,Sj");
      assertEquals("G?xJJCQ{[7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '8';
      charArray0[2] = 'l';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = 'j';
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.truncate("", 121, 121);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.truncate("", 0, 2893);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace("LaunchTime", "`1lD/9<h^X", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LaunchTime", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("`1lD/9<h^X", "", 0, 139);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)297;
      shortArray0[1] = (short)54;
      String string5 = StringUtils.join(shortArray0, '/');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("297/54", string5);
      assertEquals(2, shortArray0.length);
      assertArrayEquals(new short[] {(short)297, (short)54}, shortArray0);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints(",yz5y0ZjOb-;[?k#]v~=~1%$h7{H(.zOFL");
      assertEquals(34, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.substringBetween("H.t/R<g/C&i&lL", (String) null, " {H@08=CROMZ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-1305));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) ">\"173.", charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'?', '/'}, charArray0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = StringUtils.substringBetween(">\"173.", "Y4[C'7SP");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", 90, 90);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.lastOrdinalIndexOf(">\"173.", "Y4[C'7SP", 72);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("a\"", "a\"", 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.substringBefore(",|Hdb!)/J", "Can only resolve parameter of type ");
      assertEquals(",|Hdb!)/J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean3 = arrayList0.add(locale_FilteringMode0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("AUTOSELECT_FILTERINGAUTOSELECT_FILTERING", string1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly(" ", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Comparator should not be null.", "Comparator should not be null.", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String string0 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.substringBefore("`lzc^i3eee", "`lzc^i3eee");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEach("\r", stringArray0, stringArray0);
      assertEquals("\r", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '?';
      String string0 = null;
      String string1 = StringUtils.substringBefore(",yz5y0ZjOb-;n?k#", (String) null);
      assertEquals(",yz5y0ZjOb-;n?k#", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) ">\"173.", '?');
      assertEquals(0, int0);
      
      String string2 = "";
      String string3 = StringUtils.substringBetween("", "Minim");
      assertNull(string3);
      
      String string4 = StringUtils.join((int[]) null, 'L');
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",yz5y0ZjOb-;n?k#", (CharSequence) ",yz5y0ZjOb-;n?k#");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String string0 = StringUtils.substring("n8", 30);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'A');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("7", "7", Integer.MIN_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.removeAll("pc4k^4~4OV;", "pc4k^4~4OV;");
      assertEquals("pc4k^4~4OV;", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-43);
      String string0 = StringUtils.join(byteArray0, 'D', (int) (byte)35, (int) (byte)3);
      assertEquals("", string0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte)64, (byte)0, (byte)3, (byte) (-43)}, byteArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ya/c)lHVw", "junit-oneerr");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String string0 = StringUtils.strip("Q,XY@o<C+{");
      assertEquals("Q,XY@o<C+{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-49);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Q,XY@o<C+{", (CharSequence) "Q,XY@o<C+{", (int) (byte) (-79));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-10);
      intArray0[1] = (-1879);
      String string1 = StringUtils.join(intArray0, 'y', (int) (byte) (-79), (-1879));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-10), (-1879)}, intArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Ha=^*-Y$D=F5", "Ha=^*-Y$D=F5");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("Ha=^*-Y$D=F5", 'n');
      assertFalse(string1.equals((Object)string0));
      assertEquals("nHa=^*-Y$D=F5n", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("Ha=^*-Y$D=F5");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("/J9uELJ=AzzzzzzzzzzzzzzzzzzzzzzzzG9qzzzzzzzzzzzzzzzzzzzzzzzzz", '/');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("J9uELJ=AzzzzzzzzzzzzzzzzzzzzzzzzG9qzzzzzzzzzzzzzzzzzzzzzzzzz", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("-");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Ha=^*-Y$D=F5", (CharSequence) "Ha=^*-Y$D=F5");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substring("The Character must not be null", 770);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-", 770, 770);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "-");
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("-", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.clear();
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("-", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.isReadOnly());
      assertFalse(buffer0.hasArray());
      assertEquals(1, buffer0.capacity());
      assertFalse(buffer0.isDirect());
      assertEquals(1, buffer0.limit());
      assertEquals(1, buffer0.remaining());
      assertTrue(buffer0.hasRemaining());
      assertNotNull(buffer0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '(';
      charArray0[2] = 'n';
      charArray0[3] = 'n';
      charArray0[4] = '/';
      charArray0[5] = '/';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray0, (-1), (-1663));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.substringBetween("GTA'UQx4", "GTA'UQx4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.replaceChars("(0.0a0.0a0.0a0.0a0.0a0.0", (String) null, "(0.0a0.0a0.0a0.0a0.0a0.0");
      assertEquals("(0.0a0.0a0.0a0.0a0.0a0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtils");
      assertEquals("Org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, '6', 60, 60);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", '`');
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Minmum abbreviation widthwith offset is %d", "Minmum abbreviation widthwith offset is %d", "Minmum abbreviation widthwith offset is %d");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertTrue(boolean0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.replaceChars("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("org.junitpioneer.vintage.TimeoutExtension", 'Z');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substringBefore("org.junitpioneer.vintage.TimeoutExtension", " ertwL0//X)Xh");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension", 6);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 6;
      intArray0[2] = (-5033);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (int) 'Z';
      intArray0[6] = (-1);
      String string4 = StringUtils.join(intArray0, 'K', (-4191), (-6411));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1), 6, (-5033), (-1), 0, 90, (-1)}, intArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " is not inthe ange '0'  9'";
      objectArray0[1] = (Object) " is not inthe ange '0'  9'";
      String string0 = StringUtils.join(objectArray0, (String) null);
      assertEquals(" is not inthe ange '0'  9' is not inthe ange '0'  9'", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.remove(".u2_6&mH+y.w", '0');
      assertEquals(".u2_6&mH+y.w", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "offset cannot be negative");
      assertNull(string1);
      
      String string2 = StringUtils.join((double[]) null, '~', 0, 321);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("offset cannot be negative", 'C');
      assertFalse(string3.equals((Object)string0));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertEquals(0, objectArray0.length);
      assertNotNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '~';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "offset cannot be negative", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'0', '0', '~'}, charArray0);
      
      String string5 = StringUtils.replaceChars(".u2_6&mH+y.w", (String) null, "");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(".u2_6&mH+y.w", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split(".u2_6&mH+y.w", 'Z');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'C';
      intArray0[1] = 0;
      intArray0[2] = (int) '0';
      intArray0[3] = (int) '0';
      intArray0[4] = 321;
      intArray0[5] = (int) '~';
      String string6 = StringUtils.join(intArray0, '0', 48, 14);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {67, 0, 48, 48, 321, 126}, intArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.strip("/WD(d4", "");
      assertEquals("/WD(d4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '\\', 2121, 2121);
      assertEquals("", string0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.join((CharBuffer[]) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1711;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2416;
      shortArray0[4] = (short) (-1549);
      shortArray0[5] = (short)0;
      String string1 = StringUtils.join(shortArray0, '_');
      assertEquals("1711_3_0_2416_-1549_0", string1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)1711, (short)3, (short)0, (short)2416, (short) (-1549), (short)0}, shortArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("U`[;GAX8eY7:=;[BOf6", (-1105));
      assertFalse(string2.equals((Object)string1));
      assertEquals("U`[;GAX8eY7:=;[BOf6", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)44;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\u0007\u0006,", string3);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)6, (byte)44}, byteArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart((String) null, "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2860.0F);
      floatArray0[1] = (-1231.72F);
      floatArray0[2] = (-25.1F);
      floatArray0[3] = 2535.786F;
      floatArray0[4] = 2333.0F;
      String string0 = StringUtils.join(floatArray0, 'n', 1982, (-805));
      assertEquals("", string0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-2860.0F), (-1231.72F), (-25.1F), 2535.786F, 2333.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      String string0 = StringUtils.abbreviate("9N\"", "9N\"", 1176, 1176);
      assertEquals("9N\"", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("9N\"", "9N\"", charSequenceArray0);
      assertTrue(string2.equals((Object)string0));
      assertEquals("9N\"", string2);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("9N\"");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "9N\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("Minimum abbreviation width is %d", "9N\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Minimum abbreviation width is %d", 1176, 1176);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000'}, charArray0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Minimum abbreviation width is %d");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.normalizeSpace("]R*$N?sFvDCG,YX");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("]R*$N?sFvDCG,YX", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Comparator should not be null.", 5571);
      assertEquals("Comparator should not be null.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("Comparator should not be null.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Comparator should not be null.", "Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Comparator should not be null.", 'l');
      assertEquals(3, int0);
      
      String string1 = StringUtils.strip("Comparator should not be null.", " /s ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Comparator should not be null.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace(".u2_6&mH+y.wArguments cannot both be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".u2_6&mH+y.wArguments cannot both be null", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^", '7');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.center(";5rLAe.", (-173));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";5rLAe.", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "CQuUf`?inE`K ( ", 'C');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String string0 = "%hZ{!<F}(CBd";
      String string1 = StringUtils.abbreviate("%hZ{!<F}(CBd", 5573);
      assertTrue(string1.equals((Object)string0));
      assertEquals("%hZ{!<F}(CBd", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("%hZ{!<F}(CBd");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("%hZ{!<F}(CBd", "%hZ{!<F}(CBd");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.countMatches((CharSequence) "%hZ{!<F}(CBd", 'W');
      assertEquals(0, int0);
      
      String string2 = " vs ";
      String string3 = "...";
      String string4 = StringUtils.strip(" vs ", "...");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" vs ", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%hZ{!<F}(CBd", 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "/J9uELJ=AzzzzzzzzzzzzzzzzzzzzzzG9qzzzzzzzzzzzzzzzzzzzzzzzz";
      int int0 = StringUtils.indexOfAny((CharSequence) "r^?zPGr|", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Threshold must n");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must n", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.indexOfAny((CharSequence) "/J9uELJ=Azzzzzzzzz9zzzzzzzzzzzzb9qzzzzzzzzzzzzzzzzzzzzzzzz", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.left("z':p'LMYR=", (-505344271));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "z':p'LMYR=", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty("LaunchTime");
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "", 0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("LaunchTime", 'y');
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertNotNull(stringArray3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[1] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[2] = (CharSequence) "`1lD/9<h^X";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "The String must not be empty";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "The String must not be empty";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst("66%C)", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("66%C)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("Array and element cannot both be null", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('&', 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[6], (CharSequence) "The String must not be empty");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNotBlank("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.rotate("", 16);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, 0, "g2aP*KKzU`'Vvx-Y6k#");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 16);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split((String) null, 'y');
      assertNull(stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeFirst((String) null, "66%C)");
      assertNull(string2);
      
      String string3 = StringUtils.left("%ZsAaB", (-1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('y', (-2515));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceIgnoreCase("STV08o@!Qkp<q&v$", (String) null, (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("STV08o@!Qkp<q&v$", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String string0 = StringUtils.left("Object varargs must not be null", 9);
      assertEquals("Object va", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "Object varargs must not be null", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      String string0 = StringUtils.join(byteArray0, ' ', 0, (-2479));
      assertEquals("", string0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-111), (byte) (-111), (byte) (-111)}, byteArray0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Object varargs must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Object varargs must not be null", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Object varargs must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = '=';
      charArray0[2] = ' ';
      charArray0[3] = '=';
      charArray0[4] = '+';
      charArray0[5] = '=';
      charArray0[6] = '=';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {' ', '=', ' ', '=', '+', '=', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.chomp("O)mCimmr;T9H=B@ZR", "");
      assertEquals("O)mCimmr;T9H=B@ZR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) ">Rz96dNYu", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("", 48, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set", '2');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeFirst("", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("", (-1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '2';
      charArray0[4] = '[';
      charArray0[5] = '2';
      charArray0[6] = 'A';
      int int2 = StringUtils.indexOfAny((CharSequence) "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", charArray0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'[', '[', '[', '2', '[', '2', 'A'}, charArray0);
      
      String string3 = StringUtils.removeEnd("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", "");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", (CharSequence) " ", 162);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.joinWith(" ", stringArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string5);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "The character ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.repeat('I', 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Object varargs must not be null", "Object varargs must not be null");
      assertEquals(32, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be nullObject varargs must not be null", string1);
      assertEquals(32, stringArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"oM`)", "Bo");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.rotate("Ij+'w7[-KUtX)", 342);
      assertEquals("-KUtX)Ij+'w7[", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("'w7[-KUtX)Ij+", (CharSequence[]) null);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "~G&%N2VxN");
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertFalse(string1.equals((Object)string0));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("IJ+'W7[-KUTX)", string1);
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("und", string2);
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("~G&%N2VxN", string3);
      assertNotNull(string3);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale1.toString());
      assertEquals("~G&%N2VxN", locale1.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string4 = locale1.toLanguageTag();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale1.toString());
      assertEquals("~G&%N2VxN", locale1.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("und", string4);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string4);
      
      String string5 = StringUtils.getDigits("~G&%N2VxN");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("2", string5);
      assertNotNull(string5);
      
      String string6 = locale0.getDisplayCountry(locale1);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("IJ+'W7[-KUTX)", locale0.getCountry());
      assertEquals("ij+'w7[-kutx)", locale0.getLanguage());
      assertEquals("~G&%N2VxN", locale0.getVariant());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale0.toString());
      assertEquals("ij+'w7[-kutx)_IJ+'W7[-KUTX)_~G&%N2VxN", locale1.toString());
      assertEquals("~G&%N2VxN", locale1.getVariant());
      assertEquals("IJ+'W7[-KUTX)", locale1.getCountry());
      assertEquals("ij+'w7[-kutx)", locale1.getLanguage());
      assertEquals("IJ+'W7[-KUTX)", string6);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[0];
      String string7 = StringUtils.join(byteArray0, 'v');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.split("und", " is not in the range '0' - '9'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("und");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.reverse("2");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertEquals("2", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.removePattern("DefaultTimeZone", "Zj");
      assertEquals("DefaultTimeZone", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("DefaultTimeZone");
      assertEquals(15, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.trimToNull("DefaultTimeZone");
      assertTrue(string1.equals((Object)string0));
      assertEquals("DefaultTimeZone", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayScript();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", string2);
      assertNotNull(string2);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string3 = locale0.toLanguageTag();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it-IT", string3);
      assertSame(locale0, locale1);
      assertNotNull(string3);
      
      int int0 = StringUtils.compareIgnoreCase("J", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("DefaultTimeZone");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBefore("DefaultTimeZone", "*8V(I2jBh$");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("DefaultTimeZone", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right((String) null, 64);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("io", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.uncapitalize("\n");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\n", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "jK64fz. /{ gC+!'sj", (CharSequence) "N9p4#va\"TO");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".P4tw");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.right(".P4tw", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(73, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(73, charBuffer0.length());
      assertEquals(73, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(73, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(charBuffer0));
      assertNotNull(arrayList0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("R", 49, 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("R", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull(" vs I");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vs I", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'M');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.unwrap("R", " vs I");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("R", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("R");
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 73);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.join((Object[]) stringArray0, "hz'8!u2A");
      assertEquals("hz'8!u2Ahz'8!u2A", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("L6]N01");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("L6]N01");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.rightPad("L6]N01", 49);
      assertEquals("L6]N01                                           ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01                                           ", "L6]N01", 36);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart("T", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("T", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("vwgqKW>t~AB@1l", "vwgqKW>t~AB@1l", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("T", "3F[__l!SNYZ", 99);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("C$yjq;lS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.right("T%4`,>iJSoZ2#;C", 28);
      assertEquals("T%4`,>iJSoZ2#;C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.reverse("Comparator should not be null.");
      assertEquals(".llun eb ton dluohs rotarapmoC", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("4KI", 'y');
      assertEquals("y4KIy", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (-662), (-662));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(".UAs1A= 1#siD5u^V'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'Y', 97, 0);
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      assertFalse(string1.equals((Object)string0));
      assertEquals("PS)mUW3EE", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = (Object) "PS)mUW3EE";
      String string2 = StringUtils.join(objectArray0, "PS)mUW3EE");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("PS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EE", string2);
      assertEquals(6, objectArray0.length);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", ')');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "PS)mUW3EE", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.removeFirst((String) null, "PS)mUW3EE");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("PS)mUW3EE");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removePattern("p(:4unL[p>0-", "z:?Z99");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p(:4unL[p>0-", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "z:?Z99", (CharSequence) "PS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EEPS)mUW3EE");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(80, int2);
      
      String string5 = StringUtils.stripStart((String) null, "p(:4unL[p>0-");
      assertNull(string5);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isEmpty(stringArray0[2]);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.leftPad("The String must not be empty", 0, "");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`1lD/9<h^X", (CharSequence[]) stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string2 = StringUtils.replace(stringArray0[2], "`1lD/9<h^X", "The String must not be empty");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("`1lD/9<h^X", "", 0, 139);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("`1lD/9<h^X", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("The String must not be empty", 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("The String must not be empty", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.strip(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL,yz5y0ZjOb-;n?k#", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.EMPTY;
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWith((CharSequence) null, "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.defaultString("blank_blank_blank_2014", "!:b#{e9KK*C&Bz{");
      assertEquals("blank_blank_blank_2014", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("blank_blank_blank_2014", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "blank_blank_blank_2014";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      String string2 = StringUtils.join(objectArray0, "blank_blank_blank_2014");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("!:b#{e9KK*C&Bz{");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "blank_blank_blank_2014", 0, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split("\r", "", Integer.MAX_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.upperCase("`;M2J>45_kD~");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("`;M2J>45_KD~", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", 0, 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("", Integer.MAX_VALUE);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("!:b#{e9KK*C&Bz{");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.stripToEmpty("blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014blank_blank_blank_2014java.lang.Object@5cf0d88");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("<j%$xQz<b)c>", 'V');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals("V<j%$xQz<b)c>V", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.right("AmouMm'PcGe", (-1));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("ijHxQ]'8k.W`}", Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("9", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Strings must not be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Strings must not be null", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Zj");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("Zj", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Zj", (CharSequence) "Zj", 0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2193;
      shortArray0[1] = (short)50;
      shortArray0[2] = (short)700;
      shortArray0[3] = (short)99;
      String string0 = StringUtils.join(shortArray0, 'u');
      assertEquals("2193u50u700u99", string0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)2193, (short)50, (short)700, (short)99}, shortArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N'C>%RDuQ-_S{m");
      assertEquals(16, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(16, charBuffer0.length());
      assertEquals(16, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("N'C>%RDuQ-_S{m", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(16, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      CharBuffer charBuffer1 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(16, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals("N'C>%RDuQ-_S{m", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(16, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals(16, charBuffer1.length());
      assertEquals(16, charBuffer1.capacity());
      assertSame(charBuffer1, charBuffer0);
      assertEquals(1, charBufferArray0.length);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '?';
      String string0 = StringUtils.join(intArray0, '?');
      assertEquals("63?0?0?0?0?0", string0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {63, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("63?0?0?0?0?0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat(".]U", ">\"173.", 63);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "#Hz^zu%`Q4S,_K_D9?";
      charSequenceArray0[2] = (CharSequence) ".]U";
      charSequenceArray0[3] = (CharSequence
      charSequenceArray0[0] = (CharSequence
      charSequenceArray0[5] = (CharSequence) ">\"173.";
      charSequenceArray0[7] = (CharSequence) ".]U";
      charSequenceArray0[8] = (CharSequence) "63?0?0?0?0?0";
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{}";
      stringArray0[1] = "63?0?0?0?0?0";
      String string2 = StringUtils.stripStart("63?0?0?0?0?0", "63?0?0?0?0?0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween((String) null, "{}");
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "{}", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "{}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.truncate("j6Rj", 4, 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("]v~=~1%$h7{Y(.HFL!to[Nk`r>hIC'zQ5L,[", 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals("B]v~=~1%$h7{Y(.HFL!to[Nk`r>hIC'zQ5L,[B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("PdLd(T", 4, 'B');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("PdLd(T", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Failed to delete temp directory ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.strip("#Ql7u)N3Fd", "TKofM nStrings must not be null");
      assertEquals("#Ql7u)N3Fd", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '\\';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\"m2!rWW+kNr!|&", charArray0);
      assertTrue(boolean0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?', '\\'}, charArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("TKofM nStrings must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rotate("\"m2!rWW+kNr!|&", 53);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!rWW+kNr!|&\"m2", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "#Ql7u)N3Fd";
      charSequenceArray0[2] = (CharSequence) "!rWW+kNr!|&\"m2";
      charSequenceArray0[3] = (CharSequence) "#Ql7u)N3Fd";
      charSequenceArray0[4] = (CharSequence) "!rWW+kNr!|&\"m2";
      charSequenceArray0[5] = (CharSequence) "\"m2!rWW+kNr!|&";
      charSequenceArray0[6] = (CharSequence) "#Ql7u)N3Fd";
      charSequenceArray0[7] = (CharSequence) "c|dyu+";
      charSequenceArray0[8] = (CharSequence) "!rWW+kNr!|&\"m2";
      boolean boolean2 = StringUtils.endsWithAny("#Ql7u)N3Fd", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = ")5t2E7zS1rf@\"J f";
      int int0 = (-3413);
      String string1 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertFalse(string1.equals((Object)string0));
      assertEquals("7zS1rf@\"J f)5t2E", string1);
      assertNotNull(string1);
      
      String string2 = "";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(")5t2E7zS1rf@\"J f"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "7zS1rf@\"J f)5t2E");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(")5t2E7zS1rf@\"J f"));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      String string3 = "te'O-eNp:H>tmwu";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.remove(object0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(")5t2E7zS1rf@\"J f"));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      String string4 = StringUtils.substringBetween("te'O-eNp:H>tmwu", "6g/{]?\"lq", ")5t2E7zS1rf@\"J f");
      assertNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = linkedList0.offerLast((Object) null);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean5);
      assertFalse(linkedList0.contains(object0));
      assertTrue(linkedList0.contains("7zS1rf@\"J f)5t2E"));
      
      String string5 = "Can only resolve parameter of type ";
      String string6 = StringUtils.replacePattern((String) null, "Can only resolve parameter of type ", (String) null);
      assertNull(string6);
      
      boolean boolean6 = StringUtils.equalsIgnoreCase("7zS1rf@\"J f)5t2E", (CharSequence) null);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6);
      
      String string7 = "Minimum abbreviation width with offset is %d";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Minimum abbreviation width with offset is %d", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      String string0 = StringUtils.lowerCase("q3ZHLLW8<JBJ'nZ<");
      assertEquals("q3zhllw8<jbj'nz<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore((String) null, "i|HL:bXrl,R19d{/XK");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.joinWith("~<E9b/IiW@3Vr", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "~<E9b/IiW@3Vr", (CharSequence) "~<E9b/IiW@3Vr");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      char char0 = ',';
      String string2 = StringUtils.join(objectArray0, ',');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(1, objectArray0.length);
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("0pl<;E8qA-F", objectArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals(1, objectArray0.length);
      assertNotNull(string3);
      
      String string4 = "cJqzL";
      String string5 = StringUtils.lowerCase("cJqzL");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("cjqzl", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("", "Cannot store ", "");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split("xoGhu&");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      String string7 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string7);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = CharBuffer.allocate(102);
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertEquals(102, charBuffer2.limit());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(102, charBuffer2.remaining());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(102, charBuffer2.length());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertEquals(102, charBuffer2.capacity());
      assertEquals(0, charBuffer2.arrayOffset());
      assertNotNull(charBuffer2);
      
      charBufferArray0[1] = charBuffer2;
      CharBuffer charBuffer3 = StringUtils.firstNonBlank(charBufferArray0);
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertFalse(charBuffer3.equals((Object)charBuffer1));
      assertEquals(102, charBuffer3.length());
      assertTrue(charBuffer3.hasRemaining());
      assertFalse(charBuffer3.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer3.toString());
      assertEquals(102, charBuffer3.remaining());
      assertEquals(0, charBuffer3.position());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals(102, charBuffer3.capacity());
      assertEquals(102, charBuffer3.limit());
      assertTrue(charBuffer3.hasArray());
      assertSame(charBuffer3, charBuffer2);
      assertEquals(2, charBufferArray0.length);
      assertNotNull(charBuffer3);
      
      // Undeclared exception!
      try { 
        charBuffer0.position((-2283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.defaultString("Minimum abbreviatio width is %d");
      assertEquals("Minimum abbreviatio width is %d", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("o+!t4,qqFc!j9yHwF", "o+!t4,qqFc!j9yHwF", "o+!t4,qqFc!j9yHwF");
      assertEquals("o+!t4,qqFc!j9yHwF", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean1 = arrayList0.add(locale_FilteringMode0);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("REJECT_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Threshold must not be negativeThreshold must not be negative", "maxWi}h canUot be negative");
      assertEquals("Threshold must not be negativeThreshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("maxWi}h canUot be negative", 'm');
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWi}h canUot be negativem", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("Threshold must not be negativeThreshold must not be negative", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, " ");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("MAP_EXTENDED_RANGES", string0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", '&');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "kfc<-6S");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      assertFalse(arrayList0.contains("kfc<-6S"));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.strip("\"Nm>FLtwn$fWSd}~|P", "\"Nm>FLtwn$fWSd}~|P");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.strip("org.junitpioneer.vintage.TimeoutExtensionL6]N01", "Arguments cannot both be null");
      assertEquals(".junitpioneer.vintage.TimeoutExtensionL6]N01", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = arrayList0.add(locale_FilteringMode0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean1 = arrayList0.add(locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("REJECT_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", string0);
      assertTrue(arrayList0.contains(locale_FilteringMode1));
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(",CRYmN*=i8", 'Y');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean2 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      boolean boolean3 = arrayList0.add(locale_FilteringMode0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "");
      assertFalse(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("AUTOSELECT_FILTERINGAUTOSELECT_FILTERING", string1);
      assertTrue(arrayList0.contains(locale_FilteringMode0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "9gvj-'");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "!o]_,?=)XpJ2");
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("CQuUf`?inE`K ( ", "bzqcHf!c``,lu7PLak");
      assertEquals("CQuUf`?inE`K ( ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.prependIfMissingIgnoreCase("M%KNU-qm1nQiz1Z", "ry", charSequenceArray0);
      assertEquals("ryM%KNU-qm1nQiz1Z", string0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '|');
      assertNull(string0);
      
      String string1 = StringUtils.replace("i", "\"jk,", "\"jk,", 2248);
      assertEquals("i", string1);
      assertNotNull(string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        treeSet0.add((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("O{;w?iq", "", "");
      assertEquals("O{;w?iq", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "(", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase("M%KNU-qm1nQiz1Z", "ry", charSequenceArray0);
      assertEquals("ryM%KNU-qm1nQiz1Z", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String string0 = StringUtils.unwrap("\n", "yS>]w7Kl%@OP_Z");
      assertEquals("\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      float[] floatArray0 = new float[3];
      String string0 = StringUtils.join(floatArray0, 'U');
      assertEquals("0.0U0.0U0.0", string0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Objectvarargsmustnotbenull");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Objectvarargsmustnotbenull", "Object varargs must not be null");
      assertEquals(27, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isEmpty("Objectvarargsmustnotbenull");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.prependIfMissing("Object varargs must not be null", "Objectvarargsmustnotbenull", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      assertEquals(27, stringArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Minmum abbreviation widthwith offset is %d", Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("Minmum abbreviation widthwith offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[7];
      String string1 = StringUtils.join(longArray0, '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals("0_0_0_0_0_0_0", string1);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String string0 = StringUtils.rotate("-T(z_Sw+oit1ry^5", (-119));
      assertEquals("+oit1ry^5-T(z_Sw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(".]U");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("-T(z_Sw+oit1ry^5"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "-T(z_Sw+oit1ry^5");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("-T(z_Sw+oit1ry^5"));
      assertFalse(linkedList0.contains(".]U"));
      
      String string1 = StringUtils.leftPad("te'O-eNp:H>tmwu", (-119), (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("te'O-eNp:H>tmwu", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "te'O-eNp:H>tmwu", 24);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.substringsBetween("1%k:raqR2v}~", ".]U", "");
      assertNull(stringArray2);
      
      String string2 = StringUtils.stripAccents(".]U");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".]U", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "-T(z_Sw+oit1ry^5";
      charSequenceArray0[1] = (CharSequence) "+oit1ry^5-T(z_Sw";
      charSequenceArray0[2] = (CharSequence) ".]U";
      charSequenceArray0[3] = (CharSequence) "te'O-eNp:H>tmwu";
      String string3 = StringUtils.join((Object[]) null, 'L');
      assertNull(string3);
      
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray3 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray3);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], 1817);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String string0 = StringUtils.join((long[]) null, '6');
      assertNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '6', 113, 52);
      assertEquals("", string1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(52));
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(52));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.defaultString("`1lD/9<h^X", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertEquals("`1lD/9<h^X", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '6');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`1lD/9<h^X6The String must not be empty6", string3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'l');
      assertEquals("", string0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.rotate("-T(z_Sw+oit1ry^5", (-119));
      assertEquals("+oit1ry^5-T(z_Sw", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("}.]U");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-119)));
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      linkedList0.push(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains((-119)));
      
      boolean boolean0 = linkedList0.add((Object) "-T(z_Sw+oit1ry^5");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains((-119)));
      
      String string1 = StringUtils.substring("X", (-1179), (-1409));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("I7?F84}8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("I7?F84}8", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Iterator<?>) null, '|');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((byte[]) null, '^', (-1409), (-1840700267));
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", '7');
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '_');
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.removeStart("Index: ", "");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1047L);
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 249L;
      longArray0[5] = 2667L;
      String string1 = StringUtils.join(longArray0, '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1047=0=1=0=249=2667", string1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1047L), 0L, 1L, 0L, 249L, 2667L}, longArray0);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      String string2 = StringUtils.join(floatArray0, '=', 32, 32);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(0L));
      assertNotNull(arrayList0);
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(0L));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '=');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string3);
      assertFalse(arrayList0.contains(0L));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 1L;
      objectArray0[1] = (Object) 2667L;
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) 2667L;
      objectArray0[5] = (Object) "";
      String string4 = StringUtils.join(objectArray0, 'P');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1P2667P[]PP2667P", string4);
      assertEquals(6, objectArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      String string0 = StringUtils.join(byteArray0, 'd');
      assertEquals("-22", string0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, 'd');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "-22", (int) (byte) (-22), (int) (byte) (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '');
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertFalse(linkedList0.contains(''));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((Iterable<?>) stack0, 'B');
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "IvL_-5Yd)C,h et$T";
      charSequenceArray0[1] = (CharSequence) "IvL_-5Yd)C,h et$T";
      String string0 = StringUtils.strip(">.\"9");
      assertEquals(">.\"9", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) ">.\"9";
      charSequenceArray0[3] = (CharSequence) "IvL_-5Yd)C,h et$T";
      charSequenceArray0[4] = (CharSequence) "IvL_-5Yd)C,h et$T";
      String string1 = StringUtils.prependIfMissingIgnoreCase("IvL_-5Yd)C,h et$T", "IvL_-5Yd)C,h et$T", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("IvL_-5Yd)C,h et$T", string1);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "IvL_-5Yd)C,h et$T", (CharSequence) "IvL_-5Yd)C,h et$T");
      assertEquals((-1), int0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>((SortedSet<? extends CharBuffer>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, '<');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.strip("M0T ,*s5");
      assertEquals("M0T ,*s5", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "M0T ,*s5", (CharSequence) "M0T ,*s5", (-1672));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("-T(z_Sw+oit1ry^5");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("LauncwhTime", "-T(z_Sw+oit1ry^5");
      assertEquals(0.38, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">G8[f#>o=a3kr[";
      stringArray0[1] = "LauncwhTime";
      stringArray0[2] = "-T(z_Sw+oit1ry^5";
      String string0 = StringUtils.replaceEachRepeatedly("Index: ", stringArray0, stringArray0);
      assertEquals("Index: ", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("-T(z_Sw+oit1ry^5");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'K');
      assertFalse(string1.equals((Object)string0));
      assertEquals(">G8[f#>o=a3kr[KLauncwhTimeK-T(z_Sw+oit1ry^5", string1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.removePattern("M>n", "M>n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("M>n");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {77, 62, 110}, intArray0);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", ';');
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("Euwd.eQSJ|?F?d0}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Euwd.eQSJ|?F?d0}", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compareIgnoreCase("", "M>n");
      assertFalse(int1 == int0);
      assertEquals((-3), int1);
      
      boolean boolean0 = StringUtils.isMixedCase("Euwd.eQSJ|?F?d0}");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rotate("*7%Cjf", 1342);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%Cjf*7", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "*7%Cjf", ';');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.substringBetween("%Cjf*7", "xBuDVrG\"D9tS");
      assertNull(string3);
      
      String string4 = StringUtils.join(intArray0, 's');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("77s62s110", string4);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {77, 62, 110}, intArray0);
      assertNotNull(string4);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("M>n", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.wrapIfMissing("]v~=~1%$h7{H(.zHFL", "!to[Nk`r>hIC'zQ5L,[");
      assertFalse(string0.equals((Object)charSequence0));
      assertEquals("!to[Nk`r>hIC'zQ5L,[]v~=~1%$h7{H(.zHFL!to[Nk`r>hIC'zQ5L,[", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("Minimum abbreviation width with offset is %d", '+');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("]v~=~1%$h7{H(.zHFL");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("]v~=~1%$h7{H(.zHFL", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("}~02u,gyB*D >|", '-');
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.center(")AGP:[W+%p\"v0q", 16);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")AGP:[W+%p\"v0q", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 2064, 'g');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string1, 4);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[14];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(14, charBufferArray0.length);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.substringBeforeLast(", ", ", ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 108);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.abbreviate("(RH2PFp`h=Bb%", 109);
      assertEquals("(RH2PFp`h=Bb%", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "(RH2PFp`h=Bb%", (CharSequence) "(RH2PFp`h=Bb%");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      int int0 = StringUtils.length("6O_{Q?5FI:IDgc ");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 2062, 97);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "XIT(", 32);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("J`E`$ND61g\"^fCnYxl", 'N');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'N';
      floatArray0[1] = (float) '\\';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '\\', (-2686), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2686
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("/d9", "P/S)mUW3EEP/S)mUW3EE", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("$dC,", "$dC,", locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.replaceChars("T^ppNG6%S", "T^ppNG6%S", "GTA'UQx4");
      assertEquals("GTAAUQx4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      stringArray0[2] = "LaunhTie";
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.trimToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunhTie");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("LaunhTie");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringBefore("Locale must not be null", "mp2_^vWQ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("LaunhTie", "LaunhTie");
      assertNull(string2);
      
      String string3 = StringUtils.reverse("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("d% si tesffo htiw htdiw noitaiverbba muminiM", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "d% si tesffo htiw htdiw noitaiverbba muminiM", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.center("I><G!_\"0", 1655, "offset cannot be negative");
      StringUtils.equalsAny(string0, (CharSequence[]) null);
      Locale locale0 = new Locale("org.apache.commons.lang3.ArrayUtils", string0, "org.apache.commons.lang3.ArrayUtils");
      locale0.getDisplayCountry();
      locale0.toLanguageTag();
      Locale locale1 = Locale.UK;
      locale1.getDisplayVariant();
      Locale locale2 = locale1.stripExtensions();
      locale0.getExtension('v');
      Locale locale3 = Locale.CANADA_FRENCH;
      locale3.getDisplayCountry(locale2);
      StringUtils.getFuzzyDistance("", string0, locale1);
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.removeStart((String) null, (String) null);
      StringUtils.replaceChars("", (String) null, "org.junitpioneer.vintage.TimeoutExtension");
      String string1 = StringUtils.join((float[]) null, '$', (-1), 11);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.removeStart("e", (String) null);
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      int int0 = StringUtils.getFuzzyDistance("\r", "\r", locale0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.removeStart("Minimum abbreviation width with offset is %d", "] xP-");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[1] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[2] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[3] = (Object) "Minimum abbreviation width with offset is %d";
      objectArray0[4] = (Object) "', is neither of type Map.Entry nor an Array";
      objectArray0[5] = (Object) "Minimum abbreviation width with offset is %d";
      StringUtils.join(objectArray0, ",gQ*pf_,t1", 2428, 99);
      String string1 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width is %d");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.right("0q<mTHk%o`3", 110);
      assertEquals("0q<mTHk%o`3", string2);
      
      Object object0 = new Object();
      Object object1 = new Object();
      String string3 = StringUtils.stripStart("TY]o2~", "0q<mTHk%o`3");
      assertEquals("Y]o2~", string3);
      
      StringUtils.stripStart("Array and element cannot both be null", (String) null);
      String string4 = StringUtils.reverseDelimited(".u2_6&mH+y.w", '`');
      assertEquals(".u2_6&mH+y.w", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'V');
      assertNotNull(string0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      StringUtils.firstNonBlank(charBufferArray0);
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charBufferArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.replaceChars("T^ppNG6%S", "T^ppNG6%S", "T^ppNG6%S");
      assertEquals("T^ppNG6%S", string0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String string0 = StringUtils.removeStart("1tr9%", "1tr9%");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      StringUtils.rotate("Ij+'w7[-KUtX)", 342);
      StringUtils.equalsAny("'w7[-KUtX)Ij+", (CharSequence[]) null);
      Locale locale0 = new Locale("Ij+'w7[-KUtX)", "Ij+'w7[-KUtX)", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      locale0.getDisplayCountry();
      locale0.toLanguageTag();
      locale0.getDisplayVariant();
      Locale locale1 = locale0.stripExtensions();
      locale1.toLanguageTag();
      locale1.getExtension('v');
      locale0.getDisplayCountry(locale1);
      StringUtils.getFuzzyDistance("Ij+'w7[-KUtX)", "'w7[-KUtX)Ij+", locale1);
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.removeStart("und", "");
      StringUtils.replaceChars("gtAKLk}~Sh!4", "gtAKLk}~Sh!4", "");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'v';
      floatArray0[1] = (float) 'v';
      floatArray0[2] = (float) 34;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 342;
      floatArray0[5] = (float) 'v';
      floatArray0[6] = (float) 342;
      floatArray0[7] = (float) 342;
      floatArray0[8] = (float) 34;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'v', (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      StringUtils.replaceChars("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", (String) null);
      StringUtils.stripToNull("OMZ',>");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "OMZ',>";
      StringUtils.join((double[]) null, 'a');
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      charSequenceArray0[3] = (CharSequence) "OMZ',>";
      charSequenceArray0[4] = (CharSequence) "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 829, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.LF;
      String string1 = StringUtils.mid("offset cannot be negative", 3, 3);
      assertEquals("set", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      String string0 = StringUtils.mid("junit-pioneer", (-3191), 10);
      assertEquals("junit-pion", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("junit-pion");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("-T(z_Sw+oit1ry^5");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("LaunchTime", "-T(z_Sw+oit1ry^5");
      assertEquals(0.44, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">G8[f#>o=a3kr[";
      stringArray0[1] = "LaunchTime";
      stringArray0[2] = "-T(z_Sw+oit1ry^5";
      String string0 = StringUtils.replaceEachRepeatedly("Index: ", stringArray0, stringArray0);
      assertEquals("Index: ", string0);
      
      StringUtils.isWhitespace("-T(z_Sw+oit1ry^5");
      String string1 = StringUtils.defaultString("LaunchTime");
      StringUtils.indexOf((CharSequence) "LaunchTime", (CharSequence) "LaunchTime");
      String string2 = StringUtils.replaceIgnoreCase("LaunchTime", "-T(z_Sw+oit1ry^5", ">G8[f#>o=a3kr[", 0);
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.compare("oZ,,_d8", "?/AqXI");
      assertEquals(48, int0);
      
      StringUtils.isWhitespace("?/AqXI");
      String string3 = StringUtils.appendIfMissingIgnoreCase("LaunchTimeLaunchTime", ">G8[f#>o=a3kr[", stringArray0);
      assertEquals("LaunchTimeLaunchTime", string3);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String string0 = StringUtils.chomp("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.substring("org.junitpioneer.vintage.ExpectedExceptionExtension", (-4373), (-4373));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      StringUtils.replace("`!bN'#fZSJ8]2aE]lh", ";l?}0wT\"oqp)", "Y/'5NE", 1845);
      StringUtils.contains((CharSequence) "`!bN'#fZSJ8]2aE]lh", (-361));
      StringUtils.substringAfter("`!bN'#fZSJ8]2aE]lh", "Y/'5NE");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) ";l?}0wT\"oqp)", (CharSequence) "`!bN'#fZSJ8]2aE]lh", (-361));
      StringUtils.isEmpty("`!bN'#fZSJ8]2aE]lh");
      StringUtils.getLevenshteinDistance((CharSequence) "`!bN'#fZSJ8]2aE]lh", (CharSequence) "`!bN'#fZSJ8]2aE]lh", 36);
      StringUtils.prependIfMissingIgnoreCase("w3RCv3M(fqi", "Y/'5NE", (CharSequence[]) null);
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.substring("`!bN'#fZSJ8]2aE]lh", 740, 1114111);
      StringUtils.substring((String) null, 25, 2271);
      String string0 = StringUtils.unwrap((String) null, '1');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.mid("mn(>\"(@rEQZ-p8", 10, 10);
      assertEquals("Z-p8", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Z-p8", "Z-p8");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      StringUtils.abbreviate(">(1r3.", ">(1r3.", 1176, 1176);
      StringUtils.indexOfAny((CharSequence) ">(1r3.", "");
      String string0 = "P)>^w] xP-junit";
      StringUtils.substring("P)>^w] xP-junit", 57, 57);
      StringUtils.chomp("I7?F84}8");
      StringUtils.isWhitespace("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '7', 32, 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      StringUtils.rotate("$a'rt", (-332));
      StringUtils.normalizeSpace("'rt$a");
      byte[] byteArray0 = new byte[0];
      String string0 = "ExpectedException\\u";
      try { 
        StringUtils.toString(byteArray0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.contains((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer.allocate(0);
      StringUtils.toString(byteArray0, (String) null);
      String string0 = StringUtils.stripStart("Arguments cannot both be null.u2_6&mH+y.w", ".]U");
      assertEquals("Arguments cannot both be null.u2_6&mH+y.w", string0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "<}{31'~_@.!", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "\n\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      StringUtils.getCommonPrefix((String[]) null);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '+');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'x');
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'x';
      String string1 = StringUtils.join(intArray0, '$');
      assertNotNull(string1);
      assertEquals("120", string1);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("R", 'u');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'j', (-1125), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1125
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      char char0 = ',';
      StringUtils.join(objectArray0, ',');
      StringUtils.joinWith("0pl<;E8qA-F", objectArray0);
      String string0 = "cJqzL";
      StringUtils.lowerCase("cJqzL");
      StringUtils.split("xoGhu&");
      byte[] byteArray0 = new byte[0];
      StringUtils.toEncodedString(byteArray0, (Charset) null);
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      CharBuffer charBuffer0 = CharBuffer.allocate(109);
      charBufferArray0[1] = charBuffer0;
      CharBuffer charBuffer1 = StringUtils.firstNonBlank(charBufferArray0);
      StringUtils.defaultString("cjqzl", "cJqzL");
      // Undeclared exception!
      try { 
        charBuffer0.put(charBuffer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\"J~%8A5vmhPI3V+KMP", (CharSequence) "O;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      StringUtils.containsAny((CharSequence) "Object varargs must not be null", (char[]) null);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = new Locale("-3ry{\"ytBt");
      locale1.getDisplayLanguage();
      Set<Character> set0 = new TreeSet<Character>();
      StringUtils.lowerCase("-3ry{\"ytbt", locale0);
      StringUtils.stripAccents("Object varargs must not be null");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      String string0 = StringUtils.join((Object[]) null, '`', 0, 50);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      StringUtils.isMixedCase("PS)mUW3EE");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, 'Y', 97, 0);
      StringUtils.reverseDelimited("PS)mUW3EE", 'Y');
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "PS)mUW3EE";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "PS)mUW3EE";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = (Object) "PS)mUW3EE";
      StringUtils.join(objectArray0, "PS)mUW3EE");
      String[] stringArray0 = StringUtils.split("", ')');
      StringUtils.indexOfAny((CharSequence) "PS)mUW3EE", (CharSequence[]) stringArray0);
      StringUtils.removeFirst((String) null, "PS)mUW3EE");
      StringUtils.isAllUpperCase("PS)mUW3EE");
      StringUtils.right("kBeK70?L{!$7;lJ&", (-1));
      Locale locale0 = Locale.PRC;
      StringUtils.lowerCase((String) null, locale0);
      StringUtils.reverse("cannot store ");
      String string0 = StringUtils.replaceChars((String) null, 'Y', '8');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Threshold must not be negativeThreshold must not be negative");
      assertEquals("Threshold must not be negativeThreshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("3dXx2", 'd');
      assertEquals("Xx2d3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = ";vz";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase(";vz", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "M%KNU-qm1nQiz1Z", (CharSequence) "M%KNU-qm1nQiz1Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty("TjXC<&");
      assertEquals("TjXC<&", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TjXC<&", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "TjXC<&", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      StringUtils.center("/J-gW", (-1360));
      StringUtils.isWhitespace("/J-gW");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'P';
      charArray0[2] = '`';
      charArray0[3] = 'Q';
      StringUtils.containsAny((CharSequence) "/J-gW", charArray0);
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayLanguage();
      locale0.getExtensionKeys();
      StringUtils.lowerCase("-3ry{\"ytBt", locale0);
      StringUtils.stripAccents("Japanese");
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "Japanese";
      objectArray0[3] = (Object) "/J-gW";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "/J-gW";
      objectArray0[6] = (Object) 'P';
      Object object2 = new Object();
      objectArray0[7] = object2;
      Object object3 = new Object();
      objectArray0[8] = object3;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'P', (-1360), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1360
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      String string0 = StringUtils.join((Object[]) charBufferArray0, "r@ag5");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.rightPad("Q_{Ym6*.}MUI5>~&", (-22583480), 'K');
      assertNotNull(string0);
      assertEquals("Q_{Ym6*.}MUI5>~&", string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String string0 = "\n";
      String string1 = "offset cannot be negative";
      StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      StringUtils.join((Object[]) null, "offset cannot be negative", 0, 0);
      StringUtils.stripToEmpty("\n");
      int int0 = 8192;
      int int1 = (-406);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 8192, (-406));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2, "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("O%nEHFaJg!5", "O%nEHFaJg!5", "O%nEHFaJg!5");
      assertEquals("O%nEHFaJg!5", string0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.capitalize((String) null);
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.wrap("b'VYM", "b'VYM");
      assertEquals("b'VYMb'VYMb'VYM", string0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      StringUtils.reverse((String) null);
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.rightPad("Z@1N/It+", 63);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Z@1N/It+                                                       ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("CQuUf`?inE`K ( ", "CQuUf`?inE`K ( ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 15
         // CQuUf`?inE`K ( 
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, "", 51, 0);
      StringUtils.reverse((String) null);
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.removeFirst((String) null, ", '");
      assertNull(string1);
      
      String string2 = StringUtils.wrap("maxWith cannot be negative", "Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d", string2);
      
      StringUtils.trimToEmpty((String) null);
      String string3 = StringUtils.removePattern("Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d", "Minimum abbreviation width is %dmaxWith cannot be negativeMinimum abbreviation width is %d");
      String string4 = StringUtils.rightPad("", 0);
      assertTrue(string4.equals((Object)string3));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = ';';
      charArray0[2] = 'B';
      charArray0[3] = ';';
      charArray0[4] = 'n';
      charArray0[5] = 'k';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      StringUtils.isEmpty("LaunchTime");
      StringUtils.stripToNull("a=*K)*MJ x1");
      StringUtils.overlay("LaunchTime", "L6]N01", 0, 0);
      StringUtils stringUtils0 = new StringUtils();
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      StringUtils.indexOfAny((CharSequence) "LaunchTime", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\n", 818, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      StringUtils.overlay("d{uk5", (String) null, 10, 1);
      int int0 = StringUtils.indexOfAny((CharSequence) "d", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.overlay("xE3a[=D", "xE3a[=D", (-1668), (-2473));
      assertEquals("xE3a[=DxE3a[=D", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">Rz9dNY", (CharSequence) "xE3a[=DxE3a[=D");
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "GFNbTW{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertEquals("7zS1rf@\"J f)5t2E", string0);
      
      StringUtils.splitByCharacterTypeCamelCase("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "7zS1rf@\"J f)5t2E");
      StringUtils.substringBetween("te'O-eNp:H>tmwu", "6g/{]?\"lq", ")5t2E7zS1rf@\"J f");
      String string1 = StringUtils.stripToNull(")5t2E7zS1rf@\"J f");
      assertNotNull(string1);
      assertEquals(")5t2E7zS1rf@\"J f", string1);
      
      String string2 = StringUtils.overlay("9`cn,f", (String) null, 85, 32);
      assertEquals("9`cn,f", string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = '.';
      charArray0[3] = 'M';
      int int0 = StringUtils.indexOfAny((CharSequence) "9`cn,f", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      StringUtils.substring("offset cannot be negative", (-308), 0);
      StringUtils.chomp("Object varargs must not be null");
      StringUtils.isWhitespace("offset cannot be negative");
      StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      StringUtils.isAlphanumericSpace("offset cannot be negative");
      StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      String string0 = StringUtils.strip("\n", (String) null);
      StringUtils.normalizeSpace("F");
      StringUtils.splitPreserveAllTokens("1GZ`ac+:JHJAg4", 'B');
      String string1 = StringUtils.center("org", (-898));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("rlaL44", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      StringUtils.rotate("", (-964));
      StringUtils.stripToNull("");
      StringUtils.wrapIfMissing("", 'G');
      StringUtils.lowerCase("P)>^w] xP-junit");
      StringUtils.truncate("n7p.eykp|dxzY,5*ydg", 4);
      StringUtils.indexOfAnyBut((CharSequence) "n7p.", (char[]) null);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "n7p.";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.lastIndexOf((CharSequence) null, (-964));
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", "P)>^w] xP-junit", "<DUwwa:L^AQ$I#\"im");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.overlay("...", "liT/n", 4512, 4512);
      assertEquals("...liT/n", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("...liT/n", "...");
      assertEquals(0.85, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String string0 = StringUtils.stripToNull("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      StringUtils.isEmpty("LaunchTime");
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.stripToNull(" vs ");
      StringUtils.overlay(", '", "`1lD/9<h^X", (-2), 866);
      char[] charArray0 = new char[0];
      StringUtils.indexOfAny((CharSequence) "The String must not be empty", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'V', (-2), 866);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String string0 = StringUtils.abbreviate(",s3i5a}*m", ",s3i5a}*m", 1510, 1510);
      assertEquals(",s3i5a}*m", string0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("L6]N01", "L6]N01");
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "L6]N01", (CharSequence) "L6]N01");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("L6]N01");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '4';
      charArray0[2] = '1';
      charArray0[3] = 'I';
      int int1 = StringUtils.indexOfAny((CharSequence) "L6]N01", charArray0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.rotate("", 161);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.abbreviate("W1/Oei3@j?2x^A", 50, 50);
      assertEquals("W1/Oei3@j?2x^A", string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      StringUtils.compare((String) null, (String) null, false);
      StringUtils.rotate("", 16);
      StringUtils.equalsIgnoreCase("", "");
      StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      String string0 = "<HG|P7";
      StringUtils.overlay("<HG|P7", "p{InCombiningDiacriticalMarks}+", 16, 0);
      StringUtils stringUtils0 = new StringUtils();
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'M';
      charArray0[2] = 'E';
      charArray0[3] = '.';
      StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("<HG|P7", (-1), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.capitalize("junit");
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("junit");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, '2');
      StringUtils.lastIndexOf((CharSequence) "junit", (CharSequence) "");
      int int0 = StringUtils.indexOfDifference((CharSequence) "Junit", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("Junit", 5);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The type must not be null", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String string0 = StringUtils.mid("org.apache.commons.lang3.StringUtils", (-21), (-21));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      StringUtils.wrapIfMissing("LaunchTime", "LaunchTime");
      int[] intArray0 = new int[2];
      intArray0[0] = 1137;
      intArray0[1] = (-1761);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '~', 1137, 1568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1137
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing(".]U", "I ze6&AGChA3)8ZV", charSequenceArray0);
      assertEquals(".]UI ze6&AGChA3)8ZV", string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1^", "1^", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.mid("$", 2064, 2064);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.difference("F\"^vbY8Uz'RqkY@]", "F\"^vbY8Uz'RqkY@]");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.replace(">(1r3.", ">(1r3.", ">(1r3.");
      assertEquals(">(1r3.", string0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("Minimum abbreviation width is %d", " in an array of ", charSequenceArray0);
      assertEquals("Minimum abbreviation width is %d in an array of ", string0);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle(">z/M6", "The character must not be null", 25);
      assertEquals(">z/M6", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">z/M6", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String string0 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "7QQQt{z2u:?A");
      assertEquals("7QQQt{z2u:?A", string0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "H78");
      assertNotNull(string0);
      assertEquals("H78", string0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Failed to deete7temp directory ", "Failed to deete7temp directory ", "Failed to deete7temp directory ");
      assertEquals("Failed to deete7temp directory ", string0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      short[] shortArray0 = new short[11];
      String string0 = StringUtils.join(shortArray0, 'O');
      assertEquals("0O0O0O0O0O0O0O0O0O0O0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      StringUtils.isEmpty(stringArray0[2]);
      String string0 = StringUtils.leftPad("", 0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "", 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 45;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "LaunchTime";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("The String must not be empty", "LaunchTime", charSequenceArray0);
      assertEquals("The String must not be empty", string1);
      
      StringUtils.join((char[]) null, '\"');
      boolean boolean0 = StringUtils.isAlpha("The String must not be empty");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray1, "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, '\"');
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      StringUtils.join((CharBuffer[]) null);
      StringUtils.isAllLowerCase((CharSequence) null);
      StringUtils.splitByCharacterTypeCamelCase((String) null);
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      StringUtils.chomp("Object varargs must not be null");
      StringUtils.isWhitespace("offset cannot be negative");
      StringUtils.replaceOnceIgnoreCase("F", "F", "\n");
      StringUtils.isAlphanumericSpace("offset cannot be negative");
      StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      StringUtils.strip("\n", (String) null);
      StringUtils.abbreviate("u", 83);
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      char[] charArray0 = new char[10];
      String string0 = StringUtils.join(charArray0, 'Q');
      assertEquals("\u0000Q\u0000Q\u0000Q\u0000Q\u0000Q\u0000Q\u0000Q\u0000Q\u0000Q\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.wrap((String) null, '<');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X`1lD/9<h^X");
      assertEquals(20, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) '_';
      intArray0[1] = (int) '_';
      intArray0[2] = (int) '_';
      intArray0[4] = (int) '_';
      intArray0[4] = (int) '_';
      intArray0[5] = (int) '_';
      String string1 = StringUtils.join(intArray0, '_');
      assertNotNull(string1);
      assertEquals("95_95_95_0_95_95", string1);
      
      StringUtils.lastIndexOf((CharSequence) "95_95_95_0_95_95", (CharSequence) "95_95_95_0_95_95");
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "`1lD/9<h^X`1lD/9<h^X");
      assertEquals(0, int0);
      
      String string2 = StringUtils.abbreviate("", 49);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.repeat('c', 4);
      assertEquals("cccc", string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.join((Object[]) null, "i9jggr{f{");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "LaunhTie", (char[]) null);
      String string0 = StringUtils.mid("e must not be null", 3144, 84);
      assertNotNull(string0);
      
      StringUtils.isAlphaSpace("LaunhTie");
      String string1 = StringUtils.chomp("Y> {H@08=CROMZ", "',>");
      int int0 = StringUtils.compare("Y> {H@08=CROMZ", "Y> {H@08=CROMZ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultString((String) null);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "',>", "");
      assertFalse(boolean1 == boolean0);
      
      StringUtils.trimToNull((String) null);
      StringUtils.trim((String) null);
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "LaunhTie";
      String string3 = StringUtils.removeStart("e must not be null", "e must not be null");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "", 23);
      int int2 = StringUtils.lastIndexOf((CharSequence) "e must not be null", (CharSequence) null, 8);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      StringUtils.join((CharBuffer[]) null);
      StringUtils.isAllLowerCase((CharSequence) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1711;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2416;
      shortArray0[4] = (short) (-1549);
      shortArray0[5] = (short)0;
      String string0 = StringUtils.join(shortArray0, '_');
      assertNotNull(string0);
      assertEquals("1711_3_0_2416_-1549_0", string0);
      
      String string1 = StringUtils.leftPad("U`[;GAX8eY7:=;[BOf6", 700);
      assertEquals`[;GAX8eY7:=;[BOf6", string1);
      
      StringUtils.lastIndexOf((CharSequence) null, (CharSequence`[;GAX8eY7:=;[BOf6", 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '>';
      charArray0[4] = 'y';
      charArray0[5] = '_';
      charArray0[6] = '_';
      String string2 = StringUtils.join(charArray0, '_');
      assertNotNull(string2);
      assertEquals("!_____>_y____", string2);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string0 = StringUtils.replaceOnce("~?~JLZPb{2E", "org.junitpioneer.jupiter.TempDirectory", "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals("~?~JLZPb{2E", string0);
      
      charSequenceArray0[4] = (CharSequence) "~?~JLZPb{2E";
      Locale locale0 = Locale.CANADA;
      StringUtils.upperCase("org.junitpioneer.jupiter.TempDirectory", locale0);
      charSequenceArray0[5] = (CharSequence) "ORG.JUNITPIONEER.JUPITER.TEMPDIRECTORY";
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      Locale locale1 = Locale.ITALIAN;
      Locale.setDefault(locale1);
      charSequenceArray0[8] = (CharSequence) "\r";
      String string1 = StringUtils.appendIfMissing("\r", "\r", charSequenceArray0);
      assertEquals("\r", string1);
      
      locale0.getDisplayLanguage();
      boolean boolean0 = StringUtils.containsIgnoreCase("\r", charSequenceArray0[7]);
      assertTrue(boolean0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("org.apache.commons.lang3.CharUtils", "\r", charSequenceArray0);
      assertEquals("\rorg.apache.commons.lang3.CharUtils", string2);
      
      String string3 = StringUtils.stripEnd("u~()#=\"1", "\r");
      assertEquals("u~()#=\"1", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "~?~JLZPb{2E");
      assertEquals(0.0, double0, 0.01);
      
      StringUtils.indexOf((CharSequence) "~?~JLZPb{2E", 2200);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      Locale locale0 = Locale.UK;
      locale0.getDisplayName();
      locale0.getDisplayVariant();
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Igk9;S&Z{x@GZ$D");
      int int1 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.strip("Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Search and Replace array lengths don't match:", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = '6';
      charArray0[3] = 'D';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match:", charArray0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("4hw*", (String) null);
      assertEquals("4hw*", string1);
      
      StringUtils.chop((String) null);
      int int2 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match:", (CharSequence) null, 1346);
      assertTrue(int2 == int0);
      
      StringUtils.repeat("(N-H@", 1346);
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      stringArray0[2] = "LaunchTime";
      StringUtils.stripAll(stringArray0, "`1lD/9<h^X");
      StringUtils.isEmpty("LaunchTime");
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.trimToNull("Locale must not be null");
      StringUtils.compareIgnoreCase("mp2_^vWQ", "LaunchTime");
      StringUtils.isMixedCase("LaunchTime");
      StringUtils.substringBefore("Locale must not be null", "mp2_^vWQ");
      StringUtils.countMatches((CharSequence) "LaunchTime", '_');
      StringUtils.substringBetween("LaunchTime", "LaunchTime");
      StringUtils.join((int[]) null, '+');
      StringUtils.lastIndexOf((CharSequence) "*7%Cjf", (CharSequence) "Locale must not be null");
      StringUtils.getJaroWinklerDistance("The String must not be empty", "The String must not be empty");
      // Undeclared exception!
      try { 
        StringUtils.removePattern("1!OO k.<)n]w18=t]M", "*7%Cjf");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *7%Cjf
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      charArray0[1] = '8';
      charArray0[2] = 'l';
      charArray0[3] = 'Q';
      charArray0[4] = '$';
      charArray0[5] = 'w';
      charArray0[6] = 'j';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      charBuffer0.put(charBuffer1);
      charBuffer0.chars();
      charBuffer0.compact();
      charBuffer0.put('Q');
      StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      String string0 = StringUtils.defaultString("");
      String string1 = StringUtils.replace("", "", "");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("Timeout");
      assertNotNull(string2);
      assertEquals("Timeout", string2);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("3Gx~[~x@jkr5-lY", "3Gx~[~x@jkr5-lY");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "\r", 42);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '^', 54, 54);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", ",yz5y0ZjOb-;[?k#]v~=~1%$h7{H(.zOFL", 22);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase(",yz5y0ZjOb-;[?k#]v~=~1%$h7{H(.zOFL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = stringArray0[0];
      char[] charArray0 = new char[4];
      StringUtils.leftPad(stringArray0[1], (int) '\u0000', '\u0000');
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.firstNonEmpty(charSequenceArray0);
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("hz'8!u2A", charSequenceArray0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("The String must not be empty", "n<8t{", false);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("*sS\"\"kQ\"r", "*sS\"\"kQ\"r", (CharSequence[]) null);
      assertEquals("*sS\"\"kQ\"r", string0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-2920));
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (-3494));
      StringUtils.startsWithIgnoreCase("", "");
      StringUtils.trimToNull("");
      int[] intArray0 = new int[2];
      intArray0[0] = (-3494);
      intArray0[1] = (-3494);
      StringUtils.join(intArray0, 'Z');
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3494);
      doubleArray0[1] = (double) (-3494);
      doubleArray0[2] = (double) (-3494);
      doubleArray0[3] = (double) (-3494);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (double) (-3494);
      doubleArray0[6] = (double) (-3494);
      doubleArray0[7] = (double) 'Z';
      StringUtils.join(doubleArray0, 'Z');
      StringUtils.compareIgnoreCase("The String must not be empty", "-3494Z-3494");
      StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", "", stringArray0);
      StringUtils.lastOrdinalIndexOf((CharSequence) null, "org.junitpioneer.vintage.TimeoutExtension", 100);
      String string0 = StringUtils.leftPad((String) null, 3019, 'Y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.chomp(">(1b3.");
      assertEquals(">(1b3.", string0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      
      int int0 = StringUtils.compare((String) null, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("Object varargs must not be null");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 13;
      intArray0[1] = (-2803);
      intArray0[2] = 19;
      intArray0[3] = 13;
      intArray0[4] = (int) 'M';
      intArray0[5] = (-1);
      String string1 = StringUtils.join(intArray0, 'M', 13, 13);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = 692L;
      longArray0[2] = 0L;
      longArray0[3] = (-5827L);
      longArray0[4] = 1L;
      String string0 = StringUtils.join(longArray0, 'X');
      assertEquals("-1X692X0X-5827X1", string0);
      assertNotNull(string0);
      
      StringUtils.isAllUpperCase("-1X692X0X-5827X1");
      boolean boolean0 = StringUtils.contains((CharSequence) "-1X692X0X-5827X1", 6);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("\n", 1390, "\n");
      StringUtils.repeat("K07t|\"ZvFxIwkX", 1390);
      String string2 = StringUtils.normalizeSpace(string1);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("I ze6&AGChA3)8ZV");
      assertEquals("I ze6&AGChA3)8ZV", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      StringUtils.chomp(", Length: ");
      String string0 = " ";
      StringUtils.normalizeSpace(" ");
      CharBuffer[] charBufferArray0 = new CharBuffer[6];
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = ' ';
      charArray0[2] = 'k';
      charArray0[3] = '{';
      charArray0[4] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBufferArray0[0] = charBuffer0;
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(", Length: ");
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      charBufferArray0[1] = charBuffer1;
      CharBuffer charBuffer2 = charset0.decode(byteBuffer0);
      charBufferArray0[2] = charBuffer2;
      int int0 = 0;
      int int1 = 995;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 0, 995);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.chomp("\n\n");
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.stripEnd("#g~cg&", "#g~cg&");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      Locale locale0 = new Locale(";%|&~FKX'myS([");
      String string0 = StringUtils.upperCase(";%|&~FKX'myS([", locale0);
      assertNotNull(string0);
      assertEquals(";%|&~FKX'MYS([", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(";%|&~FKX'MYS([");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "',>";
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '>';
      String string0 = StringUtils.leftPad("nZx'u^[pIih0q|", 395, '>');
      assertNotNull(string0);
      assertEquals(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>nZx'u^[pIih0q|", string0);
      
      String string1 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '>', 32, 32);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "hz'8!u2A");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      String string0 = StringUtils.join(doubleArray0, 'M');
      assertNotNull(string0);
      assertEquals("0.0M0.0M0.0M0.0M0.0M0.0M0.0M0.0M0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL");
      assertNotNull(string0);
      assertEquals(",yz5y0ZjOb-;n?k#]v~=~1%$h7{H(.zHFL", string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 108);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 692L;
      longArray0[2] = (-36L);
      longArray0[3] = (-5827L);
      longArray0[4] = 1L;
      String string0 = StringUtils.join(longArray0, 'X');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-1X692X-36X-5827X1X0X0X0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "-1X692X-36X-5827X1X0X0X0", (int) 'X');
      String string1 = StringUtils.truncate("-1X692X-36X-5827X1X0X0X0", 2157);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("-1X692X-36X-5827X1X0X0X0");
      assertNotNull(intArray0);
      assertEquals(24, intArray0.length);
      
      String string2 = StringUtils.defaultString("\n");
      assertEquals("\n", string2);
      
      StringUtils.isEmpty("-1X692X-36X-5827X1X0X0X0");
      boolean boolean2 = StringUtils.isNumericSpace("-1X692X-36X-5827X1X0X0X0");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      StringUtils.join(objectArray0, "kNu=m}G{zurUq0.Z:", 1706, 0);
      StringUtils.stripStart("!{*4!T%<k9Rj\"U<68", "");
      String string1 = StringUtils.right("4;RSb~p7D", 54);
      assertEquals("4;RSb~p7D", string1);
      
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) "";
      objectArray1[1] = (Object) "!{*4!T%<k9Rj\"U<68";
      objectArray1[2] = (Object) "!{*4!T%<k9Rj\"U<68";
      objectArray1[3] = (Object) "";
      objectArray1[4] = (Object) "";
      Object object0 = new Object();
      objectArray1[5] = object0;
      Object object1 = new Object();
      objectArray1[6] = object1;
      objectArray1[7] = (Object) "!{*4!T%<k9Rj\"U<68";
      objectArray1[8] = (Object) "4;RSb~p7D";
      String string2 = StringUtils.joinWith("", objectArray1);
      StringUtils.stripStart("^9N8wC", "");
      String string3 = StringUtils.reverseDelimited("", '`');
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      StringUtils.capitalize("junit");
      String[] stringArray0 = StringUtils.split("G?43pS", "G?43pS");
      StringUtils.isMixedCase("junit");
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '>';
      StringUtils.containsNone((CharSequence) "G?43pS", charArray0);
      StringUtils.mid("Junit", 377, 28);
      StringUtils.isAlphaSpace("junit");
      StringUtils.chomp("P)>^w] xP-", "junit");
      StringUtils.center("0@~h@1", 377);
      StringUtils.splitByWholeSeparator((String) null, "                                                                                                                                                                                         0@~h@1                                                                                                                                                                                          ", 28);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Junit");
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.toCodePoints("                                                                                                                                                                                         0@~h@1                                                                                                                                                                                          ");
      StringUtils.stripAll((String[]) null, "Ioh@D1Qqm");
      StringUtils.indexOf((CharSequence) "", 28);
      StringUtils.splitPreserveAllTokens("'9djNJP mKYI-T8[1;w");
      StringUtils.startsWithAny("P)>^w] xP-", stringArray0);
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      StringUtils.strip("Q,XY@o<C+{");
      StringUtils.indexOfAny((CharSequence) "Q,XY@o<C+{", " in an array of ");
      StringUtils.contains((CharSequence) " in an array of ", (CharSequence) " in an array of ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "zVp\"]f`");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      StringUtils.join((CharBuffer[]) null);
      StringUtils.isAllLowerCase((CharSequence) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1711;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)2416;
      shortArray0[5] = (short)0;
      String string0 = StringUtils.join(shortArray0, '_');
      assertEquals("1711_3_0_2416_0_0", string0);
      
      String string1 = StringUtils.removePattern("org.junitpioneer.vintage.TimeoutExtensionL6]N01", (String) null);
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.vintage.TimeoutExtensionL6]N01", (CharSequence) "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripStart("jK!K'V9Qkqwd!O*$^h", "4l");
      assertEquals("jK!K'V9Qkqwd!O*$^h", string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "jK!K'V9Qkqwd!O*$^h";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtensionL6]N01";
      charSequenceArray0[2] = (CharSequence) "jK!K'V9Qkqwd!O*$^h";
      charSequenceArray0[3] = (CharSequence) "1711_3_0_2416_0_0";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      boolean boolean2 = StringUtils.isNotEmpty(charSequenceArray0[3]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      StringUtils.stripAll((String[]) null, (String) null);
      StringUtils.isEmpty((CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "]v~=~1%$h7{H(.zH";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "]v~=~1%$h7{H(.zH";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.trimToNull("]v~=~1%$h7{H(.zH");
      StringUtils.compareIgnoreCase((String) null, "]v~=~1%$h7{H(.zH");
      StringUtils.isMixedCase("The String must not be empty");
      StringUtils.join((int[]) null, '}');
      StringUtils.lastIndexOf((CharSequence) "Locale must not be null", (CharSequence) null);
      StringUtils.getJaroWinklerDistance("The String must not be empty", "The String must not be empty");
      StringUtils.removePattern("=6VuE", (String) null);
      StringUtils.replace("mp2_^vWQ", "mp2_^vWQ", "%", 32);
      StringUtils.length("%");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "mp2_^vWQ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      StringUtils.join(floatArray0, '7');
      String string0 = "Object varargs must not be null";
      String string1 = "Minimum abbreviation width with offset is %d";
      int int0 = 0;
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      StringUtils.startsWithAny("0.0", stringArray0);
      StringUtils.indexOfAny((CharSequence) "0.0", "0.0");
      StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Charset.forName("0.0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0.0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.prependIfMissing("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", charSequenceArray0);
      StringUtils.replaceIgnoreCase("", "", "");
      StringUtils.removeStart("", "");
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.StringUtils", (-1248), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.abbreviate(">\"173.", ">\"173.", 1176, 1176);
      int int0 = StringUtils.indexOfAny((CharSequence) ">\"173.", "");
      assertEquals((-1), int0);
      
      StringUtils.indexOf((CharSequence) ">\"173.", 1176);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1176;
      floatArray0[1] = (-2697.325F);
      floatArray0[2] = (float) 1176;
      floatArray0[3] = (float) (-1);
      String string1 = StringUtils.join(floatArray0, 'A');
      String string2 = StringUtils.replace("1176.0A-2697.325A1176.0A-1.0", "", "", 1176);
      assertTrue(string2.equals((Object)string1));
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      StringUtils.join(iterator0, '9');
      String string3 = StringUtils.trimToEmpty("offset cannot be negative");
      assertEquals("offset cannot be negative", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase(">\"173.", "\r");
      assertTrue(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "1176.0A-2697.325A1176.0A-1.0";
      String string5 = StringUtils.prependIfMissing("", "1176.0A-2697.325A1176.0A-1.0", charSequenceArray0);
      assertEquals("1176.0A-2697.325A1176.0A-1.0", string5);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 2124);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.strip("Minimum abbreviation width with offset is %dThe character ");
      String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is %dThe character ");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.removeEndIgnoreCase("Minimum abbreviation width with offset is %dThe character", "Minimum abbreviation width with offset is %dThe character");
      String[] stringArray0 = StringUtils.splitByCharacterType(".]U");
      int int0 = StringUtils.lastIndexOfAny(".]U", stringArray0);
      assertEquals(2, int0);
      
      String string2 = StringUtils.chop("cKK`3=-$7x@ cJVwWal");
      assertEquals("cKK`3=-$7x@ cJVwWa", string2);
      
      StringUtils.equalsIgnoreCase(".]U", "Minimum abbreviation width with offset is %dThe character");
      StringUtils.contains((CharSequence) "Minimum abbreviation width with offset is %dThe character ", (-2440));
      StringUtils.countMatches((CharSequence) "cKK`3=-$7x@ cJVwWa", (CharSequence) "cKK`3=-$7x@ cJVwWal");
      StringUtils.stripAccents("Xe\"0=pgC0BYi");
      StringUtils.rightPad(".]U", 3088, 'R');
      String string3 = StringUtils.replace("] xP-", "cKK`3=-$7x@ cJVwWal", "Minimum abbreviation width is %d", 3088);
      assertEquals("] xP-", string3);
      
      String string4 = StringUtils.joinWith(".]U", stringArray0);
      assertEquals("..]U].]UU", string4);
      
      boolean boolean0 = StringUtils.startsWithAny("Xe\"0=pgC0BYi", stringArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'X';
      charArray0[2] = 'R';
      charArray0[3] = 'l';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      String string5 = StringUtils.join(charArray0, 'X');
      assertEquals("RXXXRXlXRXRXRXR", string5);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("AYW`o+=", '(');
      assertNotNull(stringArray0);
      
      StringUtils.reverseDelimited((String) null, '(');
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.upperCase("dtzJu IhS");
      assertEquals("DTZJU IHS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.removePattern("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String string0 = StringUtils.capitalize(" in an array of ");
      assertEquals(" in an array of ", string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.firstNonEmpty(charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      StringUtils.uncapitalize("");
      StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      StringUtils.defaultString((String) null, (String) null);
      StringUtils.contains((CharSequence) null, 0);
      StringUtils.indexOfAny((CharSequence) null, "");
      StringUtils.indexOf((CharSequence) null, 0);
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      CharBuffer charBuffer1 = charBuffer0.append((CharSequence) null);
      charBuffer0.position(32);
      charBuffer0.limit(32);
      charBuffer0.put("");
      charBuffer0.mark();
      StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      StringUtils.isWhitespace((CharSequence) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'c';
      charArray0[2] = 'j';
      charArray0[3] = 'D';
      charArray0[4] = '0';
      charArray0[5] = 'S';
      charArray0[6] = 'e';
      charBuffer0.put(charArray0, 0, 0);
      StringUtils.reverseDelimited((String) null, 'k');
      StringUtils.upperCase("junit-pioneer");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "JUNIT-PIONEER";
      charSequenceArray0[1] = (CharSequence) "junit-pioneer";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) charBuffer1;
      StringUtils.isNoneEmpty(charSequenceArray0);
      StringUtils.removePattern((String) null, "");
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String string0 = StringUtils.left("xC%gi1PC_WiPwIRwbK", 9);
      assertEquals("xC%gi1PC_", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "xC%gi1PC_";
      charSequenceArray0[1] = (CharSequence) "xC%gi1PC_";
      charSequenceArray0[2] = (CharSequence) "xC%gi1PC_";
      charSequenceArray0[3] = (CharSequence) "xC%gi1PC_";
      Stack<Object> stack0 = new Stack<Object>();
      String string1 = StringUtils.join((List<?>) stack0, '5', 1187, 9);
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "xC%gi1PC_";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("PS)mUW3EE", "PS)mUW3EE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("2o~n|`O?OM+|Y^m");
      assertEquals("2o~n|`O?OM+|Y^m", string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty("TjXC<&");
      assertEquals("TjXC<&", string1);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'e');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[5] = 1;
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{94z^OGzPC{Ql!)y5<F", "{94z^OGzPC{Ql!)y5<F");
      assertNotNull(stringArray0);
      assertEquals(20, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("{94z^OGzPC{Ql!)y5<F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStartIgnoreCase("{94z^OGzPC{Ql!)y5<F", "{94z^OGzPC{Ql!)y5<F");
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("qRkKO 6YwZ4");
      assertEquals("64", string1);
      
      String string2 = "\\uTest '%s' was supposed to run no longer than %d ms but ran %d ms.";
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "{94z^OGzPC{Ql!)y5<F", (CharSequence) string2);
      assertEquals((-1), int0);
      
      StringUtils.indexOf((CharSequence) "{94z^OGzPC{Ql!)y5<F", 17);
      boolean boolean1 = StringUtils.isNumeric("64");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("h");
      assertEquals("h", string0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "Object varargs must not be null", true);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverseDelimited(", Length: 0", 'Y');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Object varargs must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp((String) null, ", Length: 0");
      assertNull(string1);
      
      String string2 = StringUtils.replaceFirst("Object varargs must not be null", (String) null, "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string2);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      int int0 = StringUtils.compare("...", "^s");
      assertEquals((-48), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("^s", (CharSequence[]) null);
      boolean boolean1 = StringUtils.isAlphanumeric("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      StringUtils.join((byte[]) null, 'B', 57, 57);
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (-563.0F);
      StringUtils.join(floatArray0, ';');
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.DefaultLocaleExtension", "\r", (-1152));
      StringUtils.startsWithAny("`1lD/9<h^X", stringArray0);
      StringUtils.defaultIfEmpty((CharSequence) "Object varargs must not be null", (CharSequence) "\r");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "Object varargs must not be null");
      String string0 = "4ll=cDMa~vJ(A{";
      // Undeclared exception!
      try { 
        Charset.forName("\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("b");
      assertEquals("b", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("b", "b");
      assertEquals(2, stringArray0.length);
      
      StringUtils.isEmpty("b");
      String[] stringArray1 = StringUtils.splitByWholeSeparator("b", "b", 6);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">Rz96dNYu", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("^cz,@p~^sv?YryB {zs");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtensionLocale must not be null", "", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", "Minimum abbreviation width with offset is %d", 0);
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Object varargs must not be null");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      ByteBuffer.allocate(0);
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d", 1070);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Failed to create default temp directory", "Minimum abbreviation width with offset is %d");
      String string0 = StringUtils.defaultString("Arguments cannot both be null.u2_6&mH+y.w");
      assertEquals("Arguments cannot both be null.u2_6&mH+y.w", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Arguments cannot both be null.u2_6&mH+y.w");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      
      StringUtils.rightPad(":J`pFyNQS:^ab", 1070);
      StringUtils.join((Object[]) stringArray1, "Failed to create default temp directory", 1070, 0);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)charSequence0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d");
      assertEquals(7, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Failed to delete temp directory ", (String) null, 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils.leftPad((String) null, 1, "Failed to delete temp directory ");
      String string0 = StringUtils.repeat('$', 1);
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'l';
      charArray0[2] = 'E';
      StringUtils.join(charArray0, 'E', (-1252), (-1252));
      String string0 = StringUtils.join(charArray0, 'l');
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "PlllE", charArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("_`6");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("PlllE", "PlllE", 16);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("_`6");
      assertEquals("_`6", string2);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("@z9|");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      char[] charArray0 = new char[0];
      StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionL6]N01", string2);
      
      StringUtils.mid("<gHY4']TcwpNbb=,{6", 6, (-1100));
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtensionL6]N01");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      StringUtils.wrapIfMissing("", "");
      String string3 = StringUtils.replacePattern("org.junitpioneer.vintage.TimeoutExtension", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'o');
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      StringUtils.capitalize("junit");
      StringUtils.split("G?43pS", "G?43pS");
      StringUtils.isMixedCase("junit");
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '>';
      StringUtils.containsNone((CharSequence) "G?43pS", charArray0);
      StringUtils.isAsciiPrintable("G?43pS");
      StringUtils.isAllUpperCase("junit");
      StringUtils.substringBetween("", "Junit");
      StringUtils.substringsBetween((String) null, "G?43pS", "')4WD3-.5N#2]PR4`t");
      StringUtils.length("");
      StringUtils.indexOf((CharSequence) "junit", 0, 0);
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      String string0 = StringUtils.substring("offset cannot be negative", (-308), 0);
      String string1 = StringUtils.chomp("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string1);
      
      StringUtils.isWhitespace("offset cannot be negative");
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{f9-~0=Od9o*IC");
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode1);
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      String string2 = StringUtils.join(iterator0, "Object varargs must not be null");
      assertEquals("AUTOSELECT_FILTERINGObject varargs must not be nullREJECT_EXTENDED_RANGES", string2);
      
      StringUtils.removeIgnoreCase("offset cannot be negative", "");
      String string3 = StringUtils.wrapIfMissing("", '|');
      assertTrue(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "2)[7C@~>Ef9Rs#JK");
      assertEquals(12, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1lD/9<h^X";
      stringArray0[1] = "The String must not be empty";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("The String must not be empty", 'Y');
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("`1lD/9<h^X");
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      arrayList0.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList0.add(locale_FilteringMode2);
      arrayList0.add(locale_FilteringMode1);
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      StringUtils.join(iterator0, "The String must not be empty");
      String string0 = StringUtils.removeIgnoreCase("9gvj-'", "");
      assertEquals("9gvj-'", string0);
      
      StringUtils.wrapIfMissing("", 'a');
      String[] stringArray3 = StringUtils.stripAll(stringArray2, "9gvj-'");
      assertEquals(10, stringArray2.length);
      assertEquals(10, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("M>n");
      assertEquals("M>n", string0);
      
      int int0 = StringUtils.compare((String) null, "", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      String string1 = StringUtils.join(intArray0, 'M', 13, 4);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">z<96dNYuK_$0Zd6:%", ">z<96dNYuK_$0Zd6:%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      String string0 = StringUtils.chop("DefaultTimeZone");
      assertEquals("DefaultTimeZon", string0);
      
      StringUtils.isBlank("Zj");
      StringUtils.splitByWholeSeparatorPreserveAllTokens("DefaultTimeZon", "DefaultTimeZone");
      boolean boolean0 = StringUtils.isAlphanumericSpace("DefaultTimeZon");
      assertTrue(boolean0);
      
      StringUtils.indexOf((CharSequence) "DefaultTimeZon", (CharSequence) "Zj", (-3191));
      String[] stringArray0 = StringUtils.splitByWholeSeparator("DefaultTimeZon", "Zj", (-3191));
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %dThe character ");
      assertEquals("minimum abbreviation width with offset is %dThe character ", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = ']';
      charArray0[5] = ']';
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "DefaultTimeZon", (CharSequence) "DefaultTimeZone", (int) '=');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("rlaL=44");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      String string0 = StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertEquals((-1), int0);
      
      StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("L6]N01", "L6]N01");
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.difference("K FQ~3-'jJcD0AnYPn:", "org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.containsNone((CharSequence) "K FQ~3-'jJcD0AnYPn:", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("org.junitpioneer.vintage.TimeoutExtension", "L6]N01", charSequenceArray0);
      String string3 = StringUtils.uncapitalize("K FQ~3-'jJcD0AnYPn:");
      assertEquals("k FQ~3-'jJcD0AnYPn:", string3);
      
      StringUtils.left("<gHY4']TcwpNbb=,{6", (-1));
      String string4 = StringUtils.unwrap("org.junitpioneer.vintage.TimeoutExtensionL6]N01", 'j');
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'd');
      assertEquals("0", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0", "0");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("m-Iy~U\"*mx}W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(".RQHu?jw5o");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Arguments cannot both be null", "Arguments cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("`1lD/9<h^X`1lD/9<h^X", "`1lD/9<h^X`1lD/9<h^X");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      int int0 = StringUtils.compare(" is notin t0e ange '0'  9'", " is notin t0e ange '0'  9'");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Threshold must not be negativeThreshold must not be negative");
      assertEquals("threshold must not be negativeThreshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      int int0 = StringUtils.compare("PS)mUW3EE", "PS)mUW3EE", false);
      boolean boolean0 = StringUtils.isMixedCase("PS)mUW3EE");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      String string0 = StringUtils.join(byteArray0, '=', 0, 0);
      assertEquals("", string0);
      
      StringUtils.isBlank("");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("PS)mUW3EE", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "PS)mUW3EE", (CharSequence) "", 0);
      String[] stringArray1 = StringUtils.splitByCharacterType("x{8.}.KSYUtEw]sgM\"");
      assertEquals(14, stringArray1.length);
      
      String string1 = StringUtils.uncapitalize("x{8.}.KSYUtEw]sgM\"");
      assertEquals("x{8.}.KSYUtEw]sgM\"", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "PS)mUW3EE", charArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      StringUtils.abbreviate("x{8.}.KSYUtEw]sgM\"", 443);
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("x{8.}.KSYUtEw]sgM\"", stringArray1);
      assertEquals(14, stringArray1.length);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.chomp("");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.EMPTY;
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\"I^Ci$Po3iX_";
      String string0 = StringUtils.chomp("\"I^Ci$Po3iX_");
      charSequenceArray0[1] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray0[2] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray0[3] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray0[4] = (CharSequence) "\"I^Ci$Po3iX_";
      String string1 = StringUtils.appendIfMissing("\"I^Ci$Po3iX_", "\"I^Ci$Po3iX_", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      charSequenceArray1[0] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[1] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[2] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[3] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[4] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[5] = (CharSequence) "\"I^Ci$Po3iX_";
      charSequenceArray1[6] = (CharSequence) "\"I^Ci$Po3iX_";
      String string2 = StringUtils.prependIfMissingIgnoreCase("\"I^Ci$Po3iX_", "\"I^Ci$Po3iX_", charSequenceArray1);
      assertEquals("\"I^Ci$Po3iX_", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("\"I^Ci$Po3iX_");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      StringUtils.replace("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension", 6);
      StringUtils.split((String) null, "org.junitpioneer.vintage.TimeoutExtension", 6);
      StringUtils.defaultIfEmpty((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      ByteBuffer.allocate(6);
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      StringUtils.join(iterator0, 'I');
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension", 1070);
      StringUtils.wrapIfMissing("V-HN", "9AmqZZ~6");
      StringUtils.split("XAIDXH*Y", '+');
      StringUtils.valueOf((char[]) null);
      StringUtils.normalizeSpace("org.junitpioneer.vintage.TimeoutExtension");
      StringUtils.splitPreserveAllTokens("LaunchTime", '$');
      String string0 = StringUtils.center((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      StringUtils.difference("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.isMixedCase("");
      StringUtils.getJaroWinklerDistance("", charSequenceArray0[3]);
      StringUtils.length(charSequenceArray0[3]);
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      StringUtils.abbreviate("", 0);
      StringUtils.trimToNull("");
      StringUtils.isNumeric((CharSequence) null);
      StringUtils.center("", 0);
      String string0 = null;
      StringUtils.splitByWholeSeparator((String) null, (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("The Character must not be null", "Minimum abbreviation width is %d", charSequenceArray0);
      assertEquals("The Character must not be nullMinimum abbreviation width is %d", string0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.substringBefore("%47D;c<']?>@^#sE;D", "Gqg/#dC\"DXGiF");
      assertEquals("%47D;c<']?>@^#sE;D", string0);
      
      StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      String string1 = StringUtils.substring("Qs;/75C-!@6p", 160);
      StringUtils.stripEnd("Gqg/#dC\"DXGiF", "Gqg/#dC\"DXGiF");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%47D;c<']?>@^#sE;D", ".]U");
      String string2 = StringUtils.removeAll("z]!w,\"0m-) ]hk]rn", "");
      assertEquals("z]!w,\"0m-) ]hk]rn", string2);
      
      String string3 = StringUtils.leftPad("%47D;c<']?>@^#sE;D", 2174, 'H');
      StringUtils.ordinalIndexOf(string3, "Qs;/75C-!@6p", 2174);
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 160;
      String string4 = StringUtils.join(intArray0, '@');
      assertEquals("160", string4);
      
      String string5 = StringUtils.stripEnd("%]", "%]");
      StringUtils stringUtils0 = new StringUtils();
      String string6 = StringUtils.wrap("", 'z');
      assertTrue(string6.equals((Object)string1));
      
      String string7 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertTrue(string7.equals((Object)string5));
      
      StringUtils.repeat('H', 2174);
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, '|', (-1354), (-1354));
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      Locale locale0 = new Locale(";%|&~FKX'myS([");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ";%|&~FKX'myS([";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(";%|&~FKX'myS([", charSequenceArray0);
      String string0 = StringUtils.chomp(";%|&~FKX'myS([", "");
      assertEquals(";%|&~FKX'myS([", string0);
      
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.wrap("rc", "");
      StringUtils.removeAll(";%|&~FKX'myS([", "rc");
      StringUtils.endsWithIgnoreCase("rc", "rc");
      String string1 = StringUtils.prependIfMissingIgnoreCase(" [okZ8s:f", " [okZ8s:f", charSequenceArray0);
      assertEquals(" [okZ8s:f", string1);
      
      boolean boolean1 = StringUtils.isMixedCase(" [okZ8s:f");
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.center(";%|&~FKX'myS([", 30);
      assertEquals("       ;%|&~FKX'myS([        ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.wrap("L6]N01", " [okZ8s:f");
      assertEquals(" [okZ8s:fL6]N01 [okZ8s:f", string4);
      
      boolean boolean2 = StringUtils.isWhitespace(" [okZ8s:fL6]N01 [okZ8s:f");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = StringUtils.center("q`ilQ)`%JcoH_e", (-283));
      assertEquals("q`ilQ)`%JcoH_e", string0);
      
      String string1 = "\\u";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "q`ilQ)`%JcoH_e", string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      StringUtils.removePattern("DefaultTimeZone", "Zj");
      int[] intArray0 = StringUtils.toCodePoints("DefaultTimeZone");
      StringUtils.countMatches((CharSequence) "DefaultTimeZone", ';');
      StringUtils.trimToNull("DefaultTimeZone");
      StringUtils.compareIgnoreCase("jK64fz. /{ gC+!'sj", "jK64fz. /{ gC+!'sj");
      StringUtils.isMixedCase("Zj");
      StringUtils.rotate("Zj", 6);
      StringUtils.countMatches((CharSequence) "Zj", 'b');
      StringUtils.join(intArray0, 'b');
      StringUtils.lastIndexOf((CharSequence) "DefaultTimeZone", (CharSequence) "Zj");
      StringUtils.getJaroWinklerDistance("68b101b102b97b117b108b116b84b105b109b101b90b111b110b101", "DefaultTimeZone");
      StringUtils.indexOfDifference((CharSequence) "Zj", (CharSequence) "jK64fz. /{ gC+!'sj");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Zj", (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      CharBuffer[] charBufferArray0 = new CharBuffer[14];
      boolean boolean0 = StringUtils.isAnyEmpty(charBufferArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      StringUtils.normalizeSpace("Object varargs must not be null");
      StringUtils.countMatches((CharSequence) "Object varargs must not be null", 'x');
      StringUtils.trimToNull("L6]N01");
      StringUtils.compareIgnoreCase("L6]N01", "Euwd.eQSJ|?F?d0}");
      StringUtils.isMixedCase("L6]N01");
      StringUtils.rotate("Object varargs must not be null", 7);
      StringUtils.countMatches((CharSequence) "Object varargs must not be null", 'M');
      StringUtils.substringBetween("\r", "Object varargs must not be null");
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'x');
      StringUtils.lastIndexOf((CharSequence) "Euwd.eQSJ|?F?d0}", (CharSequence) "\r");
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "L6]N01");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("tA", "tA");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", (CharSequence[]) null);
      assertEquals("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Test '%s' was supposed to run no longer than %d ms but ran %d ms.", '\\');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y> {H@08=CROMZ", "Y> {H@08=CROMZ");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Y> {H@08=CROMZ", stringArray0);
      assertFalse(boolean0);
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      StringUtils.firstNonEmpty(charSequenceArray0);
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      String string0 = StringUtils.chomp("O)mCimmr;T9H=B@ZR", "O)mCimmr;T9H=B@ZR");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Ffw 0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("P/S)mUW3EUP/S)MUW3EE", "P/S)mUW3EUP/S)MUW3EE");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.center(">", 979);
      assertEqualsstring0);
      
      int[] intArray0 = StringUtils.toCodePoints
      assertEquals(979, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.appendIfMissing(" ", " ", (CharSequence[]) null);
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      Locale locale0 = new Locale("Strings must not be null");
      String string0 = StringUtils.upperCase("Strings must not be null", locale0);
      assertEquals("STRINGS MUST NOT BE NULL", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      String string1 = StringUtils.replaceChars(", ", "Strings must not be null", "aN_e]plk3AZ|En0\"");
      assertEquals(",k", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("STRINGS MUST NOT BE NULL");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string0 = StringUtils.appendIfMissing("", charSequenceArray0[1], charSequenceArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      charSequenceArray1[0] = (CharSequence) "\r";
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "\r";
      charSequenceArray1[7] = (CharSequence) "\r";
      String string2 = StringUtils.chomp("", "rc");
      charSequenceArray1[8] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray1);
      String string3 = StringUtils.wrap("", "\n");
      assertTrue(string3.equals((Object)string2));
      
      charSequenceArray0[8] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "\r");
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isMixedCase("\n");
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.center("s", (-1));
      assertEquals("s", string5);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      String string0 = StringUtils.replacePattern("\n", "offset cannot be negative", "offset cannot be negative");
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substring("offset cannot be negative", (-308), 0);
      String string2 = StringUtils.chomp("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("offset cannot be negative");
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "\n");
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("offset cannot be negative");
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.mid("nTajxyG)>lye|{mqk~", (-898), 0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1368;
      shortArray0[2] = (short) (-641);
      shortArray0[3] = (short)0;
      String string5 = StringUtils.join(shortArray0, 'b');
      assertEquals("0b1368b-641b0", string5);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      String string0 = StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      assertNotNull(string0);
      
      StringUtils.splitByCharacterTypeCamelCase("");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(")5t2E7zS1rf@\"J f", 'j');
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      ArrayList<Locale.FilteringMode> arrayList0 = new ArrayList<Locale.FilteringMode>();
      ArrayList<Locale.FilteringMode> arrayList1 = new ArrayList<Locale.FilteringMode>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      arrayList1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      arrayList0.add(locale_FilteringMode1);
      Iterator<Locale.FilteringMode> iterator0 = arrayList0.iterator();
      StringUtils.join(iterator0, (String) null);
      StringUtils.removeIgnoreCase("^", (String) null);
      String string1 = StringUtils.stripToNull("7zS1rf@\"J f)5t2E");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, " ");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      String string0 = StringUtils.rotate("org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.CharSequenceUtils", (-212));
      assertEquals("g.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.CharSequenceUtilsor", string0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      String string0 = StringUtils.removePattern("B*Q*", "B*Q*");
      assertEquals("**", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("B*Q*");
      StringUtils.countMatches((CharSequence) "B*Q*", ';');
      StringUtils.trimToNull((String) null);
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      StringUtils.isMixedCase((CharSequence) null);
      StringUtils.rotate((String) null, 0);
      int int1 = StringUtils.countMatches((CharSequence) "**", ';');
      assertTrue(int1 == int0);
      
      StringUtils.substringBetween("", (String) null);
      String string1 = StringUtils.join(intArray0, 's');
      assertEquals("66s42s81s42", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'Z';
      String string0 = StringUtils.replaceFirst("U~CKhI1Zw8zjGJ", "U~CKhI1Zw8zjGJ", "U~CKhI1Zw8zjGJ");
      StringUtils.join((double[]) null, 'd', 0, 0);
      String string1 = StringUtils.trimToNull("U~CKhI1Zw8zjGJ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", "@9+B)#eW{YI");
      assertEquals(45, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      StringUtils.rotate("U~CKhI1Zw8zjGJ", 0);
      int int1 = StringUtils.countMatches((CharSequence) "U~CKhI1Zw8zjGJ", 'C');
      assertEquals(1, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'k';
      intArray0[1] = (int) '~';
      String string2 = StringUtils.join(intArray0, 'Z');
      assertEquals("107Z126", string2);
      
      StringUtils.lastIndexOf((CharSequence) "*7%Cjf", (CharSequence) "Minimum abbreviation width is %d");
      double double0 = StringUtils.getJaroWinklerDistance("U~CKhI1Zw8zjGJ", "U~CKhI1Zw8zjGJ");
      assertEquals(1.0, double0, 0.01);
      
      String string3 = StringUtils.center("L6]N01", 45, "Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviatioL6]N01Minimum abbreviation", string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Minimum abbreviatioL6]N01Minimum abbreviation");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Dt@sf.Ahow8yt>0");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      String string0 = StringUtils.rotate("Zn`6/47~U$61_lCfO", 50);
      assertEquals("n`6/47~U$61_lCfOZ", string0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      String string0 = ")5t2E7zS1rf@\"J f";
      StringUtils.rotate(")5t2E7zS1rf@\"J f", (-3413));
      String string1 = "";
      StringUtils.splitByCharacterTypeCamelCase("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        linkedList0.remove((-3413));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3413, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
